
kwdFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001922c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025770  08019430  08019430  00029430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803eba0  0803eba0  00050ca8  2**0
                  CONTENTS
  4 .ARM          00000008  0803eba0  0803eba0  0004eba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803eba8  0803eba8  00050ca8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803eba8  0803eba8  0004eba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803ebac  0803ebac  0004ebac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ca8  20000000  0803ebb0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002a304  20000ca8  0803f858  00050ca8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2002afac  0803f858  0005afac  2**0
                  ALLOC
 11 .ARM.attributes 00000032  00000000  00000000  00050ca8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a4e  00000000  00000000  00050cda  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000425a  00000000  00000000  00071728  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015a8  00000000  00000000  00075988  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001380  00000000  00000000  00076f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00031e4d  00000000  00000000  000782b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017687  00000000  00000000  000aa0fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00125265  00000000  00000000  000c1784  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000543f  00000000  00000000  001e69e9  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  000001c1  00000000  00000000  001ebe28  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000020  00000000  00000000  001ebfec  2**2
                  CONTENTS, READONLY
 22 .debug_frame  0000af9c  00000000  00000000  001ec00c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000ca8 	.word	0x20000ca8
 800021c:	00000000 	.word	0x00000000
 8000220:	08019414 	.word	0x08019414

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000cac 	.word	0x20000cac
 800023c:	08019414 	.word	0x08019414

08000240 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8000240:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000242:	2b01      	cmp	r3, #1
	IT       LS
 8000244:	bf98      	it	ls
	BXLS     lr
 8000246:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800024c:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800024e:	089b      	lsrs	r3, r3, #2

08000250 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000258:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800025a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800025e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000260:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000262:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000264:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000266:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800026a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800026e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000270:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000274:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000278:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800027c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000280:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000282:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000286:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800028a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800028c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000290:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000294:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000298:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800029c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800029e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002a0:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 80002a2:	d1d5      	bne.n	8000250 <arm_bitreversal_32_0>
	POP      {r4-r9}
 80002a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002a8:	4770      	bx	lr

080002aa <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 80002aa:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80002ac:	2b01      	cmp	r3, #1
	IT       LS
 80002ae:	bf98      	it	ls
	BXLS     lr
 80002b0:	4770      	bxls	lr
	PUSH     {r4-r9}
 80002b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80002b6:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80002b8:	089b      	lsrs	r3, r3, #2

080002ba <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80002ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80002be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80002c2:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80002c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 80002c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 80002cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 80002d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 80002d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 80002d8:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80002dc:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80002e0:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80002e2:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80002e6:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80002ea:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80002ee:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002f2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002f4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002f6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002f8:	d1df      	bne.n	80002ba <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002fe:	4770      	bx	lr

08000300 <CRC_Lock>:
 8000300:	f8df 0904 	ldr.w	r0, [pc, #2308]	; 8000c08 <.text_19>
 8000304:	f240 4249 	movw	r2, #1097	; 0x449
 8000308:	6801      	ldr	r1, [r0, #0]
 800030a:	0849      	lsrs	r1, r1, #1
 800030c:	0049      	lsls	r1, r1, #1
 800030e:	6001      	str	r1, [r0, #0]
 8000310:	f8df 08f8 	ldr.w	r0, [pc, #2296]	; 8000c0c <.text_20>
 8000314:	6801      	ldr	r1, [r0, #0]
 8000316:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800031a:	4291      	cmp	r1, r2
 800031c:	d115      	bne.n	800034a <CRC_Lock+0x4a>
 800031e:	2001      	movs	r0, #1
 8000320:	2200      	movs	r2, #0
 8000322:	2100      	movs	r1, #0
 8000324:	4310      	orrs	r0, r2
 8000326:	4308      	orrs	r0, r1
 8000328:	d01d      	beq.n	8000366 <CRC_Lock+0x66>
 800032a:	f8df 18e4 	ldr.w	r1, [pc, #2276]	; 8000c10 <.text_21>
 800032e:	2201      	movs	r2, #1
 8000330:	608a      	str	r2, [r1, #8]
 8000332:	6888      	ldr	r0, [r1, #8]
 8000334:	2800      	cmp	r0, #0
 8000336:	d1fc      	bne.n	8000332 <CRC_Lock+0x32>
 8000338:	f8df 28d8 	ldr.w	r2, [pc, #2264]	; 8000c14 <.text_22>
 800033c:	f8df 38d8 	ldr.w	r3, [pc, #2264]	; 8000c18 <.text_23>
 8000340:	600a      	str	r2, [r1, #0]
 8000342:	6809      	ldr	r1, [r1, #0]
 8000344:	4299      	cmp	r1, r3
 8000346:	d026      	beq.n	8000396 <CRC_Lock+0x96>
 8000348:	e7fe      	b.n	8000348 <CRC_Lock+0x48>
 800034a:	2000      	movs	r0, #0
 800034c:	f240 4c51 	movw	ip, #1105	; 0x451
 8000350:	4561      	cmp	r1, ip
 8000352:	bf08      	it	eq
 8000354:	2201      	moveq	r2, #1
 8000356:	d0e4      	beq.n	8000322 <CRC_Lock+0x22>
 8000358:	2200      	movs	r2, #0
 800035a:	f240 4352 	movw	r3, #1106	; 0x452
 800035e:	4299      	cmp	r1, r3
 8000360:	d1df      	bne.n	8000322 <CRC_Lock+0x22>
 8000362:	2101      	movs	r1, #1
 8000364:	e7de      	b.n	8000324 <CRC_Lock+0x24>
 8000366:	f8df 08b4 	ldr.w	r0, [pc, #2228]	; 8000c1c <.text_24>
 800036a:	6801      	ldr	r1, [r0, #0]
 800036c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000370:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8000374:	d10f      	bne.n	8000396 <CRC_Lock+0x96>
 8000376:	f8df 18a8 	ldr.w	r1, [pc, #2216]	; 8000c20 <.text_25>
 800037a:	2201      	movs	r2, #1
 800037c:	608a      	str	r2, [r1, #8]
 800037e:	6888      	ldr	r0, [r1, #8]
 8000380:	2800      	cmp	r0, #0
 8000382:	d1fc      	bne.n	800037e <CRC_Lock+0x7e>
 8000384:	f8df 288c 	ldr.w	r2, [pc, #2188]	; 8000c14 <.text_22>
 8000388:	f8df 388c 	ldr.w	r3, [pc, #2188]	; 8000c18 <.text_23>
 800038c:	600a      	str	r2, [r1, #0]
 800038e:	6809      	ldr	r1, [r1, #0]
 8000390:	4299      	cmp	r1, r3
 8000392:	d000      	beq.n	8000396 <CRC_Lock+0x96>
 8000394:	e7fe      	b.n	8000394 <CRC_Lock+0x94>
 8000396:	4770      	bx	lr

08000398 <_ai_platform_get_io_buffers_info>:
 8000398:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800039c:	2500      	movs	r5, #0
 800039e:	46aa      	mov	sl, r5
 80003a0:	b082      	sub	sp, #8
 80003a2:	4607      	mov	r7, r0
 80003a4:	46ab      	mov	fp, r5
 80003a6:	46d0      	mov	r8, sl
 80003a8:	46d1      	mov	r9, sl
 80003aa:	e028      	b.n	80003fe <_ai_platform_get_io_buffers_info+0x66>
 80003ac:	2000      	movs	r0, #0
 80003ae:	e01c      	b.n	80003ea <_ai_platform_get_io_buffers_info+0x52>
 80003b0:	f850 400a 	ldr.w	r4, [r0, sl]
 80003b4:	b364      	cbz	r4, 8000410 <_ai_platform_get_io_buffers_info+0x78>
 80003b6:	68b8      	ldr	r0, [r7, #8]
 80003b8:	6882      	ldr	r2, [r0, #8]
 80003ba:	4442      	add	r2, r8
 80003bc:	6841      	ldr	r1, [r0, #4]
 80003be:	9200      	str	r2, [sp, #0]
 80003c0:	69a3      	ldr	r3, [r4, #24]
 80003c2:	6818      	ldr	r0, [r3, #0]
 80003c4:	eb01 0609 	add.w	r6, r1, r9
 80003c8:	f006 f86a 	bl	80064a0 <ai_array_to_buffer_fmt>
 80003cc:	2101      	movs	r1, #1
 80003ce:	6030      	str	r0, [r6, #0]
 80003d0:	80b1      	strh	r1, [r6, #4]
 80003d2:	68e0      	ldr	r0, [r4, #12]
 80003d4:	68c2      	ldr	r2, [r0, #12]
 80003d6:	80f2      	strh	r2, [r6, #6]
 80003d8:	6881      	ldr	r1, [r0, #8]
 80003da:	8131      	strh	r1, [r6, #8]
 80003dc:	6840      	ldr	r0, [r0, #4]
 80003de:	60f0      	str	r0, [r6, #12]
 80003e0:	69a1      	ldr	r1, [r4, #24]
 80003e2:	688a      	ldr	r2, [r1, #8]
 80003e4:	6132      	str	r2, [r6, #16]
 80003e6:	9800      	ldr	r0, [sp, #0]
 80003e8:	b9e0      	cbnz	r0, 8000424 <_ai_platform_get_io_buffers_info+0x8c>
 80003ea:	6170      	str	r0, [r6, #20]
 80003ec:	1c6d      	adds	r5, r5, #1
 80003ee:	f10b 0b01 	add.w	fp, fp, #1
 80003f2:	f109 0918 	add.w	r9, r9, #24
 80003f6:	f108 0808 	add.w	r8, r8, #8
 80003fa:	f10a 0a04 	add.w	sl, sl, #4
 80003fe:	2f00      	cmp	r7, #0
 8000400:	bf14      	ite	ne
 8000402:	8838      	ldrhne	r0, [r7, #0]
 8000404:	2000      	moveq	r0, #0
 8000406:	4583      	cmp	fp, r0
 8000408:	d202      	bcs.n	8000410 <_ai_platform_get_io_buffers_info+0x78>
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	2800      	cmp	r0, #0
 800040e:	d1cf      	bne.n	80003b0 <_ai_platform_get_io_buffers_info+0x18>
 8000410:	b2a8      	uxth	r0, r5
 8000412:	b118      	cbz	r0, 800041c <_ai_platform_get_io_buffers_info+0x84>
 8000414:	68b9      	ldr	r1, [r7, #8]
 8000416:	9802      	ldr	r0, [sp, #8]
 8000418:	684a      	ldr	r2, [r1, #4]
 800041a:	6002      	str	r2, [r0, #0]
 800041c:	b2a8      	uxth	r0, r5
 800041e:	b003      	add	sp, #12
 8000420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000424:	9900      	ldr	r1, [sp, #0]
 8000426:	2000      	movs	r0, #0
 8000428:	6008      	str	r0, [r1, #0]
 800042a:	9a00      	ldr	r2, [sp, #0]
 800042c:	6820      	ldr	r0, [r4, #0]
 800042e:	2800      	cmp	r0, #0
 8000430:	6050      	str	r0, [r2, #4]
 8000432:	bf1c      	itt	ne
 8000434:	8840      	ldrhne	r0, [r0, #2]
 8000436:	2800      	cmpne	r0, #0
 8000438:	d0b8      	beq.n	80003ac <_ai_platform_get_io_buffers_info+0x14>
 800043a:	9a00      	ldr	r2, [sp, #0]
 800043c:	2101      	movs	r1, #1
 800043e:	6011      	str	r1, [r2, #0]
 8000440:	9800      	ldr	r0, [sp, #0]
 8000442:	e7d2      	b.n	80003ea <_ai_platform_get_io_buffers_info+0x52>

08000444 <_platform_network_state_setup>:
 8000444:	b470      	push	{r4, r5, r6}
 8000446:	68d3      	ldr	r3, [r2, #12]
 8000448:	6955      	ldr	r5, [r2, #20]
 800044a:	68dc      	ldr	r4, [r3, #12]
 800044c:	68eb      	ldr	r3, [r5, #12]
 800044e:	435c      	muls	r4, r3
 8000450:	6084      	str	r4, [r0, #8]
 8000452:	888e      	ldrh	r6, [r1, #4]
 8000454:	4374      	muls	r4, r6
 8000456:	60c4      	str	r4, [r0, #12]
 8000458:	6909      	ldr	r1, [r1, #16]
 800045a:	68c3      	ldr	r3, [r0, #12]
 800045c:	6041      	str	r1, [r0, #4]
 800045e:	4419      	add	r1, r3
 8000460:	6001      	str	r1, [r0, #0]
 8000462:	6992      	ldr	r2, [r2, #24]
 8000464:	6814      	ldr	r4, [r2, #0]
 8000466:	00a5      	lsls	r5, r4, #2
 8000468:	d407      	bmi.n	800047a <_platform_network_state_setup+0x36>
 800046a:	6894      	ldr	r4, [r2, #8]
 800046c:	68d1      	ldr	r1, [r2, #12]
 800046e:	6843      	ldr	r3, [r0, #4]
 8000470:	1a64      	subs	r4, r4, r1
 8000472:	1919      	adds	r1, r3, r4
 8000474:	6091      	str	r1, [r2, #8]
 8000476:	6840      	ldr	r0, [r0, #4]
 8000478:	60d0      	str	r0, [r2, #12]
 800047a:	bc70      	pop	{r4, r5, r6}
 800047c:	4770      	bx	lr

0800047e <ai_platform_runtime_get_revision>:
 800047e:	f8df 0788 	ldr.w	r0, [pc, #1928]	; 8000c08 <.text_19>
 8000482:	f240 4249 	movw	r2, #1097	; 0x449
 8000486:	6801      	ldr	r1, [r0, #0]
 8000488:	0849      	lsrs	r1, r1, #1
 800048a:	0049      	lsls	r1, r1, #1
 800048c:	6001      	str	r1, [r0, #0]
 800048e:	f8df 077c 	ldr.w	r0, [pc, #1916]	; 8000c0c <.text_20>
 8000492:	6801      	ldr	r1, [r0, #0]
 8000494:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000498:	4291      	cmp	r1, r2
 800049a:	d115      	bne.n	80004c8 <ai_platform_runtime_get_revision+0x4a>
 800049c:	2001      	movs	r0, #1
 800049e:	2200      	movs	r2, #0
 80004a0:	2100      	movs	r1, #0
 80004a2:	4310      	orrs	r0, r2
 80004a4:	4308      	orrs	r0, r1
 80004a6:	d01d      	beq.n	80004e4 <ai_platform_runtime_get_revision+0x66>
 80004a8:	f8df 1764 	ldr.w	r1, [pc, #1892]	; 8000c10 <.text_21>
 80004ac:	2201      	movs	r2, #1
 80004ae:	608a      	str	r2, [r1, #8]
 80004b0:	6888      	ldr	r0, [r1, #8]
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d1fc      	bne.n	80004b0 <ai_platform_runtime_get_revision+0x32>
 80004b6:	f8df 275c 	ldr.w	r2, [pc, #1884]	; 8000c14 <.text_22>
 80004ba:	f8df 375c 	ldr.w	r3, [pc, #1884]	; 8000c18 <.text_23>
 80004be:	600a      	str	r2, [r1, #0]
 80004c0:	6809      	ldr	r1, [r1, #0]
 80004c2:	4299      	cmp	r1, r3
 80004c4:	d026      	beq.n	8000514 <ai_platform_runtime_get_revision+0x96>
 80004c6:	e7fe      	b.n	80004c6 <ai_platform_runtime_get_revision+0x48>
 80004c8:	2000      	movs	r0, #0
 80004ca:	f240 4c51 	movw	ip, #1105	; 0x451
 80004ce:	4561      	cmp	r1, ip
 80004d0:	bf08      	it	eq
 80004d2:	2201      	moveq	r2, #1
 80004d4:	d0e4      	beq.n	80004a0 <ai_platform_runtime_get_revision+0x22>
 80004d6:	2200      	movs	r2, #0
 80004d8:	f240 4352 	movw	r3, #1106	; 0x452
 80004dc:	4299      	cmp	r1, r3
 80004de:	d1df      	bne.n	80004a0 <ai_platform_runtime_get_revision+0x22>
 80004e0:	2101      	movs	r1, #1
 80004e2:	e7de      	b.n	80004a2 <ai_platform_runtime_get_revision+0x24>
 80004e4:	f8df 0734 	ldr.w	r0, [pc, #1844]	; 8000c1c <.text_24>
 80004e8:	6801      	ldr	r1, [r0, #0]
 80004ea:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80004ee:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80004f2:	d10f      	bne.n	8000514 <ai_platform_runtime_get_revision+0x96>
 80004f4:	f8df 1728 	ldr.w	r1, [pc, #1832]	; 8000c20 <.text_25>
 80004f8:	2201      	movs	r2, #1
 80004fa:	608a      	str	r2, [r1, #8]
 80004fc:	6888      	ldr	r0, [r1, #8]
 80004fe:	2800      	cmp	r0, #0
 8000500:	d1fc      	bne.n	80004fc <ai_platform_runtime_get_revision+0x7e>
 8000502:	f8df 2710 	ldr.w	r2, [pc, #1808]	; 8000c14 <.text_22>
 8000506:	f8df 3710 	ldr.w	r3, [pc, #1808]	; 8000c18 <.text_23>
 800050a:	600a      	str	r2, [r1, #0]
 800050c:	6809      	ldr	r1, [r1, #0]
 800050e:	4299      	cmp	r1, r3
 8000510:	d000      	beq.n	8000514 <ai_platform_runtime_get_revision+0x96>
 8000512:	e7fe      	b.n	8000512 <ai_platform_runtime_get_revision+0x94>
 8000514:	a0a3      	add	r0, pc, #652	; (adr r0, 80007a4 <.text_11>)
 8000516:	4770      	bx	lr

08000518 <ai_platform_runtime_get_version>:
 8000518:	f8df 06ec 	ldr.w	r0, [pc, #1772]	; 8000c08 <.text_19>
 800051c:	f240 4249 	movw	r2, #1097	; 0x449
 8000520:	6801      	ldr	r1, [r0, #0]
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	0049      	lsls	r1, r1, #1
 8000526:	6001      	str	r1, [r0, #0]
 8000528:	f8df 06e0 	ldr.w	r0, [pc, #1760]	; 8000c0c <.text_20>
 800052c:	6801      	ldr	r1, [r0, #0]
 800052e:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000532:	4291      	cmp	r1, r2
 8000534:	d115      	bne.n	8000562 <ai_platform_runtime_get_version+0x4a>
 8000536:	2001      	movs	r0, #1
 8000538:	2200      	movs	r2, #0
 800053a:	2100      	movs	r1, #0
 800053c:	4310      	orrs	r0, r2
 800053e:	4308      	orrs	r0, r1
 8000540:	d01d      	beq.n	800057e <ai_platform_runtime_get_version+0x66>
 8000542:	f8df 16cc 	ldr.w	r1, [pc, #1740]	; 8000c10 <.text_21>
 8000546:	2201      	movs	r2, #1
 8000548:	608a      	str	r2, [r1, #8]
 800054a:	6888      	ldr	r0, [r1, #8]
 800054c:	2800      	cmp	r0, #0
 800054e:	d1fc      	bne.n	800054a <ai_platform_runtime_get_version+0x32>
 8000550:	f8df 26c0 	ldr.w	r2, [pc, #1728]	; 8000c14 <.text_22>
 8000554:	f8df 36c0 	ldr.w	r3, [pc, #1728]	; 8000c18 <.text_23>
 8000558:	600a      	str	r2, [r1, #0]
 800055a:	6809      	ldr	r1, [r1, #0]
 800055c:	4299      	cmp	r1, r3
 800055e:	d026      	beq.n	80005ae <ai_platform_runtime_get_version+0x96>
 8000560:	e7fe      	b.n	8000560 <ai_platform_runtime_get_version+0x48>
 8000562:	2000      	movs	r0, #0
 8000564:	f240 4c51 	movw	ip, #1105	; 0x451
 8000568:	4561      	cmp	r1, ip
 800056a:	bf08      	it	eq
 800056c:	2201      	moveq	r2, #1
 800056e:	d0e4      	beq.n	800053a <ai_platform_runtime_get_version+0x22>
 8000570:	2200      	movs	r2, #0
 8000572:	f240 4352 	movw	r3, #1106	; 0x452
 8000576:	4299      	cmp	r1, r3
 8000578:	d1df      	bne.n	800053a <ai_platform_runtime_get_version+0x22>
 800057a:	2101      	movs	r1, #1
 800057c:	e7de      	b.n	800053c <ai_platform_runtime_get_version+0x24>
 800057e:	f8df 069c 	ldr.w	r0, [pc, #1692]	; 8000c1c <.text_24>
 8000582:	6801      	ldr	r1, [r0, #0]
 8000584:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000588:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800058c:	d10f      	bne.n	80005ae <ai_platform_runtime_get_version+0x96>
 800058e:	f8df 1690 	ldr.w	r1, [pc, #1680]	; 8000c20 <.text_25>
 8000592:	2201      	movs	r2, #1
 8000594:	608a      	str	r2, [r1, #8]
 8000596:	6888      	ldr	r0, [r1, #8]
 8000598:	2800      	cmp	r0, #0
 800059a:	d1fc      	bne.n	8000596 <ai_platform_runtime_get_version+0x7e>
 800059c:	f8df 2674 	ldr.w	r2, [pc, #1652]	; 8000c14 <.text_22>
 80005a0:	f8df 3674 	ldr.w	r3, [pc, #1652]	; 8000c18 <.text_23>
 80005a4:	600a      	str	r2, [r1, #0]
 80005a6:	6809      	ldr	r1, [r1, #0]
 80005a8:	4299      	cmp	r1, r3
 80005aa:	d000      	beq.n	80005ae <ai_platform_runtime_get_version+0x96>
 80005ac:	e7fe      	b.n	80005ac <ai_platform_runtime_get_version+0x94>
 80005ae:	f60f 20b0 	addw	r0, pc, #2736	; 0xab0
 80005b2:	6800      	ldr	r0, [r0, #0]
 80005b4:	4770      	bx	lr

080005b6 <ai_platform_api_get_version>:
 80005b6:	f8df 0650 	ldr.w	r0, [pc, #1616]	; 8000c08 <.text_19>
 80005ba:	f240 4249 	movw	r2, #1097	; 0x449
 80005be:	6801      	ldr	r1, [r0, #0]
 80005c0:	0849      	lsrs	r1, r1, #1
 80005c2:	0049      	lsls	r1, r1, #1
 80005c4:	6001      	str	r1, [r0, #0]
 80005c6:	f8df 0644 	ldr.w	r0, [pc, #1604]	; 8000c0c <.text_20>
 80005ca:	6801      	ldr	r1, [r0, #0]
 80005cc:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80005d0:	4291      	cmp	r1, r2
 80005d2:	d115      	bne.n	8000600 <ai_platform_api_get_version+0x4a>
 80005d4:	2001      	movs	r0, #1
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	4310      	orrs	r0, r2
 80005dc:	4308      	orrs	r0, r1
 80005de:	d01d      	beq.n	800061c <ai_platform_api_get_version+0x66>
 80005e0:	f8df 162c 	ldr.w	r1, [pc, #1580]	; 8000c10 <.text_21>
 80005e4:	2201      	movs	r2, #1
 80005e6:	608a      	str	r2, [r1, #8]
 80005e8:	6888      	ldr	r0, [r1, #8]
 80005ea:	2800      	cmp	r0, #0
 80005ec:	d1fc      	bne.n	80005e8 <ai_platform_api_get_version+0x32>
 80005ee:	f8df 2624 	ldr.w	r2, [pc, #1572]	; 8000c14 <.text_22>
 80005f2:	f8df 3624 	ldr.w	r3, [pc, #1572]	; 8000c18 <.text_23>
 80005f6:	600a      	str	r2, [r1, #0]
 80005f8:	6809      	ldr	r1, [r1, #0]
 80005fa:	4299      	cmp	r1, r3
 80005fc:	d026      	beq.n	800064c <ai_platform_api_get_version+0x96>
 80005fe:	e7fe      	b.n	80005fe <ai_platform_api_get_version+0x48>
 8000600:	2000      	movs	r0, #0
 8000602:	f240 4c51 	movw	ip, #1105	; 0x451
 8000606:	4561      	cmp	r1, ip
 8000608:	bf08      	it	eq
 800060a:	2201      	moveq	r2, #1
 800060c:	d0e4      	beq.n	80005d8 <ai_platform_api_get_version+0x22>
 800060e:	2200      	movs	r2, #0
 8000610:	f240 4352 	movw	r3, #1106	; 0x452
 8000614:	4299      	cmp	r1, r3
 8000616:	d1df      	bne.n	80005d8 <ai_platform_api_get_version+0x22>
 8000618:	2101      	movs	r1, #1
 800061a:	e7de      	b.n	80005da <ai_platform_api_get_version+0x24>
 800061c:	f8df 05fc 	ldr.w	r0, [pc, #1532]	; 8000c1c <.text_24>
 8000620:	6801      	ldr	r1, [r0, #0]
 8000622:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000626:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800062a:	d10f      	bne.n	800064c <ai_platform_api_get_version+0x96>
 800062c:	f8df 15f0 	ldr.w	r1, [pc, #1520]	; 8000c20 <.text_25>
 8000630:	2201      	movs	r2, #1
 8000632:	608a      	str	r2, [r1, #8]
 8000634:	6888      	ldr	r0, [r1, #8]
 8000636:	2800      	cmp	r0, #0
 8000638:	d1fc      	bne.n	8000634 <ai_platform_api_get_version+0x7e>
 800063a:	f8df 25d8 	ldr.w	r2, [pc, #1496]	; 8000c14 <.text_22>
 800063e:	f8df 35d8 	ldr.w	r3, [pc, #1496]	; 8000c18 <.text_23>
 8000642:	600a      	str	r2, [r1, #0]
 8000644:	6809      	ldr	r1, [r1, #0]
 8000646:	4299      	cmp	r1, r3
 8000648:	d000      	beq.n	800064c <ai_platform_api_get_version+0x96>
 800064a:	e7fe      	b.n	800064a <ai_platform_api_get_version+0x94>
 800064c:	f60f 2014 	addw	r0, pc, #2580	; 0xa14
 8000650:	6800      	ldr	r0, [r0, #0]
 8000652:	4770      	bx	lr

08000654 <ai_platform_interface_api_get_version>:
 8000654:	f8df 05b0 	ldr.w	r0, [pc, #1456]	; 8000c08 <.text_19>
 8000658:	f240 4249 	movw	r2, #1097	; 0x449
 800065c:	6801      	ldr	r1, [r0, #0]
 800065e:	0849      	lsrs	r1, r1, #1
 8000660:	0049      	lsls	r1, r1, #1
 8000662:	6001      	str	r1, [r0, #0]
 8000664:	f8df 05a4 	ldr.w	r0, [pc, #1444]	; 8000c0c <.text_20>
 8000668:	6801      	ldr	r1, [r0, #0]
 800066a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800066e:	4291      	cmp	r1, r2
 8000670:	d115      	bne.n	800069e <ai_platform_interface_api_get_version+0x4a>
 8000672:	2001      	movs	r0, #1
 8000674:	2200      	movs	r2, #0
 8000676:	2100      	movs	r1, #0
 8000678:	4310      	orrs	r0, r2
 800067a:	4308      	orrs	r0, r1
 800067c:	d01d      	beq.n	80006ba <ai_platform_interface_api_get_version+0x66>
 800067e:	f8df 1590 	ldr.w	r1, [pc, #1424]	; 8000c10 <.text_21>
 8000682:	2201      	movs	r2, #1
 8000684:	608a      	str	r2, [r1, #8]
 8000686:	6888      	ldr	r0, [r1, #8]
 8000688:	2800      	cmp	r0, #0
 800068a:	d1fc      	bne.n	8000686 <ai_platform_interface_api_get_version+0x32>
 800068c:	f8df 2584 	ldr.w	r2, [pc, #1412]	; 8000c14 <.text_22>
 8000690:	f8df 3584 	ldr.w	r3, [pc, #1412]	; 8000c18 <.text_23>
 8000694:	600a      	str	r2, [r1, #0]
 8000696:	6809      	ldr	r1, [r1, #0]
 8000698:	4299      	cmp	r1, r3
 800069a:	d026      	beq.n	80006ea <ai_platform_interface_api_get_version+0x96>
 800069c:	e7fe      	b.n	800069c <ai_platform_interface_api_get_version+0x48>
 800069e:	2000      	movs	r0, #0
 80006a0:	f240 4c51 	movw	ip, #1105	; 0x451
 80006a4:	4561      	cmp	r1, ip
 80006a6:	bf08      	it	eq
 80006a8:	2201      	moveq	r2, #1
 80006aa:	d0e4      	beq.n	8000676 <ai_platform_interface_api_get_version+0x22>
 80006ac:	2200      	movs	r2, #0
 80006ae:	f240 4352 	movw	r3, #1106	; 0x452
 80006b2:	4299      	cmp	r1, r3
 80006b4:	d1df      	bne.n	8000676 <ai_platform_interface_api_get_version+0x22>
 80006b6:	2101      	movs	r1, #1
 80006b8:	e7de      	b.n	8000678 <ai_platform_interface_api_get_version+0x24>
 80006ba:	f8df 0560 	ldr.w	r0, [pc, #1376]	; 8000c1c <.text_24>
 80006be:	6801      	ldr	r1, [r0, #0]
 80006c0:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80006c4:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80006c8:	d10f      	bne.n	80006ea <ai_platform_interface_api_get_version+0x96>
 80006ca:	f8df 1554 	ldr.w	r1, [pc, #1364]	; 8000c20 <.text_25>
 80006ce:	2201      	movs	r2, #1
 80006d0:	608a      	str	r2, [r1, #8]
 80006d2:	6888      	ldr	r0, [r1, #8]
 80006d4:	2800      	cmp	r0, #0
 80006d6:	d1fc      	bne.n	80006d2 <ai_platform_interface_api_get_version+0x7e>
 80006d8:	f8df 2538 	ldr.w	r2, [pc, #1336]	; 8000c14 <.text_22>
 80006dc:	f8df 3538 	ldr.w	r3, [pc, #1336]	; 8000c18 <.text_23>
 80006e0:	600a      	str	r2, [r1, #0]
 80006e2:	6809      	ldr	r1, [r1, #0]
 80006e4:	4299      	cmp	r1, r3
 80006e6:	d000      	beq.n	80006ea <ai_platform_interface_api_get_version+0x96>
 80006e8:	e7fe      	b.n	80006e8 <ai_platform_interface_api_get_version+0x94>
 80006ea:	f60f 107c 	addw	r0, pc, #2428	; 0x97c
 80006ee:	6800      	ldr	r0, [r0, #0]
 80006f0:	4770      	bx	lr

080006f2 <ai_platform_context_acquire>:
 80006f2:	b430      	push	{r4, r5}
 80006f4:	b120      	cbz	r0, 8000700 <ai_platform_context_acquire+0xe>
 80006f6:	6801      	ldr	r1, [r0, #0]
 80006f8:	f8df 2940 	ldr.w	r2, [pc, #2368]	; 800103c <.text_27>
 80006fc:	4291      	cmp	r1, r2
 80006fe:	d000      	beq.n	8000702 <ai_platform_context_acquire+0x10>
 8000700:	2000      	movs	r0, #0
 8000702:	f8df 1504 	ldr.w	r1, [pc, #1284]	; 8000c08 <.text_19>
 8000706:	f240 4449 	movw	r4, #1097	; 0x449
 800070a:	680b      	ldr	r3, [r1, #0]
 800070c:	085b      	lsrs	r3, r3, #1
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	600b      	str	r3, [r1, #0]
 8000712:	f8df 14f8 	ldr.w	r1, [pc, #1272]	; 8000c0c <.text_20>
 8000716:	680a      	ldr	r2, [r1, #0]
 8000718:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800071c:	42a2      	cmp	r2, r4
 800071e:	d115      	bne.n	800074c <ai_platform_context_acquire+0x5a>
 8000720:	2101      	movs	r1, #1
 8000722:	2300      	movs	r3, #0
 8000724:	2200      	movs	r2, #0
 8000726:	4319      	orrs	r1, r3
 8000728:	4311      	orrs	r1, r2
 800072a:	d01d      	beq.n	8000768 <ai_platform_context_acquire+0x76>
 800072c:	f8df 24e0 	ldr.w	r2, [pc, #1248]	; 8000c10 <.text_21>
 8000730:	2301      	movs	r3, #1
 8000732:	6093      	str	r3, [r2, #8]
 8000734:	6891      	ldr	r1, [r2, #8]
 8000736:	2900      	cmp	r1, #0
 8000738:	d1fc      	bne.n	8000734 <ai_platform_context_acquire+0x42>
 800073a:	f8df 34d8 	ldr.w	r3, [pc, #1240]	; 8000c14 <.text_22>
 800073e:	f8df 44d8 	ldr.w	r4, [pc, #1240]	; 8000c18 <.text_23>
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	6812      	ldr	r2, [r2, #0]
 8000746:	42a2      	cmp	r2, r4
 8000748:	d026      	beq.n	8000798 <ai_platform_context_acquire+0xa6>
 800074a:	e7fe      	b.n	800074a <ai_platform_context_acquire+0x58>
 800074c:	2100      	movs	r1, #0
 800074e:	f240 4551 	movw	r5, #1105	; 0x451
 8000752:	42aa      	cmp	r2, r5
 8000754:	bf08      	it	eq
 8000756:	2301      	moveq	r3, #1
 8000758:	d0e4      	beq.n	8000724 <ai_platform_context_acquire+0x32>
 800075a:	2300      	movs	r3, #0
 800075c:	f240 4452 	movw	r4, #1106	; 0x452
 8000760:	42a2      	cmp	r2, r4
 8000762:	d1df      	bne.n	8000724 <ai_platform_context_acquire+0x32>
 8000764:	2201      	movs	r2, #1
 8000766:	e7de      	b.n	8000726 <ai_platform_context_acquire+0x34>
 8000768:	f8df 14b0 	ldr.w	r1, [pc, #1200]	; 8000c1c <.text_24>
 800076c:	680a      	ldr	r2, [r1, #0]
 800076e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000772:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8000776:	d10f      	bne.n	8000798 <ai_platform_context_acquire+0xa6>
 8000778:	f8df 24a4 	ldr.w	r2, [pc, #1188]	; 8000c20 <.text_25>
 800077c:	2301      	movs	r3, #1
 800077e:	6093      	str	r3, [r2, #8]
 8000780:	6891      	ldr	r1, [r2, #8]
 8000782:	2900      	cmp	r1, #0
 8000784:	d1fc      	bne.n	8000780 <ai_platform_context_acquire+0x8e>
 8000786:	f8df 348c 	ldr.w	r3, [pc, #1164]	; 8000c14 <.text_22>
 800078a:	f8df 448c 	ldr.w	r4, [pc, #1164]	; 8000c18 <.text_23>
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	6812      	ldr	r2, [r2, #0]
 8000792:	42a2      	cmp	r2, r4
 8000794:	d000      	beq.n	8000798 <ai_platform_context_acquire+0xa6>
 8000796:	e7fe      	b.n	8000796 <ai_platform_context_acquire+0xa4>
 8000798:	bc30      	pop	{r4, r5}
 800079a:	4770      	bx	lr

0800079c <ai_platform_context_release>:
 800079c:	f8df 189c 	ldr.w	r1, [pc, #2204]	; 800103c <.text_27>
 80007a0:	6001      	str	r1, [r0, #0]
 80007a2:	4770      	bx	lr

080007a4 <.text_11>:
 80007a4:	00000000 	.word	0x00000000

080007a8 <ai_platform_network_get_error>:
 80007a8:	b430      	push	{r4, r5}
 80007aa:	b120      	cbz	r0, 80007b6 <ai_platform_network_get_error+0xe>
 80007ac:	6801      	ldr	r1, [r0, #0]
 80007ae:	f8df 288c 	ldr.w	r2, [pc, #2188]	; 800103c <.text_27>
 80007b2:	4291      	cmp	r1, r2
 80007b4:	d000      	beq.n	80007b8 <ai_platform_network_get_error+0x10>
 80007b6:	2000      	movs	r0, #0
 80007b8:	f8df 144c 	ldr.w	r1, [pc, #1100]	; 8000c08 <.text_19>
 80007bc:	f240 4449 	movw	r4, #1097	; 0x449
 80007c0:	680b      	ldr	r3, [r1, #0]
 80007c2:	085b      	lsrs	r3, r3, #1
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	600b      	str	r3, [r1, #0]
 80007c8:	f8df 1440 	ldr.w	r1, [pc, #1088]	; 8000c0c <.text_20>
 80007cc:	680a      	ldr	r2, [r1, #0]
 80007ce:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80007d2:	42a2      	cmp	r2, r4
 80007d4:	d115      	bne.n	8000802 <ai_platform_network_get_error+0x5a>
 80007d6:	2101      	movs	r1, #1
 80007d8:	2300      	movs	r3, #0
 80007da:	2200      	movs	r2, #0
 80007dc:	4319      	orrs	r1, r3
 80007de:	4311      	orrs	r1, r2
 80007e0:	d01d      	beq.n	800081e <ai_platform_network_get_error+0x76>
 80007e2:	f8df 242c 	ldr.w	r2, [pc, #1068]	; 8000c10 <.text_21>
 80007e6:	2301      	movs	r3, #1
 80007e8:	6093      	str	r3, [r2, #8]
 80007ea:	6891      	ldr	r1, [r2, #8]
 80007ec:	2900      	cmp	r1, #0
 80007ee:	d1fc      	bne.n	80007ea <ai_platform_network_get_error+0x42>
 80007f0:	f8df 3420 	ldr.w	r3, [pc, #1056]	; 8000c14 <.text_22>
 80007f4:	f8df 4420 	ldr.w	r4, [pc, #1056]	; 8000c18 <.text_23>
 80007f8:	6013      	str	r3, [r2, #0]
 80007fa:	6812      	ldr	r2, [r2, #0]
 80007fc:	42a2      	cmp	r2, r4
 80007fe:	d026      	beq.n	800084e <ai_platform_network_get_error+0xa6>
 8000800:	e7fe      	b.n	8000800 <ai_platform_network_get_error+0x58>
 8000802:	2100      	movs	r1, #0
 8000804:	f240 4551 	movw	r5, #1105	; 0x451
 8000808:	42aa      	cmp	r2, r5
 800080a:	bf08      	it	eq
 800080c:	2301      	moveq	r3, #1
 800080e:	d0e4      	beq.n	80007da <ai_platform_network_get_error+0x32>
 8000810:	2300      	movs	r3, #0
 8000812:	f240 4452 	movw	r4, #1106	; 0x452
 8000816:	42a2      	cmp	r2, r4
 8000818:	d1df      	bne.n	80007da <ai_platform_network_get_error+0x32>
 800081a:	2201      	movs	r2, #1
 800081c:	e7de      	b.n	80007dc <ai_platform_network_get_error+0x34>
 800081e:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8000c1c <.text_24>
 8000822:	680a      	ldr	r2, [r1, #0]
 8000824:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000828:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800082c:	d10f      	bne.n	800084e <ai_platform_network_get_error+0xa6>
 800082e:	f8df 23f0 	ldr.w	r2, [pc, #1008]	; 8000c20 <.text_25>
 8000832:	2301      	movs	r3, #1
 8000834:	6093      	str	r3, [r2, #8]
 8000836:	6891      	ldr	r1, [r2, #8]
 8000838:	2900      	cmp	r1, #0
 800083a:	d1fc      	bne.n	8000836 <ai_platform_network_get_error+0x8e>
 800083c:	f8df 33d4 	ldr.w	r3, [pc, #980]	; 8000c14 <.text_22>
 8000840:	f8df 43d4 	ldr.w	r4, [pc, #980]	; 8000c18 <.text_23>
 8000844:	6013      	str	r3, [r2, #0]
 8000846:	6812      	ldr	r2, [r2, #0]
 8000848:	42a2      	cmp	r2, r4
 800084a:	d000      	beq.n	800084e <ai_platform_network_get_error+0xa6>
 800084c:	e7fe      	b.n	800084c <ai_platform_network_get_error+0xa4>
 800084e:	b920      	cbnz	r0, 800085a <ai_platform_network_get_error+0xb2>
 8000850:	f60f 0028 	addw	r0, pc, #2088	; 0x828
 8000854:	6800      	ldr	r0, [r0, #0]
 8000856:	bc30      	pop	{r4, r5}
 8000858:	4770      	bx	lr
 800085a:	3010      	adds	r0, #16
 800085c:	bc30      	pop	{r4, r5}
 800085e:	f000 bc15 	b.w	800108c <core_get_error>

08000862 <ai_platform_network_set_error>:
 8000862:	2800      	cmp	r0, #0
 8000864:	bf1c      	itt	ne
 8000866:	3010      	addne	r0, #16
 8000868:	f000 bc15 	bne.w	8001096 <core_set_error>
 800086c:	4770      	bx	lr

0800086e <ai_platform_api_get_network_report>:
 800086e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000872:	0004      	movs	r4, r0
 8000874:	b081      	sub	sp, #4
 8000876:	460d      	mov	r5, r1
 8000878:	d004      	beq.n	8000884 <ai_platform_api_get_network_report+0x16>
 800087a:	6820      	ldr	r0, [r4, #0]
 800087c:	f8df 17bc 	ldr.w	r1, [pc, #1980]	; 800103c <.text_27>
 8000880:	4288      	cmp	r0, r1
 8000882:	d000      	beq.n	8000886 <ai_platform_api_get_network_report+0x18>
 8000884:	2400      	movs	r4, #0
 8000886:	f8df 0380 	ldr.w	r0, [pc, #896]	; 8000c08 <.text_19>
 800088a:	f240 4349 	movw	r3, #1097	; 0x449
 800088e:	6802      	ldr	r2, [r0, #0]
 8000890:	0852      	lsrs	r2, r2, #1
 8000892:	0052      	lsls	r2, r2, #1
 8000894:	6002      	str	r2, [r0, #0]
 8000896:	f8df 0374 	ldr.w	r0, [pc, #884]	; 8000c0c <.text_20>
 800089a:	6801      	ldr	r1, [r0, #0]
 800089c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80008a0:	4299      	cmp	r1, r3
 80008a2:	d115      	bne.n	80008d0 <ai_platform_api_get_network_report+0x62>
 80008a4:	2001      	movs	r0, #1
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	4310      	orrs	r0, r2
 80008ac:	4308      	orrs	r0, r1
 80008ae:	d01d      	beq.n	80008ec <ai_platform_api_get_network_report+0x7e>
 80008b0:	f8df 135c 	ldr.w	r1, [pc, #860]	; 8000c10 <.text_21>
 80008b4:	2201      	movs	r2, #1
 80008b6:	608a      	str	r2, [r1, #8]
 80008b8:	6888      	ldr	r0, [r1, #8]
 80008ba:	2800      	cmp	r0, #0
 80008bc:	d1fc      	bne.n	80008b8 <ai_platform_api_get_network_report+0x4a>
 80008be:	f8df 2354 	ldr.w	r2, [pc, #852]	; 8000c14 <.text_22>
 80008c2:	f8df 3354 	ldr.w	r3, [pc, #852]	; 8000c18 <.text_23>
 80008c6:	600a      	str	r2, [r1, #0]
 80008c8:	6809      	ldr	r1, [r1, #0]
 80008ca:	4299      	cmp	r1, r3
 80008cc:	d026      	beq.n	800091c <ai_platform_api_get_network_report+0xae>
 80008ce:	e7fe      	b.n	80008ce <ai_platform_api_get_network_report+0x60>
 80008d0:	2000      	movs	r0, #0
 80008d2:	f240 4651 	movw	r6, #1105	; 0x451
 80008d6:	42b1      	cmp	r1, r6
 80008d8:	bf08      	it	eq
 80008da:	2201      	moveq	r2, #1
 80008dc:	d0e4      	beq.n	80008a8 <ai_platform_api_get_network_report+0x3a>
 80008de:	2200      	movs	r2, #0
 80008e0:	f240 4352 	movw	r3, #1106	; 0x452
 80008e4:	4299      	cmp	r1, r3
 80008e6:	d1df      	bne.n	80008a8 <ai_platform_api_get_network_report+0x3a>
 80008e8:	2101      	movs	r1, #1
 80008ea:	e7de      	b.n	80008aa <ai_platform_api_get_network_report+0x3c>
 80008ec:	f8df 032c 	ldr.w	r0, [pc, #812]	; 8000c1c <.text_24>
 80008f0:	6801      	ldr	r1, [r0, #0]
 80008f2:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80008f6:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80008fa:	d10f      	bne.n	800091c <ai_platform_api_get_network_report+0xae>
 80008fc:	f8df 1320 	ldr.w	r1, [pc, #800]	; 8000c20 <.text_25>
 8000900:	2201      	movs	r2, #1
 8000902:	608a      	str	r2, [r1, #8]
 8000904:	6888      	ldr	r0, [r1, #8]
 8000906:	2800      	cmp	r0, #0
 8000908:	d1fc      	bne.n	8000904 <ai_platform_api_get_network_report+0x96>
 800090a:	f8df 2308 	ldr.w	r2, [pc, #776]	; 8000c14 <.text_22>
 800090e:	f8df 3308 	ldr.w	r3, [pc, #776]	; 8000c18 <.text_23>
 8000912:	600a      	str	r2, [r1, #0]
 8000914:	6809      	ldr	r1, [r1, #0]
 8000916:	4299      	cmp	r1, r3
 8000918:	d000      	beq.n	800091c <ai_platform_api_get_network_report+0xae>
 800091a:	e7fe      	b.n	800091a <ai_platform_api_get_network_report+0xac>
 800091c:	2c00      	cmp	r4, #0
 800091e:	bf18      	it	ne
 8000920:	2d00      	cmpne	r5, #0
 8000922:	d032      	beq.n	800098a <ai_platform_api_get_network_report+0x11c>
 8000924:	2000      	movs	r0, #0
 8000926:	66e8      	str	r0, [r5, #108]	; 0x6c
 8000928:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800092a:	b152      	cbz	r2, 8000942 <ai_platform_api_get_network_report+0xd4>
 800092c:	e000      	b.n	8000930 <ai_platform_api_get_network_report+0xc2>
 800092e:	4602      	mov	r2, r0
 8000930:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8000932:	1c49      	adds	r1, r1, #1
 8000934:	66e9      	str	r1, [r5, #108]	; 0x6c
 8000936:	68d0      	ldr	r0, [r2, #12]
 8000938:	4282      	cmp	r2, r0
 800093a:	bf18      	it	ne
 800093c:	2800      	cmpne	r0, #0
 800093e:	d1f6      	bne.n	800092e <ai_platform_api_get_network_report+0xc0>
 8000940:	b911      	cbnz	r1, 8000948 <ai_platform_api_get_network_report+0xda>
 8000942:	2218      	movs	r2, #24
 8000944:	2111      	movs	r1, #17
 8000946:	e01c      	b.n	8000982 <ai_platform_api_get_network_report+0x114>
 8000948:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 800094c:	b100      	cbz	r0, 8000950 <ai_platform_api_get_network_report+0xe2>
 800094e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000950:	f105 0134 	add.w	r1, r5, #52	; 0x34
 8000954:	f7ff fd20 	bl	8000398 <_ai_platform_get_io_buffers_info>
 8000958:	8628      	strh	r0, [r5, #48]	; 0x30
 800095a:	b910      	cbnz	r0, 8000962 <ai_platform_api_get_network_report+0xf4>
 800095c:	2218      	movs	r2, #24
 800095e:	2112      	movs	r1, #18
 8000960:	e00f      	b.n	8000982 <ai_platform_api_get_network_report+0x114>
 8000962:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 8000966:	2802      	cmp	r0, #2
 8000968:	bfa6      	itte	ge
 800096a:	6ce1      	ldrge	r1, [r4, #76]	; 0x4c
 800096c:	f101 000c 	addge.w	r0, r1, #12
 8000970:	2000      	movlt	r0, #0
 8000972:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8000976:	f7ff fd0f 	bl	8000398 <_ai_platform_get_io_buffers_info>
 800097a:	8668      	strh	r0, [r5, #50]	; 0x32
 800097c:	b948      	cbnz	r0, 8000992 <ai_platform_api_get_network_report+0x124>
 800097e:	2218      	movs	r2, #24
 8000980:	2113      	movs	r1, #19
 8000982:	f104 0010 	add.w	r0, r4, #16
 8000986:	f000 fb86 	bl	8001096 <core_set_error>
 800098a:	2000      	movs	r0, #0
 800098c:	b001      	add	sp, #4
 800098e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000992:	6860      	ldr	r0, [r4, #4]
 8000994:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8000998:	6728      	str	r0, [r5, #112]	; 0x70
 800099a:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 800099e:	e892 51c8 	ldmia.w	r2, {r3, r6, r7, r8, ip, lr}
 80009a2:	e881 51c8 	stmia.w	r1, {r3, r6, r7, r8, ip, lr}
 80009a6:	3418      	adds	r4, #24
 80009a8:	f105 0954 	add.w	r9, r5, #84	; 0x54
 80009ac:	e894 0c0f 	ldmia.w	r4, {r0, r1, r2, r3, sl, fp}
 80009b0:	e889 0c0f 	stmia.w	r9, {r0, r1, r2, r3, sl, fp}
 80009b4:	f7ff fca4 	bl	8000300 <CRC_Lock>
 80009b8:	a092      	add	r0, pc, #584	; (adr r0, 8000c04 <.text_18>)
 80009ba:	6128      	str	r0, [r5, #16]
 80009bc:	f7ff fca0 	bl	8000300 <CRC_Lock>
 80009c0:	f20f 619c 	addw	r1, pc, #1692	; 0x69c
 80009c4:	680a      	ldr	r2, [r1, #0]
 80009c6:	616a      	str	r2, [r5, #20]
 80009c8:	f7ff fc9a 	bl	8000300 <CRC_Lock>
 80009cc:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 80009d0:	6801      	ldr	r1, [r0, #0]
 80009d2:	6269      	str	r1, [r5, #36]	; 0x24
 80009d4:	f7ff fc94 	bl	8000300 <CRC_Lock>
 80009d8:	f20f 628c 	addw	r2, pc, #1676	; 0x68c
 80009dc:	6810      	ldr	r0, [r2, #0]
 80009de:	62a8      	str	r0, [r5, #40]	; 0x28
 80009e0:	2001      	movs	r0, #1
 80009e2:	b001      	add	sp, #4
 80009e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080009e8 <ai_platform_network_create>:
 80009e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ea:	b081      	sub	sp, #4
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	9d06      	ldr	r5, [sp, #24]
 80009f0:	4604      	mov	r4, r0
 80009f2:	9807      	ldr	r0, [sp, #28]
 80009f4:	4616      	mov	r6, r2
 80009f6:	042d      	lsls	r5, r5, #16
 80009f8:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 80009fc:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000a00:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 8000a04:	6807      	ldr	r7, [r0, #0]
 8000a06:	f7ff fc7b 	bl	8000300 <CRC_Lock>
 8000a0a:	b924      	cbnz	r4, 8000a16 <ai_platform_network_create+0x2e>
 8000a0c:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 8000a10:	b001      	add	sp, #4
 8000a12:	6800      	ldr	r0, [r0, #0]
 8000a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a16:	f8df 1624 	ldr.w	r1, [pc, #1572]	; 800103c <.text_27>
 8000a1a:	6031      	str	r1, [r6, #0]
 8000a1c:	6026      	str	r6, [r4, #0]
 8000a1e:	f000 fb33 	bl	8001088 <core_init>
 8000a22:	b910      	cbnz	r0, 8000a2a <ai_platform_network_create+0x42>
 8000a24:	f20f 6044 	addw	r0, pc, #1604	; 0x644
 8000a28:	e00e      	b.n	8000a48 <ai_platform_network_create+0x60>
 8000a2a:	f8df 1614 	ldr.w	r1, [pc, #1556]	; 8001040 <.text_28>
 8000a2e:	428d      	cmp	r5, r1
 8000a30:	d303      	bcc.n	8000a3a <ai_platform_network_create+0x52>
 8000a32:	f20f 623c 	addw	r2, pc, #1596	; 0x63c
 8000a36:	6817      	ldr	r7, [r2, #0]
 8000a38:	e007      	b.n	8000a4a <ai_platform_network_create+0x62>
 8000a3a:	f20f 6038 	addw	r0, pc, #1592	; 0x638
 8000a3e:	f000 fb3f 	bl	80010c0 <ai_check_custom_types>
 8000a42:	b920      	cbnz	r0, 8000a4e <ai_platform_network_create+0x66>
 8000a44:	f20f 6030 	addw	r0, pc, #1584	; 0x630
 8000a48:	6807      	ldr	r7, [r0, #0]
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	6021      	str	r1, [r4, #0]
 8000a4e:	4638      	mov	r0, r7
 8000a50:	b001      	add	sp, #4
 8000a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a54 <ai_platform_network_destroy>:
 8000a54:	b470      	push	{r4, r5, r6}
 8000a56:	b130      	cbz	r0, 8000a66 <ai_platform_network_destroy+0x12>
 8000a58:	6801      	ldr	r1, [r0, #0]
 8000a5a:	f8df 25e0 	ldr.w	r2, [pc, #1504]	; 800103c <.text_27>
 8000a5e:	4291      	cmp	r1, r2
 8000a60:	bf08      	it	eq
 8000a62:	4602      	moveq	r2, r0
 8000a64:	d000      	beq.n	8000a68 <ai_platform_network_destroy+0x14>
 8000a66:	2200      	movs	r2, #0
 8000a68:	4967      	ldr	r1, [pc, #412]	; (8000c08 <.text_19>)
 8000a6a:	f240 4449 	movw	r4, #1097	; 0x449
 8000a6e:	680b      	ldr	r3, [r1, #0]
 8000a70:	085b      	lsrs	r3, r3, #1
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	600b      	str	r3, [r1, #0]
 8000a76:	4965      	ldr	r1, [pc, #404]	; (8000c0c <.text_20>)
 8000a78:	680b      	ldr	r3, [r1, #0]
 8000a7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a7e:	42a3      	cmp	r3, r4
 8000a80:	d112      	bne.n	8000aa8 <ai_platform_network_destroy+0x54>
 8000a82:	2101      	movs	r1, #1
 8000a84:	2400      	movs	r4, #0
 8000a86:	2300      	movs	r3, #0
 8000a88:	4321      	orrs	r1, r4
 8000a8a:	4319      	orrs	r1, r3
 8000a8c:	d01a      	beq.n	8000ac4 <ai_platform_network_destroy+0x70>
 8000a8e:	4b60      	ldr	r3, [pc, #384]	; (8000c10 <.text_21>)
 8000a90:	2401      	movs	r4, #1
 8000a92:	609c      	str	r4, [r3, #8]
 8000a94:	6899      	ldr	r1, [r3, #8]
 8000a96:	2900      	cmp	r1, #0
 8000a98:	d1fc      	bne.n	8000a94 <ai_platform_network_destroy+0x40>
 8000a9a:	4c5e      	ldr	r4, [pc, #376]	; (8000c14 <.text_22>)
 8000a9c:	4d5e      	ldr	r5, [pc, #376]	; (8000c18 <.text_23>)
 8000a9e:	601c      	str	r4, [r3, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	42ab      	cmp	r3, r5
 8000aa4:	d022      	beq.n	8000aec <ai_platform_network_destroy+0x98>
 8000aa6:	e7fe      	b.n	8000aa6 <ai_platform_network_destroy+0x52>
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	f240 4651 	movw	r6, #1105	; 0x451
 8000aae:	42b3      	cmp	r3, r6
 8000ab0:	bf08      	it	eq
 8000ab2:	2401      	moveq	r4, #1
 8000ab4:	d0e7      	beq.n	8000a86 <ai_platform_network_destroy+0x32>
 8000ab6:	2400      	movs	r4, #0
 8000ab8:	f240 4552 	movw	r5, #1106	; 0x452
 8000abc:	42ab      	cmp	r3, r5
 8000abe:	d1e2      	bne.n	8000a86 <ai_platform_network_destroy+0x32>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e7e1      	b.n	8000a88 <ai_platform_network_destroy+0x34>
 8000ac4:	4955      	ldr	r1, [pc, #340]	; (8000c1c <.text_24>)
 8000ac6:	680b      	ldr	r3, [r1, #0]
 8000ac8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000acc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000ad0:	d10c      	bne.n	8000aec <ai_platform_network_destroy+0x98>
 8000ad2:	4b53      	ldr	r3, [pc, #332]	; (8000c20 <.text_25>)
 8000ad4:	2401      	movs	r4, #1
 8000ad6:	609c      	str	r4, [r3, #8]
 8000ad8:	6899      	ldr	r1, [r3, #8]
 8000ada:	2900      	cmp	r1, #0
 8000adc:	d1fc      	bne.n	8000ad8 <ai_platform_network_destroy+0x84>
 8000ade:	4c4d      	ldr	r4, [pc, #308]	; (8000c14 <.text_22>)
 8000ae0:	4d4d      	ldr	r5, [pc, #308]	; (8000c18 <.text_23>)
 8000ae2:	601c      	str	r4, [r3, #0]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	42ab      	cmp	r3, r5
 8000ae8:	d000      	beq.n	8000aec <ai_platform_network_destroy+0x98>
 8000aea:	e7fe      	b.n	8000aea <ai_platform_network_destroy+0x96>
 8000aec:	b102      	cbz	r2, 8000af0 <ai_platform_network_destroy+0x9c>
 8000aee:	2000      	movs	r0, #0
 8000af0:	bc70      	pop	{r4, r5, r6}
 8000af2:	4770      	bx	lr

08000af4 <ai_platform_network_init>:
 8000af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000af8:	b081      	sub	sp, #4
 8000afa:	460a      	mov	r2, r1
 8000afc:	b120      	cbz	r0, 8000b08 <ai_platform_network_init+0x14>
 8000afe:	6801      	ldr	r1, [r0, #0]
 8000b00:	f8df 3538 	ldr.w	r3, [pc, #1336]	; 800103c <.text_27>
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d000      	beq.n	8000b0a <ai_platform_network_init+0x16>
 8000b08:	2000      	movs	r0, #0
 8000b0a:	493f      	ldr	r1, [pc, #252]	; (8000c08 <.text_19>)
 8000b0c:	f240 4549 	movw	r5, #1097	; 0x449
 8000b10:	680c      	ldr	r4, [r1, #0]
 8000b12:	0864      	lsrs	r4, r4, #1
 8000b14:	0064      	lsls	r4, r4, #1
 8000b16:	600c      	str	r4, [r1, #0]
 8000b18:	493c      	ldr	r1, [pc, #240]	; (8000c0c <.text_20>)
 8000b1a:	680b      	ldr	r3, [r1, #0]
 8000b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b20:	42ab      	cmp	r3, r5
 8000b22:	d112      	bne.n	8000b4a <ai_platform_network_init+0x56>
 8000b24:	2101      	movs	r1, #1
 8000b26:	2400      	movs	r4, #0
 8000b28:	2300      	movs	r3, #0
 8000b2a:	4321      	orrs	r1, r4
 8000b2c:	4319      	orrs	r1, r3
 8000b2e:	d01a      	beq.n	8000b66 <ai_platform_network_init+0x72>
 8000b30:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <.text_21>)
 8000b32:	2401      	movs	r4, #1
 8000b34:	609c      	str	r4, [r3, #8]
 8000b36:	6899      	ldr	r1, [r3, #8]
 8000b38:	2900      	cmp	r1, #0
 8000b3a:	d1fc      	bne.n	8000b36 <ai_platform_network_init+0x42>
 8000b3c:	4c35      	ldr	r4, [pc, #212]	; (8000c14 <.text_22>)
 8000b3e:	4d36      	ldr	r5, [pc, #216]	; (8000c18 <.text_23>)
 8000b40:	601c      	str	r4, [r3, #0]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	42ab      	cmp	r3, r5
 8000b46:	d022      	beq.n	8000b8e <ai_platform_network_init+0x9a>
 8000b48:	e7fe      	b.n	8000b48 <ai_platform_network_init+0x54>
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f240 4651 	movw	r6, #1105	; 0x451
 8000b50:	42b3      	cmp	r3, r6
 8000b52:	bf08      	it	eq
 8000b54:	2401      	moveq	r4, #1
 8000b56:	d0e7      	beq.n	8000b28 <ai_platform_network_init+0x34>
 8000b58:	2400      	movs	r4, #0
 8000b5a:	f240 4552 	movw	r5, #1106	; 0x452
 8000b5e:	42ab      	cmp	r3, r5
 8000b60:	d1e2      	bne.n	8000b28 <ai_platform_network_init+0x34>
 8000b62:	2301      	movs	r3, #1
 8000b64:	e7e1      	b.n	8000b2a <ai_platform_network_init+0x36>
 8000b66:	492d      	ldr	r1, [pc, #180]	; (8000c1c <.text_24>)
 8000b68:	680b      	ldr	r3, [r1, #0]
 8000b6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b6e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000b72:	d10c      	bne.n	8000b8e <ai_platform_network_init+0x9a>
 8000b74:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <.text_25>)
 8000b76:	2401      	movs	r4, #1
 8000b78:	609c      	str	r4, [r3, #8]
 8000b7a:	6899      	ldr	r1, [r3, #8]
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d1fc      	bne.n	8000b7a <ai_platform_network_init+0x86>
 8000b80:	4c24      	ldr	r4, [pc, #144]	; (8000c14 <.text_22>)
 8000b82:	4d25      	ldr	r5, [pc, #148]	; (8000c18 <.text_23>)
 8000b84:	601c      	str	r4, [r3, #0]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	42ab      	cmp	r3, r5
 8000b8a:	d000      	beq.n	8000b8e <ai_platform_network_init+0x9a>
 8000b8c:	e7fe      	b.n	8000b8c <ai_platform_network_init+0x98>
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	d035      	beq.n	8000bfe <ai_platform_network_init+0x10a>
 8000b92:	b90a      	cbnz	r2, 8000b98 <ai_platform_network_init+0xa4>
 8000b94:	2211      	movs	r2, #17
 8000b96:	e012      	b.n	8000bbe <ai_platform_network_init+0xca>
 8000b98:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000b9a:	6913      	ldr	r3, [r2, #16]
 8000b9c:	b939      	cbnz	r1, 8000bae <ai_platform_network_init+0xba>
 8000b9e:	8c14      	ldrh	r4, [r2, #32]
 8000ba0:	8bd5      	ldrh	r5, [r2, #30]
 8000ba2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000ba4:	436c      	muls	r4, r5
 8000ba6:	434c      	muls	r4, r1
 8000ba8:	bf18      	it	ne
 8000baa:	2213      	movne	r2, #19
 8000bac:	d107      	bne.n	8000bbe <ai_platform_network_init+0xca>
 8000bae:	b973      	cbnz	r3, 8000bce <ai_platform_network_init+0xda>
 8000bb0:	8911      	ldrh	r1, [r2, #8]
 8000bb2:	88d4      	ldrh	r4, [r2, #6]
 8000bb4:	68d3      	ldr	r3, [r2, #12]
 8000bb6:	4361      	muls	r1, r4
 8000bb8:	4359      	muls	r1, r3
 8000bba:	d008      	beq.n	8000bce <ai_platform_network_init+0xda>
 8000bbc:	2212      	movs	r2, #18
 8000bbe:	2110      	movs	r1, #16
 8000bc0:	3010      	adds	r0, #16
 8000bc2:	f000 fa68 	bl	8001096 <core_set_error>
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	b001      	add	sp, #4
 8000bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bce:	f100 0118 	add.w	r1, r0, #24
 8000bd2:	f100 0e30 	add.w	lr, r0, #48	; 0x30
 8000bd6:	e8b2 10f8 	ldmia.w	r2!, {r3, r4, r5, r6, r7, ip}
 8000bda:	e881 10f8 	stmia.w	r1, {r3, r4, r5, r6, r7, ip}
 8000bde:	e892 0f0a 	ldmia.w	r2, {r1, r3, r8, r9, sl, fp}
 8000be2:	e88e 0f0a 	stmia.w	lr, {r1, r3, r8, r9, sl, fp}
 8000be6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8000be8:	2103      	movs	r1, #3
 8000bea:	60c1      	str	r1, [r0, #12]
 8000bec:	b13a      	cbz	r2, 8000bfe <ai_platform_network_init+0x10a>
 8000bee:	e000      	b.n	8000bf2 <ai_platform_network_init+0xfe>
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	68d1      	ldr	r1, [r2, #12]
 8000bf4:	6090      	str	r0, [r2, #8]
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	bf18      	it	ne
 8000bfa:	2900      	cmpne	r1, #0
 8000bfc:	d1f8      	bne.n	8000bf0 <ai_platform_network_init+0xfc>
 8000bfe:	b001      	add	sp, #4
 8000c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000c04 <.text_18>:
 8000c04:	00000000 	.word	0x00000000

08000c08 <.text_19>:
 8000c08:	e0002000 	.word	0xe0002000

08000c0c <.text_20>:
 8000c0c:	e0042000 	.word	0xe0042000

08000c10 <.text_21>:
 8000c10:	40023000 	.word	0x40023000

08000c14 <.text_22>:
 8000c14:	f407a5c2 	.word	0xf407a5c2

08000c18 <.text_23>:
 8000c18:	b5e8b5cd 	.word	0xb5e8b5cd

08000c1c <.text_24>:
 8000c1c:	5c001000 	.word	0x5c001000

08000c20 <.text_25>:
 8000c20:	58024c00 	.word	0x58024c00

08000c24 <ai_platform_network_process>:
 8000c24:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	460a      	mov	r2, r1
 8000c2c:	b120      	cbz	r0, 8000c38 <ai_platform_network_process+0x14>
 8000c2e:	6801      	ldr	r1, [r0, #0]
 8000c30:	f8df 3408 	ldr.w	r3, [pc, #1032]	; 800103c <.text_27>
 8000c34:	4299      	cmp	r1, r3
 8000c36:	d000      	beq.n	8000c3a <ai_platform_network_process+0x16>
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f8df 1408 	ldr.w	r1, [pc, #1032]	; 8001044 <.text_29>
 8000c3e:	f240 4549 	movw	r5, #1097	; 0x449
 8000c42:	680c      	ldr	r4, [r1, #0]
 8000c44:	0864      	lsrs	r4, r4, #1
 8000c46:	0064      	lsls	r4, r4, #1
 8000c48:	600c      	str	r4, [r1, #0]
 8000c4a:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8001048 <.text_30>
 8000c4e:	680b      	ldr	r3, [r1, #0]
 8000c50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c54:	42ab      	cmp	r3, r5
 8000c56:	d115      	bne.n	8000c84 <ai_platform_network_process+0x60>
 8000c58:	2101      	movs	r1, #1
 8000c5a:	2400      	movs	r4, #0
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	4321      	orrs	r1, r4
 8000c60:	4319      	orrs	r1, r3
 8000c62:	d01d      	beq.n	8000ca0 <ai_platform_network_process+0x7c>
 8000c64:	f8df 33e4 	ldr.w	r3, [pc, #996]	; 800104c <.text_31>
 8000c68:	2401      	movs	r4, #1
 8000c6a:	609c      	str	r4, [r3, #8]
 8000c6c:	6899      	ldr	r1, [r3, #8]
 8000c6e:	2900      	cmp	r1, #0
 8000c70:	d1fc      	bne.n	8000c6c <ai_platform_network_process+0x48>
 8000c72:	f8df 43dc 	ldr.w	r4, [pc, #988]	; 8001050 <.text_32>
 8000c76:	f8df 53dc 	ldr.w	r5, [pc, #988]	; 8001054 <.text_33>
 8000c7a:	601c      	str	r4, [r3, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	42ab      	cmp	r3, r5
 8000c80:	d026      	beq.n	8000cd0 <ai_platform_network_process+0xac>
 8000c82:	e7fe      	b.n	8000c82 <ai_platform_network_process+0x5e>
 8000c84:	2100      	movs	r1, #0
 8000c86:	f240 4a51 	movw	sl, #1105	; 0x451
 8000c8a:	4553      	cmp	r3, sl
 8000c8c:	bf08      	it	eq
 8000c8e:	2401      	moveq	r4, #1
 8000c90:	d0e4      	beq.n	8000c5c <ai_platform_network_process+0x38>
 8000c92:	2400      	movs	r4, #0
 8000c94:	f240 4552 	movw	r5, #1106	; 0x452
 8000c98:	42ab      	cmp	r3, r5
 8000c9a:	d1df      	bne.n	8000c5c <ai_platform_network_process+0x38>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e7de      	b.n	8000c5e <ai_platform_network_process+0x3a>
 8000ca0:	f8df 13b4 	ldr.w	r1, [pc, #948]	; 8001058 <.text_34>
 8000ca4:	680b      	ldr	r3, [r1, #0]
 8000ca6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000caa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000cae:	d10f      	bne.n	8000cd0 <ai_platform_network_process+0xac>
 8000cb0:	f8df 33a8 	ldr.w	r3, [pc, #936]	; 800105c <.text_35>
 8000cb4:	2401      	movs	r4, #1
 8000cb6:	609c      	str	r4, [r3, #8]
 8000cb8:	6899      	ldr	r1, [r3, #8]
 8000cba:	2900      	cmp	r1, #0
 8000cbc:	d1fc      	bne.n	8000cb8 <ai_platform_network_process+0x94>
 8000cbe:	f8df 4390 	ldr.w	r4, [pc, #912]	; 8001050 <.text_32>
 8000cc2:	f8df 5390 	ldr.w	r5, [pc, #912]	; 8001054 <.text_33>
 8000cc6:	601c      	str	r4, [r3, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	42ab      	cmp	r3, r5
 8000ccc:	d000      	beq.n	8000cd0 <ai_platform_network_process+0xac>
 8000cce:	e7fe      	b.n	8000cce <ai_platform_network_process+0xaa>
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	f000 8114 	beq.w	8000efe <ai_platform_network_process+0x2da>
 8000cd6:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
 8000cda:	b101      	cbz	r1, 8000cde <ai_platform_network_process+0xba>
 8000cdc:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8000cde:	7b05      	ldrb	r5, [r0, #12]
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	2400      	movs	r4, #0
 8000ce4:	82c3      	strh	r3, [r0, #22]
 8000ce6:	8284      	strh	r4, [r0, #20]
 8000ce8:	f005 0503 	and.w	r5, r5, #3
 8000cec:	2d03      	cmp	r5, #3
 8000cee:	d002      	beq.n	8000cf6 <ai_platform_network_process+0xd2>
 8000cf0:	2230      	movs	r2, #48	; 0x30
 8000cf2:	2111      	movs	r1, #17
 8000cf4:	e100      	b.n	8000ef8 <ai_platform_network_process+0x2d4>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	bf1e      	ittt	ne
 8000cfa:	2900      	cmpne	r1, #0
 8000cfc:	880b      	ldrhne	r3, [r1, #0]
 8000cfe:	2b00      	cmpne	r3, #0
 8000d00:	f000 80f8 	beq.w	8000ef4 <ai_platform_network_process+0x2d0>
 8000d04:	f8b2 b004 	ldrh.w	fp, [r2, #4]
 8000d08:	46a0      	mov	r8, r4
 8000d0a:	46a1      	mov	r9, r4
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	1d17      	adds	r7, r2, #4
 8000d10:	4682      	mov	sl, r0
 8000d12:	9100      	str	r1, [sp, #0]
 8000d14:	e014      	b.n	8000d40 <ai_platform_network_process+0x11c>
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	f000 80ea 	beq.w	8000ef2 <ai_platform_network_process+0x2ce>
 8000d1e:	8838      	ldrh	r0, [r7, #0]
 8000d20:	2800      	cmp	r0, #0
 8000d22:	d052      	beq.n	8000dca <ai_platform_network_process+0x1a6>
 8000d24:	4558      	cmp	r0, fp
 8000d26:	4622      	mov	r2, r4
 8000d28:	f108 0801 	add.w	r8, r8, #1
 8000d2c:	f109 0904 	add.w	r9, r9, #4
 8000d30:	bf28      	it	cs
 8000d32:	4683      	movcs	fp, r0
 8000d34:	1f39      	subs	r1, r7, #4
 8000d36:	4628      	mov	r0, r5
 8000d38:	f7ff fb84 	bl	8000444 <_platform_network_state_setup>
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	3610      	adds	r6, #16
 8000d40:	9800      	ldr	r0, [sp, #0]
 8000d42:	8801      	ldrh	r1, [r0, #0]
 8000d44:	4588      	cmp	r8, r1
 8000d46:	d24a      	bcs.n	8000dde <ai_platform_network_process+0x1ba>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	6850      	ldr	r0, [r2, #4]
 8000d4c:	2800      	cmp	r0, #0
 8000d4e:	bf1c      	itt	ne
 8000d50:	f850 4009 	ldrne.w	r4, [r0, r9]
 8000d54:	2c00      	cmpne	r4, #0
 8000d56:	d042      	beq.n	8000dde <ai_platform_network_process+0x1ba>
 8000d58:	6891      	ldr	r1, [r2, #8]
 8000d5a:	680a      	ldr	r2, [r1, #0]
 8000d5c:	1995      	adds	r5, r2, r6
 8000d5e:	f000 80c8 	beq.w	8000ef2 <ai_platform_network_process+0x2ce>
 8000d62:	69a0      	ldr	r0, [r4, #24]
 8000d64:	887b      	ldrh	r3, [r7, #2]
 8000d66:	88ba      	ldrh	r2, [r7, #4]
 8000d68:	6841      	ldr	r1, [r0, #4]
 8000d6a:	68b8      	ldr	r0, [r7, #8]
 8000d6c:	fb03 fc02 	mul.w	ip, r3, r2
 8000d70:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d74:	4561      	cmp	r1, ip
 8000d76:	d32d      	bcc.n	8000dd4 <ai_platform_network_process+0x1b0>
 8000d78:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000d7c:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000d80:	459e      	cmp	lr, r3
 8000d82:	bf01      	itttt	eq
 8000d84:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 8000d88:	4293      	cmpeq	r3, r2
 8000d8a:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000d8e:	4282      	cmpeq	r2, r0
 8000d90:	d120      	bne.n	8000dd4 <ai_platform_network_process+0x1b0>
 8000d92:	69a0      	ldr	r0, [r4, #24]
 8000d94:	6800      	ldr	r0, [r0, #0]
 8000d96:	f005 fc5b 	bl	8006650 <ai_array_get_byte_size>
 8000d9a:	68e1      	ldr	r1, [r4, #12]
 8000d9c:	6963      	ldr	r3, [r4, #20]
 8000d9e:	68ca      	ldr	r2, [r1, #12]
 8000da0:	68d9      	ldr	r1, [r3, #12]
 8000da2:	434a      	muls	r2, r1
 8000da4:	4290      	cmp	r0, r2
 8000da6:	d315      	bcc.n	8000dd4 <ai_platform_network_process+0x1b0>
 8000da8:	69a0      	ldr	r0, [r4, #24]
 8000daa:	6800      	ldr	r0, [r0, #0]
 8000dac:	f005 fb78 	bl	80064a0 <ai_array_to_buffer_fmt>
 8000db0:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8000db4:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8000db8:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	d0aa      	beq.n	8000d16 <ai_platform_network_process+0xf2>
 8000dc0:	2219      	movs	r2, #25
 8000dc2:	2112      	movs	r1, #18
 8000dc4:	f10a 0010 	add.w	r0, sl, #16
 8000dc8:	e097      	b.n	8000efa <ai_platform_network_process+0x2d6>
 8000dca:	2221      	movs	r2, #33	; 0x21
 8000dcc:	2112      	movs	r1, #18
 8000dce:	f10a 0010 	add.w	r0, sl, #16
 8000dd2:	e092      	b.n	8000efa <ai_platform_network_process+0x2d6>
 8000dd4:	2218      	movs	r2, #24
 8000dd6:	2112      	movs	r1, #18
 8000dd8:	f10a 0010 	add.w	r0, sl, #16
 8000ddc:	e08d      	b.n	8000efa <ai_platform_network_process+0x2d6>
 8000dde:	9902      	ldr	r1, [sp, #8]
 8000de0:	4655      	mov	r5, sl
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d076      	beq.n	8000ed4 <ai_platform_network_process+0x2b0>
 8000de6:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8000dea:	2802      	cmp	r0, #2
 8000dec:	db7c      	blt.n	8000ee8 <ai_platform_network_process+0x2c4>
 8000dee:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000df0:	f113 000c 	adds.w	r0, r3, #12
 8000df4:	bf1c      	itt	ne
 8000df6:	8802      	ldrhne	r2, [r0, #0]
 8000df8:	2a00      	cmpne	r2, #0
 8000dfa:	d075      	beq.n	8000ee8 <ai_platform_network_process+0x2c4>
 8000dfc:	f04f 0800 	mov.w	r8, #0
 8000e00:	46c1      	mov	r9, r8
 8000e02:	2600      	movs	r6, #0
 8000e04:	1d0f      	adds	r7, r1, #4
 8000e06:	9000      	str	r0, [sp, #0]
 8000e08:	e013      	b.n	8000e32 <ai_platform_network_process+0x20e>
 8000e0a:	68f8      	ldr	r0, [r7, #12]
 8000e0c:	2800      	cmp	r0, #0
 8000e0e:	d059      	beq.n	8000ec4 <ai_platform_network_process+0x2a0>
 8000e10:	8838      	ldrh	r0, [r7, #0]
 8000e12:	2800      	cmp	r0, #0
 8000e14:	d051      	beq.n	8000eba <ai_platform_network_process+0x296>
 8000e16:	4558      	cmp	r0, fp
 8000e18:	4622      	mov	r2, r4
 8000e1a:	f108 0801 	add.w	r8, r8, #1
 8000e1e:	f109 0904 	add.w	r9, r9, #4
 8000e22:	bf28      	it	cs
 8000e24:	4683      	movcs	fp, r0
 8000e26:	1f39      	subs	r1, r7, #4
 8000e28:	4628      	mov	r0, r5
 8000e2a:	f7ff fb0b 	bl	8000444 <_platform_network_state_setup>
 8000e2e:	3718      	adds	r7, #24
 8000e30:	3610      	adds	r6, #16
 8000e32:	9800      	ldr	r0, [sp, #0]
 8000e34:	8801      	ldrh	r1, [r0, #0]
 8000e36:	4588      	cmp	r8, r1
 8000e38:	d249      	bcs.n	8000ece <ai_platform_network_process+0x2aa>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	6850      	ldr	r0, [r2, #4]
 8000e3e:	2800      	cmp	r0, #0
 8000e40:	bf1c      	itt	ne
 8000e42:	f850 4009 	ldrne.w	r4, [r0, r9]
 8000e46:	2c00      	cmpne	r4, #0
 8000e48:	d041      	beq.n	8000ece <ai_platform_network_process+0x2aa>
 8000e4a:	6891      	ldr	r1, [r2, #8]
 8000e4c:	680a      	ldr	r2, [r1, #0]
 8000e4e:	1995      	adds	r5, r2, r6
 8000e50:	d038      	beq.n	8000ec4 <ai_platform_network_process+0x2a0>
 8000e52:	69a0      	ldr	r0, [r4, #24]
 8000e54:	887b      	ldrh	r3, [r7, #2]
 8000e56:	88ba      	ldrh	r2, [r7, #4]
 8000e58:	6841      	ldr	r1, [r0, #4]
 8000e5a:	68b8      	ldr	r0, [r7, #8]
 8000e5c:	fb03 fc02 	mul.w	ip, r3, r2
 8000e60:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e64:	4561      	cmp	r1, ip
 8000e66:	d33e      	bcc.n	8000ee6 <ai_platform_network_process+0x2c2>
 8000e68:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000e6c:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000e70:	459e      	cmp	lr, r3
 8000e72:	bf01      	itttt	eq
 8000e74:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 8000e78:	4293      	cmpeq	r3, r2
 8000e7a:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000e7e:	4282      	cmpeq	r2, r0
 8000e80:	d131      	bne.n	8000ee6 <ai_platform_network_process+0x2c2>
 8000e82:	69a0      	ldr	r0, [r4, #24]
 8000e84:	6800      	ldr	r0, [r0, #0]
 8000e86:	f005 fbe3 	bl	8006650 <ai_array_get_byte_size>
 8000e8a:	68e1      	ldr	r1, [r4, #12]
 8000e8c:	6963      	ldr	r3, [r4, #20]
 8000e8e:	68ca      	ldr	r2, [r1, #12]
 8000e90:	68d9      	ldr	r1, [r3, #12]
 8000e92:	434a      	muls	r2, r1
 8000e94:	4290      	cmp	r0, r2
 8000e96:	d326      	bcc.n	8000ee6 <ai_platform_network_process+0x2c2>
 8000e98:	69a0      	ldr	r0, [r4, #24]
 8000e9a:	6800      	ldr	r0, [r0, #0]
 8000e9c:	f005 fb00 	bl	80064a0 <ai_array_to_buffer_fmt>
 8000ea0:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8000ea4:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8000ea8:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000eac:	4288      	cmp	r0, r1
 8000eae:	d0ac      	beq.n	8000e0a <ai_platform_network_process+0x1e6>
 8000eb0:	2219      	movs	r2, #25
 8000eb2:	2113      	movs	r1, #19
 8000eb4:	f10a 0010 	add.w	r0, sl, #16
 8000eb8:	e01f      	b.n	8000efa <ai_platform_network_process+0x2d6>
 8000eba:	2221      	movs	r2, #33	; 0x21
 8000ebc:	2113      	movs	r1, #19
 8000ebe:	f10a 0010 	add.w	r0, sl, #16
 8000ec2:	e01a      	b.n	8000efa <ai_platform_network_process+0x2d6>
 8000ec4:	2217      	movs	r2, #23
 8000ec6:	2113      	movs	r1, #19
 8000ec8:	f10a 0010 	add.w	r0, sl, #16
 8000ecc:	e015      	b.n	8000efa <ai_platform_network_process+0x2d6>
 8000ece:	4655      	mov	r5, sl
 8000ed0:	f8a5 b014 	strh.w	fp, [r5, #20]
 8000ed4:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	bf14      	ite	ne
 8000edc:	f8d5 a04c 	ldrne.w	sl, [r5, #76]	; 0x4c
 8000ee0:	f04f 0a00 	moveq.w	sl, #0
 8000ee4:	e00f      	b.n	8000f06 <ai_platform_network_process+0x2e2>
 8000ee6:	4655      	mov	r5, sl
 8000ee8:	2218      	movs	r2, #24
 8000eea:	2113      	movs	r1, #19
 8000eec:	f105 0010 	add.w	r0, r5, #16
 8000ef0:	e003      	b.n	8000efa <ai_platform_network_process+0x2d6>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	2217      	movs	r2, #23
 8000ef6:	2112      	movs	r1, #18
 8000ef8:	3010      	adds	r0, #16
 8000efa:	f000 f8cc 	bl	8001096 <core_set_error>
 8000efe:	2000      	movs	r0, #0
 8000f00:	b003      	add	sp, #12
 8000f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f06:	2802      	cmp	r0, #2
 8000f08:	8aa9      	ldrh	r1, [r5, #20]
 8000f0a:	bfa6      	itte	ge
 8000f0c:	6ce8      	ldrge	r0, [r5, #76]	; 0x4c
 8000f0e:	f100 0b0c 	addge.w	fp, r0, #12
 8000f12:	f04f 0b00 	movlt.w	fp, #0
 8000f16:	8ae8      	ldrh	r0, [r5, #22]
 8000f18:	ebb0 0f01 	cmp.w	r0, r1
 8000f1c:	f080 8089 	bcs.w	8001032 <ai_platform_network_process+0x40e>
 8000f20:	f04f 0800 	mov.w	r8, #0
 8000f24:	4654      	mov	r4, sl
 8000f26:	46c1      	mov	r9, r8
 8000f28:	46c2      	mov	sl, r8
 8000f2a:	e018      	b.n	8000f5e <ai_platform_network_process+0x33a>
 8000f2c:	6882      	ldr	r2, [r0, #8]
 8000f2e:	68c3      	ldr	r3, [r0, #12]
 8000f30:	6871      	ldr	r1, [r6, #4]
 8000f32:	1ad2      	subs	r2, r2, r3
 8000f34:	188b      	adds	r3, r1, r2
 8000f36:	6083      	str	r3, [r0, #8]
 8000f38:	6871      	ldr	r1, [r6, #4]
 8000f3a:	60c1      	str	r1, [r0, #12]
 8000f3c:	6870      	ldr	r0, [r6, #4]
 8000f3e:	68b1      	ldr	r1, [r6, #8]
 8000f40:	4408      	add	r0, r1
 8000f42:	6070      	str	r0, [r6, #4]
 8000f44:	6831      	ldr	r1, [r6, #0]
 8000f46:	4288      	cmp	r0, r1
 8000f48:	d302      	bcc.n	8000f50 <ai_platform_network_process+0x32c>
 8000f4a:	68f0      	ldr	r0, [r6, #12]
 8000f4c:	4240      	negs	r0, r0
 8000f4e:	4408      	add	r0, r1
 8000f50:	6070      	str	r0, [r6, #4]
 8000f52:	f10a 0a01 	add.w	sl, sl, #1
 8000f56:	f109 0910 	add.w	r9, r9, #16
 8000f5a:	f108 0804 	add.w	r8, r8, #4
 8000f5e:	2c00      	cmp	r4, #0
 8000f60:	bf14      	ite	ne
 8000f62:	8820      	ldrhne	r0, [r4, #0]
 8000f64:	2000      	moveq	r0, #0
 8000f66:	4582      	cmp	sl, r0
 8000f68:	d212      	bcs.n	8000f90 <ai_platform_network_process+0x36c>
 8000f6a:	6860      	ldr	r0, [r4, #4]
 8000f6c:	b180      	cbz	r0, 8000f90 <ai_platform_network_process+0x36c>
 8000f6e:	f850 0008 	ldr.w	r0, [r0, r8]
 8000f72:	b168      	cbz	r0, 8000f90 <ai_platform_network_process+0x36c>
 8000f74:	6980      	ldr	r0, [r0, #24]
 8000f76:	68a1      	ldr	r1, [r4, #8]
 8000f78:	6803      	ldr	r3, [r0, #0]
 8000f7a:	680a      	ldr	r2, [r1, #0]
 8000f7c:	0099      	lsls	r1, r3, #2
 8000f7e:	eb02 0609 	add.w	r6, r2, r9
 8000f82:	d5d3      	bpl.n	8000f2c <ai_platform_network_process+0x308>
 8000f84:	68b2      	ldr	r2, [r6, #8]
 8000f86:	6871      	ldr	r1, [r6, #4]
 8000f88:	6880      	ldr	r0, [r0, #8]
 8000f8a:	f016 fa51 	bl	8017430 <__aeabi_memcpy>
 8000f8e:	e7d5      	b.n	8000f3c <ai_platform_network_process+0x318>
 8000f90:	46a2      	mov	sl, r4
 8000f92:	4628      	mov	r0, r5
 8000f94:	f04f 0800 	mov.w	r8, #0
 8000f98:	465c      	mov	r4, fp
 8000f9a:	f000 f93b 	bl	8001214 <ai_layers_forward_all>
 8000f9e:	46c1      	mov	r9, r8
 8000fa0:	46c3      	mov	fp, r8
 8000fa2:	e019      	b.n	8000fd8 <ai_platform_network_process+0x3b4>
 8000fa4:	6871      	ldr	r1, [r6, #4]
 8000fa6:	68b2      	ldr	r2, [r6, #8]
 8000fa8:	4411      	add	r1, r2
 8000faa:	6071      	str	r1, [r6, #4]
 8000fac:	6832      	ldr	r2, [r6, #0]
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d302      	bcc.n	8000fb8 <ai_platform_network_process+0x394>
 8000fb2:	68f1      	ldr	r1, [r6, #12]
 8000fb4:	4249      	negs	r1, r1
 8000fb6:	4411      	add	r1, r2
 8000fb8:	6071      	str	r1, [r6, #4]
 8000fba:	460a      	mov	r2, r1
 8000fbc:	6881      	ldr	r1, [r0, #8]
 8000fbe:	68c3      	ldr	r3, [r0, #12]
 8000fc0:	1ac9      	subs	r1, r1, r3
 8000fc2:	1853      	adds	r3, r2, r1
 8000fc4:	6083      	str	r3, [r0, #8]
 8000fc6:	6872      	ldr	r2, [r6, #4]
 8000fc8:	f8c0 200c 	str.w	r2, [r0, #12]
 8000fcc:	f10b 0b01 	add.w	fp, fp, #1
 8000fd0:	f109 0910 	add.w	r9, r9, #16
 8000fd4:	f108 0804 	add.w	r8, r8, #4
 8000fd8:	2c00      	cmp	r4, #0
 8000fda:	bf14      	ite	ne
 8000fdc:	8820      	ldrhne	r0, [r4, #0]
 8000fde:	2000      	moveq	r0, #0
 8000fe0:	4583      	cmp	fp, r0
 8000fe2:	d21d      	bcs.n	8001020 <ai_platform_network_process+0x3fc>
 8000fe4:	6860      	ldr	r0, [r4, #4]
 8000fe6:	b1d8      	cbz	r0, 8001020 <ai_platform_network_process+0x3fc>
 8000fe8:	f850 0008 	ldr.w	r0, [r0, r8]
 8000fec:	b1c0      	cbz	r0, 8001020 <ai_platform_network_process+0x3fc>
 8000fee:	6980      	ldr	r0, [r0, #24]
 8000ff0:	68a1      	ldr	r1, [r4, #8]
 8000ff2:	6803      	ldr	r3, [r0, #0]
 8000ff4:	680a      	ldr	r2, [r1, #0]
 8000ff6:	0099      	lsls	r1, r3, #2
 8000ff8:	eb02 0609 	add.w	r6, r2, r9
 8000ffc:	d5d2      	bpl.n	8000fa4 <ai_platform_network_process+0x380>
 8000ffe:	6881      	ldr	r1, [r0, #8]
 8001000:	68b2      	ldr	r2, [r6, #8]
 8001002:	6870      	ldr	r0, [r6, #4]
 8001004:	f016 fa14 	bl	8017430 <__aeabi_memcpy>
 8001008:	6870      	ldr	r0, [r6, #4]
 800100a:	68b1      	ldr	r1, [r6, #8]
 800100c:	4408      	add	r0, r1
 800100e:	6070      	str	r0, [r6, #4]
 8001010:	6831      	ldr	r1, [r6, #0]
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <ai_platform_network_process+0x3f8>
 8001016:	68f0      	ldr	r0, [r6, #12]
 8001018:	4240      	negs	r0, r0
 800101a:	4408      	add	r0, r1
 800101c:	6070      	str	r0, [r6, #4]
 800101e:	e7d5      	b.n	8000fcc <ai_platform_network_process+0x3a8>
 8001020:	8ae8      	ldrh	r0, [r5, #22]
 8001022:	8aa9      	ldrh	r1, [r5, #20]
 8001024:	46a3      	mov	fp, r4
 8001026:	1c40      	adds	r0, r0, #1
 8001028:	82e8      	strh	r0, [r5, #22]
 800102a:	b280      	uxth	r0, r0
 800102c:	4288      	cmp	r0, r1
 800102e:	f4ff af77 	bcc.w	8000f20 <ai_platform_network_process+0x2fc>
 8001032:	8ae8      	ldrh	r0, [r5, #22]
 8001034:	b003      	add	sp, #12
 8001036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800103c <.text_27>:
 800103c:	a1c00100 	.word	0xa1c00100

08001040 <.text_28>:
 8001040:	01030001 	.word	0x01030001

08001044 <.text_29>:
 8001044:	e0002000 	.word	0xe0002000

08001048 <.text_30>:
 8001048:	e0042000 	.word	0xe0042000

0800104c <.text_31>:
 800104c:	40023000 	.word	0x40023000

08001050 <.text_32>:
 8001050:	f407a5c2 	.word	0xf407a5c2

08001054 <.text_33>:
 8001054:	b5e8b5cd 	.word	0xb5e8b5cd

08001058 <.text_34>:
 8001058:	5c001000 	.word	0x5c001000

0800105c <.text_35>:
 800105c:	58024c00 	.word	0x58024c00

08001060 <.text_36>:
 8001060:	00000104 	.word	0x00000104

08001064 <.text_37>:
 8001064:	00000101 	.word	0x00000101

08001068 <.text_38>:
 8001068:	00000301 	.word	0x00000301

0800106c <.text_39>:
 800106c:	00001030 	.word	0x00001030

08001070 <.text_40>:
 8001070:	00001001 	.word	0x00001001

08001074 <_platform_network_sanity_check{5}::signatures>:
 8001074:	84048403                                ....

08001078 <.text_42>:
 8001078:	00001002 	.word	0x00001002

0800107c <.text_43>:
 800107c:	00001010 	.word	0x00001010

08001080 <.text_44>:
 8001080:	00000000 	.word	0x00000000

08001084 <.text_45>:
 8001084:	00001010 	.word	0x00001010

08001088 <core_init>:
 8001088:	2001      	movs	r0, #1
 800108a:	4770      	bx	lr

0800108c <core_get_error>:
 800108c:	4601      	mov	r1, r0
 800108e:	2200      	movs	r2, #0
 8001090:	6808      	ldr	r0, [r1, #0]
 8001092:	600a      	str	r2, [r1, #0]
 8001094:	4770      	bx	lr

08001096 <core_set_error>:
 8001096:	7803      	ldrb	r3, [r0, #0]
 8001098:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 800109c:	d104      	bne.n	80010a8 <core_set_error+0x12>
 800109e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80010a2:	6001      	str	r1, [r0, #0]
 80010a4:	2001      	movs	r0, #1
 80010a6:	4770      	bx	lr
 80010a8:	2000      	movs	r0, #0
 80010aa:	4770      	bx	lr

080010ac <ai_layers_forward_layer>:
 80010ac:	b510      	push	{r4, lr}
 80010ae:	4604      	mov	r4, r0
 80010b0:	6921      	ldr	r1, [r4, #16]
 80010b2:	4788      	blx	r1
 80010b4:	68e0      	ldr	r0, [r4, #12]
 80010b6:	42a0      	cmp	r0, r4
 80010b8:	bf08      	it	eq
 80010ba:	2000      	moveq	r0, #0
 80010bc:	bd10      	pop	{r4, pc}
	...

080010c0 <ai_check_custom_types>:
 80010c0:	b500      	push	{lr}
 80010c2:	b081      	sub	sp, #4
 80010c4:	b160      	cbz	r0, 80010e0 <ai_check_custom_types+0x20>
 80010c6:	7801      	ldrb	r1, [r0, #0]
 80010c8:	2903      	cmp	r1, #3
 80010ca:	d109      	bne.n	80010e0 <ai_check_custom_types+0x20>
 80010cc:	f05f 0204 	movs.w	r2, #4
 80010d0:	a18d      	add	r1, pc, #564	; (adr r1, 8001308 <ai_check_custom_types::ref_signatures>)
 80010d2:	f016 f9d9 	bl	8017488 <memcmp>
 80010d6:	1e40      	subs	r0, r0, #1
 80010d8:	4180      	sbcs	r0, r0
 80010da:	0fc0      	lsrs	r0, r0, #31
 80010dc:	b001      	add	sp, #4
 80010de:	bd00      	pop	{pc}
 80010e0:	2000      	movs	r0, #0
 80010e2:	b001      	add	sp, #4
 80010e4:	bd00      	pop	{pc}
	...

080010e8 <ai_layer_type_name>:
 80010e8:	f242 7211 	movw	r2, #10001	; 0x2711
 80010ec:	1a81      	subs	r1, r0, r2
 80010ee:	2901      	cmp	r1, #1
 80010f0:	bf81      	itttt	hi
 80010f2:	1ec9      	subhi	r1, r1, #3
 80010f4:	290d      	cmphi	r1, #13
 80010f6:	390f      	subhi	r1, #15
 80010f8:	2909      	cmphi	r1, #9
 80010fa:	f200 806b 	bhi.w	80011d4 <ai_layer_type_name+0xec>
 80010fe:	1a80      	subs	r0, r0, r2
 8001100:	d033      	beq.n	800116a <ai_layer_type_name+0x82>
 8001102:	1e40      	subs	r0, r0, #1
 8001104:	d033      	beq.n	800116e <ai_layer_type_name+0x86>
 8001106:	1e80      	subs	r0, r0, #2
 8001108:	d033      	beq.n	8001172 <ai_layer_type_name+0x8a>
 800110a:	1e40      	subs	r0, r0, #1
 800110c:	d034      	beq.n	8001178 <ai_layer_type_name+0x90>
 800110e:	1e40      	subs	r0, r0, #1
 8001110:	d034      	beq.n	800117c <ai_layer_type_name+0x94>
 8001112:	1e40      	subs	r0, r0, #1
 8001114:	d034      	beq.n	8001180 <ai_layer_type_name+0x98>
 8001116:	1e40      	subs	r0, r0, #1
 8001118:	d034      	beq.n	8001184 <ai_layer_type_name+0x9c>
 800111a:	1e40      	subs	r0, r0, #1
 800111c:	d034      	beq.n	8001188 <ai_layer_type_name+0xa0>
 800111e:	1e40      	subs	r0, r0, #1
 8001120:	d034      	beq.n	800118c <ai_layer_type_name+0xa4>
 8001122:	1e40      	subs	r0, r0, #1
 8001124:	d034      	beq.n	8001190 <ai_layer_type_name+0xa8>
 8001126:	1e40      	subs	r0, r0, #1
 8001128:	d034      	beq.n	8001194 <ai_layer_type_name+0xac>
 800112a:	1e40      	subs	r0, r0, #1
 800112c:	d034      	beq.n	8001198 <ai_layer_type_name+0xb0>
 800112e:	1e40      	subs	r0, r0, #1
 8001130:	d034      	beq.n	800119c <ai_layer_type_name+0xb4>
 8001132:	1e40      	subs	r0, r0, #1
 8001134:	d034      	beq.n	80011a0 <ai_layer_type_name+0xb8>
 8001136:	1e40      	subs	r0, r0, #1
 8001138:	d034      	beq.n	80011a4 <ai_layer_type_name+0xbc>
 800113a:	1e40      	subs	r0, r0, #1
 800113c:	d034      	beq.n	80011a8 <ai_layer_type_name+0xc0>
 800113e:	1e80      	subs	r0, r0, #2
 8001140:	d034      	beq.n	80011ac <ai_layer_type_name+0xc4>
 8001142:	1e40      	subs	r0, r0, #1
 8001144:	d034      	beq.n	80011b0 <ai_layer_type_name+0xc8>
 8001146:	1e40      	subs	r0, r0, #1
 8001148:	d034      	beq.n	80011b4 <ai_layer_type_name+0xcc>
 800114a:	1e40      	subs	r0, r0, #1
 800114c:	d034      	beq.n	80011b8 <ai_layer_type_name+0xd0>
 800114e:	1e40      	subs	r0, r0, #1
 8001150:	d034      	beq.n	80011bc <ai_layer_type_name+0xd4>
 8001152:	1e40      	subs	r0, r0, #1
 8001154:	d034      	beq.n	80011c0 <ai_layer_type_name+0xd8>
 8001156:	1e40      	subs	r0, r0, #1
 8001158:	d034      	beq.n	80011c4 <ai_layer_type_name+0xdc>
 800115a:	1e40      	subs	r0, r0, #1
 800115c:	d034      	beq.n	80011c8 <ai_layer_type_name+0xe0>
 800115e:	1e40      	subs	r0, r0, #1
 8001160:	d034      	beq.n	80011cc <ai_layer_type_name+0xe4>
 8001162:	1e40      	subs	r0, r0, #1
 8001164:	d034      	beq.n	80011d0 <ai_layer_type_name+0xe8>
 8001166:	a01c      	add	r0, pc, #112	; (adr r0, 80011d8 <.text_5>)
 8001168:	4770      	bx	lr
 800116a:	a01c      	add	r0, pc, #112	; (adr r0, 80011dc <.text_6>)
 800116c:	4770      	bx	lr
 800116e:	a01c      	add	r0, pc, #112	; (adr r0, 80011e0 <.text_7>)
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	a031      	add	r0, pc, #196	; (adr r0, 800123c <.text_15>)
 8001176:	4770      	bx	lr
 8001178:	a032      	add	r0, pc, #200	; (adr r0, 8001244 <.text_16>)
 800117a:	4770      	bx	lr
 800117c:	a019      	add	r0, pc, #100	; (adr r0, 80011e4 <.text_8>)
 800117e:	4770      	bx	lr
 8001180:	a019      	add	r0, pc, #100	; (adr r0, 80011e8 <.text_9>)
 8001182:	4770      	bx	lr
 8001184:	a031      	add	r0, pc, #196	; (adr r0, 800124c <.text_17>)
 8001186:	4770      	bx	lr
 8001188:	a018      	add	r0, pc, #96	; (adr r0, 80011ec <.text_10>)
 800118a:	4770      	bx	lr
 800118c:	a031      	add	r0, pc, #196	; (adr r0, 8001254 <.text_18>)
 800118e:	4770      	bx	lr
 8001190:	a032      	add	r0, pc, #200	; (adr r0, 800125c <.text_19>)
 8001192:	4770      	bx	lr
 8001194:	a036      	add	r0, pc, #216	; (adr r0, 8001270 <.text_20>)
 8001196:	4770      	bx	lr
 8001198:	a038      	add	r0, pc, #224	; (adr r0, 800127c <.text_21>)
 800119a:	4770      	bx	lr
 800119c:	a014      	add	r0, pc, #80	; (adr r0, 80011f0 <.text_11>)
 800119e:	4770      	bx	lr
 80011a0:	a038      	add	r0, pc, #224	; (adr r0, 8001284 <.text_22>)
 80011a2:	4770      	bx	lr
 80011a4:	a039      	add	r0, pc, #228	; (adr r0, 800128c <.text_23>)
 80011a6:	4770      	bx	lr
 80011a8:	a03b      	add	r0, pc, #236	; (adr r0, 8001298 <.text_24>)
 80011aa:	4770      	bx	lr
 80011ac:	a03f      	add	r0, pc, #252	; (adr r0, 80012ac <.text_25>)
 80011ae:	4770      	bx	lr
 80011b0:	a040      	add	r0, pc, #256	; (adr r0, 80012b4 <.text_26>)
 80011b2:	4770      	bx	lr
 80011b4:	a041      	add	r0, pc, #260	; (adr r0, 80012bc <.text_27>)
 80011b6:	4770      	bx	lr
 80011b8:	a043      	add	r0, pc, #268	; (adr r0, 80012c8 <.text_28>)
 80011ba:	4770      	bx	lr
 80011bc:	a044      	add	r0, pc, #272	; (adr r0, 80012d0 <.text_29>)
 80011be:	4770      	bx	lr
 80011c0:	a045      	add	r0, pc, #276	; (adr r0, 80012d8 <.text_30>)
 80011c2:	4770      	bx	lr
 80011c4:	a00b      	add	r0, pc, #44	; (adr r0, 80011f4 <.text_12>)
 80011c6:	4770      	bx	lr
 80011c8:	a049      	add	r0, pc, #292	; (adr r0, 80012f0 <.text_31>)
 80011ca:	4770      	bx	lr
 80011cc:	a04a      	add	r0, pc, #296	; (adr r0, 80012f8 <.text_32>)
 80011ce:	4770      	bx	lr
 80011d0:	a04b      	add	r0, pc, #300	; (adr r0, 8001300 <.text_33>)
 80011d2:	4770      	bx	lr
 80011d4:	a000      	add	r0, pc, #0	; (adr r0, 80011d8 <.text_5>)
 80011d6:	4770      	bx	lr

080011d8 <.text_5>:
 80011d8:	00000000 	.word	0x00000000

080011dc <.text_6>:
 80011dc:	00444441 	.word	0x00444441

080011e0 <.text_7>:
 80011e0:	00004e42 	.word	0x00004e42

080011e4 <.text_8>:
 80011e4:	00555247 	.word	0x00555247

080011e8 <.text_9>:
 80011e8:	004e524c 	.word	0x004e524c

080011ec <.text_10>:
 80011ec:	00004c4e 	.word	0x00004c4e

080011f0 <.text_11>:
 80011f0:	00004d53 	.word	0x00004d53

080011f4 <.text_12>:
 80011f4:	00444150 	.word	0x00444150

080011f8 <ai_layer_type_is_valid>:
 80011f8:	f242 7111 	movw	r1, #10001	; 0x2711
 80011fc:	1a40      	subs	r0, r0, r1
 80011fe:	2801      	cmp	r0, #1
 8001200:	bf81      	itttt	hi
 8001202:	1ec0      	subhi	r0, r0, #3
 8001204:	280d      	cmphi	r0, #13
 8001206:	380f      	subhi	r0, #15
 8001208:	2809      	cmphi	r0, #9
 800120a:	d801      	bhi.n	8001210 <ai_layer_type_is_valid+0x18>
 800120c:	2001      	movs	r0, #1
 800120e:	4770      	bx	lr
 8001210:	2000      	movs	r0, #0
 8001212:	4770      	bx	lr

08001214 <ai_layers_forward_all>:
 8001214:	b530      	push	{r4, r5, lr}
 8001216:	b081      	sub	sp, #4
 8001218:	4604      	mov	r4, r0
 800121a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800121c:	b158      	cbz	r0, 8001236 <ai_layers_forward_all+0x22>
 800121e:	6560      	str	r0, [r4, #84]	; 0x54
 8001220:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8001222:	6929      	ldr	r1, [r5, #16]
 8001224:	4628      	mov	r0, r5
 8001226:	4788      	blx	r1
 8001228:	68e8      	ldr	r0, [r5, #12]
 800122a:	42a8      	cmp	r0, r5
 800122c:	bf08      	it	eq
 800122e:	2000      	moveq	r0, #0
 8001230:	2800      	cmp	r0, #0
 8001232:	6560      	str	r0, [r4, #84]	; 0x54
 8001234:	d1f4      	bne.n	8001220 <ai_layers_forward_all+0xc>
 8001236:	b001      	add	sp, #4
 8001238:	bd30      	pop	{r4, r5, pc}
	...

0800123c <.text_15>:
 800123c:	564e4f43 	.word	0x564e4f43
 8001240:	00004432 	.word	0x00004432

08001244 <.text_16>:
 8001244:	534e4544 	.word	0x534e4544
 8001248:	0045      	.short	0x0045
	...

0800124c <.text_17>:
 800124c:	4d54534c 	.word	0x4d54534c
 8001250:	00          	.byte	0x00
 8001251:	00          	.byte	0x00
	...

08001254 <.text_18>:
 8001254:	4d524f4e 	.word	0x4d524f4e
 8001258:	00          	.byte	0x00
 8001259:	00          	.byte	0x00
	...

0800125c <.text_19>:
 800125c:	4954504f 	.word	0x4954504f
 8001260:	455a494d 	.word	0x455a494d
 8001264:	4f435f44 	.word	0x4f435f44
 8001268:	4432564e 	.word	0x4432564e
 800126c:	00          	.byte	0x00
 800126d:	00          	.byte	0x00
	...

08001270 <.text_20>:
 8001270:	4e415254 	.word	0x4e415254
 8001274:	534f5053 	.word	0x534f5053
 8001278:	0045      	.short	0x0045
	...

0800127c <.text_21>:
 800127c:	4c4f4f50 	.word	0x4c4f4f50
 8001280:	00          	.byte	0x00
 8001281:	00          	.byte	0x00
	...

08001284 <.text_22>:
 8001284:	494c5053 	.word	0x494c5053
 8001288:	0054      	.short	0x0054
	...

0800128c <.text_23>:
 800128c:	454d4954 	.word	0x454d4954
 8001290:	4c45445f 	.word	0x4c45445f
 8001294:	00005941 	.word	0x00005941

08001298 <.text_24>:
 8001298:	454d4954 	.word	0x454d4954
 800129c:	5349445f 	.word	0x5349445f
 80012a0:	42495254 	.word	0x42495254
 80012a4:	44455455 	.word	0x44455455
 80012a8:	00          	.byte	0x00
 80012a9:	00          	.byte	0x00
	...

080012ac <.text_25>:
 80012ac:	434e4f43 	.word	0x434e4f43
 80012b0:	00005441 	.word	0x00005441

080012b4 <.text_26>:
 80012b4:	4d4d4547 	.word	0x4d4d4547
 80012b8:	00          	.byte	0x00
 80012b9:	00          	.byte	0x00
	...

080012bc <.text_27>:
 80012bc:	41535055 	.word	0x41535055
 80012c0:	454c504d 	.word	0x454c504d
 80012c4:	00          	.byte	0x00
 80012c5:	00          	.byte	0x00
	...

080012c8 <.text_28>:
 80012c8:	57544c45 	.word	0x57544c45
 80012cc:	00455349 	.word	0x00455349

080012d0 <.text_29>:
 80012d0:	454e4547 	.word	0x454e4547
 80012d4:	00434952 	.word	0x00434952

080012d8 <.text_30>:
 80012d8:	54534e49 	.word	0x54534e49
 80012dc:	45434e41 	.word	0x45434e41
 80012e0:	4d524f4e 	.word	0x4d524f4e
 80012e4:	5a494c41 	.word	0x5a494c41
 80012e8:	4f495441 	.word	0x4f495441
 80012ec:	004e      	.short	0x004e
	...

080012f0 <.text_31>:
 80012f0:	43494c53 	.word	0x43494c53
 80012f4:	0045      	.short	0x0045
	...

080012f8 <.text_32>:
 80012f8:	454c4954 	.word	0x454c4954
 80012fc:	00          	.byte	0x00
 80012fd:	00          	.byte	0x00
	...

08001300 <.text_33>:
 8001300:	55444552 	.word	0x55444552
 8001304:	00004543 	.word	0x00004543

08001308 <ai_check_custom_types::ref_signatures>:
 8001308:	84048403                                ....

0800130c <ai_conv2d_stripe_f32>:
 800130c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001310:	b098      	sub	sp, #96	; 0x60
 8001312:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001314:	2800      	cmp	r0, #0
 8001316:	f000 82e3 	beq.w	80018e0 <ai_conv2d_stripe_f32+0x5d4>
 800131a:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 800131c:	f8dd e090 	ldr.w	lr, [sp, #144]	; 0x90
 8001320:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8001322:	9004      	str	r0, [sp, #16]
 8001324:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001326:	f9bd a0c0 	ldrsh.w	sl, [sp, #192]	; 0xc0
 800132a:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800132c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001330:	fb0e 6707 	mla	r7, lr, r7, r6
 8001334:	f9bd 60c0 	ldrsh.w	r6, [sp, #192]	; 0xc0
 8001338:	9705      	str	r7, [sp, #20]
 800133a:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 800133c:	9100      	str	r1, [sp, #0]
 800133e:	9217      	str	r2, [sp, #92]	; 0x5c
 8001340:	fb0e f707 	mul.w	r7, lr, r7
 8001344:	1986      	adds	r6, r0, r6
 8001346:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001348:	1e76      	subs	r6, r6, #1
 800134a:	fb96 fafa 	sdiv	sl, r6, sl
 800134e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8001350:	f9bd e0c0 	ldrsh.w	lr, [sp, #192]	; 0xc0
 8001354:	fb0a fa00 	mul.w	sl, sl, r0
 8001358:	9306      	str	r3, [sp, #24]
 800135a:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
 800135e:	f8dd a0a8 	ldr.w	sl, [sp, #168]	; 0xa8
 8001362:	4377      	muls	r7, r6
 8001364:	970b      	str	r7, [sp, #44]	; 0x2c
 8001366:	f9bd 70bc 	ldrsh.w	r7, [sp, #188]	; 0xbc
 800136a:	4377      	muls	r7, r6
 800136c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800136e:	9715      	str	r7, [sp, #84]	; 0x54
 8001370:	f9bd 70c0 	ldrsh.w	r7, [sp, #192]	; 0xc0
 8001374:	eba7 070a 	sub.w	r7, r7, sl
 8001378:	9713      	str	r7, [sp, #76]	; 0x4c
 800137a:	4657      	mov	r7, sl
 800137c:	4347      	muls	r7, r0
 800137e:	9711      	str	r7, [sp, #68]	; 0x44
 8001380:	fb06 fe0e 	mul.w	lr, r6, lr
 8001384:	f9bd 60bc 	ldrsh.w	r6, [sp, #188]	; 0xbc
 8001388:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 800138c:	f9bd 70c0 	ldrsh.w	r7, [sp, #192]	; 0xc0
 8001390:	fb00 fe0a 	mul.w	lr, r0, sl
 8001394:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 8001398:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 800139c:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 80013a0:	fb16 f707 	smulbb	r7, r6, r7
 80013a4:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80013a6:	970a      	str	r7, [sp, #40]	; 0x28
 80013a8:	9f22      	ldr	r7, [sp, #136]	; 0x88
 80013aa:	fb00 fe0e 	mul.w	lr, r0, lr
 80013ae:	fbba f6f6 	udiv	r6, sl, r6
 80013b2:	9610      	str	r6, [sp, #64]	; 0x40
 80013b4:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
 80013b8:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80013ba:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80013be:	fbb7 fafa 	udiv	sl, r7, sl
 80013c2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 80013c6:	fbb6 f7f7 	udiv	r7, r6, r7
 80013ca:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80013cc:	970e      	str	r7, [sp, #56]	; 0x38
 80013ce:	1bad      	subs	r5, r5, r6
 80013d0:	950c      	str	r5, [sp, #48]	; 0x30
 80013d2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80013d4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80013d6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80013d8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80013da:	4264      	negs	r4, r4
 80013dc:	bfd8      	it	le
 80013de:	2400      	movle	r4, #0
 80013e0:	1a09      	subs	r1, r1, r0
 80013e2:	4291      	cmp	r1, r2
 80013e4:	bf3a      	itte	cc
 80013e6:	9924      	ldrcc	r1, [sp, #144]	; 0x90
 80013e8:	1a0e      	subcc	r6, r1, r0
 80013ea:	4616      	movcs	r6, r2
 80013ec:	9a05      	ldr	r2, [sp, #20]
 80013ee:	9922      	ldr	r1, [sp, #136]	; 0x88
 80013f0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80013f2:	18a2      	adds	r2, r4, r2
 80013f4:	434a      	muls	r2, r1
 80013f6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80013fa:	9821      	ldr	r0, [sp, #132]	; 0x84
 80013fc:	b900      	cbnz	r0, 8001400 <ai_conv2d_stripe_f32+0xf4>
 80013fe:	9800      	ldr	r0, [sp, #0]
 8001400:	9001      	str	r0, [sp, #4]
 8001402:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001404:	1b36      	subs	r6, r6, r4
 8001406:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001408:	2801      	cmp	r0, #1
 800140a:	bf04      	itt	eq
 800140c:	990a      	ldreq	r1, [sp, #40]	; 0x28
 800140e:	2901      	cmpeq	r1, #1
 8001410:	f040 80ad 	bne.w	800156e <ai_conv2d_stripe_f32+0x262>
 8001414:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
 8001418:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800141a:	9822      	ldr	r0, [sp, #136]	; 0x88
 800141c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8001420:	ebaa 0a06 	sub.w	sl, sl, r6
 8001424:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8001426:	1b9b      	subs	r3, r3, r6
 8001428:	f8dd e000 	ldr.w	lr, [sp]
 800142c:	fb0a fa00 	mul.w	sl, sl, r0
 8001430:	fb03 f100 	mul.w	r1, r3, r0
 8001434:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8001436:	9b06      	ldr	r3, [sp, #24]
 8001438:	19e4      	adds	r4, r4, r7
 800143a:	1b40      	subs	r0, r0, r5
 800143c:	fb00 fc0c 	mul.w	ip, r0, ip
 8001440:	9822      	ldr	r0, [sp, #136]	; 0x88
 8001442:	4344      	muls	r4, r0
 8001444:	4370      	muls	r0, r6
 8001446:	eb03 0784 	add.w	r7, r3, r4, lsl #2
 800144a:	9e01      	ldr	r6, [sp, #4]
 800144c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800144e:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8001452:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8001454:	4576      	cmp	r6, lr
 8001456:	bf0c      	ite	eq
 8001458:	eddf 0ab0 	vldreq	s1, [pc, #704]	; 800171c <ai_conv2d_stripe_f32+0x410>
 800145c:	eef0 0a40 	vmovne.f32	s1, s0
 8001460:	2a00      	cmp	r2, #0
 8001462:	f000 8229 	beq.w	80018b8 <ai_conv2d_stripe_f32+0x5ac>
 8001466:	46b0      	mov	r8, r6
 8001468:	4613      	mov	r3, r2
 800146a:	462e      	mov	r6, r5
 800146c:	463a      	mov	r2, r7
 800146e:	f8cd c008 	str.w	ip, [sp, #8]
 8001472:	461d      	mov	r5, r3
 8001474:	4607      	mov	r7, r0
 8001476:	f8cd 9004 	str.w	r9, [sp, #4]
 800147a:	46c4      	mov	ip, r8
 800147c:	9b00      	ldr	r3, [sp, #0]
 800147e:	f027 0403 	bic.w	r4, r7, #3
 8001482:	2e00      	cmp	r6, #0
 8001484:	ed9c 1a00 	vldr	s2, [ip]
 8001488:	ee21 1a20 	vmul.f32	s2, s2, s1
 800148c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8001490:	dd60      	ble.n	8001554 <ai_conv2d_stripe_f32+0x248>
 8001492:	4630      	mov	r0, r6
 8001494:	2c00      	cmp	r4, #0
 8001496:	f04f 0900 	mov.w	r9, #0
 800149a:	dd1e      	ble.n	80014da <ai_conv2d_stripe_f32+0x1ce>
 800149c:	edd2 4a00 	vldr	s9, [r2]
 80014a0:	f109 0904 	add.w	r9, r9, #4
 80014a4:	ed98 5a00 	vldr	s10, [r8]
 80014a8:	edd2 3a01 	vldr	s7, [r2, #4]
 80014ac:	ed98 4a01 	vldr	s8, [r8, #4]
 80014b0:	ee04 1a85 	vmla.f32	s2, s9, s10
 80014b4:	edd2 2a02 	vldr	s5, [r2, #8]
 80014b8:	ed98 3a02 	vldr	s6, [r8, #8]
 80014bc:	ee03 1a84 	vmla.f32	s2, s7, s8
 80014c0:	edd2 1a03 	vldr	s3, [r2, #12]
 80014c4:	3210      	adds	r2, #16
 80014c6:	45a1      	cmp	r9, r4
 80014c8:	ed98 2a03 	vldr	s4, [r8, #12]
 80014cc:	ee02 1a83 	vmla.f32	s2, s5, s6
 80014d0:	f108 0810 	add.w	r8, r8, #16
 80014d4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80014d8:	dbe0      	blt.n	800149c <ai_conv2d_stripe_f32+0x190>
 80014da:	45b9      	cmp	r9, r7
 80014dc:	f280 8034 	bge.w	8001548 <ai_conv2d_stripe_f32+0x23c>
 80014e0:	f109 0901 	add.w	r9, r9, #1
 80014e4:	edd2 2a00 	vldr	s5, [r2]
 80014e8:	1d12      	adds	r2, r2, #4
 80014ea:	edd8 1a00 	vldr	s3, [r8]
 80014ee:	45b9      	cmp	r9, r7
 80014f0:	ee02 1aa1 	vmla.f32	s2, s5, s3
 80014f4:	f108 0804 	add.w	r8, r8, #4
 80014f8:	da26      	bge.n	8001548 <ai_conv2d_stripe_f32+0x23c>
 80014fa:	f109 0901 	add.w	r9, r9, #1
 80014fe:	ed92 3a00 	vldr	s6, [r2]
 8001502:	1d12      	adds	r2, r2, #4
 8001504:	ed98 2a00 	vldr	s4, [r8]
 8001508:	45b9      	cmp	r9, r7
 800150a:	ee03 1a02 	vmla.f32	s2, s6, s4
 800150e:	f108 0804 	add.w	r8, r8, #4
 8001512:	da19      	bge.n	8001548 <ai_conv2d_stripe_f32+0x23c>
 8001514:	f109 0901 	add.w	r9, r9, #1
 8001518:	edd2 2a00 	vldr	s5, [r2]
 800151c:	1d12      	adds	r2, r2, #4
 800151e:	edd8 1a00 	vldr	s3, [r8]
 8001522:	45b9      	cmp	r9, r7
 8001524:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8001528:	f108 0804 	add.w	r8, r8, #4
 800152c:	da0c      	bge.n	8001548 <ai_conv2d_stripe_f32+0x23c>
 800152e:	f109 0901 	add.w	r9, r9, #1
 8001532:	ed92 2a00 	vldr	s4, [r2]
 8001536:	1d12      	adds	r2, r2, #4
 8001538:	ed98 3a00 	vldr	s6, [r8]
 800153c:	45b9      	cmp	r9, r7
 800153e:	ee02 1a03 	vmla.f32	s2, s4, s6
 8001542:	f108 0804 	add.w	r8, r8, #4
 8001546:	dbcb      	blt.n	80014e0 <ai_conv2d_stripe_f32+0x1d4>
 8001548:	1e40      	subs	r0, r0, #1
 800154a:	eb08 088a 	add.w	r8, r8, sl, lsl #2
 800154e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001552:	d19f      	bne.n	8001494 <ai_conv2d_stripe_f32+0x188>
 8001554:	1e6d      	subs	r5, r5, #1
 8001556:	9802      	ldr	r0, [sp, #8]
 8001558:	ed8e 1a00 	vstr	s2, [lr]
 800155c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8001560:	f10e 0e04 	add.w	lr, lr, #4
 8001564:	f10c 0c04 	add.w	ip, ip, #4
 8001568:	d18b      	bne.n	8001482 <ai_conv2d_stripe_f32+0x176>
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	e1a4      	b.n	80018b8 <ai_conv2d_stripe_f32+0x5ac>
 800156e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8001570:	4288      	cmp	r0, r1
 8001572:	bf04      	itt	eq
 8001574:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
 8001576:	2b01      	cmpeq	r3, #1
 8001578:	f040 80d2 	bne.w	8001720 <ai_conv2d_stripe_f32+0x414>
 800157c:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800157e:	9822      	ldr	r0, [sp, #136]	; 0x88
 8001580:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001582:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8001586:	9102      	str	r1, [sp, #8]
 8001588:	9926      	ldr	r1, [sp, #152]	; 0x98
 800158a:	1bbf      	subs	r7, r7, r6
 800158c:	9b06      	ldr	r3, [sp, #24]
 800158e:	4347      	muls	r7, r0
 8001590:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8001592:	4454      	add	r4, sl
 8001594:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001598:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
 800159c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80015a0:	1b40      	subs	r0, r0, r5
 80015a2:	4341      	muls	r1, r0
 80015a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80015a8:	9b00      	ldr	r3, [sp, #0]
 80015aa:	ebac 0c06 	sub.w	ip, ip, r6
 80015ae:	459e      	cmp	lr, r3
 80015b0:	eb02 0e8a 	add.w	lr, r2, sl, lsl #2
 80015b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80015b6:	f04f 0a00 	mov.w	sl, #0
 80015ba:	eb0e 0883 	add.w	r8, lr, r3, lsl #2
 80015be:	bf0c      	ite	eq
 80015c0:	eddf 0a56 	vldreq	s1, [pc, #344]	; 800171c <ai_conv2d_stripe_f32+0x410>
 80015c4:	eef0 0a40 	vmovne.f32	s1, s0
 80015c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80015cc:	45c6      	cmp	lr, r8
 80015ce:	f080 8173 	bcs.w	80018b8 <ai_conv2d_stripe_f32+0x5ac>
 80015d2:	9b00      	ldr	r3, [sp, #0]
 80015d4:	9a02      	ldr	r2, [sp, #8]
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	f000 8099 	beq.w	800170e <ai_conv2d_stripe_f32+0x402>
 80015dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80015e0:	9500      	str	r5, [sp, #0]
 80015e2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80015e6:	f8dd b008 	ldr.w	fp, [sp, #8]
 80015ea:	9108      	str	r1, [sp, #32]
 80015ec:	eb09 048a 	add.w	r4, r9, sl, lsl #2
 80015f0:	f8cd e01c 	str.w	lr, [sp, #28]
 80015f4:	4615      	mov	r5, r2
 80015f6:	9a00      	ldr	r2, [sp, #0]
 80015f8:	ed94 1a00 	vldr	s2, [r4]
 80015fc:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001600:	9907      	ldr	r1, [sp, #28]
 8001602:	2a00      	cmp	r2, #0
 8001604:	f340 8072 	ble.w	80016ec <ai_conv2d_stripe_f32+0x3e0>
 8001608:	f026 0e03 	bic.w	lr, r6, #3
 800160c:	f1be 0f00 	cmp.w	lr, #0
 8001610:	f04f 0900 	mov.w	r9, #0
 8001614:	f340 8029 	ble.w	800166a <ai_conv2d_stripe_f32+0x35e>
 8001618:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 800161c:	edd0 1a00 	vldr	s3, [r0]
 8001620:	f109 0904 	add.w	r9, r9, #4
 8001624:	ed91 2a00 	vldr	s4, [r1]
 8001628:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 800162c:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001630:	edd0 2a01 	vldr	s5, [r0, #4]
 8001634:	edd0 1a02 	vldr	s3, [r0, #8]
 8001638:	ed91 3a00 	vldr	s6, [r1]
 800163c:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8001640:	ee02 1a83 	vmla.f32	s2, s5, s6
 8001644:	edd0 2a03 	vldr	s5, [r0, #12]
 8001648:	3010      	adds	r0, #16
 800164a:	45f1      	cmp	r9, lr
 800164c:	ed91 2a00 	vldr	s4, [r1]
 8001650:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8001654:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001658:	ed91 3a00 	vldr	s6, [r1]
 800165c:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8001660:	ee02 1a83 	vmla.f32	s2, s5, s6
 8001664:	dbda      	blt.n	800161c <ai_conv2d_stripe_f32+0x310>
 8001666:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 800166a:	45b1      	cmp	r9, r6
 800166c:	f280 8038 	bge.w	80016e0 <ai_conv2d_stripe_f32+0x3d4>
 8001670:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 8001674:	f109 0901 	add.w	r9, r9, #1
 8001678:	edd0 1a00 	vldr	s3, [r0]
 800167c:	1d00      	adds	r0, r0, #4
 800167e:	ed91 2a00 	vldr	s4, [r1]
 8001682:	45b1      	cmp	r9, r6
 8001684:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001688:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800168c:	da26      	bge.n	80016dc <ai_conv2d_stripe_f32+0x3d0>
 800168e:	f109 0901 	add.w	r9, r9, #1
 8001692:	ed90 2a00 	vldr	s4, [r0]
 8001696:	1d00      	adds	r0, r0, #4
 8001698:	edd1 1a00 	vldr	s3, [r1]
 800169c:	45b1      	cmp	r9, r6
 800169e:	ee02 1a21 	vmla.f32	s2, s4, s3
 80016a2:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80016a6:	da19      	bge.n	80016dc <ai_conv2d_stripe_f32+0x3d0>
 80016a8:	f109 0901 	add.w	r9, r9, #1
 80016ac:	edd0 1a00 	vldr	s3, [r0]
 80016b0:	1d00      	adds	r0, r0, #4
 80016b2:	ed91 2a00 	vldr	s4, [r1]
 80016b6:	45b1      	cmp	r9, r6
 80016b8:	ee01 1a82 	vmla.f32	s2, s3, s4
 80016bc:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80016c0:	da0c      	bge.n	80016dc <ai_conv2d_stripe_f32+0x3d0>
 80016c2:	f109 0901 	add.w	r9, r9, #1
 80016c6:	ed90 2a00 	vldr	s4, [r0]
 80016ca:	1d00      	adds	r0, r0, #4
 80016cc:	edd1 1a00 	vldr	s3, [r1]
 80016d0:	45b1      	cmp	r9, r6
 80016d2:	ee02 1a21 	vmla.f32	s2, s4, s3
 80016d6:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80016da:	dbcb      	blt.n	8001674 <ai_conv2d_stripe_f32+0x368>
 80016dc:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 80016e0:	1e52      	subs	r2, r2, #1
 80016e2:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 80016e6:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 80016ea:	d18d      	bne.n	8001608 <ai_conv2d_stripe_f32+0x2fc>
 80016ec:	1d24      	adds	r4, r4, #4
 80016ee:	9908      	ldr	r1, [sp, #32]
 80016f0:	ed85 1a00 	vstr	s2, [r5]
 80016f4:	1d2d      	adds	r5, r5, #4
 80016f6:	f1bb 0b01 	subs.w	fp, fp, #1
 80016fa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80016fe:	f10a 0a01 	add.w	sl, sl, #1
 8001702:	f47f af78 	bne.w	80015f6 <ai_conv2d_stripe_f32+0x2ea>
 8001706:	9d00      	ldr	r5, [sp, #0]
 8001708:	9908      	ldr	r1, [sp, #32]
 800170a:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800170e:	9a03      	ldr	r2, [sp, #12]
 8001710:	f10e 0e04 	add.w	lr, lr, #4
 8001714:	4596      	cmp	lr, r2
 8001716:	f4bf af28 	bcs.w	800156a <ai_conv2d_stripe_f32+0x25e>
 800171a:	e75b      	b.n	80015d4 <ai_conv2d_stripe_f32+0x2c8>
 800171c:	00000000 	.word	0x00000000
 8001720:	f9bd 10bc 	ldrsh.w	r1, [sp, #188]	; 0xbc
 8001724:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8001728:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 800172c:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 8001730:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 8001734:	4608      	mov	r0, r1
 8001736:	1b0b      	subs	r3, r1, r4
 8001738:	1876      	adds	r6, r6, r1
 800173a:	fb94 faf0 	sdiv	sl, r4, r0
 800173e:	fb00 300a 	mla	r0, r0, sl, r3
 8001742:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8001746:	1e76      	subs	r6, r6, #1
 8001748:	1864      	adds	r4, r4, r1
 800174a:	1e64      	subs	r4, r4, #1
 800174c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8001750:	fb90 f7f1 	sdiv	r7, r0, r1
 8001754:	fb01 0717 	mls	r7, r1, r7, r0
 8001758:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800175a:	fb90 f0f3 	sdiv	r0, r0, r3
 800175e:	fb03 c000 	mla	r0, r3, r0, ip
 8001762:	1bf6      	subs	r6, r6, r7
 8001764:	fb90 fbf3 	sdiv	fp, r0, r3
 8001768:	fb03 0b1b 	mls	fp, r3, fp, r0
 800176c:	fb96 f0f1 	sdiv	r0, r6, r1
 8001770:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001772:	fb00 9911 	mls	r9, r0, r1, r9
 8001776:	9609      	str	r6, [sp, #36]	; 0x24
 8001778:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800177a:	fb94 f1f1 	sdiv	r1, r4, r1
 800177e:	9c00      	ldr	r4, [sp, #0]
 8001780:	eba5 050b 	sub.w	r5, r5, fp
 8001784:	195d      	adds	r5, r3, r5
 8001786:	1e6d      	subs	r5, r5, #1
 8001788:	fb95 fcf3 	sdiv	ip, r5, r3
 800178c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800178e:	eba6 060c 	sub.w	r6, r6, ip
 8001792:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001794:	eba8 0800 	sub.w	r8, r8, r0
 8001798:	fb05 f909 	mul.w	r9, r5, r9
 800179c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800179e:	fb0e fe03 	mul.w	lr, lr, r3
 80017a2:	ebaa 0a03 	sub.w	sl, sl, r3
 80017a6:	fb08 f803 	mul.w	r8, r8, r3
 80017aa:	194d      	adds	r5, r1, r5
 80017ac:	fb06 fe0e 	mul.w	lr, r6, lr
 80017b0:	9e06      	ldr	r6, [sp, #24]
 80017b2:	435d      	muls	r5, r3
 80017b4:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 80017b8:	9d01      	ldr	r5, [sp, #4]
 80017ba:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80017bc:	42a5      	cmp	r5, r4
 80017be:	9c24      	ldr	r4, [sp, #144]	; 0x90
 80017c0:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80017c2:	44b3      	add	fp, r6
 80017c4:	fb04 770b 	mla	r7, r4, fp, r7
 80017c8:	bf0c      	ite	eq
 80017ca:	eddf 0a47 	vldreq	s1, [pc, #284]	; 80018e8 <.text_3>
 80017ce:	eef0 0a40 	vmovne.f32	s1, s0
 80017d2:	436f      	muls	r7, r5
 80017d4:	eb02 0487 	add.w	r4, r2, r7, lsl #2
 80017d8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80017da:	2500      	movs	r5, #0
 80017dc:	2a00      	cmp	r2, #0
 80017de:	d06b      	beq.n	80018b8 <ai_conv2d_stripe_f32+0x5ac>
 80017e0:	9202      	str	r2, [sp, #8]
 80017e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80017e4:	2a00      	cmp	r2, #0
 80017e6:	d061      	beq.n	80018ac <ai_conv2d_stripe_f32+0x5a0>
 80017e8:	9a00      	ldr	r2, [sp, #0]
 80017ea:	9e01      	ldr	r6, [sp, #4]
 80017ec:	f8cd c00c 	str.w	ip, [sp, #12]
 80017f0:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 80017f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80017f6:	f8cd e020 	str.w	lr, [sp, #32]
 80017fa:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 80017fe:	9407      	str	r4, [sp, #28]
 8001800:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8001804:	ed96 1a00 	vldr	s2, [r6]
 8001808:	ee21 1a20 	vmul.f32	s2, s2, s1
 800180c:	9c07      	ldr	r4, [sp, #28]
 800180e:	f1be 0f00 	cmp.w	lr, #0
 8001812:	dd3b      	ble.n	800188c <ai_conv2d_stripe_f32+0x580>
 8001814:	2800      	cmp	r0, #0
 8001816:	dd32      	ble.n	800187e <ai_conv2d_stripe_f32+0x572>
 8001818:	ea4f 0c00 	mov.w	ip, r0
 800181c:	eb04 0b83 	add.w	fp, r4, r3, lsl #2
 8001820:	455c      	cmp	r4, fp
 8001822:	d227      	bcs.n	8001874 <ai_conv2d_stripe_f32+0x568>
 8001824:	edd1 2a00 	vldr	s5, [r1]
 8001828:	1d09      	adds	r1, r1, #4
 800182a:	edd4 1a00 	vldr	s3, [r4]
 800182e:	1d24      	adds	r4, r4, #4
 8001830:	455c      	cmp	r4, fp
 8001832:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8001836:	d21d      	bcs.n	8001874 <ai_conv2d_stripe_f32+0x568>
 8001838:	ed91 3a00 	vldr	s6, [r1]
 800183c:	1d09      	adds	r1, r1, #4
 800183e:	ed94 2a00 	vldr	s4, [r4]
 8001842:	1d24      	adds	r4, r4, #4
 8001844:	455c      	cmp	r4, fp
 8001846:	ee03 1a02 	vmla.f32	s2, s6, s4
 800184a:	d213      	bcs.n	8001874 <ai_conv2d_stripe_f32+0x568>
 800184c:	edd1 2a00 	vldr	s5, [r1]
 8001850:	1d09      	adds	r1, r1, #4
 8001852:	edd4 1a00 	vldr	s3, [r4]
 8001856:	1d24      	adds	r4, r4, #4
 8001858:	455c      	cmp	r4, fp
 800185a:	ee02 1aa1 	vmla.f32	s2, s5, s3
 800185e:	d209      	bcs.n	8001874 <ai_conv2d_stripe_f32+0x568>
 8001860:	ed91 2a00 	vldr	s4, [r1]
 8001864:	1d09      	adds	r1, r1, #4
 8001866:	ed94 3a00 	vldr	s6, [r4]
 800186a:	1d24      	adds	r4, r4, #4
 800186c:	455c      	cmp	r4, fp
 800186e:	ee02 1a03 	vmla.f32	s2, s4, s6
 8001872:	d3d7      	bcc.n	8001824 <ai_conv2d_stripe_f32+0x518>
 8001874:	f1bc 0c01 	subs.w	ip, ip, #1
 8001878:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 800187c:	d1ce      	bne.n	800181c <ai_conv2d_stripe_f32+0x510>
 800187e:	f1be 0e01 	subs.w	lr, lr, #1
 8001882:	eb04 0489 	add.w	r4, r4, r9, lsl #2
 8001886:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 800188a:	d1c3      	bne.n	8001814 <ai_conv2d_stripe_f32+0x508>
 800188c:	1c6d      	adds	r5, r5, #1
 800188e:	f8dd c020 	ldr.w	ip, [sp, #32]
 8001892:	ed87 1a00 	vstr	s2, [r7]
 8001896:	1d3f      	adds	r7, r7, #4
 8001898:	1d36      	adds	r6, r6, #4
 800189a:	1e52      	subs	r2, r2, #1
 800189c:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 80018a0:	d1ae      	bne.n	8001800 <ai_conv2d_stripe_f32+0x4f4>
 80018a2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80018a6:	f8dd e020 	ldr.w	lr, [sp, #32]
 80018aa:	9c07      	ldr	r4, [sp, #28]
 80018ac:	9f02      	ldr	r7, [sp, #8]
 80018ae:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80018b2:	1e7f      	subs	r7, r7, #1
 80018b4:	9702      	str	r7, [sp, #8]
 80018b6:	d194      	bne.n	80017e2 <ai_conv2d_stripe_f32+0x4d6>
 80018b8:	9900      	ldr	r1, [sp, #0]
 80018ba:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80018bc:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80018c0:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
 80018c4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	9b05      	ldr	r3, [sp, #20]
 80018ca:	188a      	adds	r2, r1, r2
 80018cc:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 80018d0:	922c      	str	r2, [sp, #176]	; 0xb0
 80018d2:	9a04      	ldr	r2, [sp, #16]
 80018d4:	1859      	adds	r1, r3, r1
 80018d6:	9105      	str	r1, [sp, #20]
 80018d8:	1e52      	subs	r2, r2, #1
 80018da:	9204      	str	r2, [sp, #16]
 80018dc:	f47f ad79 	bne.w	80013d2 <ai_conv2d_stripe_f32+0xc6>
 80018e0:	b018      	add	sp, #96	; 0x60
 80018e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080018e8 <.text_3>:
 80018e8:	00000000 	.word	0x00000000

080018ec <func_dummy>:
 80018ec:	4770      	bx	lr
	...

080018f0 <ai_dict8_dot_array_f32>:
 80018f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018f2:	4604      	mov	r4, r0
 80018f4:	9805      	ldr	r0, [sp, #20]
 80018f6:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 80018fa:	ed9f 0adb 	vldr	s0, [pc, #876]	; 8001c68 <.text_7>
 80018fe:	3d20      	subs	r5, #32
 8001900:	2808      	cmp	r0, #8
 8001902:	d231      	bcs.n	8001968 <ai_dict8_dot_array_f32+0x78>
 8001904:	3520      	adds	r5, #32
 8001906:	42ab      	cmp	r3, r5
 8001908:	f080 8159 	bcs.w	8001bbe <ai_dict8_dot_array_f32+0x2ce>
 800190c:	780e      	ldrb	r6, [r1, #0]
 800190e:	edd3 0a00 	vldr	s1, [r3]
 8001912:	eb02 0086 	add.w	r0, r2, r6, lsl #2
 8001916:	ed90 1a00 	vldr	s2, [r0]
 800191a:	1d18      	adds	r0, r3, #4
 800191c:	42a8      	cmp	r0, r5
 800191e:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001922:	f080 814c 	bcs.w	8001bbe <ai_dict8_dot_array_f32+0x2ce>
 8001926:	784e      	ldrb	r6, [r1, #1]
 8001928:	edd0 0a00 	vldr	s1, [r0]
 800192c:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8001930:	1d00      	adds	r0, r0, #4
 8001932:	42a8      	cmp	r0, r5
 8001934:	ed93 1a00 	vldr	s2, [r3]
 8001938:	ee01 0a20 	vmla.f32	s0, s2, s1
 800193c:	f080 813f 	bcs.w	8001bbe <ai_dict8_dot_array_f32+0x2ce>
 8001940:	788e      	ldrb	r6, [r1, #2]
 8001942:	1cc9      	adds	r1, r1, #3
 8001944:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8001948:	edd0 0a00 	vldr	s1, [r0]
 800194c:	ed93 1a00 	vldr	s2, [r3]
 8001950:	1d03      	adds	r3, r0, #4
 8001952:	42ab      	cmp	r3, r5
 8001954:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001958:	d3d8      	bcc.n	800190c <ai_dict8_dot_array_f32+0x1c>
 800195a:	edd4 0a00 	vldr	s1, [r4]
 800195e:	ee30 0a80 	vadd.f32	s0, s1, s0
 8001962:	ed84 0a00 	vstr	s0, [r4]
 8001966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001968:	f001 0003 	and.w	r0, r1, #3
 800196c:	2803      	cmp	r0, #3
 800196e:	f200 8126 	bhi.w	8001bbe <ai_dict8_dot_array_f32+0x2ce>
 8001972:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001976:	0004      	.short	0x0004
 8001978:	00940089 	.word	0x00940089
 800197c:	009f      	.short	0x009f
 800197e:	429d      	cmp	r5, r3
 8001980:	d231      	bcs.n	80019e6 <ai_dict8_dot_array_f32+0xf6>
 8001982:	3520      	adds	r5, #32
 8001984:	42ab      	cmp	r3, r5
 8001986:	f080 811a 	bcs.w	8001bbe <ai_dict8_dot_array_f32+0x2ce>
 800198a:	780e      	ldrb	r6, [r1, #0]
 800198c:	edd3 0a00 	vldr	s1, [r3]
 8001990:	eb02 0086 	add.w	r0, r2, r6, lsl #2
 8001994:	ed90 1a00 	vldr	s2, [r0]
 8001998:	1d18      	adds	r0, r3, #4
 800199a:	42a8      	cmp	r0, r5
 800199c:	ee01 0a20 	vmla.f32	s0, s2, s1
 80019a0:	f080 810d 	bcs.w	8001bbe <ai_dict8_dot_array_f32+0x2ce>
 80019a4:	784e      	ldrb	r6, [r1, #1]
 80019a6:	edd0 0a00 	vldr	s1, [r0]
 80019aa:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 80019ae:	1d00      	adds	r0, r0, #4
 80019b0:	42a8      	cmp	r0, r5
 80019b2:	ed93 1a00 	vldr	s2, [r3]
 80019b6:	ee01 0a20 	vmla.f32	s0, s2, s1
 80019ba:	f080 8100 	bcs.w	8001bbe <ai_dict8_dot_array_f32+0x2ce>
 80019be:	788e      	ldrb	r6, [r1, #2]
 80019c0:	1cc9      	adds	r1, r1, #3
 80019c2:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 80019c6:	edd0 0a00 	vldr	s1, [r0]
 80019ca:	ed93 1a00 	vldr	s2, [r3]
 80019ce:	1d03      	adds	r3, r0, #4
 80019d0:	42ab      	cmp	r3, r5
 80019d2:	ee01 0a20 	vmla.f32	s0, s2, s1
 80019d6:	d3d8      	bcc.n	800198a <ai_dict8_dot_array_f32+0x9a>
 80019d8:	edd4 0a00 	vldr	s1, [r4]
 80019dc:	ee30 0a80 	vadd.f32	s0, s1, s0
 80019e0:	ed84 0a00 	vstr	s0, [r4]
 80019e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019e6:	78cf      	ldrb	r7, [r1, #3]
 80019e8:	f891 e000 	ldrb.w	lr, [r1]
 80019ec:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 80019f0:	788f      	ldrb	r7, [r1, #2]
 80019f2:	f103 0010 	add.w	r0, r3, #16
 80019f6:	ed93 4a00 	vldr	s8, [r3]
 80019fa:	ed93 3a01 	vldr	s6, [r3, #4]
 80019fe:	ed93 2a02 	vldr	s4, [r3, #8]
 8001a02:	eddc 0a00 	vldr	s1, [ip]
 8001a06:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001a0a:	784f      	ldrb	r7, [r1, #1]
 8001a0c:	ed93 1a03 	vldr	s2, [r3, #12]
 8001a10:	790b      	ldrb	r3, [r1, #4]
 8001a12:	eddc 1a00 	vldr	s3, [ip]
 8001a16:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001a1a:	eb02 078e 	add.w	r7, r2, lr, lsl #2
 8001a1e:	edd7 3a00 	vldr	s7, [r7]
 8001a22:	794f      	ldrb	r7, [r1, #5]
 8001a24:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001a28:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8001a2c:	eddc 2a00 	vldr	s5, [ip]
 8001a30:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001a34:	ee02 0a83 	vmla.f32	s0, s5, s6
 8001a38:	798b      	ldrb	r3, [r1, #6]
 8001a3a:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001a3e:	79cf      	ldrb	r7, [r1, #7]
 8001a40:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001a44:	3108      	adds	r1, #8
 8001a46:	eddc 0a00 	vldr	s1, [ip]
 8001a4a:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001a4e:	ed9e 1a00 	vldr	s2, [lr]
 8001a52:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8001a56:	ed90 4a00 	vldr	s8, [r0]
 8001a5a:	f100 0310 	add.w	r3, r0, #16
 8001a5e:	edd0 3a01 	vldr	s7, [r0, #4]
 8001a62:	429d      	cmp	r5, r3
 8001a64:	ee00 0a84 	vmla.f32	s0, s1, s8
 8001a68:	eddc 1a00 	vldr	s3, [ip]
 8001a6c:	ed90 3a02 	vldr	s6, [r0, #8]
 8001a70:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001a74:	ed9e 2a00 	vldr	s4, [lr]
 8001a78:	edd0 2a03 	vldr	s5, [r0, #12]
 8001a7c:	ee01 0a83 	vmla.f32	s0, s3, s6
 8001a80:	ee02 0a22 	vmla.f32	s0, s4, s5
 8001a84:	d2af      	bcs.n	80019e6 <ai_dict8_dot_array_f32+0xf6>
 8001a86:	e77c      	b.n	8001982 <ai_dict8_dot_array_f32+0x92>
 8001a88:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001a8c:	edd3 0a00 	vldr	s1, [r3]
 8001a90:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001a94:	1d1b      	adds	r3, r3, #4
 8001a96:	ed96 0a00 	vldr	s0, [r6]
 8001a9a:	ee20 0a20 	vmul.f32	s0, s0, s1
 8001a9e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001aa2:	edd3 0a00 	vldr	s1, [r3]
 8001aa6:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001aaa:	1d1b      	adds	r3, r3, #4
 8001aac:	ed96 1a00 	vldr	s2, [r6]
 8001ab0:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001ab4:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001ab8:	edd3 0a00 	vldr	s1, [r3]
 8001abc:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001ac0:	1d1b      	adds	r3, r3, #4
 8001ac2:	429d      	cmp	r5, r3
 8001ac4:	ed96 1a00 	vldr	s2, [r6]
 8001ac8:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001acc:	d34f      	bcc.n	8001b6e <ai_dict8_dot_array_f32+0x27e>
 8001ace:	78cf      	ldrb	r7, [r1, #3]
 8001ad0:	f891 e000 	ldrb.w	lr, [r1]
 8001ad4:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001ad8:	788f      	ldrb	r7, [r1, #2]
 8001ada:	f103 0010 	add.w	r0, r3, #16
 8001ade:	ed93 4a00 	vldr	s8, [r3]
 8001ae2:	ed93 3a01 	vldr	s6, [r3, #4]
 8001ae6:	ed93 2a02 	vldr	s4, [r3, #8]
 8001aea:	eddc 0a00 	vldr	s1, [ip]
 8001aee:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001af2:	784f      	ldrb	r7, [r1, #1]
 8001af4:	ed93 1a03 	vldr	s2, [r3, #12]
 8001af8:	790b      	ldrb	r3, [r1, #4]
 8001afa:	eddc 1a00 	vldr	s3, [ip]
 8001afe:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001b02:	eb02 078e 	add.w	r7, r2, lr, lsl #2
 8001b06:	edd7 3a00 	vldr	s7, [r7]
 8001b0a:	794f      	ldrb	r7, [r1, #5]
 8001b0c:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001b10:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8001b14:	eddc 2a00 	vldr	s5, [ip]
 8001b18:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001b1c:	ee02 0a83 	vmla.f32	s0, s5, s6
 8001b20:	798b      	ldrb	r3, [r1, #6]
 8001b22:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001b26:	79cf      	ldrb	r7, [r1, #7]
 8001b28:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001b2c:	3108      	adds	r1, #8
 8001b2e:	eddc 0a00 	vldr	s1, [ip]
 8001b32:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001b36:	ed9e 1a00 	vldr	s2, [lr]
 8001b3a:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8001b3e:	ed90 4a00 	vldr	s8, [r0]
 8001b42:	f100 0310 	add.w	r3, r0, #16
 8001b46:	edd0 3a01 	vldr	s7, [r0, #4]
 8001b4a:	429d      	cmp	r5, r3
 8001b4c:	ee00 0a84 	vmla.f32	s0, s1, s8
 8001b50:	eddc 1a00 	vldr	s3, [ip]
 8001b54:	ed90 3a02 	vldr	s6, [r0, #8]
 8001b58:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001b5c:	ed9e 2a00 	vldr	s4, [lr]
 8001b60:	edd0 2a03 	vldr	s5, [r0, #12]
 8001b64:	ee01 0a83 	vmla.f32	s0, s3, s6
 8001b68:	ee02 0a22 	vmla.f32	s0, s4, s5
 8001b6c:	d2af      	bcs.n	8001ace <ai_dict8_dot_array_f32+0x1de>
 8001b6e:	3520      	adds	r5, #32
 8001b70:	42ab      	cmp	r3, r5
 8001b72:	d224      	bcs.n	8001bbe <ai_dict8_dot_array_f32+0x2ce>
 8001b74:	780e      	ldrb	r6, [r1, #0]
 8001b76:	edd3 0a00 	vldr	s1, [r3]
 8001b7a:	eb02 0086 	add.w	r0, r2, r6, lsl #2
 8001b7e:	ed90 1a00 	vldr	s2, [r0]
 8001b82:	1d18      	adds	r0, r3, #4
 8001b84:	42a8      	cmp	r0, r5
 8001b86:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001b8a:	d218      	bcs.n	8001bbe <ai_dict8_dot_array_f32+0x2ce>
 8001b8c:	784e      	ldrb	r6, [r1, #1]
 8001b8e:	edd0 0a00 	vldr	s1, [r0]
 8001b92:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8001b96:	1d00      	adds	r0, r0, #4
 8001b98:	42a8      	cmp	r0, r5
 8001b9a:	ed93 1a00 	vldr	s2, [r3]
 8001b9e:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001ba2:	d20c      	bcs.n	8001bbe <ai_dict8_dot_array_f32+0x2ce>
 8001ba4:	788e      	ldrb	r6, [r1, #2]
 8001ba6:	1cc9      	adds	r1, r1, #3
 8001ba8:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8001bac:	edd0 0a00 	vldr	s1, [r0]
 8001bb0:	ed93 1a00 	vldr	s2, [r3]
 8001bb4:	1d03      	adds	r3, r0, #4
 8001bb6:	42ab      	cmp	r3, r5
 8001bb8:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001bbc:	d3da      	bcc.n	8001b74 <ai_dict8_dot_array_f32+0x284>
 8001bbe:	edd4 0a00 	vldr	s1, [r4]
 8001bc2:	ee30 0a80 	vadd.f32	s0, s1, s0
 8001bc6:	ed84 0a00 	vstr	s0, [r4]
 8001bca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bcc <ai_dict4_dot_array_f32>:
 8001bcc:	b4f0      	push	{r4, r5, r6, r7}
 8001bce:	9c04      	ldr	r4, [sp, #16]
 8001bd0:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001c68 <.text_7>
 8001bd4:	0865      	lsrs	r5, r4, #1
 8001bd6:	006d      	lsls	r5, r5, #1
 8001bd8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001bdc:	42ab      	cmp	r3, r5
 8001bde:	d22f      	bcs.n	8001c40 <ai_dict4_dot_array_f32+0x74>
 8001be0:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001be4:	edd3 1a00 	vldr	s3, [r3]
 8001be8:	edd3 0a01 	vldr	s1, [r3, #4]
 8001bec:	3308      	adds	r3, #8
 8001bee:	f006 070f 	and.w	r7, r6, #15
 8001bf2:	0936      	lsrs	r6, r6, #4
 8001bf4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8001bf8:	42ab      	cmp	r3, r5
 8001bfa:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001bfe:	ed96 2a00 	vldr	s4, [r6]
 8001c02:	ee02 0a21 	vmla.f32	s0, s4, s3
 8001c06:	ed9c 1a00 	vldr	s2, [ip]
 8001c0a:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001c0e:	d217      	bcs.n	8001c40 <ai_dict4_dot_array_f32+0x74>
 8001c10:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001c14:	ed93 1a00 	vldr	s2, [r3]
 8001c18:	ed93 2a01 	vldr	s4, [r3, #4]
 8001c1c:	3308      	adds	r3, #8
 8001c1e:	f006 070f 	and.w	r7, r6, #15
 8001c22:	0936      	lsrs	r6, r6, #4
 8001c24:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8001c28:	42ab      	cmp	r3, r5
 8001c2a:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001c2e:	edd6 1a00 	vldr	s3, [r6]
 8001c32:	ee01 0a81 	vmla.f32	s0, s3, s2
 8001c36:	eddc 0a00 	vldr	s1, [ip]
 8001c3a:	ee00 0a82 	vmla.f32	s0, s1, s4
 8001c3e:	d3cf      	bcc.n	8001be0 <ai_dict4_dot_array_f32+0x14>
 8001c40:	07e4      	lsls	r4, r4, #31
 8001c42:	d509      	bpl.n	8001c58 <ai_dict4_dot_array_f32+0x8c>
 8001c44:	7809      	ldrb	r1, [r1, #0]
 8001c46:	ed93 1a00 	vldr	s2, [r3]
 8001c4a:	0909      	lsrs	r1, r1, #4
 8001c4c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001c50:	edd2 0a00 	vldr	s1, [r2]
 8001c54:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001c58:	edd0 1a00 	vldr	s3, [r0]
 8001c5c:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001c60:	ed80 0a00 	vstr	s0, [r0]
 8001c64:	bcf0      	pop	{r4, r5, r6, r7}
 8001c66:	4770      	bx	lr

08001c68 <.text_7>:
 8001c68:	00000000 	.word	0x00000000

08001c6c <ai_dict_decompress_f32>:
 8001c6c:	b4f0      	push	{r4, r5, r6, r7}
 8001c6e:	4604      	mov	r4, r0
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	9805      	ldr	r0, [sp, #20]
 8001c74:	9e04      	ldr	r6, [sp, #16]
 8001c76:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8001c7a:	d003      	beq.n	8001c84 <ai_dict_decompress_f32+0x18>
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d03f      	beq.n	8001d00 <ai_dict_decompress_f32+0x94>
 8001c80:	bcf0      	pop	{r4, r5, r6, r7}
 8001c82:	4770      	bx	lr
 8001c84:	42ac      	cmp	r4, r5
 8001c86:	d25a      	bcs.n	8001d3e <ai_dict_decompress_f32+0xd2>
 8001c88:	0870      	lsrs	r0, r6, #1
 8001c8a:	d02f      	beq.n	8001cec <ai_dict_decompress_f32+0x80>
 8001c8c:	07c3      	lsls	r3, r0, #31
 8001c8e:	d50d      	bpl.n	8001cac <ai_dict_decompress_f32+0x40>
 8001c90:	780f      	ldrb	r7, [r1, #0]
 8001c92:	093f      	lsrs	r7, r7, #4
 8001c94:	f852 c027 	ldr.w	ip, [r2, r7, lsl #2]
 8001c98:	f8c4 c000 	str.w	ip, [r4]
 8001c9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ca0:	f003 030f 	and.w	r3, r3, #15
 8001ca4:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001ca8:	6067      	str	r7, [r4, #4]
 8001caa:	3408      	adds	r4, #8
 8001cac:	0840      	lsrs	r0, r0, #1
 8001cae:	d01d      	beq.n	8001cec <ai_dict_decompress_f32+0x80>
 8001cb0:	780b      	ldrb	r3, [r1, #0]
 8001cb2:	091b      	lsrs	r3, r3, #4
 8001cb4:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001cb8:	6027      	str	r7, [r4, #0]
 8001cba:	f811 cb01 	ldrb.w	ip, [r1], #1
 8001cbe:	f00c 0c0f 	and.w	ip, ip, #15
 8001cc2:	f852 302c 	ldr.w	r3, [r2, ip, lsl #2]
 8001cc6:	6063      	str	r3, [r4, #4]
 8001cc8:	f104 0308 	add.w	r3, r4, #8
 8001ccc:	780c      	ldrb	r4, [r1, #0]
 8001cce:	0924      	lsrs	r4, r4, #4
 8001cd0:	1e40      	subs	r0, r0, #1
 8001cd2:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 8001cd6:	601f      	str	r7, [r3, #0]
 8001cd8:	f811 cb01 	ldrb.w	ip, [r1], #1
 8001cdc:	f00c 0c0f 	and.w	ip, ip, #15
 8001ce0:	f852 402c 	ldr.w	r4, [r2, ip, lsl #2]
 8001ce4:	605c      	str	r4, [r3, #4]
 8001ce6:	f103 0408 	add.w	r4, r3, #8
 8001cea:	d1e1      	bne.n	8001cb0 <ai_dict_decompress_f32+0x44>
 8001cec:	07f0      	lsls	r0, r6, #31
 8001cee:	d5c9      	bpl.n	8001c84 <ai_dict_decompress_f32+0x18>
 8001cf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001cfa:	f844 7b04 	str.w	r7, [r4], #4
 8001cfe:	e7c1      	b.n	8001c84 <ai_dict_decompress_f32+0x18>
 8001d00:	42ac      	cmp	r4, r5
 8001d02:	d21c      	bcs.n	8001d3e <ai_dict_decompress_f32+0xd2>
 8001d04:	7808      	ldrb	r0, [r1, #0]
 8001d06:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8001d0a:	6020      	str	r0, [r4, #0]
 8001d0c:	1d20      	adds	r0, r4, #4
 8001d0e:	42a8      	cmp	r0, r5
 8001d10:	bf3f      	itttt	cc
 8001d12:	784c      	ldrbcc	r4, [r1, #1]
 8001d14:	f852 3024 	ldrcc.w	r3, [r2, r4, lsl #2]
 8001d18:	f840 3b04 	strcc.w	r3, [r0], #4
 8001d1c:	42a8      	cmpcc	r0, r5
 8001d1e:	d20e      	bcs.n	8001d3e <ai_dict_decompress_f32+0xd2>
 8001d20:	788b      	ldrb	r3, [r1, #2]
 8001d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d26:	f840 3b04 	str.w	r3, [r0], #4
 8001d2a:	42a8      	cmp	r0, r5
 8001d2c:	d207      	bcs.n	8001d3e <ai_dict_decompress_f32+0xd2>
 8001d2e:	78cc      	ldrb	r4, [r1, #3]
 8001d30:	1d09      	adds	r1, r1, #4
 8001d32:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8001d36:	1d04      	adds	r4, r0, #4
 8001d38:	42ac      	cmp	r4, r5
 8001d3a:	6003      	str	r3, [r0, #0]
 8001d3c:	d3e2      	bcc.n	8001d04 <ai_dict_decompress_f32+0x98>
 8001d3e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d40:	4770      	bx	lr

08001d42 <forward_conv2d>:
 8001d42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d46:	b0a9      	sub	sp, #164	; 0xa4
 8001d48:	4605      	mov	r5, r0
 8001d4a:	696b      	ldr	r3, [r5, #20]
 8001d4c:	8819      	ldrh	r1, [r3, #0]
 8001d4e:	2900      	cmp	r1, #0
 8001d50:	bf1a      	itte	ne
 8001d52:	6858      	ldrne	r0, [r3, #4]
 8001d54:	1d00      	addne	r0, r0, #4
 8001d56:	2004      	moveq	r0, #4
 8001d58:	6800      	ldr	r0, [r0, #0]
 8001d5a:	2800      	cmp	r0, #0
 8001d5c:	bf14      	ite	ne
 8001d5e:	6802      	ldrne	r2, [r0, #0]
 8001d60:	2200      	moveq	r2, #0
 8001d62:	2901      	cmp	r1, #1
 8001d64:	bfc6      	itte	gt
 8001d66:	6858      	ldrgt	r0, [r3, #4]
 8001d68:	3010      	addgt	r0, #16
 8001d6a:	2004      	movle	r0, #4
 8001d6c:	6800      	ldr	r0, [r0, #0]
 8001d6e:	2800      	cmp	r0, #0
 8001d70:	bf14      	ite	ne
 8001d72:	f8d0 a000 	ldrne.w	sl, [r0]
 8001d76:	f04f 0a00 	moveq.w	sl, #0
 8001d7a:	2902      	cmp	r1, #2
 8001d7c:	bfc6      	itte	gt
 8001d7e:	6858      	ldrgt	r0, [r3, #4]
 8001d80:	f100 091c 	addgt.w	r9, r0, #28
 8001d84:	f04f 0904 	movle.w	r9, #4
 8001d88:	f8d9 0000 	ldr.w	r0, [r9]
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	bf14      	ite	ne
 8001d90:	6806      	ldrne	r6, [r0, #0]
 8001d92:	2600      	moveq	r6, #0
 8001d94:	2902      	cmp	r1, #2
 8001d96:	dd0a      	ble.n	8001dae <forward_conv2d+0x6c>
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f113 0118 	adds.w	r1, r3, #24
 8001d9e:	d006      	beq.n	8001dae <forward_conv2d+0x6c>
 8001da0:	8b1f      	ldrh	r7, [r3, #24]
 8001da2:	2f01      	cmp	r7, #1
 8001da4:	dd03      	ble.n	8001dae <forward_conv2d+0x6c>
 8001da6:	69d9      	ldr	r1, [r3, #28]
 8001da8:	b109      	cbz	r1, 8001dae <forward_conv2d+0x6c>
 8001daa:	6849      	ldr	r1, [r1, #4]
 8001dac:	e000      	b.n	8001db0 <forward_conv2d+0x6e>
 8001dae:	2100      	movs	r1, #0
 8001db0:	b100      	cbz	r0, 8001db4 <forward_conv2d+0x72>
 8001db2:	6880      	ldr	r0, [r0, #8]
 8001db4:	68d7      	ldr	r7, [r2, #12]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	931b      	str	r3, [sp, #108]	; 0x6c
 8001dba:	f8da c00c 	ldr.w	ip, [sl, #12]
 8001dbe:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8001dc2:	f8cd 9010 	str.w	r9, [sp, #16]
 8001dc6:	f8dc 900c 	ldr.w	r9, [ip, #12]
 8001dca:	f8dc e008 	ldr.w	lr, [ip, #8]
 8001dce:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 8001dd2:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8001dd6:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8001dda:	68bf      	ldr	r7, [r7, #8]
 8001ddc:	9720      	str	r7, [sp, #128]	; 0x80
 8001dde:	f8d5 e024 	ldr.w	lr, [r5, #36]	; 0x24
 8001de2:	f8ad e040 	strh.w	lr, [sp, #64]	; 0x40
 8001de6:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 8001de8:	971f      	str	r7, [sp, #124]	; 0x7c
 8001dea:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001dec:	f8d5 e02c 	ldr.w	lr, [r5, #44]	; 0x2c
 8001df0:	681f      	ldr	r7, [r3, #0]
 8001df2:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001df6:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 8001dfa:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8001dfc:	9418      	str	r4, [sp, #96]	; 0x60
 8001dfe:	68f3      	ldr	r3, [r6, #12]
 8001e00:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8001e04:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 8001e08:	685c      	ldr	r4, [r3, #4]
 8001e0a:	9412      	str	r4, [sp, #72]	; 0x48
 8001e0c:	f8d5 e018 	ldr.w	lr, [r5, #24]
 8001e10:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 8001e14:	6994      	ldr	r4, [r2, #24]
 8001e16:	68a3      	ldr	r3, [r4, #8]
 8001e18:	931d      	str	r3, [sp, #116]	; 0x74
 8001e1a:	f8d6 c018 	ldr.w	ip, [r6, #24]
 8001e1e:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8001e22:	b119      	cbz	r1, 8001e2c <forward_conv2d+0xea>
 8001e24:	698a      	ldr	r2, [r1, #24]
 8001e26:	6893      	ldr	r3, [r2, #8]
 8001e28:	9317      	str	r3, [sp, #92]	; 0x5c
 8001e2a:	e003      	b.n	8001e34 <forward_conv2d+0xf2>
 8001e2c:	f04f 0e00 	mov.w	lr, #0
 8001e30:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
 8001e34:	f8da 1018 	ldr.w	r1, [sl, #24]
 8001e38:	688a      	ldr	r2, [r1, #8]
 8001e3a:	9203      	str	r2, [sp, #12]
 8001e3c:	69e9      	ldr	r1, [r5, #28]
 8001e3e:	b118      	cbz	r0, 8001e48 <forward_conv2d+0x106>
 8001e40:	6981      	ldr	r1, [r0, #24]
 8001e42:	688a      	ldr	r2, [r1, #8]
 8001e44:	9215      	str	r2, [sp, #84]	; 0x54
 8001e46:	e005      	b.n	8001e54 <forward_conv2d+0x112>
 8001e48:	b111      	cbz	r1, 8001e50 <forward_conv2d+0x10e>
 8001e4a:	688a      	ldr	r2, [r1, #8]
 8001e4c:	9215      	str	r2, [sp, #84]	; 0x54
 8001e4e:	e001      	b.n	8001e54 <forward_conv2d+0x112>
 8001e50:	2300      	movs	r3, #0
 8001e52:	9315      	str	r3, [sp, #84]	; 0x54
 8001e54:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001e56:	9202      	str	r2, [sp, #8]
 8001e58:	b920      	cbnz	r0, 8001e64 <forward_conv2d+0x122>
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	9124      	str	r1, [sp, #144]	; 0x90
 8001e60:	9223      	str	r2, [sp, #140]	; 0x8c
 8001e62:	e008      	b.n	8001e76 <forward_conv2d+0x134>
 8001e64:	6941      	ldr	r1, [r0, #20]
 8001e66:	688a      	ldr	r2, [r1, #8]
 8001e68:	9224      	str	r2, [sp, #144]	; 0x90
 8001e6a:	6980      	ldr	r0, [r0, #24]
 8001e6c:	6841      	ldr	r1, [r0, #4]
 8001e6e:	6800      	ldr	r0, [r0, #0]
 8001e70:	f004 fbee 	bl	8006650 <ai_array_get_byte_size>
 8001e74:	9023      	str	r0, [sp, #140]	; 0x8c
 8001e76:	6a28      	ldr	r0, [r5, #32]
 8001e78:	2800      	cmp	r0, #0
 8001e7a:	bf12      	itee	ne
 8001e7c:	9022      	strne	r0, [sp, #136]	; 0x88
 8001e7e:	f8df 1d7c 	ldreq.w	r1, [pc, #3452]	; 8002bfc <.text_15>
 8001e82:	9122      	streq	r1, [sp, #136]	; 0x88
 8001e84:	a818      	add	r0, sp, #96	; 0x60
 8001e86:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001e88:	8803      	ldrh	r3, [r0, #0]
 8001e8a:	1e51      	subs	r1, r2, #1
 8001e8c:	1e5b      	subs	r3, r3, #1
 8001e8e:	fb03 2201 	mla	r2, r3, r1, r2
 8001e92:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001e94:	9216      	str	r2, [sp, #88]	; 0x58
 8001e96:	aa19      	add	r2, sp, #100	; 0x64
 8001e98:	8813      	ldrh	r3, [r2, #0]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	1e48      	subs	r0, r1, #1
 8001e9e:	1e5b      	subs	r3, r3, #1
 8001ea0:	fb03 1100 	mla	r1, r3, r0, r1
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	911c      	str	r1, [sp, #112]	; 0x70
 8001ea8:	69b6      	ldr	r6, [r6, #24]
 8001eaa:	4683      	mov	fp, r0
 8001eac:	6831      	ldr	r1, [r6, #0]
 8001eae:	11cb      	asrs	r3, r1, #7
 8001eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eb4:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8001eb8:	1449      	asrs	r1, r1, #17
 8001eba:	f001 010f 	and.w	r1, r1, #15
 8001ebe:	f00c 0c03 	and.w	ip, ip, #3
 8001ec2:	2904      	cmp	r1, #4
 8001ec4:	fa23 f30c 	lsr.w	r3, r3, ip
 8001ec8:	bf14      	ite	ne
 8001eca:	2908      	cmpne	r1, #8
 8001ecc:	68f2      	ldreq	r2, [r6, #12]
 8001ece:	b1da      	cbz	r2, 8001f08 <forward_conv2d+0x1c6>
 8001ed0:	6969      	ldr	r1, [r5, #20]
 8001ed2:	880d      	ldrh	r5, [r1, #0]
 8001ed4:	2d04      	cmp	r5, #4
 8001ed6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8001ed8:	bfa6      	itte	ge
 8001eda:	6849      	ldrge	r1, [r1, #4]
 8001edc:	3128      	addge	r1, #40	; 0x28
 8001ede:	2104      	movlt	r1, #4
 8001ee0:	6809      	ldr	r1, [r1, #0]
 8001ee2:	2900      	cmp	r1, #0
 8001ee4:	bf1f      	itttt	ne
 8001ee6:	6808      	ldrne	r0, [r1, #0]
 8001ee8:	2800      	cmpne	r0, #0
 8001eea:	6981      	ldrne	r1, [r0, #24]
 8001eec:	f8d1 b008 	ldrne.w	fp, [r1, #8]
 8001ef0:	6980      	ldr	r0, [r0, #24]
 8001ef2:	6841      	ldr	r1, [r0, #4]
 8001ef4:	9500      	str	r5, [sp, #0]
 8001ef6:	9101      	str	r1, [sp, #4]
 8001ef8:	68b1      	ldr	r1, [r6, #8]
 8001efa:	4658      	mov	r0, fp
 8001efc:	f7ff feb6 	bl	8001c6c <ai_dict_decompress_f32>
 8001f00:	f1bb 0f00 	cmp.w	fp, #0
 8001f04:	bf18      	it	ne
 8001f06:	465c      	movne	r4, fp
 8001f08:	b2bf      	uxth	r7, r7
 8001f0a:	427f      	negs	r7, r7
 8001f0c:	f1b9 0f00 	cmp.w	r9, #0
 8001f10:	d06f      	beq.n	8001ff2 <forward_conv2d+0x2b0>
 8001f12:	464a      	mov	r2, r9
 8001f14:	f1c8 0800 	rsb	r8, r8, #0
 8001f18:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
 8001f1c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8001f20:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8001f24:	9427      	str	r4, [sp, #156]	; 0x9c
 8001f26:	9711      	str	r7, [sp, #68]	; 0x44
 8001f28:	9e02      	ldr	r6, [sp, #8]
 8001f2a:	9221      	str	r2, [sp, #132]	; 0x84
 8001f2c:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001f2e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001f30:	9025      	str	r0, [sp, #148]	; 0x94
 8001f32:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001f34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001f36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001f38:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8001f3a:	f8cd 9008 	str.w	r9, [sp, #8]
 8001f3e:	4240      	negs	r0, r0
 8001f40:	950d      	str	r5, [sp, #52]	; 0x34
 8001f42:	bfd8      	it	le
 8001f44:	2000      	movle	r0, #0
 8001f46:	1a89      	subs	r1, r1, r2
 8001f48:	4299      	cmp	r1, r3
 8001f4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8001f4c:	9009      	str	r0, [sp, #36]	; 0x24
 8001f4e:	bf28      	it	cs
 8001f50:	4619      	movcs	r1, r3
 8001f52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001f54:	910a      	str	r1, [sp, #40]	; 0x28
 8001f56:	b212      	sxth	r2, r2
 8001f58:	981e      	ldr	r0, [sp, #120]	; 0x78
 8001f5a:	920f      	str	r2, [sp, #60]	; 0x3c
 8001f5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001f5e:	920c      	str	r2, [sp, #48]	; 0x30
 8001f60:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001f68:	930e      	str	r3, [sp, #56]	; 0x38
 8001f6a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8001f6c:	9008      	str	r0, [sp, #32]
 8001f6e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001f70:	9107      	str	r1, [sp, #28]
 8001f72:	9914      	ldr	r1, [sp, #80]	; 0x50
 8001f74:	9206      	str	r2, [sp, #24]
 8001f76:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001f78:	930b      	str	r3, [sp, #44]	; 0x2c
 8001f7a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001f7c:	9005      	str	r0, [sp, #20]
 8001f7e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001f80:	9104      	str	r1, [sp, #16]
 8001f82:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001f84:	9203      	str	r2, [sp, #12]
 8001f86:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001f88:	9001      	str	r0, [sp, #4]
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	9100      	str	r1, [sp, #0]
 8001f8e:	4659      	mov	r1, fp
 8001f90:	f7ff f9bc 	bl	800130c <ai_conv2d_stripe_f32>
 8001f94:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001f96:	b300      	cbz	r0, 8001fda <forward_conv2d+0x298>
 8001f98:	f8cd a000 	str.w	sl, [sp]
 8001f9c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001f9e:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8001fa0:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8001fa4:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8001fa6:	4682      	mov	sl, r0
 8001fa8:	9800      	ldr	r0, [sp, #0]
 8001faa:	462b      	mov	r3, r5
 8001fac:	464a      	mov	r2, r9
 8001fae:	443d      	add	r5, r7
 8001fb0:	6981      	ldr	r1, [r0, #24]
 8001fb2:	f8c1 b008 	str.w	fp, [r1, #8]
 8001fb6:	eb0b 0b89 	add.w	fp, fp, r9, lsl #2
 8001fba:	4608      	mov	r0, r1
 8001fbc:	47a0      	blx	r4
 8001fbe:	1ba9      	subs	r1, r5, r6
 8001fc0:	4541      	cmp	r1, r8
 8001fc2:	bfa8      	it	ge
 8001fc4:	4635      	movge	r5, r6
 8001fc6:	f1ba 0a01 	subs.w	sl, sl, #1
 8001fca:	d1ed      	bne.n	8001fa8 <forward_conv2d+0x266>
 8001fcc:	f8dd a000 	ldr.w	sl, [sp]
 8001fd0:	9515      	str	r5, [sp, #84]	; 0x54
 8001fd2:	9724      	str	r7, [sp, #144]	; 0x90
 8001fd4:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
 8001fd8:	9422      	str	r4, [sp, #136]	; 0x88
 8001fda:	f8da 0018 	ldr.w	r0, [sl, #24]
 8001fde:	68c1      	ldr	r1, [r0, #12]
 8001fe0:	6081      	str	r1, [r0, #8]
 8001fe2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001fe4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001fe6:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001fe8:	189a      	adds	r2, r3, r2
 8001fea:	9211      	str	r2, [sp, #68]	; 0x44
 8001fec:	1e49      	subs	r1, r1, #1
 8001fee:	9121      	str	r1, [sp, #132]	; 0x84
 8001ff0:	d19c      	bne.n	8001f2c <forward_conv2d+0x1ea>
 8001ff2:	b029      	add	sp, #164	; 0xa4
 8001ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001ff8 <forward_conv2d_nl_pool>:
 8001ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ffc:	b0b9      	sub	sp, #228	; 0xe4
 8001ffe:	4604      	mov	r4, r0
 8002000:	6963      	ldr	r3, [r4, #20]
 8002002:	8819      	ldrh	r1, [r3, #0]
 8002004:	2900      	cmp	r1, #0
 8002006:	bf1a      	itte	ne
 8002008:	6858      	ldrne	r0, [r3, #4]
 800200a:	1d00      	addne	r0, r0, #4
 800200c:	2004      	moveq	r0, #4
 800200e:	6800      	ldr	r0, [r0, #0]
 8002010:	2800      	cmp	r0, #0
 8002012:	bf14      	ite	ne
 8002014:	6802      	ldrne	r2, [r0, #0]
 8002016:	2200      	moveq	r2, #0
 8002018:	2901      	cmp	r1, #1
 800201a:	bfc6      	itte	gt
 800201c:	6858      	ldrgt	r0, [r3, #4]
 800201e:	3010      	addgt	r0, #16
 8002020:	2004      	movle	r0, #4
 8002022:	6800      	ldr	r0, [r0, #0]
 8002024:	2800      	cmp	r0, #0
 8002026:	bf14      	ite	ne
 8002028:	f8d0 a000 	ldrne.w	sl, [r0]
 800202c:	f04f 0a00 	moveq.w	sl, #0
 8002030:	2902      	cmp	r1, #2
 8002032:	bfc6      	itte	gt
 8002034:	6858      	ldrgt	r0, [r3, #4]
 8002036:	f100 071c 	addgt.w	r7, r0, #28
 800203a:	2704      	movle	r7, #4
 800203c:	6838      	ldr	r0, [r7, #0]
 800203e:	2800      	cmp	r0, #0
 8002040:	bf14      	ite	ne
 8002042:	6806      	ldrne	r6, [r0, #0]
 8002044:	2600      	moveq	r6, #0
 8002046:	2902      	cmp	r1, #2
 8002048:	dd0c      	ble.n	8002064 <forward_conv2d_nl_pool+0x6c>
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f113 0118 	adds.w	r1, r3, #24
 8002050:	d008      	beq.n	8002064 <forward_conv2d_nl_pool+0x6c>
 8002052:	f8b3 c018 	ldrh.w	ip, [r3, #24]
 8002056:	f1bc 0f01 	cmp.w	ip, #1
 800205a:	dd03      	ble.n	8002064 <forward_conv2d_nl_pool+0x6c>
 800205c:	69d9      	ldr	r1, [r3, #28]
 800205e:	b109      	cbz	r1, 8002064 <forward_conv2d_nl_pool+0x6c>
 8002060:	6849      	ldr	r1, [r1, #4]
 8002062:	e000      	b.n	8002066 <forward_conv2d_nl_pool+0x6e>
 8002064:	2100      	movs	r1, #0
 8002066:	b100      	cbz	r0, 800206a <forward_conv2d_nl_pool+0x72>
 8002068:	6880      	ldr	r0, [r0, #8]
 800206a:	68d7      	ldr	r7, [r2, #12]
 800206c:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8002070:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
 8002074:	f8da e00c 	ldr.w	lr, [sl, #12]
 8002078:	f8de 8004 	ldr.w	r8, [lr, #4]
 800207c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8002080:	f8de 900c 	ldr.w	r9, [lr, #12]
 8002084:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8002088:	f8de e008 	ldr.w	lr, [lr, #8]
 800208c:	f8cd e084 	str.w	lr, [sp, #132]	; 0x84
 8002090:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8002094:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 8002098:	68bf      	ldr	r7, [r7, #8]
 800209a:	972d      	str	r7, [sp, #180]	; 0xb4
 800209c:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
 80020a0:	f8ad e04c 	strh.w	lr, [sp, #76]	; 0x4c
 80020a4:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 80020a6:	9720      	str	r7, [sp, #128]	; 0x80
 80020a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020aa:	f8d4 e018 	ldr.w	lr, [r4, #24]
 80020ae:	881f      	ldrh	r7, [r3, #0]
 80020b0:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 80020b4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80020b8:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
 80020bc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80020be:	951f      	str	r5, [sp, #124]	; 0x7c
 80020c0:	f8d4 e030 	ldr.w	lr, [r4, #48]	; 0x30
 80020c4:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 80020c8:	68f3      	ldr	r3, [r6, #12]
 80020ca:	685d      	ldr	r5, [r3, #4]
 80020cc:	951a      	str	r5, [sp, #104]	; 0x68
 80020ce:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80020d2:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 80020d6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80020d8:	952b      	str	r5, [sp, #172]	; 0xac
 80020da:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 80020de:	f8cd e0a8 	str.w	lr, [sp, #168]	; 0xa8
 80020e2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80020e4:	9511      	str	r5, [sp, #68]	; 0x44
 80020e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80020e8:	681d      	ldr	r5, [r3, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	9329      	str	r3, [sp, #164]	; 0xa4
 80020ee:	f8d2 e018 	ldr.w	lr, [r2, #24]
 80020f2:	f8de b008 	ldr.w	fp, [lr, #8]
 80020f6:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
 80020fa:	69b3      	ldr	r3, [r6, #24]
 80020fc:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8002100:	b119      	cbz	r1, 800210a <forward_conv2d_nl_pool+0x112>
 8002102:	698a      	ldr	r2, [r1, #24]
 8002104:	6893      	ldr	r3, [r2, #8]
 8002106:	931d      	str	r3, [sp, #116]	; 0x74
 8002108:	e003      	b.n	8002112 <forward_conv2d_nl_pool+0x11a>
 800210a:	f04f 0e00 	mov.w	lr, #0
 800210e:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
 8002112:	69e1      	ldr	r1, [r4, #28]
 8002114:	b118      	cbz	r0, 800211e <forward_conv2d_nl_pool+0x126>
 8002116:	6981      	ldr	r1, [r0, #24]
 8002118:	688a      	ldr	r2, [r1, #8]
 800211a:	921c      	str	r2, [sp, #112]	; 0x70
 800211c:	e005      	b.n	800212a <forward_conv2d_nl_pool+0x132>
 800211e:	b111      	cbz	r1, 8002126 <forward_conv2d_nl_pool+0x12e>
 8002120:	688a      	ldr	r2, [r1, #8]
 8002122:	921c      	str	r2, [sp, #112]	; 0x70
 8002124:	e001      	b.n	800212a <forward_conv2d_nl_pool+0x132>
 8002126:	2300      	movs	r3, #0
 8002128:	931c      	str	r3, [sp, #112]	; 0x70
 800212a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800212c:	9202      	str	r2, [sp, #8]
 800212e:	b920      	cbnz	r0, 800213a <forward_conv2d_nl_pool+0x142>
 8002130:	2100      	movs	r1, #0
 8002132:	2201      	movs	r2, #1
 8002134:	9116      	str	r1, [sp, #88]	; 0x58
 8002136:	9215      	str	r2, [sp, #84]	; 0x54
 8002138:	e008      	b.n	800214c <forward_conv2d_nl_pool+0x154>
 800213a:	6941      	ldr	r1, [r0, #20]
 800213c:	688a      	ldr	r2, [r1, #8]
 800213e:	9216      	str	r2, [sp, #88]	; 0x58
 8002140:	6980      	ldr	r0, [r0, #24]
 8002142:	6841      	ldr	r1, [r0, #4]
 8002144:	6800      	ldr	r0, [r0, #0]
 8002146:	f004 fa83 	bl	8006650 <ai_array_get_byte_size>
 800214a:	9015      	str	r0, [sp, #84]	; 0x54
 800214c:	6a20      	ldr	r0, [r4, #32]
 800214e:	2800      	cmp	r0, #0
 8002150:	bf12      	itee	ne
 8002152:	9030      	strne	r0, [sp, #192]	; 0xc0
 8002154:	f8df 1aa4 	ldreq.w	r1, [pc, #2724]	; 8002bfc <.text_15>
 8002158:	9130      	streq	r1, [sp, #192]	; 0xc0
 800215a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800215c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800215e:	9227      	str	r2, [sp, #156]	; 0x9c
 8002160:	aa1e      	add	r2, sp, #120	; 0x78
 8002162:	8813      	ldrh	r3, [r2, #0]
 8002164:	1e41      	subs	r1, r0, #1
 8002166:	1e5b      	subs	r3, r3, #1
 8002168:	fb03 0001 	mla	r0, r3, r1, r0
 800216c:	ab1f      	add	r3, sp, #124	; 0x7c
 800216e:	f8b3 e000 	ldrh.w	lr, [r3]
 8002172:	9018      	str	r0, [sp, #96]	; 0x60
 8002174:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002176:	9818      	ldr	r0, [sp, #96]	; 0x60
 8002178:	1e4a      	subs	r2, r1, #1
 800217a:	f1ae 0e01 	sub.w	lr, lr, #1
 800217e:	fb0e 1102 	mla	r1, lr, r2, r1
 8002182:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002184:	9126      	str	r1, [sp, #152]	; 0x98
 8002186:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002188:	9112      	str	r1, [sp, #72]	; 0x48
 800218a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800218c:	1a12      	subs	r2, r2, r0
 800218e:	18ba      	adds	r2, r7, r2
 8002190:	fa12 f089 	uxtah	r0, r2, r9
 8002194:	2200      	movs	r2, #0
 8002196:	fbb0 f1f1 	udiv	r1, r0, r1
 800219a:	1c49      	adds	r1, r1, #1
 800219c:	2000      	movs	r0, #0
 800219e:	9114      	str	r1, [sp, #80]	; 0x50
 80021a0:	69b6      	ldr	r6, [r6, #24]
 80021a2:	4681      	mov	r9, r0
 80021a4:	6831      	ldr	r1, [r6, #0]
 80021a6:	11cb      	asrs	r3, r1, #7
 80021a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021ac:	ea4f 5c61 	mov.w	ip, r1, asr #21
 80021b0:	1449      	asrs	r1, r1, #17
 80021b2:	f001 010f 	and.w	r1, r1, #15
 80021b6:	f00c 0c03 	and.w	ip, ip, #3
 80021ba:	2904      	cmp	r1, #4
 80021bc:	fa23 f30c 	lsr.w	r3, r3, ip
 80021c0:	bf14      	ite	ne
 80021c2:	2908      	cmpne	r1, #8
 80021c4:	68f2      	ldreq	r2, [r6, #12]
 80021c6:	b302      	cbz	r2, 800220a <forward_conv2d_nl_pool+0x212>
 80021c8:	6961      	ldr	r1, [r4, #20]
 80021ca:	f8b1 c000 	ldrh.w	ip, [r1]
 80021ce:	f1bc 0f04 	cmp.w	ip, #4
 80021d2:	f8dd c08c 	ldr.w	ip, [sp, #140]	; 0x8c
 80021d6:	bfa6      	itte	ge
 80021d8:	6849      	ldrge	r1, [r1, #4]
 80021da:	3128      	addge	r1, #40	; 0x28
 80021dc:	2104      	movlt	r1, #4
 80021de:	6809      	ldr	r1, [r1, #0]
 80021e0:	2900      	cmp	r1, #0
 80021e2:	bf1f      	itttt	ne
 80021e4:	6848      	ldrne	r0, [r1, #4]
 80021e6:	2800      	cmpne	r0, #0
 80021e8:	6981      	ldrne	r1, [r0, #24]
 80021ea:	f8d1 9008 	ldrne.w	r9, [r1, #8]
 80021ee:	6980      	ldr	r0, [r0, #24]
 80021f0:	6841      	ldr	r1, [r0, #4]
 80021f2:	f8cd c000 	str.w	ip, [sp]
 80021f6:	9101      	str	r1, [sp, #4]
 80021f8:	68b1      	ldr	r1, [r6, #8]
 80021fa:	4648      	mov	r0, r9
 80021fc:	f7ff fd36 	bl	8001c6c <ai_dict_decompress_f32>
 8002200:	f1b9 0f00 	cmp.w	r9, #0
 8002204:	bf18      	it	ne
 8002206:	4648      	movne	r0, r9
 8002208:	d100      	bne.n	800220c <forward_conv2d_nl_pool+0x214>
 800220a:	4658      	mov	r0, fp
 800220c:	6963      	ldr	r3, [r4, #20]
 800220e:	2600      	movs	r6, #0
 8002210:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8002214:	f8da 1018 	ldr.w	r1, [sl, #24]
 8002218:	b22d      	sxth	r5, r5
 800221a:	f1c8 0800 	rsb	r8, r8, #0
 800221e:	881c      	ldrh	r4, [r3, #0]
 8002220:	46aa      	mov	sl, r5
 8002222:	2c04      	cmp	r4, #4
 8002224:	bfa6      	itte	ge
 8002226:	685b      	ldrge	r3, [r3, #4]
 8002228:	3328      	addge	r3, #40	; 0x28
 800222a:	2304      	movlt	r3, #4
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	bf14      	ite	ne
 8002232:	f8d3 9000 	ldrne.w	r9, [r3]
 8002236:	46b1      	moveq	r9, r6
 8002238:	f8d9 4018 	ldr.w	r4, [r9, #24]
 800223c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002240:	427f      	negs	r7, r7
 8002242:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8002246:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
 800224e:	435c      	muls	r4, r3
 8002250:	fb0e f404 	mul.w	r4, lr, r4
 8002254:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 8002258:	9437      	str	r4, [sp, #220]	; 0xdc
 800225a:	ac11      	add	r4, sp, #68	; 0x44
 800225c:	f9b4 c000 	ldrsh.w	ip, [r4]
 8002260:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002262:	fb0e f404 	mul.w	r4, lr, r4
 8002266:	9435      	str	r4, [sp, #212]	; 0xd4
 8002268:	ac12      	add	r4, sp, #72	; 0x48
 800226a:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
 800226e:	f9b4 c000 	ldrsh.w	ip, [r4]
 8002272:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002274:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
 8002278:	435c      	muls	r4, r3
 800227a:	9433      	str	r4, [sp, #204]	; 0xcc
 800227c:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800227e:	2c00      	cmp	r4, #0
 8002280:	f000 812d 	beq.w	80024de <forward_conv2d_nl_pool+0x4e6>
 8002284:	9038      	str	r0, [sp, #224]	; 0xe0
 8002286:	462c      	mov	r4, r5
 8002288:	9125      	str	r1, [sp, #148]	; 0x94
 800228a:	962f      	str	r6, [sp, #188]	; 0xbc
 800228c:	962e      	str	r6, [sp, #184]	; 0xb8
 800228e:	9324      	str	r3, [sp, #144]	; 0x90
 8002290:	9717      	str	r7, [sp, #92]	; 0x5c
 8002292:	9d02      	ldr	r5, [sp, #8]
 8002294:	9814      	ldr	r0, [sp, #80]	; 0x50
 8002296:	2800      	cmp	r0, #0
 8002298:	dd68      	ble.n	800236c <forward_conv2d_nl_pool+0x374>
 800229a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800229c:	9932      	ldr	r1, [sp, #200]	; 0xc8
 800229e:	9131      	str	r1, [sp, #196]	; 0xc4
 80022a0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80022a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80022a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80022a6:	4240      	negs	r0, r0
 80022a8:	9e26      	ldr	r6, [sp, #152]	; 0x98
 80022aa:	960d      	str	r6, [sp, #52]	; 0x34
 80022ac:	bfd8      	it	le
 80022ae:	2000      	movle	r0, #0
 80022b0:	1a89      	subs	r1, r1, r2
 80022b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80022b4:	4299      	cmp	r1, r3
 80022b6:	9009      	str	r0, [sp, #36]	; 0x24
 80022b8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80022ba:	b212      	sxth	r2, r2
 80022bc:	9008      	str	r0, [sp, #32]
 80022be:	920f      	str	r2, [sp, #60]	; 0x3c
 80022c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80022c2:	bf28      	it	cs
 80022c4:	4619      	movcs	r1, r3
 80022c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80022c8:	920c      	str	r2, [sp, #48]	; 0x30
 80022ca:	910a      	str	r1, [sp, #40]	; 0x28
 80022cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80022ce:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80022d2:	9206      	str	r2, [sp, #24]
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80022d8:	930e      	str	r3, [sp, #56]	; 0x38
 80022da:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80022dc:	9107      	str	r1, [sp, #28]
 80022de:	981a      	ldr	r0, [sp, #104]	; 0x68
 80022e0:	9203      	str	r2, [sp, #12]
 80022e2:	9924      	ldr	r1, [sp, #144]	; 0x90
 80022e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80022e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80022e8:	9005      	str	r0, [sp, #20]
 80022ea:	9810      	ldr	r0, [sp, #64]	; 0x40
 80022ec:	9104      	str	r1, [sp, #16]
 80022ee:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80022f0:	9200      	str	r2, [sp, #0]
 80022f2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80022f4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80022f6:	9002      	str	r0, [sp, #8]
 80022f8:	9101      	str	r1, [sp, #4]
 80022fa:	4659      	mov	r1, fp
 80022fc:	2000      	movs	r0, #0
 80022fe:	f7ff f805 	bl	800130c <ai_conv2d_stripe_f32>
 8002302:	9824      	ldr	r0, [sp, #144]	; 0x90
 8002304:	b350      	cbz	r0, 800235c <forward_conv2d_nl_pool+0x364>
 8002306:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8002308:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800230a:	9502      	str	r5, [sp, #8]
 800230c:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 8002310:	ea4f 0500 	mov.w	r5, r0
 8002314:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8002318:	463b      	mov	r3, r7
 800231a:	4632      	mov	r2, r6
 800231c:	f8c1 b008 	str.w	fp, [r1, #8]
 8002320:	eb0b 0b86 	add.w	fp, fp, r6, lsl #2
 8002324:	4608      	mov	r0, r1
 8002326:	47c0      	blx	r8
 8002328:	9816      	ldr	r0, [sp, #88]	; 0x58
 800232a:	9902      	ldr	r1, [sp, #8]
 800232c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800232e:	4407      	add	r7, r0
 8002330:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8002334:	1a79      	subs	r1, r7, r1
 8002336:	4291      	cmp	r1, r2
 8002338:	6841      	ldr	r1, [r0, #4]
 800233a:	68c0      	ldr	r0, [r0, #12]
 800233c:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8002340:	bfa8      	it	ge
 8002342:	9f02      	ldrge	r7, [sp, #8]
 8002344:	4593      	cmp	fp, r2
 8002346:	d302      	bcc.n	800234e <forward_conv2d_nl_pool+0x356>
 8002348:	0089      	lsls	r1, r1, #2
 800234a:	4249      	negs	r1, r1
 800234c:	448b      	add	fp, r1
 800234e:	1e6d      	subs	r5, r5, #1
 8002350:	d1e0      	bne.n	8002314 <forward_conv2d_nl_pool+0x31c>
 8002352:	9610      	str	r6, [sp, #64]	; 0x40
 8002354:	971c      	str	r7, [sp, #112]	; 0x70
 8002356:	9d02      	ldr	r5, [sp, #8]
 8002358:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
 800235c:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8002360:	f10a 0a01 	add.w	sl, sl, #1
 8002364:	fa0f fa8a 	sxth.w	sl, sl
 8002368:	68c1      	ldr	r1, [r0, #12]
 800236a:	6081      	str	r1, [r0, #8]
 800236c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800236e:	1e40      	subs	r0, r0, #1
 8002370:	9014      	str	r0, [sp, #80]	; 0x50
 8002372:	d56d      	bpl.n	8002450 <forward_conv2d_nl_pool+0x458>
 8002374:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8002376:	4659      	mov	r1, fp
 8002378:	fb00 f00a 	mul.w	r0, r0, sl
 800237c:	0080      	lsls	r0, r0, #2
 800237e:	4240      	negs	r0, r0
 8002380:	eb0b 0200 	add.w	r2, fp, r0
 8002384:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8002388:	68c3      	ldr	r3, [r0, #12]
 800238a:	429a      	cmp	r2, r3
 800238c:	bf3c      	itt	cc
 800238e:	6847      	ldrcc	r7, [r0, #4]
 8002390:	eb02 0287 	addcc.w	r2, r2, r7, lsl #2
 8002394:	4293      	cmp	r3, r2
 8002396:	d237      	bcs.n	8002408 <forward_conv2d_nl_pool+0x410>
 8002398:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 800239a:	45b2      	cmp	sl, r6
 800239c:	d034      	beq.n	8002408 <forward_conv2d_nl_pool+0x410>
 800239e:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80023a2:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 80023a6:	429a      	cmp	r2, r3
 80023a8:	f080 802e 	bcs.w	8002408 <forward_conv2d_nl_pool+0x410>
 80023ac:	ed92 0a00 	vldr	s0, [r2]
 80023b0:	1d12      	adds	r2, r2, #4
 80023b2:	ed8b 0a00 	vstr	s0, [fp]
 80023b6:	68c6      	ldr	r6, [r0, #12]
 80023b8:	6843      	ldr	r3, [r0, #4]
 80023ba:	eb06 0783 	add.w	r7, r6, r3, lsl #2
 80023be:	42ba      	cmp	r2, r7
 80023c0:	d222      	bcs.n	8002408 <forward_conv2d_nl_pool+0x410>
 80023c2:	edd2 0a00 	vldr	s1, [r2]
 80023c6:	1d12      	adds	r2, r2, #4
 80023c8:	edcb 0a01 	vstr	s1, [fp, #4]
 80023cc:	68c3      	ldr	r3, [r0, #12]
 80023ce:	6846      	ldr	r6, [r0, #4]
 80023d0:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 80023d4:	42ba      	cmp	r2, r7
 80023d6:	d217      	bcs.n	8002408 <forward_conv2d_nl_pool+0x410>
 80023d8:	ed92 0a00 	vldr	s0, [r2]
 80023dc:	1d12      	adds	r2, r2, #4
 80023de:	ed8b 0a02 	vstr	s0, [fp, #8]
 80023e2:	68c3      	ldr	r3, [r0, #12]
 80023e4:	6846      	ldr	r6, [r0, #4]
 80023e6:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 80023ea:	42ba      	cmp	r2, r7
 80023ec:	d20c      	bcs.n	8002408 <forward_conv2d_nl_pool+0x410>
 80023ee:	edd2 0a00 	vldr	s1, [r2]
 80023f2:	1d12      	adds	r2, r2, #4
 80023f4:	edcb 0a03 	vstr	s1, [fp, #12]
 80023f8:	68c3      	ldr	r3, [r0, #12]
 80023fa:	6846      	ldr	r6, [r0, #4]
 80023fc:	f10b 0b10 	add.w	fp, fp, #16
 8002400:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8002404:	42ba      	cmp	r2, r7
 8002406:	d3d1      	bcc.n	80023ac <forward_conv2d_nl_pool+0x3b4>
 8002408:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800240a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800240c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800240e:	189a      	adds	r2, r3, r2
 8002410:	eba2 020a 	sub.w	r2, r2, sl
 8002414:	922f      	str	r2, [sp, #188]	; 0xbc
 8002416:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8002418:	eb01 0b82 	add.w	fp, r1, r2, lsl #2
 800241c:	68c1      	ldr	r1, [r0, #12]
 800241e:	6843      	ldr	r3, [r0, #4]
 8002420:	44b2      	add	sl, r6
 8002422:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8002426:	fa0f fa8a 	sxth.w	sl, sl
 800242a:	460b      	mov	r3, r1
 800242c:	4593      	cmp	fp, r2
 800242e:	d30f      	bcc.n	8002450 <forward_conv2d_nl_pool+0x458>
 8002430:	6841      	ldr	r1, [r0, #4]
 8002432:	008a      	lsls	r2, r1, #2
 8002434:	4252      	negs	r2, r2
 8002436:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800243a:	4493      	add	fp, r2
 800243c:	458b      	cmp	fp, r1
 800243e:	bf24      	itt	cs
 8002440:	4493      	addcs	fp, r2
 8002442:	458b      	cmpcs	fp, r1
 8002444:	bf21      	itttt	cs
 8002446:	4493      	addcs	fp, r2
 8002448:	458b      	cmpcs	fp, r1
 800244a:	4493      	addcs	fp, r2
 800244c:	458b      	cmpcs	fp, r1
 800244e:	d2ef      	bcs.n	8002430 <forward_conv2d_nl_pool+0x438>
 8002450:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002452:	4582      	cmp	sl, r0
 8002454:	d339      	bcc.n	80024ca <forward_conv2d_nl_pool+0x4d2>
 8002456:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8002458:	9825      	ldr	r0, [sp, #148]	; 0x94
 800245a:	9008      	str	r0, [sp, #32]
 800245c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800245e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002460:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8002462:	1c52      	adds	r2, r2, #1
 8002464:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002466:	922e      	str	r2, [sp, #184]	; 0xb8
 8002468:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800246a:	b280      	uxth	r0, r0
 800246c:	b29b      	uxth	r3, r3
 800246e:	9004      	str	r0, [sp, #16]
 8002470:	b2a0      	uxth	r0, r4
 8002472:	b292      	uxth	r2, r2
 8002474:	9003      	str	r0, [sp, #12]
 8002476:	9206      	str	r2, [sp, #24]
 8002478:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800247a:	982b      	ldr	r0, [sp, #172]	; 0xac
 800247c:	9305      	str	r3, [sp, #20]
 800247e:	b292      	uxth	r2, r2
 8002480:	ebaa 0a01 	sub.w	sl, sl, r1
 8002484:	2101      	movs	r1, #1
 8002486:	9201      	str	r2, [sp, #4]
 8002488:	9107      	str	r1, [sp, #28]
 800248a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800248c:	b280      	uxth	r0, r0
 800248e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002490:	9000      	str	r0, [sp, #0]
 8002492:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8002494:	b289      	uxth	r1, r1
 8002496:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002498:	9102      	str	r1, [sp, #8]
 800249a:	9924      	ldr	r1, [sp, #144]	; 0x90
 800249c:	1a12      	subs	r2, r2, r0
 800249e:	f8d9 0018 	ldr.w	r0, [r9, #24]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	b292      	uxth	r2, r2
 80024a6:	b289      	uxth	r1, r1
 80024a8:	fa0f fa8a 	sxth.w	sl, sl
 80024ac:	47b0      	blx	r6
 80024ae:	9825      	ldr	r0, [sp, #148]	; 0x94
 80024b0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80024b2:	6881      	ldr	r1, [r0, #8]
 80024b4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80024b8:	6083      	str	r3, [r0, #8]
 80024ba:	9936      	ldr	r1, [sp, #216]	; 0xd8
 80024bc:	1a61      	subs	r1, r4, r1
 80024be:	2900      	cmp	r1, #0
 80024c0:	bfc3      	ittte	gt
 80024c2:	9811      	ldrgt	r0, [sp, #68]	; 0x44
 80024c4:	1a24      	subgt	r4, r4, r0
 80024c6:	b224      	sxthgt	r4, r4
 80024c8:	2400      	movle	r4, #0
 80024ca:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80024cc:	9820      	ldr	r0, [sp, #128]	; 0x80
 80024ce:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80024d0:	1841      	adds	r1, r0, r1
 80024d2:	9117      	str	r1, [sp, #92]	; 0x5c
 80024d4:	9922      	ldr	r1, [sp, #136]	; 0x88
 80024d6:	428a      	cmp	r2, r1
 80024d8:	f4ff aedc 	bcc.w	8002294 <forward_conv2d_nl_pool+0x29c>
 80024dc:	9925      	ldr	r1, [sp, #148]	; 0x94
 80024de:	f8d9 0018 	ldr.w	r0, [r9, #24]
 80024e2:	68c2      	ldr	r2, [r0, #12]
 80024e4:	6082      	str	r2, [r0, #8]
 80024e6:	68c8      	ldr	r0, [r1, #12]
 80024e8:	6088      	str	r0, [r1, #8]
 80024ea:	b039      	add	sp, #228	; 0xe4
 80024ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080024f0 <forward_dense>:
 80024f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024f4:	b081      	sub	sp, #4
 80024f6:	ed2d 8b02 	vpush	{d8}
 80024fa:	b088      	sub	sp, #32
 80024fc:	6944      	ldr	r4, [r0, #20]
 80024fe:	8820      	ldrh	r0, [r4, #0]
 8002500:	2800      	cmp	r0, #0
 8002502:	bf1a      	itte	ne
 8002504:	6861      	ldrne	r1, [r4, #4]
 8002506:	1d09      	addne	r1, r1, #4
 8002508:	2104      	moveq	r1, #4
 800250a:	6809      	ldr	r1, [r1, #0]
 800250c:	2900      	cmp	r1, #0
 800250e:	bf14      	ite	ne
 8002510:	680a      	ldrne	r2, [r1, #0]
 8002512:	2200      	moveq	r2, #0
 8002514:	2802      	cmp	r0, #2
 8002516:	bfa6      	itte	ge
 8002518:	6861      	ldrge	r1, [r4, #4]
 800251a:	3110      	addge	r1, #16
 800251c:	2104      	movlt	r1, #4
 800251e:	6809      	ldr	r1, [r1, #0]
 8002520:	2900      	cmp	r1, #0
 8002522:	bf14      	ite	ne
 8002524:	680f      	ldrne	r7, [r1, #0]
 8002526:	2700      	moveq	r7, #0
 8002528:	2802      	cmp	r0, #2
 800252a:	bfc6      	itte	gt
 800252c:	6861      	ldrgt	r1, [r4, #4]
 800252e:	311c      	addgt	r1, #28
 8002530:	2104      	movle	r1, #4
 8002532:	6809      	ldr	r1, [r1, #0]
 8002534:	2900      	cmp	r1, #0
 8002536:	bf14      	ite	ne
 8002538:	680b      	ldrne	r3, [r1, #0]
 800253a:	2300      	moveq	r3, #0
 800253c:	2802      	cmp	r0, #2
 800253e:	dd0b      	ble.n	8002558 <forward_dense+0x68>
 8002540:	6861      	ldr	r1, [r4, #4]
 8002542:	f111 0018 	adds.w	r0, r1, #24
 8002546:	d007      	beq.n	8002558 <forward_dense+0x68>
 8002548:	8b0c      	ldrh	r4, [r1, #24]
 800254a:	2c02      	cmp	r4, #2
 800254c:	db04      	blt.n	8002558 <forward_dense+0x68>
 800254e:	69c8      	ldr	r0, [r1, #28]
 8002550:	b110      	cbz	r0, 8002558 <forward_dense+0x68>
 8002552:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8002556:	e001      	b.n	800255c <forward_dense+0x6c>
 8002558:	f04f 0a00 	mov.w	sl, #0
 800255c:	68d0      	ldr	r0, [r2, #12]
 800255e:	699e      	ldr	r6, [r3, #24]
 8002560:	6992      	ldr	r2, [r2, #24]
 8002562:	6844      	ldr	r4, [r0, #4]
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800256a:	f8d6 e000 	ldr.w	lr, [r6]
 800256e:	69bf      	ldr	r7, [r7, #24]
 8002570:	6881      	ldr	r1, [r0, #8]
 8002572:	68c0      	ldr	r0, [r0, #12]
 8002574:	ea4f 19ee 	mov.w	r9, lr, asr #7
 8002578:	ea4f 586e 	mov.w	r8, lr, asr #21
 800257c:	ea4f 4e6e 	mov.w	lr, lr, asr #17
 8002580:	f00e 0e0f 	and.w	lr, lr, #15
 8002584:	4341      	muls	r1, r0
 8002586:	f009 097f 	and.w	r9, r9, #127	; 0x7f
 800258a:	f008 0803 	and.w	r8, r8, #3
 800258e:	fa29 f908 	lsr.w	r9, r9, r8
 8002592:	2000      	movs	r0, #0
 8002594:	f1be 0f04 	cmp.w	lr, #4
 8002598:	68bf      	ldr	r7, [r7, #8]
 800259a:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800259e:	bf14      	ite	ne
 80025a0:	f1be 0f08 	cmpne.w	lr, #8
 80025a4:	68f0      	ldreq	r0, [r6, #12]
 80025a6:	695e      	ldr	r6, [r3, #20]
 80025a8:	2900      	cmp	r1, #0
 80025aa:	eb07 028c 	add.w	r2, r7, ip, lsl #2
 80025ae:	6876      	ldr	r6, [r6, #4]
 80025b0:	f000 80ee 	beq.w	8002790 <forward_dense+0x2a0>
 80025b4:	9307      	str	r3, [sp, #28]
 80025b6:	f8cd a014 	str.w	sl, [sp, #20]
 80025ba:	f8cd c018 	str.w	ip, [sp, #24]
 80025be:	9201      	str	r2, [sp, #4]
 80025c0:	9104      	str	r1, [sp, #16]
 80025c2:	9907      	ldr	r1, [sp, #28]
 80025c4:	698b      	ldr	r3, [r1, #24]
 80025c6:	9905      	ldr	r1, [sp, #20]
 80025c8:	2900      	cmp	r1, #0
 80025ca:	bf1a      	itte	ne
 80025cc:	6989      	ldrne	r1, [r1, #24]
 80025ce:	688a      	ldrne	r2, [r1, #8]
 80025d0:	2200      	moveq	r2, #0
 80025d2:	2800      	cmp	r0, #0
 80025d4:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80025d8:	9b01      	ldr	r3, [sp, #4]
 80025da:	f040 80ab 	bne.w	8002734 <forward_dense+0x244>
 80025de:	429f      	cmp	r7, r3
 80025e0:	f080 80c9 	bcs.w	8002776 <forward_dense+0x286>
 80025e4:	9003      	str	r0, [sp, #12]
 80025e6:	2a00      	cmp	r2, #0
 80025e8:	4620      	mov	r0, r4
 80025ea:	46c6      	mov	lr, r8
 80025ec:	46dc      	mov	ip, fp
 80025ee:	eddf 0a6b 	vldr	s1, [pc, #428]	; 800279c <.text_12>
 80025f2:	bf0e      	itee	eq
 80025f4:	ed9f 0a69 	vldreq	s0, [pc, #420]	; 800279c <.text_12>
 80025f8:	ed92 0a00 	vldrne	s0, [r2]
 80025fc:	1d12      	addne	r2, r2, #4
 80025fe:	2c04      	cmp	r4, #4
 8002600:	d35d      	bcc.n	80026be <forward_dense+0x1ce>
 8002602:	08a1      	lsrs	r1, r4, #2
 8002604:	07cd      	lsls	r5, r1, #31
 8002606:	d51c      	bpl.n	8002642 <forward_dense+0x152>
 8002608:	ed9c 4a00 	vldr	s8, [ip]
 800260c:	1f00      	subs	r0, r0, #4
 800260e:	edde 4a00 	vldr	s9, [lr]
 8002612:	ed9c 3a01 	vldr	s6, [ip, #4]
 8002616:	edde 3a01 	vldr	s7, [lr, #4]
 800261a:	ee44 0a24 	vmla.f32	s1, s8, s9
 800261e:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002622:	edde 2a02 	vldr	s5, [lr, #8]
 8002626:	ee43 0a23 	vmla.f32	s1, s6, s7
 800262a:	ed9c 1a03 	vldr	s2, [ip, #12]
 800262e:	f10c 0c10 	add.w	ip, ip, #16
 8002632:	edde 1a03 	vldr	s3, [lr, #12]
 8002636:	f10e 0e10 	add.w	lr, lr, #16
 800263a:	ee42 0a22 	vmla.f32	s1, s4, s5
 800263e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8002642:	0849      	lsrs	r1, r1, #1
 8002644:	f000 803b 	beq.w	80026be <forward_dense+0x1ce>
 8002648:	ed9c 1a03 	vldr	s2, [ip, #12]
 800264c:	3808      	subs	r0, #8
 800264e:	edde 1a03 	vldr	s3, [lr, #12]
 8002652:	1e49      	subs	r1, r1, #1
 8002654:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002658:	edde 2a02 	vldr	s5, [lr, #8]
 800265c:	ed9c 3a01 	vldr	s6, [ip, #4]
 8002660:	edde 3a01 	vldr	s7, [lr, #4]
 8002664:	ed9c 4a00 	vldr	s8, [ip]
 8002668:	f10c 0c10 	add.w	ip, ip, #16
 800266c:	edde 4a00 	vldr	s9, [lr]
 8002670:	f10e 0e10 	add.w	lr, lr, #16
 8002674:	ee44 0a24 	vmla.f32	s1, s8, s9
 8002678:	ee43 0a23 	vmla.f32	s1, s6, s7
 800267c:	ee42 0a22 	vmla.f32	s1, s4, s5
 8002680:	ed9c 8a00 	vldr	s16, [ip]
 8002684:	edde 8a00 	vldr	s17, [lr]
 8002688:	ee41 0a21 	vmla.f32	s1, s2, s3
 800268c:	ed9c 7a01 	vldr	s14, [ip, #4]
 8002690:	edde 7a01 	vldr	s15, [lr, #4]
 8002694:	ee48 0a28 	vmla.f32	s1, s16, s17
 8002698:	ed9c 6a02 	vldr	s12, [ip, #8]
 800269c:	edde 6a02 	vldr	s13, [lr, #8]
 80026a0:	ee47 0a27 	vmla.f32	s1, s14, s15
 80026a4:	ed9c 5a03 	vldr	s10, [ip, #12]
 80026a8:	f10c 0c10 	add.w	ip, ip, #16
 80026ac:	edde 5a03 	vldr	s11, [lr, #12]
 80026b0:	f10e 0e10 	add.w	lr, lr, #16
 80026b4:	ee46 0a26 	vmla.f32	s1, s12, s13
 80026b8:	ee45 0a25 	vmla.f32	s1, s10, s11
 80026bc:	d1c4      	bne.n	8002648 <forward_dense+0x158>
 80026be:	b378      	cbz	r0, 8002720 <forward_dense+0x230>
 80026c0:	f010 0103 	ands.w	r1, r0, #3
 80026c4:	d00b      	beq.n	80026de <forward_dense+0x1ee>
 80026c6:	1e49      	subs	r1, r1, #1
 80026c8:	ed9c 1a00 	vldr	s2, [ip]
 80026cc:	edde 1a00 	vldr	s3, [lr]
 80026d0:	f10e 0e04 	add.w	lr, lr, #4
 80026d4:	ee41 0a21 	vmla.f32	s1, s2, s3
 80026d8:	f10c 0c04 	add.w	ip, ip, #4
 80026dc:	d1f3      	bne.n	80026c6 <forward_dense+0x1d6>
 80026de:	0880      	lsrs	r0, r0, #2
 80026e0:	f000 801e 	beq.w	8002720 <forward_dense+0x230>
 80026e4:	ed9c 2a00 	vldr	s4, [ip]
 80026e8:	1e40      	subs	r0, r0, #1
 80026ea:	ed9e 1a00 	vldr	s2, [lr]
 80026ee:	eddc 1a01 	vldr	s3, [ip, #4]
 80026f2:	edde 2a01 	vldr	s5, [lr, #4]
 80026f6:	ee42 0a01 	vmla.f32	s1, s4, s2
 80026fa:	ee41 0aa2 	vmla.f32	s1, s3, s5
 80026fe:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002702:	ed9e 1a02 	vldr	s2, [lr, #8]
 8002706:	eddc 1a03 	vldr	s3, [ip, #12]
 800270a:	f10c 0c10 	add.w	ip, ip, #16
 800270e:	edde 2a03 	vldr	s5, [lr, #12]
 8002712:	f10e 0e10 	add.w	lr, lr, #16
 8002716:	ee42 0a01 	vmla.f32	s1, s4, s2
 800271a:	ee41 0aa2 	vmla.f32	s1, s3, s5
 800271e:	d1e1      	bne.n	80026e4 <forward_dense+0x1f4>
 8002720:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002724:	44b3      	add	fp, r6
 8002726:	ed87 0a00 	vstr	s0, [r7]
 800272a:	1d3f      	adds	r7, r7, #4
 800272c:	429f      	cmp	r7, r3
 800272e:	f4ff af5a 	bcc.w	80025e6 <forward_dense+0xf6>
 8002732:	e01f      	b.n	8002774 <forward_dense+0x284>
 8002734:	429f      	cmp	r7, r3
 8002736:	d21e      	bcs.n	8002776 <forward_dense+0x286>
 8002738:	469a      	mov	sl, r3
 800273a:	9003      	str	r0, [sp, #12]
 800273c:	4615      	mov	r5, r2
 800273e:	2d00      	cmp	r5, #0
 8002740:	a802      	add	r0, sp, #8
 8002742:	bf19      	ittee	ne
 8002744:	f855 1b04 	ldrne.w	r1, [r5], #4
 8002748:	9102      	strne	r1, [sp, #8]
 800274a:	2300      	moveq	r3, #0
 800274c:	9302      	streq	r3, [sp, #8]
 800274e:	f1b9 0f04 	cmp.w	r9, #4
 8002752:	9400      	str	r4, [sp, #0]
 8002754:	4643      	mov	r3, r8
 8002756:	9a03      	ldr	r2, [sp, #12]
 8002758:	4659      	mov	r1, fp
 800275a:	d103      	bne.n	8002764 <forward_dense+0x274>
 800275c:	f7ff fa36 	bl	8001bcc <ai_dict4_dot_array_f32>
 8002760:	e002      	b.n	8002768 <forward_dense+0x278>
 8002762:	bf00      	nop
 8002764:	f7ff f8c4 	bl	80018f0 <ai_dict8_dot_array_f32>
 8002768:	9802      	ldr	r0, [sp, #8]
 800276a:	44b3      	add	fp, r6
 800276c:	f847 0b04 	str.w	r0, [r7], #4
 8002770:	4557      	cmp	r7, sl
 8002772:	d3e4      	bcc.n	800273e <forward_dense+0x24e>
 8002774:	9803      	ldr	r0, [sp, #12]
 8002776:	9a01      	ldr	r2, [sp, #4]
 8002778:	9b06      	ldr	r3, [sp, #24]
 800277a:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 800277e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8002782:	9a04      	ldr	r2, [sp, #16]
 8002784:	f8cd e004 	str.w	lr, [sp, #4]
 8002788:	1e52      	subs	r2, r2, #1
 800278a:	9204      	str	r2, [sp, #16]
 800278c:	f47f af19 	bne.w	80025c2 <forward_dense+0xd2>
 8002790:	b008      	add	sp, #32
 8002792:	ecbd 8b02 	vpop	{d8}
 8002796:	b001      	add	sp, #4
 8002798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800279c <.text_12>:
 800279c:	00000000 	.word	0x00000000

080027a0 <forward_gemm>:
 80027a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027a4:	b091      	sub	sp, #68	; 0x44
 80027a6:	4604      	mov	r4, r0
 80027a8:	6961      	ldr	r1, [r4, #20]
 80027aa:	6963      	ldr	r3, [r4, #20]
 80027ac:	8808      	ldrh	r0, [r1, #0]
 80027ae:	2800      	cmp	r0, #0
 80027b0:	bf1a      	itte	ne
 80027b2:	6849      	ldrne	r1, [r1, #4]
 80027b4:	1d0a      	addne	r2, r1, #4
 80027b6:	2204      	moveq	r2, #4
 80027b8:	6810      	ldr	r0, [r2, #0]
 80027ba:	8819      	ldrh	r1, [r3, #0]
 80027bc:	2800      	cmp	r0, #0
 80027be:	bf14      	ite	ne
 80027c0:	6805      	ldrne	r5, [r0, #0]
 80027c2:	2500      	moveq	r5, #0
 80027c4:	2900      	cmp	r1, #0
 80027c6:	bf1d      	ittte	ne
 80027c8:	6858      	ldrne	r0, [r3, #4]
 80027ca:	2800      	cmpne	r0, #0
 80027cc:	f8b0 c000 	ldrhne.w	ip, [r0]
 80027d0:	f04f 0c00 	moveq.w	ip, #0
 80027d4:	2902      	cmp	r1, #2
 80027d6:	bfa6      	itte	ge
 80027d8:	6858      	ldrge	r0, [r3, #4]
 80027da:	3010      	addge	r0, #16
 80027dc:	2004      	movlt	r0, #4
 80027de:	6800      	ldr	r0, [r0, #0]
 80027e0:	2800      	cmp	r0, #0
 80027e2:	bf14      	ite	ne
 80027e4:	6801      	ldrne	r1, [r0, #0]
 80027e6:	2100      	moveq	r1, #0
 80027e8:	2600      	movs	r6, #0
 80027ea:	2700      	movs	r7, #0
 80027ec:	f1bc 0f03 	cmp.w	ip, #3
 80027f0:	d106      	bne.n	8002800 <forward_gemm+0x60>
 80027f2:	6810      	ldr	r0, [r2, #0]
 80027f4:	2800      	cmp	r0, #0
 80027f6:	d023      	beq.n	8002840 <forward_gemm+0xa0>
 80027f8:	6846      	ldr	r6, [r0, #4]
 80027fa:	d021      	beq.n	8002840 <forward_gemm+0xa0>
 80027fc:	6887      	ldr	r7, [r0, #8]
 80027fe:	e01f      	b.n	8002840 <forward_gemm+0xa0>
 8002800:	f1bc 0f02 	cmp.w	ip, #2
 8002804:	d10c      	bne.n	8002820 <forward_gemm+0x80>
 8002806:	6810      	ldr	r0, [r2, #0]
 8002808:	b100      	cbz	r0, 800280c <forward_gemm+0x6c>
 800280a:	6846      	ldr	r6, [r0, #4]
 800280c:	881a      	ldrh	r2, [r3, #0]
 800280e:	2a02      	cmp	r2, #2
 8002810:	bfc6      	itte	gt
 8002812:	6858      	ldrgt	r0, [r3, #4]
 8002814:	301c      	addgt	r0, #28
 8002816:	2004      	movle	r0, #4
 8002818:	6800      	ldr	r0, [r0, #0]
 800281a:	b188      	cbz	r0, 8002840 <forward_gemm+0xa0>
 800281c:	6807      	ldr	r7, [r0, #0]
 800281e:	e00f      	b.n	8002840 <forward_gemm+0xa0>
 8002820:	f1bc 0f01 	cmp.w	ip, #1
 8002824:	d10c      	bne.n	8002840 <forward_gemm+0xa0>
 8002826:	881a      	ldrh	r2, [r3, #0]
 8002828:	2a02      	cmp	r2, #2
 800282a:	bfc6      	itte	gt
 800282c:	6858      	ldrgt	r0, [r3, #4]
 800282e:	f100 021c 	addgt.w	r2, r0, #28
 8002832:	2204      	movle	r2, #4
 8002834:	6810      	ldr	r0, [r2, #0]
 8002836:	2800      	cmp	r0, #0
 8002838:	d002      	beq.n	8002840 <forward_gemm+0xa0>
 800283a:	6806      	ldr	r6, [r0, #0]
 800283c:	bf18      	it	ne
 800283e:	6847      	ldrne	r7, [r0, #4]
 8002840:	68c8      	ldr	r0, [r1, #12]
 8002842:	6989      	ldr	r1, [r1, #24]
 8002844:	688b      	ldr	r3, [r1, #8]
 8002846:	68c1      	ldr	r1, [r0, #12]
 8002848:	6842      	ldr	r2, [r0, #4]
 800284a:	a806      	add	r0, sp, #24
 800284c:	b292      	uxth	r2, r2
 800284e:	b289      	uxth	r1, r1
 8002850:	f005 fdf9 	bl	8008446 <arm_mat_init_f32>
 8002854:	69a9      	ldr	r1, [r5, #24]
 8002856:	68e8      	ldr	r0, [r5, #12]
 8002858:	688b      	ldr	r3, [r1, #8]
 800285a:	6842      	ldr	r2, [r0, #4]
 800285c:	68c1      	ldr	r1, [r0, #12]
 800285e:	a804      	add	r0, sp, #16
 8002860:	b292      	uxth	r2, r2
 8002862:	b289      	uxth	r1, r1
 8002864:	f005 fdef 	bl	8008446 <arm_mat_init_f32>
 8002868:	69b1      	ldr	r1, [r6, #24]
 800286a:	68f0      	ldr	r0, [r6, #12]
 800286c:	688b      	ldr	r3, [r1, #8]
 800286e:	6842      	ldr	r2, [r0, #4]
 8002870:	68c1      	ldr	r1, [r0, #12]
 8002872:	a802      	add	r0, sp, #8
 8002874:	b292      	uxth	r2, r2
 8002876:	b289      	uxth	r1, r1
 8002878:	f005 fde5 	bl	8008446 <arm_mat_init_f32>
 800287c:	69b9      	ldr	r1, [r7, #24]
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	688b      	ldr	r3, [r1, #8]
 8002882:	6842      	ldr	r2, [r0, #4]
 8002884:	68c1      	ldr	r1, [r0, #12]
 8002886:	4668      	mov	r0, sp
 8002888:	b292      	uxth	r2, r2
 800288a:	b289      	uxth	r1, r1
 800288c:	f005 fddb 	bl	8008446 <arm_mat_init_f32>
 8002890:	9b01      	ldr	r3, [sp, #4]
 8002892:	f8bd e010 	ldrh.w	lr, [sp, #16]
 8002896:	f994 5021 	ldrsb.w	r5, [r4, #33]	; 0x21
 800289a:	f994 0020 	ldrsb.w	r0, [r4, #32]
 800289e:	ed94 0a07 	vldr	s0, [r4, #28]
 80028a2:	9a05      	ldr	r2, [sp, #20]
 80028a4:	edd4 0a06 	vldr	s1, [r4, #24]
 80028a8:	9308      	str	r3, [sp, #32]
 80028aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8bd 8012 	ldrh.w	r8, [sp, #18]
 80028b2:	f8bd a002 	ldrh.w	sl, [sp, #2]
 80028b6:	0002      	movs	r2, r0
 80028b8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80028bc:	f8bd c000 	ldrh.w	ip, [sp]
 80028c0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80028c4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80028c8:	9c07      	ldr	r4, [sp, #28]
 80028ca:	bf0c      	ite	eq
 80028cc:	4672      	moveq	r2, lr
 80028ce:	4642      	movne	r2, r8
 80028d0:	f1ba 0f01 	cmp.w	sl, #1
 80028d4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80028d8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80028dc:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 80028e0:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 80028e4:	bf0c      	ite	eq
 80028e6:	4699      	moveq	r9, r3
 80028e8:	f04f 0904 	movne.w	r9, #4
 80028ec:	f1bc 0f01 	cmp.w	ip, #1
 80028f0:	d105      	bne.n	80028fe <forward_gemm+0x15e>
 80028f2:	f1ba 0f01 	cmp.w	sl, #1
 80028f6:	d005      	beq.n	8002904 <forward_gemm+0x164>
 80028f8:	f1cb 0a00 	rsb	sl, fp, #0
 80028fc:	e003      	b.n	8002906 <forward_gemm+0x166>
 80028fe:	f1ba 0f01 	cmp.w	sl, #1
 8002902:	d000      	beq.n	8002906 <forward_gemm+0x166>
 8002904:	469a      	mov	sl, r3
 8002906:	2800      	cmp	r0, #0
 8002908:	fa0f fa8a 	sxth.w	sl, sl
 800290c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8002910:	bf0c      	ite	eq
 8002912:	46f4      	moveq	ip, lr
 8002914:	46c4      	movne	ip, r8
 8002916:	45b4      	cmp	ip, r6
 8002918:	f040 808d 	bne.w	8002a36 <forward_gemm+0x296>
 800291c:	2d00      	cmp	r5, #0
 800291e:	bf0c      	ite	eq
 8002920:	9109      	streq	r1, [sp, #36]	; 0x24
 8002922:	9709      	strne	r7, [sp, #36]	; 0x24
 8002924:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8002928:	45dc      	cmp	ip, fp
 800292a:	f040 8084 	bne.w	8002a36 <forward_gemm+0x296>
 800292e:	2800      	cmp	r0, #0
 8002930:	bf0c      	ite	eq
 8002932:	46c4      	moveq	ip, r8
 8002934:	46f4      	movne	ip, lr
 8002936:	2d00      	cmp	r5, #0
 8002938:	bf0c      	ite	eq
 800293a:	46ba      	moveq	sl, r7
 800293c:	468a      	movne	sl, r1
 800293e:	45d4      	cmp	ip, sl
 8002940:	d179      	bne.n	8002a36 <forward_gemm+0x296>
 8002942:	9e08      	ldr	r6, [sp, #32]
 8002944:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8002948:	9410      	str	r4, [sp, #64]	; 0x40
 800294a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800294e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8002952:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002954:	f8bd 4022 	ldrh.w	r4, [sp, #34]	; 0x22
 8002958:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800295c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800295e:	eb02 0a84 	add.w	sl, r2, r4, lsl #2
 8002962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002964:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8002968:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 800296c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8002970:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8002974:	2800      	cmp	r0, #0
 8002976:	ed9f 1aa2 	vldr	s2, [pc, #648]	; 8002c00 <.text_16>
 800297a:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 800297e:	bf0c      	ite	eq
 8002980:	f8dd 803c 	ldreq.w	r8, [sp, #60]	; 0x3c
 8002984:	f8bd 8028 	ldrhne.w	r8, [sp, #40]	; 0x28
 8002988:	fa1f fb88 	uxth.w	fp, r8
 800298c:	f1bb 0f00 	cmp.w	fp, #0
 8002990:	d019      	beq.n	80029c6 <forward_gemm+0x226>
 8002992:	2800      	cmp	r0, #0
 8002994:	f1a8 0801 	sub.w	r8, r8, #1
 8002998:	edde 1a00 	vldr	s3, [lr]
 800299c:	ed93 2a00 	vldr	s4, [r3]
 80029a0:	bf0c      	ite	eq
 80029a2:	f04f 0b04 	moveq.w	fp, #4
 80029a6:	46a3      	movne	fp, r4
 80029a8:	2d00      	cmp	r5, #0
 80029aa:	44de      	add	lr, fp
 80029ac:	ee01 1a82 	vmla.f32	s2, s3, s4
 80029b0:	bf0c      	ite	eq
 80029b2:	ea4f 0b81 	moveq.w	fp, r1, lsl #2
 80029b6:	f04f 0b04 	movne.w	fp, #4
 80029ba:	445b      	add	r3, fp
 80029bc:	fa1f fb88 	uxth.w	fp, r8
 80029c0:	f1bb 0f00 	cmp.w	fp, #0
 80029c4:	d1e5      	bne.n	8002992 <forward_gemm+0x1f2>
 80029c6:	1e52      	subs	r2, r2, #1
 80029c8:	b292      	uxth	r2, r2
 80029ca:	002b      	movs	r3, r5
 80029cc:	ee20 1a81 	vmul.f32	s2, s1, s2
 80029d0:	edd6 1a00 	vldr	s3, [r6]
 80029d4:	444e      	add	r6, r9
 80029d6:	ee00 1a21 	vmla.f32	s2, s0, s3
 80029da:	ed8a 1a00 	vstr	s2, [sl]
 80029de:	f10a 0a04 	add.w	sl, sl, #4
 80029e2:	bf0e      	itee	eq
 80029e4:	1a8b      	subeq	r3, r1, r2
 80029e6:	1abb      	subne	r3, r7, r2
 80029e8:	434b      	mulne	r3, r1
 80029ea:	2a00      	cmp	r2, #0
 80029ec:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80029f0:	d1c0      	bne.n	8002974 <forward_gemm+0x1d4>
 80029f2:	f8bd a022 	ldrh.w	sl, [sp, #34]	; 0x22
 80029f6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80029fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80029fc:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
 8002a00:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8002a04:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8002a08:	44da      	add	sl, fp
 8002a0a:	f8ad a022 	strh.w	sl, [sp, #34]	; 0x22
 8002a0e:	b100      	cbz	r0, 8002a12 <forward_gemm+0x272>
 8002a10:	2404      	movs	r4, #4
 8002a12:	eb02 0c04 	add.w	ip, r2, r4
 8002a16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002a18:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8002a1c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8002a20:	f1a4 0a01 	sub.w	sl, r4, #1
 8002a24:	f8ad a020 	strh.w	sl, [sp, #32]
 8002a28:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8002a2c:	2a00      	cmp	r2, #0
 8002a2e:	d190      	bne.n	8002952 <forward_gemm+0x1b2>
 8002a30:	b011      	add	sp, #68	; 0x44
 8002a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a36:	fb0b f606 	mul.w	r6, fp, r6
 8002a3a:	2e00      	cmp	r6, #0
 8002a3c:	ddf8      	ble.n	8002a30 <forward_gemm+0x290>
 8002a3e:	f016 0003 	ands.w	r0, r6, #3
 8002a42:	d003      	beq.n	8002a4c <forward_gemm+0x2ac>
 8002a44:	1e40      	subs	r0, r0, #1
 8002a46:	f844 3b04 	str.w	r3, [r4], #4
 8002a4a:	d1fb      	bne.n	8002a44 <forward_gemm+0x2a4>
 8002a4c:	08b1      	lsrs	r1, r6, #2
 8002a4e:	d0ef      	beq.n	8002a30 <forward_gemm+0x290>
 8002a50:	6023      	str	r3, [r4, #0]
 8002a52:	6063      	str	r3, [r4, #4]
 8002a54:	60a3      	str	r3, [r4, #8]
 8002a56:	60e3      	str	r3, [r4, #12]
 8002a58:	3410      	adds	r4, #16
 8002a5a:	1e49      	subs	r1, r1, #1
 8002a5c:	d1f8      	bne.n	8002a50 <forward_gemm+0x2b0>
 8002a5e:	b011      	add	sp, #68	; 0x44
 8002a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002a64 <forward_matmul>:
 8002a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a68:	b08b      	sub	sp, #44	; 0x2c
 8002a6a:	6944      	ldr	r4, [r0, #20]
 8002a6c:	8822      	ldrh	r2, [r4, #0]
 8002a6e:	2a00      	cmp	r2, #0
 8002a70:	bf1a      	itte	ne
 8002a72:	6860      	ldrne	r0, [r4, #4]
 8002a74:	1d03      	addne	r3, r0, #4
 8002a76:	2304      	moveq	r3, #4
 8002a78:	6819      	ldr	r1, [r3, #0]
 8002a7a:	2900      	cmp	r1, #0
 8002a7c:	bf14      	ite	ne
 8002a7e:	6808      	ldrne	r0, [r1, #0]
 8002a80:	2000      	moveq	r0, #0
 8002a82:	2900      	cmp	r1, #0
 8002a84:	bf14      	ite	ne
 8002a86:	f8d1 b004 	ldrne.w	fp, [r1, #4]
 8002a8a:	f04f 0b00 	moveq.w	fp, #0
 8002a8e:	2a02      	cmp	r2, #2
 8002a90:	bfa6      	itte	ge
 8002a92:	6861      	ldrge	r1, [r4, #4]
 8002a94:	3110      	addge	r1, #16
 8002a96:	2104      	movlt	r1, #4
 8002a98:	6809      	ldr	r1, [r1, #0]
 8002a9a:	2900      	cmp	r1, #0
 8002a9c:	bf14      	ite	ne
 8002a9e:	680b      	ldrne	r3, [r1, #0]
 8002aa0:	2300      	moveq	r3, #0
 8002aa2:	f1bb 0f00 	cmp.w	fp, #0
 8002aa6:	d108      	bne.n	8002aba <forward_matmul+0x56>
 8002aa8:	2a02      	cmp	r2, #2
 8002aaa:	bfc6      	itte	gt
 8002aac:	6861      	ldrgt	r1, [r4, #4]
 8002aae:	311c      	addgt	r1, #28
 8002ab0:	2104      	movle	r1, #4
 8002ab2:	6809      	ldr	r1, [r1, #0]
 8002ab4:	b109      	cbz	r1, 8002aba <forward_matmul+0x56>
 8002ab6:	f8d1 b000 	ldr.w	fp, [r1]
 8002aba:	68dd      	ldr	r5, [r3, #12]
 8002abc:	68c4      	ldr	r4, [r0, #12]
 8002abe:	f8db 900c 	ldr.w	r9, [fp, #12]
 8002ac2:	686e      	ldr	r6, [r5, #4]
 8002ac4:	f8d4 e000 	ldr.w	lr, [r4]
 8002ac8:	f8d5 a000 	ldr.w	sl, [r5]
 8002acc:	f8d9 2000 	ldr.w	r2, [r9]
 8002ad0:	68a1      	ldr	r1, [r4, #8]
 8002ad2:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8002ad6:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8002ada:	68ef      	ldr	r7, [r5, #12]
 8002adc:	9706      	str	r7, [sp, #24]
 8002ade:	68e7      	ldr	r7, [r4, #12]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	fb01 f50e 	mul.w	r5, r1, lr
 8002ae6:	434f      	muls	r7, r1
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	fb0e f707 	mul.w	r7, lr, r7
 8002aee:	970a      	str	r7, [sp, #40]	; 0x28
 8002af0:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8002af4:	fb08 f404 	mul.w	r4, r8, r4
 8002af8:	fb08 f802 	mul.w	r8, r8, r2
 8002afc:	4354      	muls	r4, r2
 8002afe:	9409      	str	r4, [sp, #36]	; 0x24
 8002b00:	2e00      	cmp	r6, #0
 8002b02:	d077      	beq.n	8002bf4 <forward_matmul+0x190>
 8002b04:	2400      	movs	r4, #0
 8002b06:	46a1      	mov	r9, r4
 8002b08:	9602      	str	r6, [sp, #8]
 8002b0a:	9e06      	ldr	r6, [sp, #24]
 8002b0c:	2e00      	cmp	r6, #0
 8002b0e:	d067      	beq.n	8002be0 <forward_matmul+0x17c>
 8002b10:	9f06      	ldr	r7, [sp, #24]
 8002b12:	2600      	movs	r6, #0
 8002b14:	9701      	str	r7, [sp, #4]
 8002b16:	f8cd c00c 	str.w	ip, [sp, #12]
 8002b1a:	9505      	str	r5, [sp, #20]
 8002b1c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002b20:	f1bc 0f00 	cmp.w	ip, #0
 8002b24:	d051      	beq.n	8002bca <forward_matmul+0x166>
 8002b26:	f8cd a010 	str.w	sl, [sp, #16]
 8002b2a:	f04f 0a00 	mov.w	sl, #0
 8002b2e:	f8cd c000 	str.w	ip, [sp]
 8002b32:	9207      	str	r2, [sp, #28]
 8002b34:	9a04      	ldr	r2, [sp, #16]
 8002b36:	2a00      	cmp	r2, #0
 8002b38:	d03e      	beq.n	8002bb8 <forward_matmul+0x154>
 8002b3a:	f04f 0c00 	mov.w	ip, #0
 8002b3e:	9008      	str	r0, [sp, #32]
 8002b40:	9808      	ldr	r0, [sp, #32]
 8002b42:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8002c00 <.text_16>
 8002b46:	6987      	ldr	r7, [r0, #24]
 8002b48:	f8db 0018 	ldr.w	r0, [fp, #24]
 8002b4c:	68bd      	ldr	r5, [r7, #8]
 8002b4e:	6887      	ldr	r7, [r0, #8]
 8002b50:	192d      	adds	r5, r5, r4
 8002b52:	19ad      	adds	r5, r5, r6
 8002b54:	4465      	add	r5, ip
 8002b56:	444f      	add	r7, r9
 8002b58:	4457      	add	r7, sl
 8002b5a:	4467      	add	r7, ip
 8002b5c:	b321      	cbz	r1, 8002ba8 <forward_matmul+0x144>
 8002b5e:	07c8      	lsls	r0, r1, #31
 8002b60:	d509      	bpl.n	8002b76 <forward_matmul+0x112>
 8002b62:	edd5 0a00 	vldr	s1, [r5]
 8002b66:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002b6a:	ed97 1a00 	vldr	s2, [r7]
 8002b6e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8002b72:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002b76:	0848      	lsrs	r0, r1, #1
 8002b78:	f000 8016 	beq.w	8002ba8 <forward_matmul+0x144>
 8002b7c:	edd5 0a00 	vldr	s1, [r5]
 8002b80:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002b84:	ed97 1a00 	vldr	s2, [r7]
 8002b88:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8002b8c:	1e40      	subs	r0, r0, #1
 8002b8e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002b92:	edd5 1a00 	vldr	s3, [r5]
 8002b96:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002b9a:	ed97 2a00 	vldr	s4, [r7]
 8002b9e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8002ba2:	ee01 0a82 	vmla.f32	s0, s3, s4
 8002ba6:	d1e9      	bne.n	8002b7c <forward_matmul+0x118>
 8002ba8:	ed83 0a00 	vstr	s0, [r3]
 8002bac:	1d1b      	adds	r3, r3, #4
 8002bae:	1e52      	subs	r2, r2, #1
 8002bb0:	f10c 0c04 	add.w	ip, ip, #4
 8002bb4:	d1c4      	bne.n	8002b40 <forward_matmul+0xdc>
 8002bb6:	9808      	ldr	r0, [sp, #32]
 8002bb8:	9d00      	ldr	r5, [sp, #0]
 8002bba:	9a07      	ldr	r2, [sp, #28]
 8002bbc:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 8002bc0:	1e6d      	subs	r5, r5, #1
 8002bc2:	9500      	str	r5, [sp, #0]
 8002bc4:	d1b6      	bne.n	8002b34 <forward_matmul+0xd0>
 8002bc6:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002bca:	9f01      	ldr	r7, [sp, #4]
 8002bcc:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002bd0:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 8002bd4:	1e7f      	subs	r7, r7, #1
 8002bd6:	9701      	str	r7, [sp, #4]
 8002bd8:	d1a0      	bne.n	8002b1c <forward_matmul+0xb8>
 8002bda:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002bde:	9d05      	ldr	r5, [sp, #20]
 8002be0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002be2:	eb09 0986 	add.w	r9, r9, r6, lsl #2
 8002be6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002be8:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8002bec:	9e02      	ldr	r6, [sp, #8]
 8002bee:	1e76      	subs	r6, r6, #1
 8002bf0:	9602      	str	r6, [sp, #8]
 8002bf2:	d18a      	bne.n	8002b0a <forward_matmul+0xa6>
 8002bf4:	b00b      	add	sp, #44	; 0x2c
 8002bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002bfc <.text_15>:
 8002bfc:	080018ed 	.word	0x080018ed

08002c00 <.text_16>:
 8002c00:	00000000 	.word	0x00000000

08002c04 <ai_shape_get_size>:
 8002c04:	b470      	push	{r4, r5, r6}
 8002c06:	4601      	mov	r1, r0
 8002c08:	f04f 0201 	mov.w	r2, #1
 8002c0c:	680b      	ldr	r3, [r1, #0]
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	d01e      	beq.n	8002c50 <ai_shape_get_size+0x4c>
 8002c12:	684c      	ldr	r4, [r1, #4]
 8002c14:	4618      	mov	r0, r3
 8002c16:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8002c1a:	1f0d      	subs	r5, r1, #4
 8002c1c:	f010 0103 	ands.w	r1, r0, #3
 8002c20:	f000 8006 	beq.w	8002c30 <ai_shape_get_size+0x2c>
 8002c24:	f855 6904 	ldr.w	r6, [r5], #-4
 8002c28:	1e5b      	subs	r3, r3, #1
 8002c2a:	4372      	muls	r2, r6
 8002c2c:	1e49      	subs	r1, r1, #1
 8002c2e:	d1f9      	bne.n	8002c24 <ai_shape_get_size+0x20>
 8002c30:	0880      	lsrs	r0, r0, #2
 8002c32:	d00d      	beq.n	8002c50 <ai_shape_get_size+0x4c>
 8002c34:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8002c38:	3910      	subs	r1, #16
 8002c3a:	68cb      	ldr	r3, [r1, #12]
 8002c3c:	688c      	ldr	r4, [r1, #8]
 8002c3e:	684d      	ldr	r5, [r1, #4]
 8002c40:	f851 6910 	ldr.w	r6, [r1], #-16
 8002c44:	4363      	muls	r3, r4
 8002c46:	436b      	muls	r3, r5
 8002c48:	4373      	muls	r3, r6
 8002c4a:	435a      	muls	r2, r3
 8002c4c:	1e40      	subs	r0, r0, #1
 8002c4e:	d1f4      	bne.n	8002c3a <ai_shape_get_size+0x36>
 8002c50:	4610      	mov	r0, r2
 8002c52:	bc70      	pop	{r4, r5, r6}
 8002c54:	4770      	bx	lr
	...

08002c58 <nl_func_acos_array_f32>:
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	688c      	ldr	r4, [r1, #8]
 8002c5c:	6880      	ldr	r0, [r0, #8]
 8002c5e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002c62:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002c66:	1f0d      	subs	r5, r1, #4
 8002c68:	1f16      	subs	r6, r2, #4
 8002c6a:	42a5      	cmp	r5, r4
 8002c6c:	f0c0 800a 	bcc.w	8002c84 <nl_func_acos_array_f32+0x2c>
 8002c70:	ed95 0a00 	vldr	s0, [r5]
 8002c74:	1f2d      	subs	r5, r5, #4
 8002c76:	f012 f89f 	bl	8014db8 <acosf>
 8002c7a:	ed86 0a00 	vstr	s0, [r6]
 8002c7e:	1f36      	subs	r6, r6, #4
 8002c80:	42a5      	cmp	r5, r4
 8002c82:	d2f5      	bcs.n	8002c70 <nl_func_acos_array_f32+0x18>
 8002c84:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c88 <forward_acos>:
 8002c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c8a:	b081      	sub	sp, #4
 8002c8c:	6942      	ldr	r2, [r0, #20]
 8002c8e:	f04f 0501 	mov.w	r5, #1
 8002c92:	8811      	ldrh	r1, [r2, #0]
 8002c94:	2900      	cmp	r1, #0
 8002c96:	bf1a      	itte	ne
 8002c98:	6850      	ldrne	r0, [r2, #4]
 8002c9a:	1d00      	addne	r0, r0, #4
 8002c9c:	2004      	moveq	r0, #4
 8002c9e:	6800      	ldr	r0, [r0, #0]
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	bf14      	ite	ne
 8002ca4:	6803      	ldrne	r3, [r0, #0]
 8002ca6:	2300      	moveq	r3, #0
 8002ca8:	2902      	cmp	r1, #2
 8002caa:	bfa6      	itte	ge
 8002cac:	6850      	ldrge	r0, [r2, #4]
 8002cae:	3010      	addge	r0, #16
 8002cb0:	2004      	movlt	r0, #4
 8002cb2:	6800      	ldr	r0, [r0, #0]
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	bf19      	ittee	ne
 8002cb8:	6800      	ldrne	r0, [r0, #0]
 8002cba:	f100 0418 	addne.w	r4, r0, #24
 8002cbe:	2100      	moveq	r1, #0
 8002cc0:	f101 0418 	addeq.w	r4, r1, #24
 8002cc4:	f103 0108 	add.w	r1, r3, #8
 8002cc8:	680a      	ldr	r2, [r1, #0]
 8002cca:	0a12      	lsrs	r2, r2, #8
 8002ccc:	d01f      	beq.n	8002d0e <forward_acos+0x86>
 8002cce:	684e      	ldr	r6, [r1, #4]
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002cd6:	1f0f      	subs	r7, r1, #4
 8002cd8:	f010 0103 	ands.w	r1, r0, #3
 8002cdc:	d006      	beq.n	8002cec <forward_acos+0x64>
 8002cde:	1e52      	subs	r2, r2, #1
 8002ce0:	f857 c904 	ldr.w	ip, [r7], #-4
 8002ce4:	1e49      	subs	r1, r1, #1
 8002ce6:	fb0c f505 	mul.w	r5, ip, r5
 8002cea:	d1f8      	bne.n	8002cde <forward_acos+0x56>
 8002cec:	0880      	lsrs	r0, r0, #2
 8002cee:	d00e      	beq.n	8002d0e <forward_acos+0x86>
 8002cf0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002cf4:	3910      	subs	r1, #16
 8002cf6:	68ca      	ldr	r2, [r1, #12]
 8002cf8:	688e      	ldr	r6, [r1, #8]
 8002cfa:	684f      	ldr	r7, [r1, #4]
 8002cfc:	f851 c910 	ldr.w	ip, [r1], #-16
 8002d00:	4372      	muls	r2, r6
 8002d02:	437a      	muls	r2, r7
 8002d04:	fb0c f202 	mul.w	r2, ip, r2
 8002d08:	4355      	muls	r5, r2
 8002d0a:	1e40      	subs	r0, r0, #1
 8002d0c:	d1f3      	bne.n	8002cf6 <forward_acos+0x6e>
 8002d0e:	6998      	ldr	r0, [r3, #24]
 8002d10:	6821      	ldr	r1, [r4, #0]
 8002d12:	6886      	ldr	r6, [r0, #8]
 8002d14:	688a      	ldr	r2, [r1, #8]
 8002d16:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002d1a:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8002d1e:	1f07      	subs	r7, r0, #4
 8002d20:	1f1c      	subs	r4, r3, #4
 8002d22:	42b7      	cmp	r7, r6
 8002d24:	f0c0 800a 	bcc.w	8002d3c <forward_acos+0xb4>
 8002d28:	ed97 0a00 	vldr	s0, [r7]
 8002d2c:	1f3f      	subs	r7, r7, #4
 8002d2e:	f012 f843 	bl	8014db8 <acosf>
 8002d32:	ed84 0a00 	vstr	s0, [r4]
 8002d36:	1f24      	subs	r4, r4, #4
 8002d38:	42b7      	cmp	r7, r6
 8002d3a:	d2f5      	bcs.n	8002d28 <forward_acos+0xa0>
 8002d3c:	b001      	add	sp, #4
 8002d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d40 <nl_func_acosh_array_f32>:
 8002d40:	b570      	push	{r4, r5, r6, lr}
 8002d42:	688c      	ldr	r4, [r1, #8]
 8002d44:	6880      	ldr	r0, [r0, #8]
 8002d46:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002d4a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002d4e:	1f0d      	subs	r5, r1, #4
 8002d50:	1f16      	subs	r6, r2, #4
 8002d52:	42a5      	cmp	r5, r4
 8002d54:	f0c0 800a 	bcc.w	8002d6c <nl_func_acosh_array_f32+0x2c>
 8002d58:	ed95 0a00 	vldr	s0, [r5]
 8002d5c:	1f2d      	subs	r5, r5, #4
 8002d5e:	f012 f87f 	bl	8014e60 <acoshf>
 8002d62:	ed86 0a00 	vstr	s0, [r6]
 8002d66:	1f36      	subs	r6, r6, #4
 8002d68:	42a5      	cmp	r5, r4
 8002d6a:	d2f5      	bcs.n	8002d58 <nl_func_acosh_array_f32+0x18>
 8002d6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002d70 <forward_acosh>:
 8002d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d72:	b081      	sub	sp, #4
 8002d74:	6942      	ldr	r2, [r0, #20]
 8002d76:	f04f 0501 	mov.w	r5, #1
 8002d7a:	8811      	ldrh	r1, [r2, #0]
 8002d7c:	2900      	cmp	r1, #0
 8002d7e:	bf1a      	itte	ne
 8002d80:	6850      	ldrne	r0, [r2, #4]
 8002d82:	1d00      	addne	r0, r0, #4
 8002d84:	2004      	moveq	r0, #4
 8002d86:	6800      	ldr	r0, [r0, #0]
 8002d88:	2800      	cmp	r0, #0
 8002d8a:	bf14      	ite	ne
 8002d8c:	6803      	ldrne	r3, [r0, #0]
 8002d8e:	2300      	moveq	r3, #0
 8002d90:	2902      	cmp	r1, #2
 8002d92:	bfa6      	itte	ge
 8002d94:	6850      	ldrge	r0, [r2, #4]
 8002d96:	3010      	addge	r0, #16
 8002d98:	2004      	movlt	r0, #4
 8002d9a:	6800      	ldr	r0, [r0, #0]
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	bf19      	ittee	ne
 8002da0:	6800      	ldrne	r0, [r0, #0]
 8002da2:	f100 0418 	addne.w	r4, r0, #24
 8002da6:	2100      	moveq	r1, #0
 8002da8:	f101 0418 	addeq.w	r4, r1, #24
 8002dac:	f103 0108 	add.w	r1, r3, #8
 8002db0:	680a      	ldr	r2, [r1, #0]
 8002db2:	0a12      	lsrs	r2, r2, #8
 8002db4:	d01f      	beq.n	8002df6 <forward_acosh+0x86>
 8002db6:	684e      	ldr	r6, [r1, #4]
 8002db8:	4610      	mov	r0, r2
 8002dba:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002dbe:	1f0f      	subs	r7, r1, #4
 8002dc0:	f010 0103 	ands.w	r1, r0, #3
 8002dc4:	d006      	beq.n	8002dd4 <forward_acosh+0x64>
 8002dc6:	1e52      	subs	r2, r2, #1
 8002dc8:	f857 c904 	ldr.w	ip, [r7], #-4
 8002dcc:	1e49      	subs	r1, r1, #1
 8002dce:	fb0c f505 	mul.w	r5, ip, r5
 8002dd2:	d1f8      	bne.n	8002dc6 <forward_acosh+0x56>
 8002dd4:	0880      	lsrs	r0, r0, #2
 8002dd6:	d00e      	beq.n	8002df6 <forward_acosh+0x86>
 8002dd8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002ddc:	3910      	subs	r1, #16
 8002dde:	68ca      	ldr	r2, [r1, #12]
 8002de0:	688e      	ldr	r6, [r1, #8]
 8002de2:	684f      	ldr	r7, [r1, #4]
 8002de4:	f851 c910 	ldr.w	ip, [r1], #-16
 8002de8:	4372      	muls	r2, r6
 8002dea:	437a      	muls	r2, r7
 8002dec:	fb0c f202 	mul.w	r2, ip, r2
 8002df0:	4355      	muls	r5, r2
 8002df2:	1e40      	subs	r0, r0, #1
 8002df4:	d1f3      	bne.n	8002dde <forward_acosh+0x6e>
 8002df6:	6998      	ldr	r0, [r3, #24]
 8002df8:	6821      	ldr	r1, [r4, #0]
 8002dfa:	6886      	ldr	r6, [r0, #8]
 8002dfc:	688a      	ldr	r2, [r1, #8]
 8002dfe:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002e02:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8002e06:	1f07      	subs	r7, r0, #4
 8002e08:	1f1c      	subs	r4, r3, #4
 8002e0a:	42b7      	cmp	r7, r6
 8002e0c:	f0c0 800a 	bcc.w	8002e24 <forward_acosh+0xb4>
 8002e10:	ed97 0a00 	vldr	s0, [r7]
 8002e14:	1f3f      	subs	r7, r7, #4
 8002e16:	f012 f823 	bl	8014e60 <acoshf>
 8002e1a:	ed84 0a00 	vstr	s0, [r4]
 8002e1e:	1f24      	subs	r4, r4, #4
 8002e20:	42b7      	cmp	r7, r6
 8002e22:	d2f5      	bcs.n	8002e10 <forward_acosh+0xa0>
 8002e24:	b001      	add	sp, #4
 8002e26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e28 <nl_func_asin_array_f32>:
 8002e28:	b570      	push	{r4, r5, r6, lr}
 8002e2a:	688c      	ldr	r4, [r1, #8]
 8002e2c:	6880      	ldr	r0, [r0, #8]
 8002e2e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002e32:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002e36:	1f0d      	subs	r5, r1, #4
 8002e38:	1f16      	subs	r6, r2, #4
 8002e3a:	42a5      	cmp	r5, r4
 8002e3c:	f0c0 800a 	bcc.w	8002e54 <nl_func_asin_array_f32+0x2c>
 8002e40:	ed95 0a00 	vldr	s0, [r5]
 8002e44:	1f2d      	subs	r5, r5, #4
 8002e46:	f012 f85b 	bl	8014f00 <asinf>
 8002e4a:	ed86 0a00 	vstr	s0, [r6]
 8002e4e:	1f36      	subs	r6, r6, #4
 8002e50:	42a5      	cmp	r5, r4
 8002e52:	d2f5      	bcs.n	8002e40 <nl_func_asin_array_f32+0x18>
 8002e54:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e58 <forward_asin>:
 8002e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e5a:	b081      	sub	sp, #4
 8002e5c:	6942      	ldr	r2, [r0, #20]
 8002e5e:	f04f 0501 	mov.w	r5, #1
 8002e62:	8811      	ldrh	r1, [r2, #0]
 8002e64:	2900      	cmp	r1, #0
 8002e66:	bf1a      	itte	ne
 8002e68:	6850      	ldrne	r0, [r2, #4]
 8002e6a:	1d00      	addne	r0, r0, #4
 8002e6c:	2004      	moveq	r0, #4
 8002e6e:	6800      	ldr	r0, [r0, #0]
 8002e70:	2800      	cmp	r0, #0
 8002e72:	bf14      	ite	ne
 8002e74:	6803      	ldrne	r3, [r0, #0]
 8002e76:	2300      	moveq	r3, #0
 8002e78:	2902      	cmp	r1, #2
 8002e7a:	bfa6      	itte	ge
 8002e7c:	6850      	ldrge	r0, [r2, #4]
 8002e7e:	3010      	addge	r0, #16
 8002e80:	2004      	movlt	r0, #4
 8002e82:	6800      	ldr	r0, [r0, #0]
 8002e84:	2800      	cmp	r0, #0
 8002e86:	bf19      	ittee	ne
 8002e88:	6800      	ldrne	r0, [r0, #0]
 8002e8a:	f100 0418 	addne.w	r4, r0, #24
 8002e8e:	2100      	moveq	r1, #0
 8002e90:	f101 0418 	addeq.w	r4, r1, #24
 8002e94:	f103 0108 	add.w	r1, r3, #8
 8002e98:	680a      	ldr	r2, [r1, #0]
 8002e9a:	0a12      	lsrs	r2, r2, #8
 8002e9c:	d01f      	beq.n	8002ede <forward_asin+0x86>
 8002e9e:	684e      	ldr	r6, [r1, #4]
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002ea6:	1f0f      	subs	r7, r1, #4
 8002ea8:	f010 0103 	ands.w	r1, r0, #3
 8002eac:	d006      	beq.n	8002ebc <forward_asin+0x64>
 8002eae:	1e52      	subs	r2, r2, #1
 8002eb0:	f857 c904 	ldr.w	ip, [r7], #-4
 8002eb4:	1e49      	subs	r1, r1, #1
 8002eb6:	fb0c f505 	mul.w	r5, ip, r5
 8002eba:	d1f8      	bne.n	8002eae <forward_asin+0x56>
 8002ebc:	0880      	lsrs	r0, r0, #2
 8002ebe:	d00e      	beq.n	8002ede <forward_asin+0x86>
 8002ec0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002ec4:	3910      	subs	r1, #16
 8002ec6:	68ca      	ldr	r2, [r1, #12]
 8002ec8:	688e      	ldr	r6, [r1, #8]
 8002eca:	684f      	ldr	r7, [r1, #4]
 8002ecc:	f851 c910 	ldr.w	ip, [r1], #-16
 8002ed0:	4372      	muls	r2, r6
 8002ed2:	437a      	muls	r2, r7
 8002ed4:	fb0c f202 	mul.w	r2, ip, r2
 8002ed8:	4355      	muls	r5, r2
 8002eda:	1e40      	subs	r0, r0, #1
 8002edc:	d1f3      	bne.n	8002ec6 <forward_asin+0x6e>
 8002ede:	6998      	ldr	r0, [r3, #24]
 8002ee0:	6821      	ldr	r1, [r4, #0]
 8002ee2:	6886      	ldr	r6, [r0, #8]
 8002ee4:	688a      	ldr	r2, [r1, #8]
 8002ee6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002eea:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8002eee:	1f07      	subs	r7, r0, #4
 8002ef0:	1f1c      	subs	r4, r3, #4
 8002ef2:	42b7      	cmp	r7, r6
 8002ef4:	f0c0 800a 	bcc.w	8002f0c <forward_asin+0xb4>
 8002ef8:	ed97 0a00 	vldr	s0, [r7]
 8002efc:	1f3f      	subs	r7, r7, #4
 8002efe:	f011 ffff 	bl	8014f00 <asinf>
 8002f02:	ed84 0a00 	vstr	s0, [r4]
 8002f06:	1f24      	subs	r4, r4, #4
 8002f08:	42b7      	cmp	r7, r6
 8002f0a:	d2f5      	bcs.n	8002ef8 <forward_asin+0xa0>
 8002f0c:	b001      	add	sp, #4
 8002f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f10 <nl_func_asinh_array_f32>:
 8002f10:	b570      	push	{r4, r5, r6, lr}
 8002f12:	688c      	ldr	r4, [r1, #8]
 8002f14:	6880      	ldr	r0, [r0, #8]
 8002f16:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002f1a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002f1e:	1f0d      	subs	r5, r1, #4
 8002f20:	1f16      	subs	r6, r2, #4
 8002f22:	42a5      	cmp	r5, r4
 8002f24:	f0c0 800a 	bcc.w	8002f3c <nl_func_asinh_array_f32+0x2c>
 8002f28:	ed95 0a00 	vldr	s0, [r5]
 8002f2c:	1f2d      	subs	r5, r5, #4
 8002f2e:	f010 feeb 	bl	8013d08 <asinhf>
 8002f32:	ed86 0a00 	vstr	s0, [r6]
 8002f36:	1f36      	subs	r6, r6, #4
 8002f38:	42a5      	cmp	r5, r4
 8002f3a:	d2f5      	bcs.n	8002f28 <nl_func_asinh_array_f32+0x18>
 8002f3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f40 <forward_asinh>:
 8002f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f42:	b081      	sub	sp, #4
 8002f44:	6942      	ldr	r2, [r0, #20]
 8002f46:	f04f 0501 	mov.w	r5, #1
 8002f4a:	8811      	ldrh	r1, [r2, #0]
 8002f4c:	2900      	cmp	r1, #0
 8002f4e:	bf1a      	itte	ne
 8002f50:	6850      	ldrne	r0, [r2, #4]
 8002f52:	1d00      	addne	r0, r0, #4
 8002f54:	2004      	moveq	r0, #4
 8002f56:	6800      	ldr	r0, [r0, #0]
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	bf14      	ite	ne
 8002f5c:	6803      	ldrne	r3, [r0, #0]
 8002f5e:	2300      	moveq	r3, #0
 8002f60:	2902      	cmp	r1, #2
 8002f62:	bfa6      	itte	ge
 8002f64:	6850      	ldrge	r0, [r2, #4]
 8002f66:	3010      	addge	r0, #16
 8002f68:	2004      	movlt	r0, #4
 8002f6a:	6800      	ldr	r0, [r0, #0]
 8002f6c:	2800      	cmp	r0, #0
 8002f6e:	bf19      	ittee	ne
 8002f70:	6800      	ldrne	r0, [r0, #0]
 8002f72:	f100 0418 	addne.w	r4, r0, #24
 8002f76:	2100      	moveq	r1, #0
 8002f78:	f101 0418 	addeq.w	r4, r1, #24
 8002f7c:	f103 0108 	add.w	r1, r3, #8
 8002f80:	680a      	ldr	r2, [r1, #0]
 8002f82:	0a12      	lsrs	r2, r2, #8
 8002f84:	d01f      	beq.n	8002fc6 <forward_asinh+0x86>
 8002f86:	684e      	ldr	r6, [r1, #4]
 8002f88:	4610      	mov	r0, r2
 8002f8a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002f8e:	1f0f      	subs	r7, r1, #4
 8002f90:	f010 0103 	ands.w	r1, r0, #3
 8002f94:	d006      	beq.n	8002fa4 <forward_asinh+0x64>
 8002f96:	1e52      	subs	r2, r2, #1
 8002f98:	f857 c904 	ldr.w	ip, [r7], #-4
 8002f9c:	1e49      	subs	r1, r1, #1
 8002f9e:	fb0c f505 	mul.w	r5, ip, r5
 8002fa2:	d1f8      	bne.n	8002f96 <forward_asinh+0x56>
 8002fa4:	0880      	lsrs	r0, r0, #2
 8002fa6:	d00e      	beq.n	8002fc6 <forward_asinh+0x86>
 8002fa8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002fac:	3910      	subs	r1, #16
 8002fae:	68ca      	ldr	r2, [r1, #12]
 8002fb0:	688e      	ldr	r6, [r1, #8]
 8002fb2:	684f      	ldr	r7, [r1, #4]
 8002fb4:	f851 c910 	ldr.w	ip, [r1], #-16
 8002fb8:	4372      	muls	r2, r6
 8002fba:	437a      	muls	r2, r7
 8002fbc:	fb0c f202 	mul.w	r2, ip, r2
 8002fc0:	4355      	muls	r5, r2
 8002fc2:	1e40      	subs	r0, r0, #1
 8002fc4:	d1f3      	bne.n	8002fae <forward_asinh+0x6e>
 8002fc6:	6998      	ldr	r0, [r3, #24]
 8002fc8:	6821      	ldr	r1, [r4, #0]
 8002fca:	6886      	ldr	r6, [r0, #8]
 8002fcc:	688a      	ldr	r2, [r1, #8]
 8002fce:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002fd2:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8002fd6:	1f07      	subs	r7, r0, #4
 8002fd8:	1f1c      	subs	r4, r3, #4
 8002fda:	42b7      	cmp	r7, r6
 8002fdc:	f0c0 800a 	bcc.w	8002ff4 <forward_asinh+0xb4>
 8002fe0:	ed97 0a00 	vldr	s0, [r7]
 8002fe4:	1f3f      	subs	r7, r7, #4
 8002fe6:	f010 fe8f 	bl	8013d08 <asinhf>
 8002fea:	ed84 0a00 	vstr	s0, [r4]
 8002fee:	1f24      	subs	r4, r4, #4
 8002ff0:	42b7      	cmp	r7, r6
 8002ff2:	d2f5      	bcs.n	8002fe0 <forward_asinh+0xa0>
 8002ff4:	b001      	add	sp, #4
 8002ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ff8 <nl_func_atan_array_f32>:
 8002ff8:	b570      	push	{r4, r5, r6, lr}
 8002ffa:	688c      	ldr	r4, [r1, #8]
 8002ffc:	6880      	ldr	r0, [r0, #8]
 8002ffe:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003002:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003006:	1f0d      	subs	r5, r1, #4
 8003008:	1f16      	subs	r6, r2, #4
 800300a:	42a5      	cmp	r5, r4
 800300c:	f0c0 800a 	bcc.w	8003024 <nl_func_atan_array_f32+0x2c>
 8003010:	ed95 0a00 	vldr	s0, [r5]
 8003014:	1f2d      	subs	r5, r5, #4
 8003016:	f010 fedf 	bl	8013dd8 <atanf>
 800301a:	ed86 0a00 	vstr	s0, [r6]
 800301e:	1f36      	subs	r6, r6, #4
 8003020:	42a5      	cmp	r5, r4
 8003022:	d2f5      	bcs.n	8003010 <nl_func_atan_array_f32+0x18>
 8003024:	bd70      	pop	{r4, r5, r6, pc}
	...

08003028 <forward_atan>:
 8003028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800302a:	b081      	sub	sp, #4
 800302c:	6942      	ldr	r2, [r0, #20]
 800302e:	f04f 0501 	mov.w	r5, #1
 8003032:	8811      	ldrh	r1, [r2, #0]
 8003034:	2900      	cmp	r1, #0
 8003036:	bf1a      	itte	ne
 8003038:	6850      	ldrne	r0, [r2, #4]
 800303a:	1d00      	addne	r0, r0, #4
 800303c:	2004      	moveq	r0, #4
 800303e:	6800      	ldr	r0, [r0, #0]
 8003040:	2800      	cmp	r0, #0
 8003042:	bf14      	ite	ne
 8003044:	6803      	ldrne	r3, [r0, #0]
 8003046:	2300      	moveq	r3, #0
 8003048:	2902      	cmp	r1, #2
 800304a:	bfa6      	itte	ge
 800304c:	6850      	ldrge	r0, [r2, #4]
 800304e:	3010      	addge	r0, #16
 8003050:	2004      	movlt	r0, #4
 8003052:	6800      	ldr	r0, [r0, #0]
 8003054:	2800      	cmp	r0, #0
 8003056:	bf19      	ittee	ne
 8003058:	6800      	ldrne	r0, [r0, #0]
 800305a:	f100 0418 	addne.w	r4, r0, #24
 800305e:	2100      	moveq	r1, #0
 8003060:	f101 0418 	addeq.w	r4, r1, #24
 8003064:	f103 0108 	add.w	r1, r3, #8
 8003068:	680a      	ldr	r2, [r1, #0]
 800306a:	0a12      	lsrs	r2, r2, #8
 800306c:	d01f      	beq.n	80030ae <forward_atan+0x86>
 800306e:	684e      	ldr	r6, [r1, #4]
 8003070:	4610      	mov	r0, r2
 8003072:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003076:	1f0f      	subs	r7, r1, #4
 8003078:	f010 0103 	ands.w	r1, r0, #3
 800307c:	d006      	beq.n	800308c <forward_atan+0x64>
 800307e:	1e52      	subs	r2, r2, #1
 8003080:	f857 c904 	ldr.w	ip, [r7], #-4
 8003084:	1e49      	subs	r1, r1, #1
 8003086:	fb0c f505 	mul.w	r5, ip, r5
 800308a:	d1f8      	bne.n	800307e <forward_atan+0x56>
 800308c:	0880      	lsrs	r0, r0, #2
 800308e:	d00e      	beq.n	80030ae <forward_atan+0x86>
 8003090:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003094:	3910      	subs	r1, #16
 8003096:	68ca      	ldr	r2, [r1, #12]
 8003098:	688e      	ldr	r6, [r1, #8]
 800309a:	684f      	ldr	r7, [r1, #4]
 800309c:	f851 c910 	ldr.w	ip, [r1], #-16
 80030a0:	4372      	muls	r2, r6
 80030a2:	437a      	muls	r2, r7
 80030a4:	fb0c f202 	mul.w	r2, ip, r2
 80030a8:	4355      	muls	r5, r2
 80030aa:	1e40      	subs	r0, r0, #1
 80030ac:	d1f3      	bne.n	8003096 <forward_atan+0x6e>
 80030ae:	6998      	ldr	r0, [r3, #24]
 80030b0:	6821      	ldr	r1, [r4, #0]
 80030b2:	6886      	ldr	r6, [r0, #8]
 80030b4:	688a      	ldr	r2, [r1, #8]
 80030b6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80030ba:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 80030be:	1f07      	subs	r7, r0, #4
 80030c0:	1f1c      	subs	r4, r3, #4
 80030c2:	42b7      	cmp	r7, r6
 80030c4:	f0c0 800a 	bcc.w	80030dc <forward_atan+0xb4>
 80030c8:	ed97 0a00 	vldr	s0, [r7]
 80030cc:	1f3f      	subs	r7, r7, #4
 80030ce:	f010 fe83 	bl	8013dd8 <atanf>
 80030d2:	ed84 0a00 	vstr	s0, [r4]
 80030d6:	1f24      	subs	r4, r4, #4
 80030d8:	42b7      	cmp	r7, r6
 80030da:	d2f5      	bcs.n	80030c8 <forward_atan+0xa0>
 80030dc:	b001      	add	sp, #4
 80030de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030e0 <nl_func_atanh_array_f32>:
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	688c      	ldr	r4, [r1, #8]
 80030e4:	6880      	ldr	r0, [r0, #8]
 80030e6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80030ea:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80030ee:	1f0d      	subs	r5, r1, #4
 80030f0:	1f16      	subs	r6, r2, #4
 80030f2:	42a5      	cmp	r5, r4
 80030f4:	f0c0 800a 	bcc.w	800310c <nl_func_atanh_array_f32+0x2c>
 80030f8:	ed95 0a00 	vldr	s0, [r5]
 80030fc:	1f2d      	subs	r5, r5, #4
 80030fe:	f011 ff53 	bl	8014fa8 <atanhf>
 8003102:	ed86 0a00 	vstr	s0, [r6]
 8003106:	1f36      	subs	r6, r6, #4
 8003108:	42a5      	cmp	r5, r4
 800310a:	d2f5      	bcs.n	80030f8 <nl_func_atanh_array_f32+0x18>
 800310c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003110 <forward_atanh>:
 8003110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003112:	b081      	sub	sp, #4
 8003114:	6942      	ldr	r2, [r0, #20]
 8003116:	f04f 0501 	mov.w	r5, #1
 800311a:	8811      	ldrh	r1, [r2, #0]
 800311c:	2900      	cmp	r1, #0
 800311e:	bf1a      	itte	ne
 8003120:	6850      	ldrne	r0, [r2, #4]
 8003122:	1d00      	addne	r0, r0, #4
 8003124:	2004      	moveq	r0, #4
 8003126:	6800      	ldr	r0, [r0, #0]
 8003128:	2800      	cmp	r0, #0
 800312a:	bf14      	ite	ne
 800312c:	6803      	ldrne	r3, [r0, #0]
 800312e:	2300      	moveq	r3, #0
 8003130:	2902      	cmp	r1, #2
 8003132:	bfa6      	itte	ge
 8003134:	6850      	ldrge	r0, [r2, #4]
 8003136:	3010      	addge	r0, #16
 8003138:	2004      	movlt	r0, #4
 800313a:	6800      	ldr	r0, [r0, #0]
 800313c:	2800      	cmp	r0, #0
 800313e:	bf19      	ittee	ne
 8003140:	6800      	ldrne	r0, [r0, #0]
 8003142:	f100 0418 	addne.w	r4, r0, #24
 8003146:	2100      	moveq	r1, #0
 8003148:	f101 0418 	addeq.w	r4, r1, #24
 800314c:	f103 0108 	add.w	r1, r3, #8
 8003150:	680a      	ldr	r2, [r1, #0]
 8003152:	0a12      	lsrs	r2, r2, #8
 8003154:	d01f      	beq.n	8003196 <forward_atanh+0x86>
 8003156:	684e      	ldr	r6, [r1, #4]
 8003158:	4610      	mov	r0, r2
 800315a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800315e:	1f0f      	subs	r7, r1, #4
 8003160:	f010 0103 	ands.w	r1, r0, #3
 8003164:	d006      	beq.n	8003174 <forward_atanh+0x64>
 8003166:	1e52      	subs	r2, r2, #1
 8003168:	f857 c904 	ldr.w	ip, [r7], #-4
 800316c:	1e49      	subs	r1, r1, #1
 800316e:	fb0c f505 	mul.w	r5, ip, r5
 8003172:	d1f8      	bne.n	8003166 <forward_atanh+0x56>
 8003174:	0880      	lsrs	r0, r0, #2
 8003176:	d00e      	beq.n	8003196 <forward_atanh+0x86>
 8003178:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800317c:	3910      	subs	r1, #16
 800317e:	68ca      	ldr	r2, [r1, #12]
 8003180:	688e      	ldr	r6, [r1, #8]
 8003182:	684f      	ldr	r7, [r1, #4]
 8003184:	f851 c910 	ldr.w	ip, [r1], #-16
 8003188:	4372      	muls	r2, r6
 800318a:	437a      	muls	r2, r7
 800318c:	fb0c f202 	mul.w	r2, ip, r2
 8003190:	4355      	muls	r5, r2
 8003192:	1e40      	subs	r0, r0, #1
 8003194:	d1f3      	bne.n	800317e <forward_atanh+0x6e>
 8003196:	6998      	ldr	r0, [r3, #24]
 8003198:	6821      	ldr	r1, [r4, #0]
 800319a:	6886      	ldr	r6, [r0, #8]
 800319c:	688a      	ldr	r2, [r1, #8]
 800319e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80031a2:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 80031a6:	1f07      	subs	r7, r0, #4
 80031a8:	1f1c      	subs	r4, r3, #4
 80031aa:	42b7      	cmp	r7, r6
 80031ac:	f0c0 800a 	bcc.w	80031c4 <forward_atanh+0xb4>
 80031b0:	ed97 0a00 	vldr	s0, [r7]
 80031b4:	1f3f      	subs	r7, r7, #4
 80031b6:	f011 fef7 	bl	8014fa8 <atanhf>
 80031ba:	ed84 0a00 	vstr	s0, [r4]
 80031be:	1f24      	subs	r4, r4, #4
 80031c0:	42b7      	cmp	r7, r6
 80031c2:	d2f5      	bcs.n	80031b0 <forward_atanh+0xa0>
 80031c4:	b001      	add	sp, #4
 80031c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031c8 <nl_func_cos_array_f32>:
 80031c8:	b570      	push	{r4, r5, r6, lr}
 80031ca:	688c      	ldr	r4, [r1, #8]
 80031cc:	6880      	ldr	r0, [r0, #8]
 80031ce:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80031d2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80031d6:	1f0d      	subs	r5, r1, #4
 80031d8:	1f16      	subs	r6, r2, #4
 80031da:	42a5      	cmp	r5, r4
 80031dc:	f0c0 800a 	bcc.w	80031f4 <nl_func_cos_array_f32+0x2c>
 80031e0:	ed95 0a00 	vldr	s0, [r5]
 80031e4:	1f2d      	subs	r5, r5, #4
 80031e6:	f010 ff09 	bl	8013ffc <cosf>
 80031ea:	ed86 0a00 	vstr	s0, [r6]
 80031ee:	1f36      	subs	r6, r6, #4
 80031f0:	42a5      	cmp	r5, r4
 80031f2:	d2f5      	bcs.n	80031e0 <nl_func_cos_array_f32+0x18>
 80031f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080031f8 <forward_cos>:
 80031f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031fa:	b081      	sub	sp, #4
 80031fc:	6942      	ldr	r2, [r0, #20]
 80031fe:	f04f 0501 	mov.w	r5, #1
 8003202:	8811      	ldrh	r1, [r2, #0]
 8003204:	2900      	cmp	r1, #0
 8003206:	bf1a      	itte	ne
 8003208:	6850      	ldrne	r0, [r2, #4]
 800320a:	1d00      	addne	r0, r0, #4
 800320c:	2004      	moveq	r0, #4
 800320e:	6800      	ldr	r0, [r0, #0]
 8003210:	2800      	cmp	r0, #0
 8003212:	bf14      	ite	ne
 8003214:	6803      	ldrne	r3, [r0, #0]
 8003216:	2300      	moveq	r3, #0
 8003218:	2902      	cmp	r1, #2
 800321a:	bfa6      	itte	ge
 800321c:	6850      	ldrge	r0, [r2, #4]
 800321e:	3010      	addge	r0, #16
 8003220:	2004      	movlt	r0, #4
 8003222:	6800      	ldr	r0, [r0, #0]
 8003224:	2800      	cmp	r0, #0
 8003226:	bf19      	ittee	ne
 8003228:	6800      	ldrne	r0, [r0, #0]
 800322a:	f100 0418 	addne.w	r4, r0, #24
 800322e:	2100      	moveq	r1, #0
 8003230:	f101 0418 	addeq.w	r4, r1, #24
 8003234:	f103 0108 	add.w	r1, r3, #8
 8003238:	680a      	ldr	r2, [r1, #0]
 800323a:	0a12      	lsrs	r2, r2, #8
 800323c:	d01f      	beq.n	800327e <forward_cos+0x86>
 800323e:	684e      	ldr	r6, [r1, #4]
 8003240:	4610      	mov	r0, r2
 8003242:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003246:	1f0f      	subs	r7, r1, #4
 8003248:	f010 0103 	ands.w	r1, r0, #3
 800324c:	d006      	beq.n	800325c <forward_cos+0x64>
 800324e:	1e52      	subs	r2, r2, #1
 8003250:	f857 c904 	ldr.w	ip, [r7], #-4
 8003254:	1e49      	subs	r1, r1, #1
 8003256:	fb0c f505 	mul.w	r5, ip, r5
 800325a:	d1f8      	bne.n	800324e <forward_cos+0x56>
 800325c:	0880      	lsrs	r0, r0, #2
 800325e:	d00e      	beq.n	800327e <forward_cos+0x86>
 8003260:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003264:	3910      	subs	r1, #16
 8003266:	68ca      	ldr	r2, [r1, #12]
 8003268:	688e      	ldr	r6, [r1, #8]
 800326a:	684f      	ldr	r7, [r1, #4]
 800326c:	f851 c910 	ldr.w	ip, [r1], #-16
 8003270:	4372      	muls	r2, r6
 8003272:	437a      	muls	r2, r7
 8003274:	fb0c f202 	mul.w	r2, ip, r2
 8003278:	4355      	muls	r5, r2
 800327a:	1e40      	subs	r0, r0, #1
 800327c:	d1f3      	bne.n	8003266 <forward_cos+0x6e>
 800327e:	6998      	ldr	r0, [r3, #24]
 8003280:	6821      	ldr	r1, [r4, #0]
 8003282:	6886      	ldr	r6, [r0, #8]
 8003284:	688a      	ldr	r2, [r1, #8]
 8003286:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800328a:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800328e:	1f07      	subs	r7, r0, #4
 8003290:	1f1c      	subs	r4, r3, #4
 8003292:	42b7      	cmp	r7, r6
 8003294:	f0c0 800a 	bcc.w	80032ac <forward_cos+0xb4>
 8003298:	ed97 0a00 	vldr	s0, [r7]
 800329c:	1f3f      	subs	r7, r7, #4
 800329e:	f010 fead 	bl	8013ffc <cosf>
 80032a2:	ed84 0a00 	vstr	s0, [r4]
 80032a6:	1f24      	subs	r4, r4, #4
 80032a8:	42b7      	cmp	r7, r6
 80032aa:	d2f5      	bcs.n	8003298 <forward_cos+0xa0>
 80032ac:	b001      	add	sp, #4
 80032ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032b0 <nl_func_cosh_array_f32>:
 80032b0:	b570      	push	{r4, r5, r6, lr}
 80032b2:	688c      	ldr	r4, [r1, #8]
 80032b4:	6880      	ldr	r0, [r0, #8]
 80032b6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80032ba:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80032be:	1f0d      	subs	r5, r1, #4
 80032c0:	1f16      	subs	r6, r2, #4
 80032c2:	42a5      	cmp	r5, r4
 80032c4:	f0c0 800a 	bcc.w	80032dc <nl_func_cosh_array_f32+0x2c>
 80032c8:	ed95 0a00 	vldr	s0, [r5]
 80032cc:	1f2d      	subs	r5, r5, #4
 80032ce:	f011 fed3 	bl	8015078 <coshf>
 80032d2:	ed86 0a00 	vstr	s0, [r6]
 80032d6:	1f36      	subs	r6, r6, #4
 80032d8:	42a5      	cmp	r5, r4
 80032da:	d2f5      	bcs.n	80032c8 <nl_func_cosh_array_f32+0x18>
 80032dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080032e0 <forward_cosh>:
 80032e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032e2:	b081      	sub	sp, #4
 80032e4:	6942      	ldr	r2, [r0, #20]
 80032e6:	f04f 0501 	mov.w	r5, #1
 80032ea:	8811      	ldrh	r1, [r2, #0]
 80032ec:	2900      	cmp	r1, #0
 80032ee:	bf1a      	itte	ne
 80032f0:	6850      	ldrne	r0, [r2, #4]
 80032f2:	1d00      	addne	r0, r0, #4
 80032f4:	2004      	moveq	r0, #4
 80032f6:	6800      	ldr	r0, [r0, #0]
 80032f8:	2800      	cmp	r0, #0
 80032fa:	bf14      	ite	ne
 80032fc:	6803      	ldrne	r3, [r0, #0]
 80032fe:	2300      	moveq	r3, #0
 8003300:	2902      	cmp	r1, #2
 8003302:	bfa6      	itte	ge
 8003304:	6850      	ldrge	r0, [r2, #4]
 8003306:	3010      	addge	r0, #16
 8003308:	2004      	movlt	r0, #4
 800330a:	6800      	ldr	r0, [r0, #0]
 800330c:	2800      	cmp	r0, #0
 800330e:	bf19      	ittee	ne
 8003310:	6800      	ldrne	r0, [r0, #0]
 8003312:	f100 0418 	addne.w	r4, r0, #24
 8003316:	2100      	moveq	r1, #0
 8003318:	f101 0418 	addeq.w	r4, r1, #24
 800331c:	f103 0108 	add.w	r1, r3, #8
 8003320:	680a      	ldr	r2, [r1, #0]
 8003322:	0a12      	lsrs	r2, r2, #8
 8003324:	d01f      	beq.n	8003366 <forward_cosh+0x86>
 8003326:	684e      	ldr	r6, [r1, #4]
 8003328:	4610      	mov	r0, r2
 800332a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800332e:	1f0f      	subs	r7, r1, #4
 8003330:	f010 0103 	ands.w	r1, r0, #3
 8003334:	d006      	beq.n	8003344 <forward_cosh+0x64>
 8003336:	1e52      	subs	r2, r2, #1
 8003338:	f857 c904 	ldr.w	ip, [r7], #-4
 800333c:	1e49      	subs	r1, r1, #1
 800333e:	fb0c f505 	mul.w	r5, ip, r5
 8003342:	d1f8      	bne.n	8003336 <forward_cosh+0x56>
 8003344:	0880      	lsrs	r0, r0, #2
 8003346:	d00e      	beq.n	8003366 <forward_cosh+0x86>
 8003348:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800334c:	3910      	subs	r1, #16
 800334e:	68ca      	ldr	r2, [r1, #12]
 8003350:	688e      	ldr	r6, [r1, #8]
 8003352:	684f      	ldr	r7, [r1, #4]
 8003354:	f851 c910 	ldr.w	ip, [r1], #-16
 8003358:	4372      	muls	r2, r6
 800335a:	437a      	muls	r2, r7
 800335c:	fb0c f202 	mul.w	r2, ip, r2
 8003360:	4355      	muls	r5, r2
 8003362:	1e40      	subs	r0, r0, #1
 8003364:	d1f3      	bne.n	800334e <forward_cosh+0x6e>
 8003366:	6998      	ldr	r0, [r3, #24]
 8003368:	6821      	ldr	r1, [r4, #0]
 800336a:	6886      	ldr	r6, [r0, #8]
 800336c:	688a      	ldr	r2, [r1, #8]
 800336e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003372:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003376:	1f07      	subs	r7, r0, #4
 8003378:	1f1c      	subs	r4, r3, #4
 800337a:	42b7      	cmp	r7, r6
 800337c:	f0c0 800a 	bcc.w	8003394 <forward_cosh+0xb4>
 8003380:	ed97 0a00 	vldr	s0, [r7]
 8003384:	1f3f      	subs	r7, r7, #4
 8003386:	f011 fe77 	bl	8015078 <coshf>
 800338a:	ed84 0a00 	vstr	s0, [r4]
 800338e:	1f24      	subs	r4, r4, #4
 8003390:	42b7      	cmp	r7, r6
 8003392:	d2f5      	bcs.n	8003380 <forward_cosh+0xa0>
 8003394:	b001      	add	sp, #4
 8003396:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003398 <nl_func_erf_array_f32>:
 8003398:	b570      	push	{r4, r5, r6, lr}
 800339a:	688c      	ldr	r4, [r1, #8]
 800339c:	6880      	ldr	r0, [r0, #8]
 800339e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80033a2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80033a6:	1f0d      	subs	r5, r1, #4
 80033a8:	1f16      	subs	r6, r2, #4
 80033aa:	42a5      	cmp	r5, r4
 80033ac:	f0c0 800a 	bcc.w	80033c4 <nl_func_erf_array_f32+0x2c>
 80033b0:	ed95 0a00 	vldr	s0, [r5]
 80033b4:	1f2d      	subs	r5, r5, #4
 80033b6:	f010 fe61 	bl	801407c <erff>
 80033ba:	ed86 0a00 	vstr	s0, [r6]
 80033be:	1f36      	subs	r6, r6, #4
 80033c0:	42a5      	cmp	r5, r4
 80033c2:	d2f5      	bcs.n	80033b0 <nl_func_erf_array_f32+0x18>
 80033c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080033c8 <forward_erf>:
 80033c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ca:	b081      	sub	sp, #4
 80033cc:	6942      	ldr	r2, [r0, #20]
 80033ce:	f04f 0501 	mov.w	r5, #1
 80033d2:	8811      	ldrh	r1, [r2, #0]
 80033d4:	2900      	cmp	r1, #0
 80033d6:	bf1a      	itte	ne
 80033d8:	6850      	ldrne	r0, [r2, #4]
 80033da:	1d00      	addne	r0, r0, #4
 80033dc:	2004      	moveq	r0, #4
 80033de:	6800      	ldr	r0, [r0, #0]
 80033e0:	2800      	cmp	r0, #0
 80033e2:	bf14      	ite	ne
 80033e4:	6803      	ldrne	r3, [r0, #0]
 80033e6:	2300      	moveq	r3, #0
 80033e8:	2902      	cmp	r1, #2
 80033ea:	bfa6      	itte	ge
 80033ec:	6850      	ldrge	r0, [r2, #4]
 80033ee:	3010      	addge	r0, #16
 80033f0:	2004      	movlt	r0, #4
 80033f2:	6800      	ldr	r0, [r0, #0]
 80033f4:	2800      	cmp	r0, #0
 80033f6:	bf19      	ittee	ne
 80033f8:	6800      	ldrne	r0, [r0, #0]
 80033fa:	f100 0418 	addne.w	r4, r0, #24
 80033fe:	2100      	moveq	r1, #0
 8003400:	f101 0418 	addeq.w	r4, r1, #24
 8003404:	f103 0108 	add.w	r1, r3, #8
 8003408:	680a      	ldr	r2, [r1, #0]
 800340a:	0a12      	lsrs	r2, r2, #8
 800340c:	d01f      	beq.n	800344e <forward_erf+0x86>
 800340e:	684e      	ldr	r6, [r1, #4]
 8003410:	4610      	mov	r0, r2
 8003412:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003416:	1f0f      	subs	r7, r1, #4
 8003418:	f010 0103 	ands.w	r1, r0, #3
 800341c:	d006      	beq.n	800342c <forward_erf+0x64>
 800341e:	1e52      	subs	r2, r2, #1
 8003420:	f857 c904 	ldr.w	ip, [r7], #-4
 8003424:	1e49      	subs	r1, r1, #1
 8003426:	fb0c f505 	mul.w	r5, ip, r5
 800342a:	d1f8      	bne.n	800341e <forward_erf+0x56>
 800342c:	0880      	lsrs	r0, r0, #2
 800342e:	d00e      	beq.n	800344e <forward_erf+0x86>
 8003430:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003434:	3910      	subs	r1, #16
 8003436:	68ca      	ldr	r2, [r1, #12]
 8003438:	688e      	ldr	r6, [r1, #8]
 800343a:	684f      	ldr	r7, [r1, #4]
 800343c:	f851 c910 	ldr.w	ip, [r1], #-16
 8003440:	4372      	muls	r2, r6
 8003442:	437a      	muls	r2, r7
 8003444:	fb0c f202 	mul.w	r2, ip, r2
 8003448:	4355      	muls	r5, r2
 800344a:	1e40      	subs	r0, r0, #1
 800344c:	d1f3      	bne.n	8003436 <forward_erf+0x6e>
 800344e:	6998      	ldr	r0, [r3, #24]
 8003450:	6821      	ldr	r1, [r4, #0]
 8003452:	6886      	ldr	r6, [r0, #8]
 8003454:	688a      	ldr	r2, [r1, #8]
 8003456:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800345a:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800345e:	1f07      	subs	r7, r0, #4
 8003460:	1f1c      	subs	r4, r3, #4
 8003462:	42b7      	cmp	r7, r6
 8003464:	f0c0 800a 	bcc.w	800347c <forward_erf+0xb4>
 8003468:	ed97 0a00 	vldr	s0, [r7]
 800346c:	1f3f      	subs	r7, r7, #4
 800346e:	f010 fe05 	bl	801407c <erff>
 8003472:	ed84 0a00 	vstr	s0, [r4]
 8003476:	1f24      	subs	r4, r4, #4
 8003478:	42b7      	cmp	r7, r6
 800347a:	d2f5      	bcs.n	8003468 <forward_erf+0xa0>
 800347c:	b001      	add	sp, #4
 800347e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003480 <nl_func_log_array_f32>:
 8003480:	b570      	push	{r4, r5, r6, lr}
 8003482:	688c      	ldr	r4, [r1, #8]
 8003484:	6880      	ldr	r0, [r0, #8]
 8003486:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800348a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800348e:	1f0d      	subs	r5, r1, #4
 8003490:	1f16      	subs	r6, r2, #4
 8003492:	42a5      	cmp	r5, r4
 8003494:	f0c0 800a 	bcc.w	80034ac <nl_func_log_array_f32+0x2c>
 8003498:	ed95 0a00 	vldr	s0, [r5]
 800349c:	1f2d      	subs	r5, r5, #4
 800349e:	f011 f895 	bl	80145cc <logf>
 80034a2:	ed86 0a00 	vstr	s0, [r6]
 80034a6:	1f36      	subs	r6, r6, #4
 80034a8:	42a5      	cmp	r5, r4
 80034aa:	d2f5      	bcs.n	8003498 <nl_func_log_array_f32+0x18>
 80034ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080034b0 <forward_log>:
 80034b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b2:	b081      	sub	sp, #4
 80034b4:	6942      	ldr	r2, [r0, #20]
 80034b6:	f04f 0501 	mov.w	r5, #1
 80034ba:	8811      	ldrh	r1, [r2, #0]
 80034bc:	2900      	cmp	r1, #0
 80034be:	bf1a      	itte	ne
 80034c0:	6850      	ldrne	r0, [r2, #4]
 80034c2:	1d00      	addne	r0, r0, #4
 80034c4:	2004      	moveq	r0, #4
 80034c6:	6800      	ldr	r0, [r0, #0]
 80034c8:	2800      	cmp	r0, #0
 80034ca:	bf14      	ite	ne
 80034cc:	6803      	ldrne	r3, [r0, #0]
 80034ce:	2300      	moveq	r3, #0
 80034d0:	2902      	cmp	r1, #2
 80034d2:	bfa6      	itte	ge
 80034d4:	6850      	ldrge	r0, [r2, #4]
 80034d6:	3010      	addge	r0, #16
 80034d8:	2004      	movlt	r0, #4
 80034da:	6800      	ldr	r0, [r0, #0]
 80034dc:	2800      	cmp	r0, #0
 80034de:	bf19      	ittee	ne
 80034e0:	6800      	ldrne	r0, [r0, #0]
 80034e2:	f100 0418 	addne.w	r4, r0, #24
 80034e6:	2100      	moveq	r1, #0
 80034e8:	f101 0418 	addeq.w	r4, r1, #24
 80034ec:	f103 0108 	add.w	r1, r3, #8
 80034f0:	680a      	ldr	r2, [r1, #0]
 80034f2:	0a12      	lsrs	r2, r2, #8
 80034f4:	d01f      	beq.n	8003536 <forward_log+0x86>
 80034f6:	684e      	ldr	r6, [r1, #4]
 80034f8:	4610      	mov	r0, r2
 80034fa:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80034fe:	1f0f      	subs	r7, r1, #4
 8003500:	f010 0103 	ands.w	r1, r0, #3
 8003504:	d006      	beq.n	8003514 <forward_log+0x64>
 8003506:	1e52      	subs	r2, r2, #1
 8003508:	f857 c904 	ldr.w	ip, [r7], #-4
 800350c:	1e49      	subs	r1, r1, #1
 800350e:	fb0c f505 	mul.w	r5, ip, r5
 8003512:	d1f8      	bne.n	8003506 <forward_log+0x56>
 8003514:	0880      	lsrs	r0, r0, #2
 8003516:	d00e      	beq.n	8003536 <forward_log+0x86>
 8003518:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800351c:	3910      	subs	r1, #16
 800351e:	68ca      	ldr	r2, [r1, #12]
 8003520:	688e      	ldr	r6, [r1, #8]
 8003522:	684f      	ldr	r7, [r1, #4]
 8003524:	f851 c910 	ldr.w	ip, [r1], #-16
 8003528:	4372      	muls	r2, r6
 800352a:	437a      	muls	r2, r7
 800352c:	fb0c f202 	mul.w	r2, ip, r2
 8003530:	4355      	muls	r5, r2
 8003532:	1e40      	subs	r0, r0, #1
 8003534:	d1f3      	bne.n	800351e <forward_log+0x6e>
 8003536:	6998      	ldr	r0, [r3, #24]
 8003538:	6821      	ldr	r1, [r4, #0]
 800353a:	6886      	ldr	r6, [r0, #8]
 800353c:	688a      	ldr	r2, [r1, #8]
 800353e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003542:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003546:	1f07      	subs	r7, r0, #4
 8003548:	1f1c      	subs	r4, r3, #4
 800354a:	42b7      	cmp	r7, r6
 800354c:	f0c0 800a 	bcc.w	8003564 <forward_log+0xb4>
 8003550:	ed97 0a00 	vldr	s0, [r7]
 8003554:	1f3f      	subs	r7, r7, #4
 8003556:	f011 f839 	bl	80145cc <logf>
 800355a:	ed84 0a00 	vstr	s0, [r4]
 800355e:	1f24      	subs	r4, r4, #4
 8003560:	42b7      	cmp	r7, r6
 8003562:	d2f5      	bcs.n	8003550 <forward_log+0xa0>
 8003564:	b001      	add	sp, #4
 8003566:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003568 <nl_func_rsqrt_array_f32>:
 8003568:	b570      	push	{r4, r5, r6, lr}
 800356a:	460c      	mov	r4, r1
 800356c:	6880      	ldr	r0, [r0, #8]
 800356e:	68a1      	ldr	r1, [r4, #8]
 8003570:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003574:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003578:	1f1d      	subs	r5, r3, #4
 800357a:	1f16      	subs	r6, r2, #4
 800357c:	428d      	cmp	r5, r1
 800357e:	d30e      	bcc.n	800359e <nl_func_rsqrt_array_f32+0x36>
 8003580:	ed95 0a00 	vldr	s0, [r5]
 8003584:	1f2d      	subs	r5, r5, #4
 8003586:	f003 f9b9 	bl	80068fc <ai_math_sqrt>
 800358a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800358e:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8003592:	edc6 0a00 	vstr	s1, [r6]
 8003596:	68a0      	ldr	r0, [r4, #8]
 8003598:	1f36      	subs	r6, r6, #4
 800359a:	4285      	cmp	r5, r0
 800359c:	d2f0      	bcs.n	8003580 <nl_func_rsqrt_array_f32+0x18>
 800359e:	bd70      	pop	{r4, r5, r6, pc}

080035a0 <forward_rsqrt>:
 80035a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035a2:	b081      	sub	sp, #4
 80035a4:	6942      	ldr	r2, [r0, #20]
 80035a6:	f04f 0501 	mov.w	r5, #1
 80035aa:	8811      	ldrh	r1, [r2, #0]
 80035ac:	2900      	cmp	r1, #0
 80035ae:	bf1a      	itte	ne
 80035b0:	6850      	ldrne	r0, [r2, #4]
 80035b2:	1d00      	addne	r0, r0, #4
 80035b4:	2004      	moveq	r0, #4
 80035b6:	6800      	ldr	r0, [r0, #0]
 80035b8:	2800      	cmp	r0, #0
 80035ba:	bf14      	ite	ne
 80035bc:	6803      	ldrne	r3, [r0, #0]
 80035be:	2300      	moveq	r3, #0
 80035c0:	2902      	cmp	r1, #2
 80035c2:	bfa6      	itte	ge
 80035c4:	6850      	ldrge	r0, [r2, #4]
 80035c6:	3010      	addge	r0, #16
 80035c8:	2004      	movlt	r0, #4
 80035ca:	6800      	ldr	r0, [r0, #0]
 80035cc:	2800      	cmp	r0, #0
 80035ce:	bf19      	ittee	ne
 80035d0:	6800      	ldrne	r0, [r0, #0]
 80035d2:	f100 0418 	addne.w	r4, r0, #24
 80035d6:	2100      	moveq	r1, #0
 80035d8:	f101 0418 	addeq.w	r4, r1, #24
 80035dc:	f103 0108 	add.w	r1, r3, #8
 80035e0:	680a      	ldr	r2, [r1, #0]
 80035e2:	0a12      	lsrs	r2, r2, #8
 80035e4:	d01f      	beq.n	8003626 <forward_rsqrt+0x86>
 80035e6:	684e      	ldr	r6, [r1, #4]
 80035e8:	4610      	mov	r0, r2
 80035ea:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80035ee:	1f0f      	subs	r7, r1, #4
 80035f0:	f010 0103 	ands.w	r1, r0, #3
 80035f4:	d006      	beq.n	8003604 <forward_rsqrt+0x64>
 80035f6:	1e52      	subs	r2, r2, #1
 80035f8:	f857 c904 	ldr.w	ip, [r7], #-4
 80035fc:	1e49      	subs	r1, r1, #1
 80035fe:	fb0c f505 	mul.w	r5, ip, r5
 8003602:	d1f8      	bne.n	80035f6 <forward_rsqrt+0x56>
 8003604:	0880      	lsrs	r0, r0, #2
 8003606:	d00e      	beq.n	8003626 <forward_rsqrt+0x86>
 8003608:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800360c:	3910      	subs	r1, #16
 800360e:	68ca      	ldr	r2, [r1, #12]
 8003610:	688e      	ldr	r6, [r1, #8]
 8003612:	684f      	ldr	r7, [r1, #4]
 8003614:	f851 c910 	ldr.w	ip, [r1], #-16
 8003618:	4372      	muls	r2, r6
 800361a:	437a      	muls	r2, r7
 800361c:	fb0c f202 	mul.w	r2, ip, r2
 8003620:	4355      	muls	r5, r2
 8003622:	1e40      	subs	r0, r0, #1
 8003624:	d1f3      	bne.n	800360e <forward_rsqrt+0x6e>
 8003626:	699e      	ldr	r6, [r3, #24]
 8003628:	6822      	ldr	r2, [r4, #0]
 800362a:	68b0      	ldr	r0, [r6, #8]
 800362c:	6893      	ldr	r3, [r2, #8]
 800362e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003632:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003636:	1f0f      	subs	r7, r1, #4
 8003638:	1f24      	subs	r4, r4, #4
 800363a:	4287      	cmp	r7, r0
 800363c:	f0c0 800f 	bcc.w	800365e <forward_rsqrt+0xbe>
 8003640:	ed97 0a00 	vldr	s0, [r7]
 8003644:	1f3f      	subs	r7, r7, #4
 8003646:	f003 f959 	bl	80068fc <ai_math_sqrt>
 800364a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800364e:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8003652:	edc4 0a00 	vstr	s1, [r4]
 8003656:	68b0      	ldr	r0, [r6, #8]
 8003658:	1f24      	subs	r4, r4, #4
 800365a:	4287      	cmp	r7, r0
 800365c:	d2f0      	bcs.n	8003640 <forward_rsqrt+0xa0>
 800365e:	b001      	add	sp, #4
 8003660:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003664 <nl_func_sin_array_f32>:
 8003664:	b570      	push	{r4, r5, r6, lr}
 8003666:	688c      	ldr	r4, [r1, #8]
 8003668:	6880      	ldr	r0, [r0, #8]
 800366a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800366e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003672:	1f0d      	subs	r5, r1, #4
 8003674:	1f16      	subs	r6, r2, #4
 8003676:	42a5      	cmp	r5, r4
 8003678:	f0c0 800a 	bcc.w	8003690 <nl_func_sin_array_f32+0x2c>
 800367c:	ed95 0a00 	vldr	s0, [r5]
 8003680:	1f2d      	subs	r5, r5, #4
 8003682:	f011 fa91 	bl	8014ba8 <sinf>
 8003686:	ed86 0a00 	vstr	s0, [r6]
 800368a:	1f36      	subs	r6, r6, #4
 800368c:	42a5      	cmp	r5, r4
 800368e:	d2f5      	bcs.n	800367c <nl_func_sin_array_f32+0x18>
 8003690:	bd70      	pop	{r4, r5, r6, pc}
	...

08003694 <forward_sin>:
 8003694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003696:	b081      	sub	sp, #4
 8003698:	6942      	ldr	r2, [r0, #20]
 800369a:	f04f 0501 	mov.w	r5, #1
 800369e:	8811      	ldrh	r1, [r2, #0]
 80036a0:	2900      	cmp	r1, #0
 80036a2:	bf1a      	itte	ne
 80036a4:	6850      	ldrne	r0, [r2, #4]
 80036a6:	1d00      	addne	r0, r0, #4
 80036a8:	2004      	moveq	r0, #4
 80036aa:	6800      	ldr	r0, [r0, #0]
 80036ac:	2800      	cmp	r0, #0
 80036ae:	bf14      	ite	ne
 80036b0:	6803      	ldrne	r3, [r0, #0]
 80036b2:	2300      	moveq	r3, #0
 80036b4:	2902      	cmp	r1, #2
 80036b6:	bfa6      	itte	ge
 80036b8:	6850      	ldrge	r0, [r2, #4]
 80036ba:	3010      	addge	r0, #16
 80036bc:	2004      	movlt	r0, #4
 80036be:	6800      	ldr	r0, [r0, #0]
 80036c0:	2800      	cmp	r0, #0
 80036c2:	bf19      	ittee	ne
 80036c4:	6800      	ldrne	r0, [r0, #0]
 80036c6:	f100 0418 	addne.w	r4, r0, #24
 80036ca:	2100      	moveq	r1, #0
 80036cc:	f101 0418 	addeq.w	r4, r1, #24
 80036d0:	f103 0108 	add.w	r1, r3, #8
 80036d4:	680a      	ldr	r2, [r1, #0]
 80036d6:	0a12      	lsrs	r2, r2, #8
 80036d8:	d01f      	beq.n	800371a <forward_sin+0x86>
 80036da:	684e      	ldr	r6, [r1, #4]
 80036dc:	4610      	mov	r0, r2
 80036de:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80036e2:	1f0f      	subs	r7, r1, #4
 80036e4:	f010 0103 	ands.w	r1, r0, #3
 80036e8:	d006      	beq.n	80036f8 <forward_sin+0x64>
 80036ea:	1e52      	subs	r2, r2, #1
 80036ec:	f857 c904 	ldr.w	ip, [r7], #-4
 80036f0:	1e49      	subs	r1, r1, #1
 80036f2:	fb0c f505 	mul.w	r5, ip, r5
 80036f6:	d1f8      	bne.n	80036ea <forward_sin+0x56>
 80036f8:	0880      	lsrs	r0, r0, #2
 80036fa:	d00e      	beq.n	800371a <forward_sin+0x86>
 80036fc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003700:	3910      	subs	r1, #16
 8003702:	68ca      	ldr	r2, [r1, #12]
 8003704:	688e      	ldr	r6, [r1, #8]
 8003706:	684f      	ldr	r7, [r1, #4]
 8003708:	f851 c910 	ldr.w	ip, [r1], #-16
 800370c:	4372      	muls	r2, r6
 800370e:	437a      	muls	r2, r7
 8003710:	fb0c f202 	mul.w	r2, ip, r2
 8003714:	4355      	muls	r5, r2
 8003716:	1e40      	subs	r0, r0, #1
 8003718:	d1f3      	bne.n	8003702 <forward_sin+0x6e>
 800371a:	6998      	ldr	r0, [r3, #24]
 800371c:	6821      	ldr	r1, [r4, #0]
 800371e:	6886      	ldr	r6, [r0, #8]
 8003720:	688a      	ldr	r2, [r1, #8]
 8003722:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003726:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800372a:	1f07      	subs	r7, r0, #4
 800372c:	1f1c      	subs	r4, r3, #4
 800372e:	42b7      	cmp	r7, r6
 8003730:	f0c0 800a 	bcc.w	8003748 <forward_sin+0xb4>
 8003734:	ed97 0a00 	vldr	s0, [r7]
 8003738:	1f3f      	subs	r7, r7, #4
 800373a:	f011 fa35 	bl	8014ba8 <sinf>
 800373e:	ed84 0a00 	vstr	s0, [r4]
 8003742:	1f24      	subs	r4, r4, #4
 8003744:	42b7      	cmp	r7, r6
 8003746:	d2f5      	bcs.n	8003734 <forward_sin+0xa0>
 8003748:	b001      	add	sp, #4
 800374a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800374c <nl_func_sinh_array_f32>:
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	688c      	ldr	r4, [r1, #8]
 8003750:	6880      	ldr	r0, [r0, #8]
 8003752:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003756:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800375a:	1f0d      	subs	r5, r1, #4
 800375c:	1f16      	subs	r6, r2, #4
 800375e:	42a5      	cmp	r5, r4
 8003760:	f0c0 800a 	bcc.w	8003778 <nl_func_sinh_array_f32+0x2c>
 8003764:	ed95 0a00 	vldr	s0, [r5]
 8003768:	1f2d      	subs	r5, r5, #4
 800376a:	f011 fd39 	bl	80151e0 <sinhf>
 800376e:	ed86 0a00 	vstr	s0, [r6]
 8003772:	1f36      	subs	r6, r6, #4
 8003774:	42a5      	cmp	r5, r4
 8003776:	d2f5      	bcs.n	8003764 <nl_func_sinh_array_f32+0x18>
 8003778:	bd70      	pop	{r4, r5, r6, pc}
	...

0800377c <forward_sinh>:
 800377c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800377e:	b081      	sub	sp, #4
 8003780:	6942      	ldr	r2, [r0, #20]
 8003782:	f04f 0501 	mov.w	r5, #1
 8003786:	8811      	ldrh	r1, [r2, #0]
 8003788:	2900      	cmp	r1, #0
 800378a:	bf1a      	itte	ne
 800378c:	6850      	ldrne	r0, [r2, #4]
 800378e:	1d00      	addne	r0, r0, #4
 8003790:	2004      	moveq	r0, #4
 8003792:	6800      	ldr	r0, [r0, #0]
 8003794:	2800      	cmp	r0, #0
 8003796:	bf14      	ite	ne
 8003798:	6803      	ldrne	r3, [r0, #0]
 800379a:	2300      	moveq	r3, #0
 800379c:	2902      	cmp	r1, #2
 800379e:	bfa6      	itte	ge
 80037a0:	6850      	ldrge	r0, [r2, #4]
 80037a2:	3010      	addge	r0, #16
 80037a4:	2004      	movlt	r0, #4
 80037a6:	6800      	ldr	r0, [r0, #0]
 80037a8:	2800      	cmp	r0, #0
 80037aa:	bf19      	ittee	ne
 80037ac:	6800      	ldrne	r0, [r0, #0]
 80037ae:	f100 0418 	addne.w	r4, r0, #24
 80037b2:	2100      	moveq	r1, #0
 80037b4:	f101 0418 	addeq.w	r4, r1, #24
 80037b8:	f103 0108 	add.w	r1, r3, #8
 80037bc:	680a      	ldr	r2, [r1, #0]
 80037be:	0a12      	lsrs	r2, r2, #8
 80037c0:	d01f      	beq.n	8003802 <forward_sinh+0x86>
 80037c2:	684e      	ldr	r6, [r1, #4]
 80037c4:	4610      	mov	r0, r2
 80037c6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037ca:	1f0f      	subs	r7, r1, #4
 80037cc:	f010 0103 	ands.w	r1, r0, #3
 80037d0:	d006      	beq.n	80037e0 <forward_sinh+0x64>
 80037d2:	1e52      	subs	r2, r2, #1
 80037d4:	f857 c904 	ldr.w	ip, [r7], #-4
 80037d8:	1e49      	subs	r1, r1, #1
 80037da:	fb0c f505 	mul.w	r5, ip, r5
 80037de:	d1f8      	bne.n	80037d2 <forward_sinh+0x56>
 80037e0:	0880      	lsrs	r0, r0, #2
 80037e2:	d00e      	beq.n	8003802 <forward_sinh+0x86>
 80037e4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037e8:	3910      	subs	r1, #16
 80037ea:	68ca      	ldr	r2, [r1, #12]
 80037ec:	688e      	ldr	r6, [r1, #8]
 80037ee:	684f      	ldr	r7, [r1, #4]
 80037f0:	f851 c910 	ldr.w	ip, [r1], #-16
 80037f4:	4372      	muls	r2, r6
 80037f6:	437a      	muls	r2, r7
 80037f8:	fb0c f202 	mul.w	r2, ip, r2
 80037fc:	4355      	muls	r5, r2
 80037fe:	1e40      	subs	r0, r0, #1
 8003800:	d1f3      	bne.n	80037ea <forward_sinh+0x6e>
 8003802:	6998      	ldr	r0, [r3, #24]
 8003804:	6821      	ldr	r1, [r4, #0]
 8003806:	6886      	ldr	r6, [r0, #8]
 8003808:	688a      	ldr	r2, [r1, #8]
 800380a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800380e:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003812:	1f07      	subs	r7, r0, #4
 8003814:	1f1c      	subs	r4, r3, #4
 8003816:	42b7      	cmp	r7, r6
 8003818:	f0c0 800a 	bcc.w	8003830 <forward_sinh+0xb4>
 800381c:	ed97 0a00 	vldr	s0, [r7]
 8003820:	1f3f      	subs	r7, r7, #4
 8003822:	f011 fcdd 	bl	80151e0 <sinhf>
 8003826:	ed84 0a00 	vstr	s0, [r4]
 800382a:	1f24      	subs	r4, r4, #4
 800382c:	42b7      	cmp	r7, r6
 800382e:	d2f5      	bcs.n	800381c <forward_sinh+0xa0>
 8003830:	b001      	add	sp, #4
 8003832:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003834 <nl_func_tan_array_f32>:
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	688c      	ldr	r4, [r1, #8]
 8003838:	6880      	ldr	r0, [r0, #8]
 800383a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800383e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003842:	1f0d      	subs	r5, r1, #4
 8003844:	1f16      	subs	r6, r2, #4
 8003846:	42a5      	cmp	r5, r4
 8003848:	f0c0 800a 	bcc.w	8003860 <nl_func_tan_array_f32+0x2c>
 800384c:	ed95 0a00 	vldr	s0, [r5]
 8003850:	1f2d      	subs	r5, r5, #4
 8003852:	f011 f9eb 	bl	8014c2c <tanf>
 8003856:	ed86 0a00 	vstr	s0, [r6]
 800385a:	1f36      	subs	r6, r6, #4
 800385c:	42a5      	cmp	r5, r4
 800385e:	d2f5      	bcs.n	800384c <nl_func_tan_array_f32+0x18>
 8003860:	bd70      	pop	{r4, r5, r6, pc}
	...

08003864 <forward_tan>:
 8003864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003866:	b081      	sub	sp, #4
 8003868:	6942      	ldr	r2, [r0, #20]
 800386a:	f04f 0501 	mov.w	r5, #1
 800386e:	8811      	ldrh	r1, [r2, #0]
 8003870:	2900      	cmp	r1, #0
 8003872:	bf1a      	itte	ne
 8003874:	6850      	ldrne	r0, [r2, #4]
 8003876:	1d00      	addne	r0, r0, #4
 8003878:	2004      	moveq	r0, #4
 800387a:	6800      	ldr	r0, [r0, #0]
 800387c:	2800      	cmp	r0, #0
 800387e:	bf14      	ite	ne
 8003880:	6803      	ldrne	r3, [r0, #0]
 8003882:	2300      	moveq	r3, #0
 8003884:	2902      	cmp	r1, #2
 8003886:	bfa6      	itte	ge
 8003888:	6850      	ldrge	r0, [r2, #4]
 800388a:	3010      	addge	r0, #16
 800388c:	2004      	movlt	r0, #4
 800388e:	6800      	ldr	r0, [r0, #0]
 8003890:	2800      	cmp	r0, #0
 8003892:	bf19      	ittee	ne
 8003894:	6800      	ldrne	r0, [r0, #0]
 8003896:	f100 0418 	addne.w	r4, r0, #24
 800389a:	2100      	moveq	r1, #0
 800389c:	f101 0418 	addeq.w	r4, r1, #24
 80038a0:	f103 0108 	add.w	r1, r3, #8
 80038a4:	680a      	ldr	r2, [r1, #0]
 80038a6:	0a12      	lsrs	r2, r2, #8
 80038a8:	d01f      	beq.n	80038ea <forward_tan+0x86>
 80038aa:	684e      	ldr	r6, [r1, #4]
 80038ac:	4610      	mov	r0, r2
 80038ae:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80038b2:	1f0f      	subs	r7, r1, #4
 80038b4:	f010 0103 	ands.w	r1, r0, #3
 80038b8:	d006      	beq.n	80038c8 <forward_tan+0x64>
 80038ba:	1e52      	subs	r2, r2, #1
 80038bc:	f857 c904 	ldr.w	ip, [r7], #-4
 80038c0:	1e49      	subs	r1, r1, #1
 80038c2:	fb0c f505 	mul.w	r5, ip, r5
 80038c6:	d1f8      	bne.n	80038ba <forward_tan+0x56>
 80038c8:	0880      	lsrs	r0, r0, #2
 80038ca:	d00e      	beq.n	80038ea <forward_tan+0x86>
 80038cc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80038d0:	3910      	subs	r1, #16
 80038d2:	68ca      	ldr	r2, [r1, #12]
 80038d4:	688e      	ldr	r6, [r1, #8]
 80038d6:	684f      	ldr	r7, [r1, #4]
 80038d8:	f851 c910 	ldr.w	ip, [r1], #-16
 80038dc:	4372      	muls	r2, r6
 80038de:	437a      	muls	r2, r7
 80038e0:	fb0c f202 	mul.w	r2, ip, r2
 80038e4:	4355      	muls	r5, r2
 80038e6:	1e40      	subs	r0, r0, #1
 80038e8:	d1f3      	bne.n	80038d2 <forward_tan+0x6e>
 80038ea:	6998      	ldr	r0, [r3, #24]
 80038ec:	6821      	ldr	r1, [r4, #0]
 80038ee:	6886      	ldr	r6, [r0, #8]
 80038f0:	688a      	ldr	r2, [r1, #8]
 80038f2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80038f6:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 80038fa:	1f07      	subs	r7, r0, #4
 80038fc:	1f1c      	subs	r4, r3, #4
 80038fe:	42b7      	cmp	r7, r6
 8003900:	f0c0 800a 	bcc.w	8003918 <forward_tan+0xb4>
 8003904:	ed97 0a00 	vldr	s0, [r7]
 8003908:	1f3f      	subs	r7, r7, #4
 800390a:	f011 f98f 	bl	8014c2c <tanf>
 800390e:	ed84 0a00 	vstr	s0, [r4]
 8003912:	1f24      	subs	r4, r4, #4
 8003914:	42b7      	cmp	r7, r6
 8003916:	d2f5      	bcs.n	8003904 <forward_tan+0xa0>
 8003918:	b001      	add	sp, #4
 800391a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800391c <nl_func_abs_array_f32>:
 800391c:	6889      	ldr	r1, [r1, #8]
 800391e:	6880      	ldr	r0, [r0, #8]
 8003920:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003924:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003928:	1f1b      	subs	r3, r3, #4
 800392a:	1f10      	subs	r0, r2, #4
 800392c:	428b      	cmp	r3, r1
 800392e:	d307      	bcc.n	8003940 <nl_func_abs_array_f32+0x24>
 8003930:	f853 c904 	ldr.w	ip, [r3], #-4
 8003934:	428b      	cmp	r3, r1
 8003936:	f02c 4200 	bic.w	r2, ip, #2147483648	; 0x80000000
 800393a:	f840 2904 	str.w	r2, [r0], #-4
 800393e:	d2f7      	bcs.n	8003930 <nl_func_abs_array_f32+0x14>
 8003940:	4770      	bx	lr
	...

08003944 <forward_abs>:
 8003944:	b4f0      	push	{r4, r5, r6, r7}
 8003946:	6942      	ldr	r2, [r0, #20]
 8003948:	f04f 0501 	mov.w	r5, #1
 800394c:	8811      	ldrh	r1, [r2, #0]
 800394e:	2900      	cmp	r1, #0
 8003950:	bf1a      	itte	ne
 8003952:	6850      	ldrne	r0, [r2, #4]
 8003954:	1d00      	addne	r0, r0, #4
 8003956:	2004      	moveq	r0, #4
 8003958:	6800      	ldr	r0, [r0, #0]
 800395a:	2800      	cmp	r0, #0
 800395c:	bf14      	ite	ne
 800395e:	6803      	ldrne	r3, [r0, #0]
 8003960:	2300      	moveq	r3, #0
 8003962:	2902      	cmp	r1, #2
 8003964:	bfa6      	itte	ge
 8003966:	6850      	ldrge	r0, [r2, #4]
 8003968:	3010      	addge	r0, #16
 800396a:	2004      	movlt	r0, #4
 800396c:	6800      	ldr	r0, [r0, #0]
 800396e:	2800      	cmp	r0, #0
 8003970:	bf19      	ittee	ne
 8003972:	6800      	ldrne	r0, [r0, #0]
 8003974:	f100 0418 	addne.w	r4, r0, #24
 8003978:	2100      	moveq	r1, #0
 800397a:	f101 0418 	addeq.w	r4, r1, #24
 800397e:	f103 0108 	add.w	r1, r3, #8
 8003982:	680a      	ldr	r2, [r1, #0]
 8003984:	0a12      	lsrs	r2, r2, #8
 8003986:	d01f      	beq.n	80039c8 <forward_abs+0x84>
 8003988:	684e      	ldr	r6, [r1, #4]
 800398a:	4610      	mov	r0, r2
 800398c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003990:	1f0f      	subs	r7, r1, #4
 8003992:	f010 0103 	ands.w	r1, r0, #3
 8003996:	d006      	beq.n	80039a6 <forward_abs+0x62>
 8003998:	1e52      	subs	r2, r2, #1
 800399a:	f857 c904 	ldr.w	ip, [r7], #-4
 800399e:	1e49      	subs	r1, r1, #1
 80039a0:	fb0c f505 	mul.w	r5, ip, r5
 80039a4:	d1f8      	bne.n	8003998 <forward_abs+0x54>
 80039a6:	0880      	lsrs	r0, r0, #2
 80039a8:	d00e      	beq.n	80039c8 <forward_abs+0x84>
 80039aa:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80039ae:	3910      	subs	r1, #16
 80039b0:	68ca      	ldr	r2, [r1, #12]
 80039b2:	688e      	ldr	r6, [r1, #8]
 80039b4:	684f      	ldr	r7, [r1, #4]
 80039b6:	f851 c910 	ldr.w	ip, [r1], #-16
 80039ba:	4372      	muls	r2, r6
 80039bc:	437a      	muls	r2, r7
 80039be:	fb0c f202 	mul.w	r2, ip, r2
 80039c2:	4355      	muls	r5, r2
 80039c4:	1e40      	subs	r0, r0, #1
 80039c6:	d1f3      	bne.n	80039b0 <forward_abs+0x6c>
 80039c8:	6998      	ldr	r0, [r3, #24]
 80039ca:	6822      	ldr	r2, [r4, #0]
 80039cc:	6880      	ldr	r0, [r0, #8]
 80039ce:	6893      	ldr	r3, [r2, #8]
 80039d0:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80039d4:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80039d8:	1f09      	subs	r1, r1, #4
 80039da:	1f22      	subs	r2, r4, #4
 80039dc:	4281      	cmp	r1, r0
 80039de:	d307      	bcc.n	80039f0 <forward_abs+0xac>
 80039e0:	f851 5904 	ldr.w	r5, [r1], #-4
 80039e4:	4281      	cmp	r1, r0
 80039e6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80039ea:	f842 3904 	str.w	r3, [r2], #-4
 80039ee:	d2f7      	bcs.n	80039e0 <forward_abs+0x9c>
 80039f0:	bcf0      	pop	{r4, r5, r6, r7}
 80039f2:	4770      	bx	lr

080039f4 <nl_func_ceil_array_f32>:
 80039f4:	b570      	push	{r4, r5, r6, lr}
 80039f6:	688c      	ldr	r4, [r1, #8]
 80039f8:	6880      	ldr	r0, [r0, #8]
 80039fa:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80039fe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003a02:	1f0d      	subs	r5, r1, #4
 8003a04:	1f16      	subs	r6, r2, #4
 8003a06:	42a5      	cmp	r5, r4
 8003a08:	f0c0 800a 	bcc.w	8003a20 <nl_func_ceil_array_f32+0x2c>
 8003a0c:	ed95 0a00 	vldr	s0, [r5]
 8003a10:	1f2d      	subs	r5, r5, #4
 8003a12:	f010 fab3 	bl	8013f7c <ceilf>
 8003a16:	ed86 0a00 	vstr	s0, [r6]
 8003a1a:	1f36      	subs	r6, r6, #4
 8003a1c:	42a5      	cmp	r5, r4
 8003a1e:	d2f5      	bcs.n	8003a0c <nl_func_ceil_array_f32+0x18>
 8003a20:	bd70      	pop	{r4, r5, r6, pc}
	...

08003a24 <forward_ceil>:
 8003a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a26:	b081      	sub	sp, #4
 8003a28:	6942      	ldr	r2, [r0, #20]
 8003a2a:	f04f 0501 	mov.w	r5, #1
 8003a2e:	8811      	ldrh	r1, [r2, #0]
 8003a30:	2900      	cmp	r1, #0
 8003a32:	bf1a      	itte	ne
 8003a34:	6850      	ldrne	r0, [r2, #4]
 8003a36:	1d00      	addne	r0, r0, #4
 8003a38:	2004      	moveq	r0, #4
 8003a3a:	6800      	ldr	r0, [r0, #0]
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	bf14      	ite	ne
 8003a40:	6803      	ldrne	r3, [r0, #0]
 8003a42:	2300      	moveq	r3, #0
 8003a44:	2902      	cmp	r1, #2
 8003a46:	bfa6      	itte	ge
 8003a48:	6850      	ldrge	r0, [r2, #4]
 8003a4a:	3010      	addge	r0, #16
 8003a4c:	2004      	movlt	r0, #4
 8003a4e:	6800      	ldr	r0, [r0, #0]
 8003a50:	2800      	cmp	r0, #0
 8003a52:	bf19      	ittee	ne
 8003a54:	6800      	ldrne	r0, [r0, #0]
 8003a56:	f100 0418 	addne.w	r4, r0, #24
 8003a5a:	2100      	moveq	r1, #0
 8003a5c:	f101 0418 	addeq.w	r4, r1, #24
 8003a60:	f103 0108 	add.w	r1, r3, #8
 8003a64:	680a      	ldr	r2, [r1, #0]
 8003a66:	0a12      	lsrs	r2, r2, #8
 8003a68:	d01f      	beq.n	8003aaa <forward_ceil+0x86>
 8003a6a:	684e      	ldr	r6, [r1, #4]
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a72:	1f0f      	subs	r7, r1, #4
 8003a74:	f010 0103 	ands.w	r1, r0, #3
 8003a78:	d006      	beq.n	8003a88 <forward_ceil+0x64>
 8003a7a:	1e52      	subs	r2, r2, #1
 8003a7c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003a80:	1e49      	subs	r1, r1, #1
 8003a82:	fb0c f505 	mul.w	r5, ip, r5
 8003a86:	d1f8      	bne.n	8003a7a <forward_ceil+0x56>
 8003a88:	0880      	lsrs	r0, r0, #2
 8003a8a:	d00e      	beq.n	8003aaa <forward_ceil+0x86>
 8003a8c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a90:	3910      	subs	r1, #16
 8003a92:	68ca      	ldr	r2, [r1, #12]
 8003a94:	688e      	ldr	r6, [r1, #8]
 8003a96:	684f      	ldr	r7, [r1, #4]
 8003a98:	f851 c910 	ldr.w	ip, [r1], #-16
 8003a9c:	4372      	muls	r2, r6
 8003a9e:	437a      	muls	r2, r7
 8003aa0:	fb0c f202 	mul.w	r2, ip, r2
 8003aa4:	4355      	muls	r5, r2
 8003aa6:	1e40      	subs	r0, r0, #1
 8003aa8:	d1f3      	bne.n	8003a92 <forward_ceil+0x6e>
 8003aaa:	6998      	ldr	r0, [r3, #24]
 8003aac:	6821      	ldr	r1, [r4, #0]
 8003aae:	6886      	ldr	r6, [r0, #8]
 8003ab0:	688a      	ldr	r2, [r1, #8]
 8003ab2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003ab6:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003aba:	1f07      	subs	r7, r0, #4
 8003abc:	1f1c      	subs	r4, r3, #4
 8003abe:	42b7      	cmp	r7, r6
 8003ac0:	f0c0 800a 	bcc.w	8003ad8 <forward_ceil+0xb4>
 8003ac4:	ed97 0a00 	vldr	s0, [r7]
 8003ac8:	1f3f      	subs	r7, r7, #4
 8003aca:	f010 fa57 	bl	8013f7c <ceilf>
 8003ace:	ed84 0a00 	vstr	s0, [r4]
 8003ad2:	1f24      	subs	r4, r4, #4
 8003ad4:	42b7      	cmp	r7, r6
 8003ad6:	d2f5      	bcs.n	8003ac4 <forward_ceil+0xa0>
 8003ad8:	b001      	add	sp, #4
 8003ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003adc <nl_func_floor_array_f32>:
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	688c      	ldr	r4, [r1, #8]
 8003ae0:	6880      	ldr	r0, [r0, #8]
 8003ae2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003ae6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003aea:	1f0d      	subs	r5, r1, #4
 8003aec:	1f16      	subs	r6, r2, #4
 8003aee:	42a5      	cmp	r5, r4
 8003af0:	f0c0 800a 	bcc.w	8003b08 <nl_func_floor_array_f32+0x2c>
 8003af4:	ed95 0a00 	vldr	s0, [r5]
 8003af8:	1f2d      	subs	r5, r5, #4
 8003afa:	f010 fd25 	bl	8014548 <floorf>
 8003afe:	ed86 0a00 	vstr	s0, [r6]
 8003b02:	1f36      	subs	r6, r6, #4
 8003b04:	42a5      	cmp	r5, r4
 8003b06:	d2f5      	bcs.n	8003af4 <nl_func_floor_array_f32+0x18>
 8003b08:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b0c <forward_floor>:
 8003b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b0e:	b081      	sub	sp, #4
 8003b10:	6942      	ldr	r2, [r0, #20]
 8003b12:	f04f 0501 	mov.w	r5, #1
 8003b16:	8811      	ldrh	r1, [r2, #0]
 8003b18:	2900      	cmp	r1, #0
 8003b1a:	bf1a      	itte	ne
 8003b1c:	6850      	ldrne	r0, [r2, #4]
 8003b1e:	1d00      	addne	r0, r0, #4
 8003b20:	2004      	moveq	r0, #4
 8003b22:	6800      	ldr	r0, [r0, #0]
 8003b24:	2800      	cmp	r0, #0
 8003b26:	bf14      	ite	ne
 8003b28:	6803      	ldrne	r3, [r0, #0]
 8003b2a:	2300      	moveq	r3, #0
 8003b2c:	2902      	cmp	r1, #2
 8003b2e:	bfa6      	itte	ge
 8003b30:	6850      	ldrge	r0, [r2, #4]
 8003b32:	3010      	addge	r0, #16
 8003b34:	2004      	movlt	r0, #4
 8003b36:	6800      	ldr	r0, [r0, #0]
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	bf19      	ittee	ne
 8003b3c:	6800      	ldrne	r0, [r0, #0]
 8003b3e:	f100 0418 	addne.w	r4, r0, #24
 8003b42:	2100      	moveq	r1, #0
 8003b44:	f101 0418 	addeq.w	r4, r1, #24
 8003b48:	f103 0108 	add.w	r1, r3, #8
 8003b4c:	680a      	ldr	r2, [r1, #0]
 8003b4e:	0a12      	lsrs	r2, r2, #8
 8003b50:	d01f      	beq.n	8003b92 <forward_floor+0x86>
 8003b52:	684e      	ldr	r6, [r1, #4]
 8003b54:	4610      	mov	r0, r2
 8003b56:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b5a:	1f0f      	subs	r7, r1, #4
 8003b5c:	f010 0103 	ands.w	r1, r0, #3
 8003b60:	d006      	beq.n	8003b70 <forward_floor+0x64>
 8003b62:	1e52      	subs	r2, r2, #1
 8003b64:	f857 c904 	ldr.w	ip, [r7], #-4
 8003b68:	1e49      	subs	r1, r1, #1
 8003b6a:	fb0c f505 	mul.w	r5, ip, r5
 8003b6e:	d1f8      	bne.n	8003b62 <forward_floor+0x56>
 8003b70:	0880      	lsrs	r0, r0, #2
 8003b72:	d00e      	beq.n	8003b92 <forward_floor+0x86>
 8003b74:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b78:	3910      	subs	r1, #16
 8003b7a:	68ca      	ldr	r2, [r1, #12]
 8003b7c:	688e      	ldr	r6, [r1, #8]
 8003b7e:	684f      	ldr	r7, [r1, #4]
 8003b80:	f851 c910 	ldr.w	ip, [r1], #-16
 8003b84:	4372      	muls	r2, r6
 8003b86:	437a      	muls	r2, r7
 8003b88:	fb0c f202 	mul.w	r2, ip, r2
 8003b8c:	4355      	muls	r5, r2
 8003b8e:	1e40      	subs	r0, r0, #1
 8003b90:	d1f3      	bne.n	8003b7a <forward_floor+0x6e>
 8003b92:	6998      	ldr	r0, [r3, #24]
 8003b94:	6821      	ldr	r1, [r4, #0]
 8003b96:	6886      	ldr	r6, [r0, #8]
 8003b98:	688a      	ldr	r2, [r1, #8]
 8003b9a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003b9e:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003ba2:	1f07      	subs	r7, r0, #4
 8003ba4:	1f1c      	subs	r4, r3, #4
 8003ba6:	42b7      	cmp	r7, r6
 8003ba8:	f0c0 800a 	bcc.w	8003bc0 <forward_floor+0xb4>
 8003bac:	ed97 0a00 	vldr	s0, [r7]
 8003bb0:	1f3f      	subs	r7, r7, #4
 8003bb2:	f010 fcc9 	bl	8014548 <floorf>
 8003bb6:	ed84 0a00 	vstr	s0, [r4]
 8003bba:	1f24      	subs	r4, r4, #4
 8003bbc:	42b7      	cmp	r7, r6
 8003bbe:	d2f5      	bcs.n	8003bac <forward_floor+0xa0>
 8003bc0:	b001      	add	sp, #4
 8003bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bc4 <nl_func_round_array_f32>:
 8003bc4:	b570      	push	{r4, r5, r6, lr}
 8003bc6:	688c      	ldr	r4, [r1, #8]
 8003bc8:	6880      	ldr	r0, [r0, #8]
 8003bca:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003bce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003bd2:	1f0d      	subs	r5, r1, #4
 8003bd4:	1f16      	subs	r6, r2, #4
 8003bd6:	42a5      	cmp	r5, r4
 8003bd8:	f0c0 800a 	bcc.w	8003bf0 <nl_func_round_array_f32+0x2c>
 8003bdc:	ed95 0a00 	vldr	s0, [r5]
 8003be0:	1f2d      	subs	r5, r5, #4
 8003be2:	f010 ffbb 	bl	8014b5c <roundf>
 8003be6:	ed86 0a00 	vstr	s0, [r6]
 8003bea:	1f36      	subs	r6, r6, #4
 8003bec:	42a5      	cmp	r5, r4
 8003bee:	d2f5      	bcs.n	8003bdc <nl_func_round_array_f32+0x18>
 8003bf0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003bf4 <forward_round>:
 8003bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf6:	b081      	sub	sp, #4
 8003bf8:	6942      	ldr	r2, [r0, #20]
 8003bfa:	f04f 0501 	mov.w	r5, #1
 8003bfe:	8811      	ldrh	r1, [r2, #0]
 8003c00:	2900      	cmp	r1, #0
 8003c02:	bf1a      	itte	ne
 8003c04:	6850      	ldrne	r0, [r2, #4]
 8003c06:	1d00      	addne	r0, r0, #4
 8003c08:	2004      	moveq	r0, #4
 8003c0a:	6800      	ldr	r0, [r0, #0]
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	bf14      	ite	ne
 8003c10:	6803      	ldrne	r3, [r0, #0]
 8003c12:	2300      	moveq	r3, #0
 8003c14:	2902      	cmp	r1, #2
 8003c16:	bfa6      	itte	ge
 8003c18:	6850      	ldrge	r0, [r2, #4]
 8003c1a:	3010      	addge	r0, #16
 8003c1c:	2004      	movlt	r0, #4
 8003c1e:	6800      	ldr	r0, [r0, #0]
 8003c20:	2800      	cmp	r0, #0
 8003c22:	bf19      	ittee	ne
 8003c24:	6800      	ldrne	r0, [r0, #0]
 8003c26:	f100 0418 	addne.w	r4, r0, #24
 8003c2a:	2100      	moveq	r1, #0
 8003c2c:	f101 0418 	addeq.w	r4, r1, #24
 8003c30:	f103 0108 	add.w	r1, r3, #8
 8003c34:	680a      	ldr	r2, [r1, #0]
 8003c36:	0a12      	lsrs	r2, r2, #8
 8003c38:	d01f      	beq.n	8003c7a <forward_round+0x86>
 8003c3a:	684e      	ldr	r6, [r1, #4]
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c42:	1f0f      	subs	r7, r1, #4
 8003c44:	f010 0103 	ands.w	r1, r0, #3
 8003c48:	d006      	beq.n	8003c58 <forward_round+0x64>
 8003c4a:	1e52      	subs	r2, r2, #1
 8003c4c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003c50:	1e49      	subs	r1, r1, #1
 8003c52:	fb0c f505 	mul.w	r5, ip, r5
 8003c56:	d1f8      	bne.n	8003c4a <forward_round+0x56>
 8003c58:	0880      	lsrs	r0, r0, #2
 8003c5a:	d00e      	beq.n	8003c7a <forward_round+0x86>
 8003c5c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c60:	3910      	subs	r1, #16
 8003c62:	68ca      	ldr	r2, [r1, #12]
 8003c64:	688e      	ldr	r6, [r1, #8]
 8003c66:	684f      	ldr	r7, [r1, #4]
 8003c68:	f851 c910 	ldr.w	ip, [r1], #-16
 8003c6c:	4372      	muls	r2, r6
 8003c6e:	437a      	muls	r2, r7
 8003c70:	fb0c f202 	mul.w	r2, ip, r2
 8003c74:	4355      	muls	r5, r2
 8003c76:	1e40      	subs	r0, r0, #1
 8003c78:	d1f3      	bne.n	8003c62 <forward_round+0x6e>
 8003c7a:	6998      	ldr	r0, [r3, #24]
 8003c7c:	6821      	ldr	r1, [r4, #0]
 8003c7e:	6886      	ldr	r6, [r0, #8]
 8003c80:	688a      	ldr	r2, [r1, #8]
 8003c82:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003c86:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003c8a:	1f07      	subs	r7, r0, #4
 8003c8c:	1f1c      	subs	r4, r3, #4
 8003c8e:	42b7      	cmp	r7, r6
 8003c90:	f0c0 800a 	bcc.w	8003ca8 <forward_round+0xb4>
 8003c94:	ed97 0a00 	vldr	s0, [r7]
 8003c98:	1f3f      	subs	r7, r7, #4
 8003c9a:	f010 ff5f 	bl	8014b5c <roundf>
 8003c9e:	ed84 0a00 	vstr	s0, [r4]
 8003ca2:	1f24      	subs	r4, r4, #4
 8003ca4:	42b7      	cmp	r7, r6
 8003ca6:	d2f5      	bcs.n	8003c94 <forward_round+0xa0>
 8003ca8:	b001      	add	sp, #4
 8003caa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cac <nl_func_neg_array_f32>:
 8003cac:	6889      	ldr	r1, [r1, #8]
 8003cae:	6880      	ldr	r0, [r0, #8]
 8003cb0:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003cb4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003cb8:	1f1b      	subs	r3, r3, #4
 8003cba:	1f12      	subs	r2, r2, #4
 8003cbc:	428b      	cmp	r3, r1
 8003cbe:	d32b      	bcc.n	8003d18 <nl_func_neg_array_f32+0x6c>
 8003cc0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003cc4:	1f18      	subs	r0, r3, #4
 8003cc6:	edd3 0a00 	vldr	s1, [r3]
 8003cca:	4288      	cmp	r0, r1
 8003ccc:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003cd0:	edc2 0a00 	vstr	s1, [r2]
 8003cd4:	d320      	bcc.n	8003d18 <nl_func_neg_array_f32+0x6c>
 8003cd6:	ed90 1a00 	vldr	s2, [r0]
 8003cda:	1f00      	subs	r0, r0, #4
 8003cdc:	1f13      	subs	r3, r2, #4
 8003cde:	ee21 1a00 	vmul.f32	s2, s2, s0
 8003ce2:	4288      	cmp	r0, r1
 8003ce4:	ed83 1a00 	vstr	s2, [r3]
 8003ce8:	d316      	bcc.n	8003d18 <nl_func_neg_array_f32+0x6c>
 8003cea:	edd0 0a00 	vldr	s1, [r0]
 8003cee:	1f00      	subs	r0, r0, #4
 8003cf0:	f1a2 0c08 	sub.w	ip, r2, #8
 8003cf4:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003cf8:	4288      	cmp	r0, r1
 8003cfa:	edcc 0a00 	vstr	s1, [ip]
 8003cfe:	d30b      	bcc.n	8003d18 <nl_func_neg_array_f32+0x6c>
 8003d00:	ed90 1a00 	vldr	s2, [r0]
 8003d04:	f1a2 030c 	sub.w	r3, r2, #12
 8003d08:	ee21 1a00 	vmul.f32	s2, s2, s0
 8003d0c:	3a10      	subs	r2, #16
 8003d0e:	ed83 1a00 	vstr	s2, [r3]
 8003d12:	1f03      	subs	r3, r0, #4
 8003d14:	428b      	cmp	r3, r1
 8003d16:	d2d5      	bcs.n	8003cc4 <nl_func_neg_array_f32+0x18>
 8003d18:	4770      	bx	lr
	...

08003d1c <forward_neg>:
 8003d1c:	b4f0      	push	{r4, r5, r6, r7}
 8003d1e:	6942      	ldr	r2, [r0, #20]
 8003d20:	f04f 0501 	mov.w	r5, #1
 8003d24:	8811      	ldrh	r1, [r2, #0]
 8003d26:	2900      	cmp	r1, #0
 8003d28:	bf1a      	itte	ne
 8003d2a:	6850      	ldrne	r0, [r2, #4]
 8003d2c:	1d00      	addne	r0, r0, #4
 8003d2e:	2004      	moveq	r0, #4
 8003d30:	6800      	ldr	r0, [r0, #0]
 8003d32:	2800      	cmp	r0, #0
 8003d34:	bf14      	ite	ne
 8003d36:	6803      	ldrne	r3, [r0, #0]
 8003d38:	2300      	moveq	r3, #0
 8003d3a:	2902      	cmp	r1, #2
 8003d3c:	bfa6      	itte	ge
 8003d3e:	6850      	ldrge	r0, [r2, #4]
 8003d40:	3010      	addge	r0, #16
 8003d42:	2004      	movlt	r0, #4
 8003d44:	6800      	ldr	r0, [r0, #0]
 8003d46:	2800      	cmp	r0, #0
 8003d48:	bf19      	ittee	ne
 8003d4a:	6800      	ldrne	r0, [r0, #0]
 8003d4c:	f100 0418 	addne.w	r4, r0, #24
 8003d50:	2100      	moveq	r1, #0
 8003d52:	f101 0418 	addeq.w	r4, r1, #24
 8003d56:	f103 0108 	add.w	r1, r3, #8
 8003d5a:	680a      	ldr	r2, [r1, #0]
 8003d5c:	0a12      	lsrs	r2, r2, #8
 8003d5e:	d01f      	beq.n	8003da0 <forward_neg+0x84>
 8003d60:	684e      	ldr	r6, [r1, #4]
 8003d62:	4610      	mov	r0, r2
 8003d64:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003d68:	1f0f      	subs	r7, r1, #4
 8003d6a:	f010 0103 	ands.w	r1, r0, #3
 8003d6e:	d006      	beq.n	8003d7e <forward_neg+0x62>
 8003d70:	1e52      	subs	r2, r2, #1
 8003d72:	f857 c904 	ldr.w	ip, [r7], #-4
 8003d76:	1e49      	subs	r1, r1, #1
 8003d78:	fb0c f505 	mul.w	r5, ip, r5
 8003d7c:	d1f8      	bne.n	8003d70 <forward_neg+0x54>
 8003d7e:	0880      	lsrs	r0, r0, #2
 8003d80:	d00e      	beq.n	8003da0 <forward_neg+0x84>
 8003d82:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003d86:	3910      	subs	r1, #16
 8003d88:	68ca      	ldr	r2, [r1, #12]
 8003d8a:	688e      	ldr	r6, [r1, #8]
 8003d8c:	684f      	ldr	r7, [r1, #4]
 8003d8e:	f851 c910 	ldr.w	ip, [r1], #-16
 8003d92:	4372      	muls	r2, r6
 8003d94:	437a      	muls	r2, r7
 8003d96:	fb0c f202 	mul.w	r2, ip, r2
 8003d9a:	4355      	muls	r5, r2
 8003d9c:	1e40      	subs	r0, r0, #1
 8003d9e:	d1f3      	bne.n	8003d88 <forward_neg+0x6c>
 8003da0:	6998      	ldr	r0, [r3, #24]
 8003da2:	6822      	ldr	r2, [r4, #0]
 8003da4:	6880      	ldr	r0, [r0, #8]
 8003da6:	6893      	ldr	r3, [r2, #8]
 8003da8:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003dac:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003db0:	1f09      	subs	r1, r1, #4
 8003db2:	1f22      	subs	r2, r4, #4
 8003db4:	4281      	cmp	r1, r0
 8003db6:	d32b      	bcc.n	8003e10 <forward_neg+0xf4>
 8003db8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003dbc:	edd1 0a00 	vldr	s1, [r1]
 8003dc0:	1f09      	subs	r1, r1, #4
 8003dc2:	4281      	cmp	r1, r0
 8003dc4:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003dc8:	edc2 0a00 	vstr	s1, [r2]
 8003dcc:	d320      	bcc.n	8003e10 <forward_neg+0xf4>
 8003dce:	ed91 1a00 	vldr	s2, [r1]
 8003dd2:	1f09      	subs	r1, r1, #4
 8003dd4:	1f13      	subs	r3, r2, #4
 8003dd6:	ee21 1a00 	vmul.f32	s2, s2, s0
 8003dda:	4281      	cmp	r1, r0
 8003ddc:	ed83 1a00 	vstr	s2, [r3]
 8003de0:	d316      	bcc.n	8003e10 <forward_neg+0xf4>
 8003de2:	edd1 0a00 	vldr	s1, [r1]
 8003de6:	1f09      	subs	r1, r1, #4
 8003de8:	f1a2 0408 	sub.w	r4, r2, #8
 8003dec:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003df0:	4281      	cmp	r1, r0
 8003df2:	edc4 0a00 	vstr	s1, [r4]
 8003df6:	d30b      	bcc.n	8003e10 <forward_neg+0xf4>
 8003df8:	ed91 1a00 	vldr	s2, [r1]
 8003dfc:	f1a2 030c 	sub.w	r3, r2, #12
 8003e00:	1f09      	subs	r1, r1, #4
 8003e02:	3a10      	subs	r2, #16
 8003e04:	4281      	cmp	r1, r0
 8003e06:	ee21 1a00 	vmul.f32	s2, s2, s0
 8003e0a:	ed83 1a00 	vstr	s2, [r3]
 8003e0e:	d2d5      	bcs.n	8003dbc <forward_neg+0xa0>
 8003e10:	bcf0      	pop	{r4, r5, r6, r7}
 8003e12:	4770      	bx	lr

08003e14 <nl_func_reciprocal_array_f32>:
 8003e14:	6889      	ldr	r1, [r1, #8]
 8003e16:	6880      	ldr	r0, [r0, #8]
 8003e18:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003e1c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003e20:	1f1b      	subs	r3, r3, #4
 8003e22:	1f12      	subs	r2, r2, #4
 8003e24:	428b      	cmp	r3, r1
 8003e26:	d331      	bcc.n	8003e8c <nl_func_reciprocal_array_f32+0x78>
 8003e28:	1f18      	subs	r0, r3, #4
 8003e2a:	ed93 0a00 	vldr	s0, [r3]
 8003e2e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003e32:	4288      	cmp	r0, r1
 8003e34:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003e38:	ed82 0a00 	vstr	s0, [r2]
 8003e3c:	d326      	bcc.n	8003e8c <nl_func_reciprocal_array_f32+0x78>
 8003e3e:	edd0 0a00 	vldr	s1, [r0]
 8003e42:	1f00      	subs	r0, r0, #4
 8003e44:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003e48:	1f13      	subs	r3, r2, #4
 8003e4a:	4288      	cmp	r0, r1
 8003e4c:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8003e50:	ed83 1a00 	vstr	s2, [r3]
 8003e54:	d31a      	bcc.n	8003e8c <nl_func_reciprocal_array_f32+0x78>
 8003e56:	ed90 0a00 	vldr	s0, [r0]
 8003e5a:	1f00      	subs	r0, r0, #4
 8003e5c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003e60:	f1a2 0c08 	sub.w	ip, r2, #8
 8003e64:	4288      	cmp	r0, r1
 8003e66:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003e6a:	ed8c 0a00 	vstr	s0, [ip]
 8003e6e:	d30d      	bcc.n	8003e8c <nl_func_reciprocal_array_f32+0x78>
 8003e70:	edd0 0a00 	vldr	s1, [r0]
 8003e74:	f1a2 030c 	sub.w	r3, r2, #12
 8003e78:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003e7c:	3a10      	subs	r2, #16
 8003e7e:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8003e82:	ed83 1a00 	vstr	s2, [r3]
 8003e86:	1f03      	subs	r3, r0, #4
 8003e88:	428b      	cmp	r3, r1
 8003e8a:	d2cd      	bcs.n	8003e28 <nl_func_reciprocal_array_f32+0x14>
 8003e8c:	4770      	bx	lr
	...

08003e90 <forward_reciprocal>:
 8003e90:	b4f0      	push	{r4, r5, r6, r7}
 8003e92:	6942      	ldr	r2, [r0, #20]
 8003e94:	f04f 0501 	mov.w	r5, #1
 8003e98:	8811      	ldrh	r1, [r2, #0]
 8003e9a:	2900      	cmp	r1, #0
 8003e9c:	bf1a      	itte	ne
 8003e9e:	6850      	ldrne	r0, [r2, #4]
 8003ea0:	1d00      	addne	r0, r0, #4
 8003ea2:	2004      	moveq	r0, #4
 8003ea4:	6800      	ldr	r0, [r0, #0]
 8003ea6:	2800      	cmp	r0, #0
 8003ea8:	bf14      	ite	ne
 8003eaa:	6803      	ldrne	r3, [r0, #0]
 8003eac:	2300      	moveq	r3, #0
 8003eae:	2902      	cmp	r1, #2
 8003eb0:	bfa6      	itte	ge
 8003eb2:	6850      	ldrge	r0, [r2, #4]
 8003eb4:	3010      	addge	r0, #16
 8003eb6:	2004      	movlt	r0, #4
 8003eb8:	6800      	ldr	r0, [r0, #0]
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	bf19      	ittee	ne
 8003ebe:	6800      	ldrne	r0, [r0, #0]
 8003ec0:	f100 0418 	addne.w	r4, r0, #24
 8003ec4:	2100      	moveq	r1, #0
 8003ec6:	f101 0418 	addeq.w	r4, r1, #24
 8003eca:	f103 0108 	add.w	r1, r3, #8
 8003ece:	680a      	ldr	r2, [r1, #0]
 8003ed0:	0a12      	lsrs	r2, r2, #8
 8003ed2:	d01f      	beq.n	8003f14 <forward_reciprocal+0x84>
 8003ed4:	684e      	ldr	r6, [r1, #4]
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003edc:	1f0f      	subs	r7, r1, #4
 8003ede:	f010 0103 	ands.w	r1, r0, #3
 8003ee2:	d006      	beq.n	8003ef2 <forward_reciprocal+0x62>
 8003ee4:	1e52      	subs	r2, r2, #1
 8003ee6:	f857 c904 	ldr.w	ip, [r7], #-4
 8003eea:	1e49      	subs	r1, r1, #1
 8003eec:	fb0c f505 	mul.w	r5, ip, r5
 8003ef0:	d1f8      	bne.n	8003ee4 <forward_reciprocal+0x54>
 8003ef2:	0880      	lsrs	r0, r0, #2
 8003ef4:	d00e      	beq.n	8003f14 <forward_reciprocal+0x84>
 8003ef6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003efa:	3910      	subs	r1, #16
 8003efc:	68ca      	ldr	r2, [r1, #12]
 8003efe:	688e      	ldr	r6, [r1, #8]
 8003f00:	684f      	ldr	r7, [r1, #4]
 8003f02:	f851 c910 	ldr.w	ip, [r1], #-16
 8003f06:	4372      	muls	r2, r6
 8003f08:	437a      	muls	r2, r7
 8003f0a:	fb0c f202 	mul.w	r2, ip, r2
 8003f0e:	4355      	muls	r5, r2
 8003f10:	1e40      	subs	r0, r0, #1
 8003f12:	d1f3      	bne.n	8003efc <forward_reciprocal+0x6c>
 8003f14:	6998      	ldr	r0, [r3, #24]
 8003f16:	6822      	ldr	r2, [r4, #0]
 8003f18:	6880      	ldr	r0, [r0, #8]
 8003f1a:	6893      	ldr	r3, [r2, #8]
 8003f1c:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003f20:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003f24:	1f09      	subs	r1, r1, #4
 8003f26:	1f22      	subs	r2, r4, #4
 8003f28:	4281      	cmp	r1, r0
 8003f2a:	d331      	bcc.n	8003f90 <forward_reciprocal+0x100>
 8003f2c:	ed91 0a00 	vldr	s0, [r1]
 8003f30:	1f09      	subs	r1, r1, #4
 8003f32:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003f36:	4281      	cmp	r1, r0
 8003f38:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003f3c:	ed82 0a00 	vstr	s0, [r2]
 8003f40:	d326      	bcc.n	8003f90 <forward_reciprocal+0x100>
 8003f42:	edd1 0a00 	vldr	s1, [r1]
 8003f46:	1f09      	subs	r1, r1, #4
 8003f48:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003f4c:	1f13      	subs	r3, r2, #4
 8003f4e:	4281      	cmp	r1, r0
 8003f50:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8003f54:	ed83 1a00 	vstr	s2, [r3]
 8003f58:	d31a      	bcc.n	8003f90 <forward_reciprocal+0x100>
 8003f5a:	ed91 0a00 	vldr	s0, [r1]
 8003f5e:	1f09      	subs	r1, r1, #4
 8003f60:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003f64:	f1a2 0408 	sub.w	r4, r2, #8
 8003f68:	4281      	cmp	r1, r0
 8003f6a:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003f6e:	ed84 0a00 	vstr	s0, [r4]
 8003f72:	d30d      	bcc.n	8003f90 <forward_reciprocal+0x100>
 8003f74:	edd1 0a00 	vldr	s1, [r1]
 8003f78:	f1a2 030c 	sub.w	r3, r2, #12
 8003f7c:	1f09      	subs	r1, r1, #4
 8003f7e:	3a10      	subs	r2, #16
 8003f80:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003f84:	4281      	cmp	r1, r0
 8003f86:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8003f8a:	ed83 1a00 	vstr	s2, [r3]
 8003f8e:	d2cd      	bcs.n	8003f2c <forward_reciprocal+0x9c>
 8003f90:	bcf0      	pop	{r4, r5, r6, r7}
 8003f92:	4770      	bx	lr

08003f94 <nl_func_exp_array_f32>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	688c      	ldr	r4, [r1, #8]
 8003f98:	6880      	ldr	r0, [r0, #8]
 8003f9a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003f9e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003fa2:	1f0d      	subs	r5, r1, #4
 8003fa4:	1f16      	subs	r6, r2, #4
 8003fa6:	42a5      	cmp	r5, r4
 8003fa8:	f0c0 800a 	bcc.w	8003fc0 <nl_func_exp_array_f32+0x2c>
 8003fac:	ed95 0a00 	vldr	s0, [r5]
 8003fb0:	1f2d      	subs	r5, r5, #4
 8003fb2:	f010 fa43 	bl	801443c <expf>
 8003fb6:	ed86 0a00 	vstr	s0, [r6]
 8003fba:	1f36      	subs	r6, r6, #4
 8003fbc:	42a5      	cmp	r5, r4
 8003fbe:	d2f5      	bcs.n	8003fac <nl_func_exp_array_f32+0x18>
 8003fc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003fc4 <forward_exp>:
 8003fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc6:	b081      	sub	sp, #4
 8003fc8:	6942      	ldr	r2, [r0, #20]
 8003fca:	f04f 0501 	mov.w	r5, #1
 8003fce:	8811      	ldrh	r1, [r2, #0]
 8003fd0:	2900      	cmp	r1, #0
 8003fd2:	bf1a      	itte	ne
 8003fd4:	6850      	ldrne	r0, [r2, #4]
 8003fd6:	1d00      	addne	r0, r0, #4
 8003fd8:	2004      	moveq	r0, #4
 8003fda:	6800      	ldr	r0, [r0, #0]
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	bf14      	ite	ne
 8003fe0:	6803      	ldrne	r3, [r0, #0]
 8003fe2:	2300      	moveq	r3, #0
 8003fe4:	2902      	cmp	r1, #2
 8003fe6:	bfa6      	itte	ge
 8003fe8:	6850      	ldrge	r0, [r2, #4]
 8003fea:	3010      	addge	r0, #16
 8003fec:	2004      	movlt	r0, #4
 8003fee:	6800      	ldr	r0, [r0, #0]
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	bf19      	ittee	ne
 8003ff4:	6800      	ldrne	r0, [r0, #0]
 8003ff6:	f100 0418 	addne.w	r4, r0, #24
 8003ffa:	2100      	moveq	r1, #0
 8003ffc:	f101 0418 	addeq.w	r4, r1, #24
 8004000:	f103 0108 	add.w	r1, r3, #8
 8004004:	680a      	ldr	r2, [r1, #0]
 8004006:	0a12      	lsrs	r2, r2, #8
 8004008:	d01f      	beq.n	800404a <forward_exp+0x86>
 800400a:	684e      	ldr	r6, [r1, #4]
 800400c:	4610      	mov	r0, r2
 800400e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004012:	1f0f      	subs	r7, r1, #4
 8004014:	f010 0103 	ands.w	r1, r0, #3
 8004018:	d006      	beq.n	8004028 <forward_exp+0x64>
 800401a:	1e52      	subs	r2, r2, #1
 800401c:	f857 c904 	ldr.w	ip, [r7], #-4
 8004020:	1e49      	subs	r1, r1, #1
 8004022:	fb0c f505 	mul.w	r5, ip, r5
 8004026:	d1f8      	bne.n	800401a <forward_exp+0x56>
 8004028:	0880      	lsrs	r0, r0, #2
 800402a:	d00e      	beq.n	800404a <forward_exp+0x86>
 800402c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004030:	3910      	subs	r1, #16
 8004032:	68ca      	ldr	r2, [r1, #12]
 8004034:	688e      	ldr	r6, [r1, #8]
 8004036:	684f      	ldr	r7, [r1, #4]
 8004038:	f851 c910 	ldr.w	ip, [r1], #-16
 800403c:	4372      	muls	r2, r6
 800403e:	437a      	muls	r2, r7
 8004040:	fb0c f202 	mul.w	r2, ip, r2
 8004044:	4355      	muls	r5, r2
 8004046:	1e40      	subs	r0, r0, #1
 8004048:	d1f3      	bne.n	8004032 <forward_exp+0x6e>
 800404a:	6998      	ldr	r0, [r3, #24]
 800404c:	6821      	ldr	r1, [r4, #0]
 800404e:	6886      	ldr	r6, [r0, #8]
 8004050:	688a      	ldr	r2, [r1, #8]
 8004052:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004056:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800405a:	1f07      	subs	r7, r0, #4
 800405c:	1f1c      	subs	r4, r3, #4
 800405e:	42b7      	cmp	r7, r6
 8004060:	f0c0 800a 	bcc.w	8004078 <forward_exp+0xb4>
 8004064:	ed97 0a00 	vldr	s0, [r7]
 8004068:	1f3f      	subs	r7, r7, #4
 800406a:	f010 f9e7 	bl	801443c <expf>
 800406e:	ed84 0a00 	vstr	s0, [r4]
 8004072:	1f24      	subs	r4, r4, #4
 8004074:	42b7      	cmp	r7, r6
 8004076:	d2f5      	bcs.n	8004064 <forward_exp+0xa0>
 8004078:	b001      	add	sp, #4
 800407a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800407c <nl_func_sigmoid_array_f32>:
 800407c:	b570      	push	{r4, r5, r6, lr}
 800407e:	688c      	ldr	r4, [r1, #8]
 8004080:	6880      	ldr	r0, [r0, #8]
 8004082:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004086:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800408a:	1f0d      	subs	r5, r1, #4
 800408c:	1f16      	subs	r6, r2, #4
 800408e:	42a5      	cmp	r5, r4
 8004090:	f0c0 8014 	bcc.w	80040bc <nl_func_sigmoid_array_f32+0x40>
 8004094:	ed95 0a00 	vldr	s0, [r5]
 8004098:	1f2d      	subs	r5, r5, #4
 800409a:	eeb1 0a40 	vneg.f32	s0, s0
 800409e:	f010 f9cd 	bl	801443c <expf>
 80040a2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80040a6:	ee70 0a20 	vadd.f32	s1, s0, s1
 80040aa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80040ae:	ee81 1a20 	vdiv.f32	s2, s2, s1
 80040b2:	ed86 1a00 	vstr	s2, [r6]
 80040b6:	1f36      	subs	r6, r6, #4
 80040b8:	42a5      	cmp	r5, r4
 80040ba:	d2eb      	bcs.n	8004094 <nl_func_sigmoid_array_f32+0x18>
 80040bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080040c0 <forward_sigmoid>:
 80040c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c2:	b081      	sub	sp, #4
 80040c4:	6942      	ldr	r2, [r0, #20]
 80040c6:	f04f 0501 	mov.w	r5, #1
 80040ca:	8811      	ldrh	r1, [r2, #0]
 80040cc:	2900      	cmp	r1, #0
 80040ce:	bf1a      	itte	ne
 80040d0:	6850      	ldrne	r0, [r2, #4]
 80040d2:	1d00      	addne	r0, r0, #4
 80040d4:	2004      	moveq	r0, #4
 80040d6:	6800      	ldr	r0, [r0, #0]
 80040d8:	2800      	cmp	r0, #0
 80040da:	bf14      	ite	ne
 80040dc:	6803      	ldrne	r3, [r0, #0]
 80040de:	2300      	moveq	r3, #0
 80040e0:	2902      	cmp	r1, #2
 80040e2:	bfa6      	itte	ge
 80040e4:	6850      	ldrge	r0, [r2, #4]
 80040e6:	3010      	addge	r0, #16
 80040e8:	2004      	movlt	r0, #4
 80040ea:	6800      	ldr	r0, [r0, #0]
 80040ec:	2800      	cmp	r0, #0
 80040ee:	bf19      	ittee	ne
 80040f0:	6800      	ldrne	r0, [r0, #0]
 80040f2:	f100 0418 	addne.w	r4, r0, #24
 80040f6:	2100      	moveq	r1, #0
 80040f8:	f101 0418 	addeq.w	r4, r1, #24
 80040fc:	f103 0108 	add.w	r1, r3, #8
 8004100:	680a      	ldr	r2, [r1, #0]
 8004102:	0a12      	lsrs	r2, r2, #8
 8004104:	d01f      	beq.n	8004146 <forward_sigmoid+0x86>
 8004106:	684e      	ldr	r6, [r1, #4]
 8004108:	4610      	mov	r0, r2
 800410a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800410e:	1f0f      	subs	r7, r1, #4
 8004110:	f010 0103 	ands.w	r1, r0, #3
 8004114:	d006      	beq.n	8004124 <forward_sigmoid+0x64>
 8004116:	1e52      	subs	r2, r2, #1
 8004118:	f857 c904 	ldr.w	ip, [r7], #-4
 800411c:	1e49      	subs	r1, r1, #1
 800411e:	fb0c f505 	mul.w	r5, ip, r5
 8004122:	d1f8      	bne.n	8004116 <forward_sigmoid+0x56>
 8004124:	0880      	lsrs	r0, r0, #2
 8004126:	d00e      	beq.n	8004146 <forward_sigmoid+0x86>
 8004128:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800412c:	3910      	subs	r1, #16
 800412e:	68ca      	ldr	r2, [r1, #12]
 8004130:	688e      	ldr	r6, [r1, #8]
 8004132:	684f      	ldr	r7, [r1, #4]
 8004134:	f851 c910 	ldr.w	ip, [r1], #-16
 8004138:	4372      	muls	r2, r6
 800413a:	437a      	muls	r2, r7
 800413c:	fb0c f202 	mul.w	r2, ip, r2
 8004140:	4355      	muls	r5, r2
 8004142:	1e40      	subs	r0, r0, #1
 8004144:	d1f3      	bne.n	800412e <forward_sigmoid+0x6e>
 8004146:	6998      	ldr	r0, [r3, #24]
 8004148:	6821      	ldr	r1, [r4, #0]
 800414a:	6886      	ldr	r6, [r0, #8]
 800414c:	688a      	ldr	r2, [r1, #8]
 800414e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004152:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004156:	1f07      	subs	r7, r0, #4
 8004158:	1f1c      	subs	r4, r3, #4
 800415a:	42b7      	cmp	r7, r6
 800415c:	f0c0 8014 	bcc.w	8004188 <forward_sigmoid+0xc8>
 8004160:	ed97 0a00 	vldr	s0, [r7]
 8004164:	1f3f      	subs	r7, r7, #4
 8004166:	eeb1 0a40 	vneg.f32	s0, s0
 800416a:	f010 f967 	bl	801443c <expf>
 800416e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004172:	ee70 0a20 	vadd.f32	s1, s0, s1
 8004176:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800417a:	ee81 1a20 	vdiv.f32	s2, s2, s1
 800417e:	ed84 1a00 	vstr	s2, [r4]
 8004182:	1f24      	subs	r4, r4, #4
 8004184:	42b7      	cmp	r7, r6
 8004186:	d2eb      	bcs.n	8004160 <forward_sigmoid+0xa0>
 8004188:	b001      	add	sp, #4
 800418a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800418c <nl_func_sign_array_f32>:
 800418c:	6889      	ldr	r1, [r1, #8]
 800418e:	6880      	ldr	r0, [r0, #8]
 8004190:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004194:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004198:	1f1b      	subs	r3, r3, #4
 800419a:	1f10      	subs	r0, r2, #4
 800419c:	428b      	cmp	r3, r1
 800419e:	d314      	bcc.n	80041ca <nl_func_sign_array_f32+0x3e>
 80041a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041a4:	ed93 0a00 	vldr	s0, [r3]
 80041a8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80041ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b0:	bfcc      	ite	gt
 80041b2:	ed9f 0a39 	vldrgt	s0, [pc, #228]	; 8004298 <.text_49>
 80041b6:	ee00 2a10 	vmovle	s0, r2
 80041ba:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80041be:	1f1b      	subs	r3, r3, #4
 80041c0:	ed80 0a00 	vstr	s0, [r0]
 80041c4:	1f00      	subs	r0, r0, #4
 80041c6:	428b      	cmp	r3, r1
 80041c8:	d2ec      	bcs.n	80041a4 <nl_func_sign_array_f32+0x18>
 80041ca:	4770      	bx	lr

080041cc <forward_sign>:
 80041cc:	b4f0      	push	{r4, r5, r6, r7}
 80041ce:	6942      	ldr	r2, [r0, #20]
 80041d0:	f04f 0501 	mov.w	r5, #1
 80041d4:	8811      	ldrh	r1, [r2, #0]
 80041d6:	2900      	cmp	r1, #0
 80041d8:	bf1a      	itte	ne
 80041da:	6850      	ldrne	r0, [r2, #4]
 80041dc:	1d00      	addne	r0, r0, #4
 80041de:	2004      	moveq	r0, #4
 80041e0:	6800      	ldr	r0, [r0, #0]
 80041e2:	2800      	cmp	r0, #0
 80041e4:	bf14      	ite	ne
 80041e6:	6803      	ldrne	r3, [r0, #0]
 80041e8:	2300      	moveq	r3, #0
 80041ea:	2901      	cmp	r1, #1
 80041ec:	bfc6      	itte	gt
 80041ee:	6850      	ldrgt	r0, [r2, #4]
 80041f0:	3010      	addgt	r0, #16
 80041f2:	2004      	movle	r0, #4
 80041f4:	6800      	ldr	r0, [r0, #0]
 80041f6:	2800      	cmp	r0, #0
 80041f8:	bf19      	ittee	ne
 80041fa:	6800      	ldrne	r0, [r0, #0]
 80041fc:	f100 0418 	addne.w	r4, r0, #24
 8004200:	2100      	moveq	r1, #0
 8004202:	f101 0418 	addeq.w	r4, r1, #24
 8004206:	f103 0108 	add.w	r1, r3, #8
 800420a:	680a      	ldr	r2, [r1, #0]
 800420c:	0a12      	lsrs	r2, r2, #8
 800420e:	d01f      	beq.n	8004250 <forward_sign+0x84>
 8004210:	684e      	ldr	r6, [r1, #4]
 8004212:	4610      	mov	r0, r2
 8004214:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004218:	1f0f      	subs	r7, r1, #4
 800421a:	f010 0103 	ands.w	r1, r0, #3
 800421e:	d006      	beq.n	800422e <forward_sign+0x62>
 8004220:	1e52      	subs	r2, r2, #1
 8004222:	f857 c904 	ldr.w	ip, [r7], #-4
 8004226:	1e49      	subs	r1, r1, #1
 8004228:	fb0c f505 	mul.w	r5, ip, r5
 800422c:	d1f8      	bne.n	8004220 <forward_sign+0x54>
 800422e:	0880      	lsrs	r0, r0, #2
 8004230:	d00e      	beq.n	8004250 <forward_sign+0x84>
 8004232:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004236:	3910      	subs	r1, #16
 8004238:	68ca      	ldr	r2, [r1, #12]
 800423a:	688e      	ldr	r6, [r1, #8]
 800423c:	684f      	ldr	r7, [r1, #4]
 800423e:	f851 c910 	ldr.w	ip, [r1], #-16
 8004242:	4372      	muls	r2, r6
 8004244:	437a      	muls	r2, r7
 8004246:	fb0c f202 	mul.w	r2, ip, r2
 800424a:	4355      	muls	r5, r2
 800424c:	1e40      	subs	r0, r0, #1
 800424e:	d1f3      	bne.n	8004238 <forward_sign+0x6c>
 8004250:	6998      	ldr	r0, [r3, #24]
 8004252:	6822      	ldr	r2, [r4, #0]
 8004254:	6880      	ldr	r0, [r0, #8]
 8004256:	6893      	ldr	r3, [r2, #8]
 8004258:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800425c:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004260:	1f09      	subs	r1, r1, #4
 8004262:	1f22      	subs	r2, r4, #4
 8004264:	4281      	cmp	r1, r0
 8004266:	d314      	bcc.n	8004292 <forward_sign+0xc6>
 8004268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800426c:	ed91 0a00 	vldr	s0, [r1]
 8004270:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004278:	bfcc      	ite	gt
 800427a:	ed9f 0a07 	vldrgt	s0, [pc, #28]	; 8004298 <.text_49>
 800427e:	ee00 3a10 	vmovle	s0, r3
 8004282:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8004286:	1f09      	subs	r1, r1, #4
 8004288:	ed82 0a00 	vstr	s0, [r2]
 800428c:	1f12      	subs	r2, r2, #4
 800428e:	4281      	cmp	r1, r0
 8004290:	d2ec      	bcs.n	800426c <forward_sign+0xa0>
 8004292:	bcf0      	pop	{r4, r5, r6, r7}
 8004294:	4770      	bx	lr
	...

08004298 <.text_49>:
 8004298:	00000001 	.word	0x00000001

0800429c <nl_func_sqrt_array_f32>:
 800429c:	b570      	push	{r4, r5, r6, lr}
 800429e:	460c      	mov	r4, r1
 80042a0:	6880      	ldr	r0, [r0, #8]
 80042a2:	68a1      	ldr	r1, [r4, #8]
 80042a4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80042a8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80042ac:	1f1d      	subs	r5, r3, #4
 80042ae:	1f16      	subs	r6, r2, #4
 80042b0:	428d      	cmp	r5, r1
 80042b2:	d30a      	bcc.n	80042ca <nl_func_sqrt_array_f32+0x2e>
 80042b4:	ed95 0a00 	vldr	s0, [r5]
 80042b8:	1f2d      	subs	r5, r5, #4
 80042ba:	f002 fb1f 	bl	80068fc <ai_math_sqrt>
 80042be:	ed86 0a00 	vstr	s0, [r6]
 80042c2:	68a0      	ldr	r0, [r4, #8]
 80042c4:	1f36      	subs	r6, r6, #4
 80042c6:	4285      	cmp	r5, r0
 80042c8:	d2f4      	bcs.n	80042b4 <nl_func_sqrt_array_f32+0x18>
 80042ca:	bd70      	pop	{r4, r5, r6, pc}

080042cc <forward_sqrt>:
 80042cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ce:	b081      	sub	sp, #4
 80042d0:	6942      	ldr	r2, [r0, #20]
 80042d2:	f04f 0501 	mov.w	r5, #1
 80042d6:	8811      	ldrh	r1, [r2, #0]
 80042d8:	2900      	cmp	r1, #0
 80042da:	bf1a      	itte	ne
 80042dc:	6850      	ldrne	r0, [r2, #4]
 80042de:	1d00      	addne	r0, r0, #4
 80042e0:	2004      	moveq	r0, #4
 80042e2:	6800      	ldr	r0, [r0, #0]
 80042e4:	2800      	cmp	r0, #0
 80042e6:	bf14      	ite	ne
 80042e8:	6803      	ldrne	r3, [r0, #0]
 80042ea:	2300      	moveq	r3, #0
 80042ec:	2902      	cmp	r1, #2
 80042ee:	bfa6      	itte	ge
 80042f0:	6850      	ldrge	r0, [r2, #4]
 80042f2:	3010      	addge	r0, #16
 80042f4:	2004      	movlt	r0, #4
 80042f6:	6800      	ldr	r0, [r0, #0]
 80042f8:	2800      	cmp	r0, #0
 80042fa:	bf19      	ittee	ne
 80042fc:	6800      	ldrne	r0, [r0, #0]
 80042fe:	f100 0418 	addne.w	r4, r0, #24
 8004302:	2100      	moveq	r1, #0
 8004304:	f101 0418 	addeq.w	r4, r1, #24
 8004308:	f103 0108 	add.w	r1, r3, #8
 800430c:	680a      	ldr	r2, [r1, #0]
 800430e:	0a12      	lsrs	r2, r2, #8
 8004310:	d01f      	beq.n	8004352 <forward_sqrt+0x86>
 8004312:	684e      	ldr	r6, [r1, #4]
 8004314:	4610      	mov	r0, r2
 8004316:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800431a:	1f0f      	subs	r7, r1, #4
 800431c:	f010 0103 	ands.w	r1, r0, #3
 8004320:	d006      	beq.n	8004330 <forward_sqrt+0x64>
 8004322:	1e52      	subs	r2, r2, #1
 8004324:	f857 c904 	ldr.w	ip, [r7], #-4
 8004328:	1e49      	subs	r1, r1, #1
 800432a:	fb0c f505 	mul.w	r5, ip, r5
 800432e:	d1f8      	bne.n	8004322 <forward_sqrt+0x56>
 8004330:	0880      	lsrs	r0, r0, #2
 8004332:	d00e      	beq.n	8004352 <forward_sqrt+0x86>
 8004334:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004338:	3910      	subs	r1, #16
 800433a:	68ca      	ldr	r2, [r1, #12]
 800433c:	688e      	ldr	r6, [r1, #8]
 800433e:	684f      	ldr	r7, [r1, #4]
 8004340:	f851 c910 	ldr.w	ip, [r1], #-16
 8004344:	4372      	muls	r2, r6
 8004346:	437a      	muls	r2, r7
 8004348:	fb0c f202 	mul.w	r2, ip, r2
 800434c:	4355      	muls	r5, r2
 800434e:	1e40      	subs	r0, r0, #1
 8004350:	d1f3      	bne.n	800433a <forward_sqrt+0x6e>
 8004352:	699e      	ldr	r6, [r3, #24]
 8004354:	6822      	ldr	r2, [r4, #0]
 8004356:	68b0      	ldr	r0, [r6, #8]
 8004358:	6893      	ldr	r3, [r2, #8]
 800435a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800435e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004362:	1f0f      	subs	r7, r1, #4
 8004364:	1f24      	subs	r4, r4, #4
 8004366:	4287      	cmp	r7, r0
 8004368:	f0c0 800b 	bcc.w	8004382 <forward_sqrt+0xb6>
 800436c:	ed97 0a00 	vldr	s0, [r7]
 8004370:	1f3f      	subs	r7, r7, #4
 8004372:	f002 fac3 	bl	80068fc <ai_math_sqrt>
 8004376:	ed84 0a00 	vstr	s0, [r4]
 800437a:	68b0      	ldr	r0, [r6, #8]
 800437c:	1f24      	subs	r4, r4, #4
 800437e:	4287      	cmp	r7, r0
 8004380:	d2f4      	bcs.n	800436c <forward_sqrt+0xa0>
 8004382:	b001      	add	sp, #4
 8004384:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004388 <nl_func_soft_plus_array_f32>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	688c      	ldr	r4, [r1, #8]
 800438c:	6880      	ldr	r0, [r0, #8]
 800438e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004392:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004396:	1f0d      	subs	r5, r1, #4
 8004398:	1f16      	subs	r6, r2, #4
 800439a:	42a5      	cmp	r5, r4
 800439c:	f0c0 8010 	bcc.w	80043c0 <nl_func_soft_plus_array_f32+0x38>
 80043a0:	ed95 0a00 	vldr	s0, [r5]
 80043a4:	1f2d      	subs	r5, r5, #4
 80043a6:	f010 f849 	bl	801443c <expf>
 80043aa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80043ae:	ee30 0a20 	vadd.f32	s0, s0, s1
 80043b2:	f010 f90b 	bl	80145cc <logf>
 80043b6:	ed86 0a00 	vstr	s0, [r6]
 80043ba:	1f36      	subs	r6, r6, #4
 80043bc:	42a5      	cmp	r5, r4
 80043be:	d2ef      	bcs.n	80043a0 <nl_func_soft_plus_array_f32+0x18>
 80043c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080043c4 <forward_soft_plus>:
 80043c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043c6:	b081      	sub	sp, #4
 80043c8:	6942      	ldr	r2, [r0, #20]
 80043ca:	f04f 0501 	mov.w	r5, #1
 80043ce:	8811      	ldrh	r1, [r2, #0]
 80043d0:	2900      	cmp	r1, #0
 80043d2:	bf1a      	itte	ne
 80043d4:	6850      	ldrne	r0, [r2, #4]
 80043d6:	1d00      	addne	r0, r0, #4
 80043d8:	2004      	moveq	r0, #4
 80043da:	6800      	ldr	r0, [r0, #0]
 80043dc:	2800      	cmp	r0, #0
 80043de:	bf14      	ite	ne
 80043e0:	6803      	ldrne	r3, [r0, #0]
 80043e2:	2300      	moveq	r3, #0
 80043e4:	2902      	cmp	r1, #2
 80043e6:	bfa6      	itte	ge
 80043e8:	6850      	ldrge	r0, [r2, #4]
 80043ea:	3010      	addge	r0, #16
 80043ec:	2004      	movlt	r0, #4
 80043ee:	6800      	ldr	r0, [r0, #0]
 80043f0:	2800      	cmp	r0, #0
 80043f2:	bf19      	ittee	ne
 80043f4:	6800      	ldrne	r0, [r0, #0]
 80043f6:	f100 0418 	addne.w	r4, r0, #24
 80043fa:	2100      	moveq	r1, #0
 80043fc:	f101 0418 	addeq.w	r4, r1, #24
 8004400:	f103 0108 	add.w	r1, r3, #8
 8004404:	680a      	ldr	r2, [r1, #0]
 8004406:	0a12      	lsrs	r2, r2, #8
 8004408:	d01f      	beq.n	800444a <forward_soft_plus+0x86>
 800440a:	684e      	ldr	r6, [r1, #4]
 800440c:	4610      	mov	r0, r2
 800440e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004412:	1f0f      	subs	r7, r1, #4
 8004414:	f010 0103 	ands.w	r1, r0, #3
 8004418:	d006      	beq.n	8004428 <forward_soft_plus+0x64>
 800441a:	1e52      	subs	r2, r2, #1
 800441c:	f857 c904 	ldr.w	ip, [r7], #-4
 8004420:	1e49      	subs	r1, r1, #1
 8004422:	fb0c f505 	mul.w	r5, ip, r5
 8004426:	d1f8      	bne.n	800441a <forward_soft_plus+0x56>
 8004428:	0880      	lsrs	r0, r0, #2
 800442a:	d00e      	beq.n	800444a <forward_soft_plus+0x86>
 800442c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004430:	3910      	subs	r1, #16
 8004432:	68ca      	ldr	r2, [r1, #12]
 8004434:	688e      	ldr	r6, [r1, #8]
 8004436:	684f      	ldr	r7, [r1, #4]
 8004438:	f851 c910 	ldr.w	ip, [r1], #-16
 800443c:	4372      	muls	r2, r6
 800443e:	437a      	muls	r2, r7
 8004440:	fb0c f202 	mul.w	r2, ip, r2
 8004444:	4355      	muls	r5, r2
 8004446:	1e40      	subs	r0, r0, #1
 8004448:	d1f3      	bne.n	8004432 <forward_soft_plus+0x6e>
 800444a:	6998      	ldr	r0, [r3, #24]
 800444c:	6821      	ldr	r1, [r4, #0]
 800444e:	6886      	ldr	r6, [r0, #8]
 8004450:	688a      	ldr	r2, [r1, #8]
 8004452:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004456:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800445a:	1f07      	subs	r7, r0, #4
 800445c:	1f1c      	subs	r4, r3, #4
 800445e:	42b7      	cmp	r7, r6
 8004460:	f0c0 8010 	bcc.w	8004484 <forward_soft_plus+0xc0>
 8004464:	ed97 0a00 	vldr	s0, [r7]
 8004468:	1f3f      	subs	r7, r7, #4
 800446a:	f00f ffe7 	bl	801443c <expf>
 800446e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004472:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004476:	f010 f8a9 	bl	80145cc <logf>
 800447a:	ed84 0a00 	vstr	s0, [r4]
 800447e:	1f24      	subs	r4, r4, #4
 8004480:	42b7      	cmp	r7, r6
 8004482:	d2ef      	bcs.n	8004464 <forward_soft_plus+0xa0>
 8004484:	b001      	add	sp, #4
 8004486:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004488 <nl_func_soft_sign_array_f32>:
 8004488:	6889      	ldr	r1, [r1, #8]
 800448a:	6880      	ldr	r0, [r0, #8]
 800448c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004490:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004494:	1f1b      	subs	r3, r3, #4
 8004496:	1f10      	subs	r0, r2, #4
 8004498:	428b      	cmp	r3, r1
 800449a:	d30f      	bcc.n	80044bc <nl_func_soft_sign_array_f32+0x34>
 800449c:	ed93 0a00 	vldr	s0, [r3]
 80044a0:	1f1b      	subs	r3, r3, #4
 80044a2:	eef0 0ac0 	vabs.f32	s1, s0
 80044a6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80044aa:	ee70 0a81 	vadd.f32	s1, s1, s2
 80044ae:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80044b2:	ed80 0a00 	vstr	s0, [r0]
 80044b6:	1f00      	subs	r0, r0, #4
 80044b8:	428b      	cmp	r3, r1
 80044ba:	d2ef      	bcs.n	800449c <nl_func_soft_sign_array_f32+0x14>
 80044bc:	4770      	bx	lr
	...

080044c0 <forward_soft_sign>:
 80044c0:	b4f0      	push	{r4, r5, r6, r7}
 80044c2:	6942      	ldr	r2, [r0, #20]
 80044c4:	f04f 0501 	mov.w	r5, #1
 80044c8:	8811      	ldrh	r1, [r2, #0]
 80044ca:	2900      	cmp	r1, #0
 80044cc:	bf1a      	itte	ne
 80044ce:	6850      	ldrne	r0, [r2, #4]
 80044d0:	1d00      	addne	r0, r0, #4
 80044d2:	2004      	moveq	r0, #4
 80044d4:	6800      	ldr	r0, [r0, #0]
 80044d6:	2800      	cmp	r0, #0
 80044d8:	bf14      	ite	ne
 80044da:	6803      	ldrne	r3, [r0, #0]
 80044dc:	2300      	moveq	r3, #0
 80044de:	2902      	cmp	r1, #2
 80044e0:	bfa6      	itte	ge
 80044e2:	6850      	ldrge	r0, [r2, #4]
 80044e4:	3010      	addge	r0, #16
 80044e6:	2004      	movlt	r0, #4
 80044e8:	6800      	ldr	r0, [r0, #0]
 80044ea:	2800      	cmp	r0, #0
 80044ec:	bf19      	ittee	ne
 80044ee:	6800      	ldrne	r0, [r0, #0]
 80044f0:	f100 0418 	addne.w	r4, r0, #24
 80044f4:	2100      	moveq	r1, #0
 80044f6:	f101 0418 	addeq.w	r4, r1, #24
 80044fa:	f103 0108 	add.w	r1, r3, #8
 80044fe:	680a      	ldr	r2, [r1, #0]
 8004500:	0a12      	lsrs	r2, r2, #8
 8004502:	d01f      	beq.n	8004544 <forward_soft_sign+0x84>
 8004504:	684e      	ldr	r6, [r1, #4]
 8004506:	4610      	mov	r0, r2
 8004508:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800450c:	1f0f      	subs	r7, r1, #4
 800450e:	f010 0103 	ands.w	r1, r0, #3
 8004512:	d006      	beq.n	8004522 <forward_soft_sign+0x62>
 8004514:	1e52      	subs	r2, r2, #1
 8004516:	f857 c904 	ldr.w	ip, [r7], #-4
 800451a:	1e49      	subs	r1, r1, #1
 800451c:	fb0c f505 	mul.w	r5, ip, r5
 8004520:	d1f8      	bne.n	8004514 <forward_soft_sign+0x54>
 8004522:	0880      	lsrs	r0, r0, #2
 8004524:	d00e      	beq.n	8004544 <forward_soft_sign+0x84>
 8004526:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800452a:	3910      	subs	r1, #16
 800452c:	68ca      	ldr	r2, [r1, #12]
 800452e:	688e      	ldr	r6, [r1, #8]
 8004530:	684f      	ldr	r7, [r1, #4]
 8004532:	f851 c910 	ldr.w	ip, [r1], #-16
 8004536:	4372      	muls	r2, r6
 8004538:	437a      	muls	r2, r7
 800453a:	fb0c f202 	mul.w	r2, ip, r2
 800453e:	4355      	muls	r5, r2
 8004540:	1e40      	subs	r0, r0, #1
 8004542:	d1f3      	bne.n	800452c <forward_soft_sign+0x6c>
 8004544:	6998      	ldr	r0, [r3, #24]
 8004546:	6822      	ldr	r2, [r4, #0]
 8004548:	6880      	ldr	r0, [r0, #8]
 800454a:	6893      	ldr	r3, [r2, #8]
 800454c:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8004550:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004554:	1f09      	subs	r1, r1, #4
 8004556:	1f22      	subs	r2, r4, #4
 8004558:	4281      	cmp	r1, r0
 800455a:	d30f      	bcc.n	800457c <forward_soft_sign+0xbc>
 800455c:	ed91 0a00 	vldr	s0, [r1]
 8004560:	1f09      	subs	r1, r1, #4
 8004562:	eef0 0ac0 	vabs.f32	s1, s0
 8004566:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800456a:	ee70 0a81 	vadd.f32	s1, s1, s2
 800456e:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004572:	ed82 0a00 	vstr	s0, [r2]
 8004576:	1f12      	subs	r2, r2, #4
 8004578:	4281      	cmp	r1, r0
 800457a:	d2ef      	bcs.n	800455c <forward_soft_sign+0x9c>
 800457c:	bcf0      	pop	{r4, r5, r6, r7}
 800457e:	4770      	bx	lr

08004580 <nl_func_tanh_array_f32>:
 8004580:	b570      	push	{r4, r5, r6, lr}
 8004582:	688c      	ldr	r4, [r1, #8]
 8004584:	6880      	ldr	r0, [r0, #8]
 8004586:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800458a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800458e:	1f0d      	subs	r5, r1, #4
 8004590:	1f16      	subs	r6, r2, #4
 8004592:	42a5      	cmp	r5, r4
 8004594:	f0c0 800a 	bcc.w	80045ac <nl_func_tanh_array_f32+0x2c>
 8004598:	ed95 0a00 	vldr	s0, [r5]
 800459c:	1f2d      	subs	r5, r5, #4
 800459e:	f010 fb6d 	bl	8014c7c <tanhf>
 80045a2:	ed86 0a00 	vstr	s0, [r6]
 80045a6:	1f36      	subs	r6, r6, #4
 80045a8:	42a5      	cmp	r5, r4
 80045aa:	d2f5      	bcs.n	8004598 <nl_func_tanh_array_f32+0x18>
 80045ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080045b0 <forward_tanh>:
 80045b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045b2:	b081      	sub	sp, #4
 80045b4:	6942      	ldr	r2, [r0, #20]
 80045b6:	f04f 0501 	mov.w	r5, #1
 80045ba:	8811      	ldrh	r1, [r2, #0]
 80045bc:	2900      	cmp	r1, #0
 80045be:	bf1a      	itte	ne
 80045c0:	6850      	ldrne	r0, [r2, #4]
 80045c2:	1d00      	addne	r0, r0, #4
 80045c4:	2004      	moveq	r0, #4
 80045c6:	6800      	ldr	r0, [r0, #0]
 80045c8:	2800      	cmp	r0, #0
 80045ca:	bf14      	ite	ne
 80045cc:	6803      	ldrne	r3, [r0, #0]
 80045ce:	2300      	moveq	r3, #0
 80045d0:	2902      	cmp	r1, #2
 80045d2:	bfa6      	itte	ge
 80045d4:	6850      	ldrge	r0, [r2, #4]
 80045d6:	3010      	addge	r0, #16
 80045d8:	2004      	movlt	r0, #4
 80045da:	6800      	ldr	r0, [r0, #0]
 80045dc:	2800      	cmp	r0, #0
 80045de:	bf19      	ittee	ne
 80045e0:	6800      	ldrne	r0, [r0, #0]
 80045e2:	f100 0418 	addne.w	r4, r0, #24
 80045e6:	2100      	moveq	r1, #0
 80045e8:	f101 0418 	addeq.w	r4, r1, #24
 80045ec:	f103 0108 	add.w	r1, r3, #8
 80045f0:	680a      	ldr	r2, [r1, #0]
 80045f2:	0a12      	lsrs	r2, r2, #8
 80045f4:	d01f      	beq.n	8004636 <forward_tanh+0x86>
 80045f6:	684e      	ldr	r6, [r1, #4]
 80045f8:	4610      	mov	r0, r2
 80045fa:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80045fe:	1f0f      	subs	r7, r1, #4
 8004600:	f010 0103 	ands.w	r1, r0, #3
 8004604:	d006      	beq.n	8004614 <forward_tanh+0x64>
 8004606:	1e52      	subs	r2, r2, #1
 8004608:	f857 c904 	ldr.w	ip, [r7], #-4
 800460c:	1e49      	subs	r1, r1, #1
 800460e:	fb0c f505 	mul.w	r5, ip, r5
 8004612:	d1f8      	bne.n	8004606 <forward_tanh+0x56>
 8004614:	0880      	lsrs	r0, r0, #2
 8004616:	d00e      	beq.n	8004636 <forward_tanh+0x86>
 8004618:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800461c:	3910      	subs	r1, #16
 800461e:	68ca      	ldr	r2, [r1, #12]
 8004620:	688e      	ldr	r6, [r1, #8]
 8004622:	684f      	ldr	r7, [r1, #4]
 8004624:	f851 c910 	ldr.w	ip, [r1], #-16
 8004628:	4372      	muls	r2, r6
 800462a:	437a      	muls	r2, r7
 800462c:	fb0c f202 	mul.w	r2, ip, r2
 8004630:	4355      	muls	r5, r2
 8004632:	1e40      	subs	r0, r0, #1
 8004634:	d1f3      	bne.n	800461e <forward_tanh+0x6e>
 8004636:	6998      	ldr	r0, [r3, #24]
 8004638:	6821      	ldr	r1, [r4, #0]
 800463a:	6886      	ldr	r6, [r0, #8]
 800463c:	688a      	ldr	r2, [r1, #8]
 800463e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004642:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004646:	1f07      	subs	r7, r0, #4
 8004648:	1f1c      	subs	r4, r3, #4
 800464a:	42b7      	cmp	r7, r6
 800464c:	f0c0 800a 	bcc.w	8004664 <forward_tanh+0xb4>
 8004650:	ed97 0a00 	vldr	s0, [r7]
 8004654:	1f3f      	subs	r7, r7, #4
 8004656:	f010 fb11 	bl	8014c7c <tanhf>
 800465a:	ed84 0a00 	vstr	s0, [r4]
 800465e:	1f24      	subs	r4, r4, #4
 8004660:	42b7      	cmp	r7, r6
 8004662:	d2f5      	bcs.n	8004650 <forward_tanh+0xa0>
 8004664:	b001      	add	sp, #4
 8004666:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004668 <nl_func_relu_array_f32>:
 8004668:	6889      	ldr	r1, [r1, #8]
 800466a:	6880      	ldr	r0, [r0, #8]
 800466c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004670:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004674:	1f1b      	subs	r3, r3, #4
 8004676:	1f10      	subs	r0, r2, #4
 8004678:	428b      	cmp	r3, r1
 800467a:	d30e      	bcc.n	800469a <nl_func_relu_array_f32+0x32>
 800467c:	ed93 0a00 	vldr	s0, [r3]
 8004680:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004688:	bf48      	it	mi
 800468a:	ed9f 0a7c 	vldrmi	s0, [pc, #496]	; 800487c <.text_62>
 800468e:	ed80 0a00 	vstr	s0, [r0]
 8004692:	1f1b      	subs	r3, r3, #4
 8004694:	1f00      	subs	r0, r0, #4
 8004696:	428b      	cmp	r3, r1
 8004698:	d2f0      	bcs.n	800467c <nl_func_relu_array_f32+0x14>
 800469a:	4770      	bx	lr

0800469c <nl_func_sm_channel_f32>:
 800469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a0:	4614      	mov	r4, r2
 80046a2:	2c02      	cmp	r4, #2
 80046a4:	ed2d 8b02 	vpush	{d8}
 80046a8:	688f      	ldr	r7, [r1, #8]
 80046aa:	6886      	ldr	r6, [r0, #8]
 80046ac:	eddf 8a73 	vldr	s17, [pc, #460]	; 800487c <.text_62>
 80046b0:	ed97 8a00 	vldr	s16, [r7]
 80046b4:	d33d      	bcc.n	8004732 <nl_func_sm_channel_f32+0x96>
 80046b6:	1e61      	subs	r1, r4, #1
 80046b8:	1d3a      	adds	r2, r7, #4
 80046ba:	f011 0003 	ands.w	r0, r1, #3
 80046be:	d00c      	beq.n	80046da <nl_func_sm_channel_f32+0x3e>
 80046c0:	ed92 0a00 	vldr	s0, [r2]
 80046c4:	f102 0204 	add.w	r2, r2, #4
 80046c8:	eeb4 0a48 	vcmp.f32	s0, s16
 80046cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d0:	bf58      	it	pl
 80046d2:	eeb0 8a40 	vmovpl.f32	s16, s0
 80046d6:	1e40      	subs	r0, r0, #1
 80046d8:	d1f2      	bne.n	80046c0 <nl_func_sm_channel_f32+0x24>
 80046da:	0889      	lsrs	r1, r1, #2
 80046dc:	f000 802b 	beq.w	8004736 <nl_func_sm_channel_f32+0x9a>
 80046e0:	ed92 0a00 	vldr	s0, [r2]
 80046e4:	eeb4 0a48 	vcmp.f32	s0, s16
 80046e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ec:	bf58      	it	pl
 80046ee:	eeb0 8a40 	vmovpl.f32	s16, s0
 80046f2:	ed92 0a01 	vldr	s0, [r2, #4]
 80046f6:	eeb4 0a48 	vcmp.f32	s0, s16
 80046fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fe:	bf58      	it	pl
 8004700:	eeb0 8a40 	vmovpl.f32	s16, s0
 8004704:	ed92 0a02 	vldr	s0, [r2, #8]
 8004708:	eeb4 0a48 	vcmp.f32	s0, s16
 800470c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004710:	bf58      	it	pl
 8004712:	eeb0 8a40 	vmovpl.f32	s16, s0
 8004716:	ed92 0a03 	vldr	s0, [r2, #12]
 800471a:	f102 0210 	add.w	r2, r2, #16
 800471e:	eeb4 0a48 	vcmp.f32	s0, s16
 8004722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004726:	bf58      	it	pl
 8004728:	eeb0 8a40 	vmovpl.f32	s16, s0
 800472c:	1e49      	subs	r1, r1, #1
 800472e:	d1d7      	bne.n	80046e0 <nl_func_sm_channel_f32+0x44>
 8004730:	e001      	b.n	8004736 <nl_func_sm_channel_f32+0x9a>
 8004732:	2c00      	cmp	r4, #0
 8004734:	d040      	beq.n	80047b8 <nl_func_sm_channel_f32+0x11c>
 8004736:	46b0      	mov	r8, r6
 8004738:	ea4f 0504 	mov.w	r5, r4
 800473c:	ed97 0a00 	vldr	s0, [r7]
 8004740:	1d3f      	adds	r7, r7, #4
 8004742:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004746:	f00f fe79 	bl	801443c <expf>
 800474a:	1e6d      	subs	r5, r5, #1
 800474c:	ed88 0a00 	vstr	s0, [r8]
 8004750:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004754:	f108 0804 	add.w	r8, r8, #4
 8004758:	d1f0      	bne.n	800473c <nl_func_sm_channel_f32+0xa0>
 800475a:	f014 0003 	ands.w	r0, r4, #3
 800475e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004762:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8004766:	d009      	beq.n	800477c <nl_func_sm_channel_f32+0xe0>
 8004768:	edd6 0a00 	vldr	s1, [r6]
 800476c:	1e40      	subs	r0, r0, #1
 800476e:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004772:	edc6 0a00 	vstr	s1, [r6]
 8004776:	f106 0604 	add.w	r6, r6, #4
 800477a:	d1f5      	bne.n	8004768 <nl_func_sm_channel_f32+0xcc>
 800477c:	08a4      	lsrs	r4, r4, #2
 800477e:	d01b      	beq.n	80047b8 <nl_func_sm_channel_f32+0x11c>
 8004780:	edd6 0a00 	vldr	s1, [r6]
 8004784:	1e64      	subs	r4, r4, #1
 8004786:	ee60 0a80 	vmul.f32	s1, s1, s0
 800478a:	edc6 0a00 	vstr	s1, [r6]
 800478e:	ed96 1a01 	vldr	s2, [r6, #4]
 8004792:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004796:	ed86 1a01 	vstr	s2, [r6, #4]
 800479a:	edd6 0a02 	vldr	s1, [r6, #8]
 800479e:	ed96 1a03 	vldr	s2, [r6, #12]
 80047a2:	ee60 1a80 	vmul.f32	s3, s1, s0
 80047a6:	ee61 0a00 	vmul.f32	s1, s2, s0
 80047aa:	edc6 1a02 	vstr	s3, [r6, #8]
 80047ae:	edc6 0a03 	vstr	s1, [r6, #12]
 80047b2:	f106 0610 	add.w	r6, r6, #16
 80047b6:	d1e3      	bne.n	8004780 <nl_func_sm_channel_f32+0xe4>
 80047b8:	ecbd 8b02 	vpop	{d8}
 80047bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080047c0 <nl_func_sm_array_f32>:
 80047c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047c4:	4604      	mov	r4, r0
 80047c6:	460d      	mov	r5, r1
 80047c8:	9f08      	ldr	r7, [sp, #32]
 80047ca:	68a8      	ldr	r0, [r5, #8]
 80047cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80047ce:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80047d2:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80047d6:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80047da:	00bf      	lsls	r7, r7, #2
 80047dc:	427f      	negs	r7, r7
 80047de:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 80047e2:	00b6      	lsls	r6, r6, #2
 80047e4:	eb01 0a07 	add.w	sl, r1, r7
 80047e8:	4276      	negs	r6, r6
 80047ea:	45e2      	cmp	sl, ip
 80047ec:	eb02 0906 	add.w	r9, r2, r6
 80047f0:	d310      	bcc.n	8004814 <nl_func_sm_array_f32+0x54>
 80047f2:	4698      	mov	r8, r3
 80047f4:	f8c5 a008 	str.w	sl, [r5, #8]
 80047f8:	2300      	movs	r3, #0
 80047fa:	f8c4 9008 	str.w	r9, [r4, #8]
 80047fe:	4642      	mov	r2, r8
 8004800:	4629      	mov	r1, r5
 8004802:	4620      	mov	r0, r4
 8004804:	f7ff ff4a 	bl	800469c <nl_func_sm_channel_f32>
 8004808:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800480c:	44ba      	add	sl, r7
 800480e:	44b1      	add	r9, r6
 8004810:	45e2      	cmp	sl, ip
 8004812:	d2ef      	bcs.n	80047f4 <nl_func_sm_array_f32+0x34>
 8004814:	68e8      	ldr	r0, [r5, #12]
 8004816:	60a8      	str	r0, [r5, #8]
 8004818:	68e1      	ldr	r1, [r4, #12]
 800481a:	60a1      	str	r1, [r4, #8]
 800481c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004820 <nl_func_hard_sigmoid_array_f32>:
 8004820:	6889      	ldr	r1, [r1, #8]
 8004822:	6880      	ldr	r0, [r0, #8]
 8004824:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004828:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800482c:	1f1b      	subs	r3, r3, #4
 800482e:	1f10      	subs	r0, r2, #4
 8004830:	428b      	cmp	r3, r1
 8004832:	d321      	bcc.n	8004878 <nl_func_hard_sigmoid_array_f32+0x58>
 8004834:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004838:	eddf 0aba 	vldr	s1, [pc, #744]	; 8004b24 <.text_68>
 800483c:	edd3 1a00 	vldr	s3, [r3]
 8004840:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8004b28 <.text_69>
 8004844:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004848:	ee01 1a82 	vmla.f32	s2, s3, s4
 800484c:	eeb4 1a60 	vcmp.f32	s2, s1
 8004850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004854:	da08      	bge.n	8004868 <nl_func_hard_sigmoid_array_f32+0x48>
 8004856:	eeb5 1a40 	vcmp.f32	s2, #0.0
 800485a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800485e:	d505      	bpl.n	800486c <nl_func_hard_sigmoid_array_f32+0x4c>
 8004860:	ed9f 1a06 	vldr	s2, [pc, #24]	; 800487c <.text_62>
 8004864:	e002      	b.n	800486c <nl_func_hard_sigmoid_array_f32+0x4c>
 8004866:	bf00      	nop
 8004868:	eeb0 1a40 	vmov.f32	s2, s0
 800486c:	ed80 1a00 	vstr	s2, [r0]
 8004870:	1f1b      	subs	r3, r3, #4
 8004872:	1f00      	subs	r0, r0, #4
 8004874:	428b      	cmp	r3, r1
 8004876:	d2e1      	bcs.n	800483c <nl_func_hard_sigmoid_array_f32+0x1c>
 8004878:	4770      	bx	lr
	...

0800487c <.text_62>:
 800487c:	00000000 	.word	0x00000000

08004880 <nl_func_clip_array_f32>:
 8004880:	6889      	ldr	r1, [r1, #8]
 8004882:	6880      	ldr	r0, [r0, #8]
 8004884:	ed93 0a00 	vldr	s0, [r3]
 8004888:	edd3 0a01 	vldr	s1, [r3, #4]
 800488c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004890:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004894:	1f1b      	subs	r3, r3, #4
 8004896:	1f10      	subs	r0, r2, #4
 8004898:	428b      	cmp	r3, r1
 800489a:	d315      	bcc.n	80048c8 <nl_func_clip_array_f32+0x48>
 800489c:	ed93 1a00 	vldr	s2, [r3]
 80048a0:	eeb4 0a41 	vcmp.f32	s0, s2
 80048a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a8:	bf58      	it	pl
 80048aa:	eeb0 1a40 	vmovpl.f32	s2, s0
 80048ae:	eeb4 1a60 	vcmp.f32	s2, s1
 80048b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b6:	bf58      	it	pl
 80048b8:	eeb0 1a60 	vmovpl.f32	s2, s1
 80048bc:	ed80 1a00 	vstr	s2, [r0]
 80048c0:	1f1b      	subs	r3, r3, #4
 80048c2:	1f00      	subs	r0, r0, #4
 80048c4:	428b      	cmp	r3, r1
 80048c6:	d2e9      	bcs.n	800489c <nl_func_clip_array_f32+0x1c>
 80048c8:	4770      	bx	lr
	...

080048cc <nl_func_hardmax_array_f32>:
 80048cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d0:	6852      	ldr	r2, [r2, #4]
 80048d2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80048d6:	6855      	ldr	r5, [r2, #4]
 80048d8:	688e      	ldr	r6, [r1, #8]
 80048da:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80048de:	68d4      	ldr	r4, [r2, #12]
 80048e0:	4640      	mov	r0, r8
 80048e2:	436c      	muls	r4, r5
 80048e4:	00a1      	lsls	r1, r4, #2
 80048e6:	f012 fda0 	bl	801742a <__aeabi_memclr>
 80048ea:	2200      	movs	r2, #0
 80048ec:	2c00      	cmp	r4, #0
 80048ee:	4633      	mov	r3, r6
 80048f0:	f000 805d 	beq.w	80049ae <nl_func_hardmax_array_f32+0xe2>
 80048f4:	f102 0c01 	add.w	ip, r2, #1
 80048f8:	eb05 0e02 	add.w	lr, r5, r2
 80048fc:	45f4      	cmp	ip, lr
 80048fe:	edd3 0a00 	vldr	s1, [r3]
 8004902:	d24b      	bcs.n	800499c <nl_func_hardmax_array_f32+0xd0>
 8004904:	1e69      	subs	r1, r5, #1
 8004906:	f011 0003 	ands.w	r0, r1, #3
 800490a:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 800490e:	d00f      	beq.n	8004930 <nl_func_hardmax_array_f32+0x64>
 8004910:	ed97 1a00 	vldr	s2, [r7]
 8004914:	f107 0704 	add.w	r7, r7, #4
 8004918:	eef4 0a41 	vcmp.f32	s1, s2
 800491c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004920:	bf44      	itt	mi
 8004922:	eef0 0a41 	vmovmi.f32	s1, s2
 8004926:	4662      	movmi	r2, ip
 8004928:	1e40      	subs	r0, r0, #1
 800492a:	f10c 0c01 	add.w	ip, ip, #1
 800492e:	d1ef      	bne.n	8004910 <nl_func_hardmax_array_f32+0x44>
 8004930:	0889      	lsrs	r1, r1, #2
 8004932:	d033      	beq.n	800499c <nl_func_hardmax_array_f32+0xd0>
 8004934:	ed97 1a00 	vldr	s2, [r7]
 8004938:	eef4 0a41 	vcmp.f32	s1, s2
 800493c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004940:	bf44      	itt	mi
 8004942:	eef0 0a41 	vmovmi.f32	s1, s2
 8004946:	4662      	movmi	r2, ip
 8004948:	ed97 1a01 	vldr	s2, [r7, #4]
 800494c:	f10c 0c01 	add.w	ip, ip, #1
 8004950:	eef4 0a41 	vcmp.f32	s1, s2
 8004954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004958:	bf44      	itt	mi
 800495a:	eef0 0a41 	vmovmi.f32	s1, s2
 800495e:	4662      	movmi	r2, ip
 8004960:	ed97 1a02 	vldr	s2, [r7, #8]
 8004964:	f10c 0c01 	add.w	ip, ip, #1
 8004968:	eef4 0a41 	vcmp.f32	s1, s2
 800496c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004970:	bf44      	itt	mi
 8004972:	eef0 0a41 	vmovmi.f32	s1, s2
 8004976:	4662      	movmi	r2, ip
 8004978:	ed97 1a03 	vldr	s2, [r7, #12]
 800497c:	f10c 0c01 	add.w	ip, ip, #1
 8004980:	eef4 0a41 	vcmp.f32	s1, s2
 8004984:	f107 0710 	add.w	r7, r7, #16
 8004988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800498c:	bf44      	itt	mi
 800498e:	eef0 0a41 	vmovmi.f32	s1, s2
 8004992:	4662      	movmi	r2, ip
 8004994:	1e49      	subs	r1, r1, #1
 8004996:	f10c 0c01 	add.w	ip, ip, #1
 800499a:	d1cb      	bne.n	8004934 <nl_func_hardmax_array_f32+0x68>
 800499c:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 80049a0:	4672      	mov	r2, lr
 80049a2:	42a2      	cmp	r2, r4
 80049a4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80049a8:	ed80 0a00 	vstr	s0, [r0]
 80049ac:	d3a2      	bcc.n	80048f4 <nl_func_hardmax_array_f32+0x28>
 80049ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080049b4 <nl_func_relu_generic_array_f32>:
 80049b4:	6880      	ldr	r0, [r0, #8]
 80049b6:	6889      	ldr	r1, [r1, #8]
 80049b8:	ed93 0a00 	vldr	s0, [r3]
 80049bc:	edd3 0a01 	vldr	s1, [r3, #4]
 80049c0:	ed93 1a02 	vldr	s2, [r3, #8]
 80049c4:	1f03      	subs	r3, r0, #4
 80049c6:	eeb5 1a40 	vcmp.f32	s2, #0.0
 80049ca:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80049ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d2:	f1a1 0c04 	sub.w	ip, r1, #4
 80049d6:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 80049da:	d52b      	bpl.n	8004a34 <nl_func_relu_generic_array_f32+0x80>
 80049dc:	eef5 0a40 	vcmp.f32	s1, #0.0
 80049e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e4:	d014      	beq.n	8004a10 <nl_func_relu_generic_array_f32+0x5c>
 80049e6:	428a      	cmp	r2, r1
 80049e8:	f0c0 8011 	bcc.w	8004a0e <nl_func_relu_generic_array_f32+0x5a>
 80049ec:	ed92 1a00 	vldr	s2, [r2]
 80049f0:	eeb4 1a40 	vcmp.f32	s2, s0
 80049f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f8:	bf44      	itt	mi
 80049fa:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 80049fe:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 8004a02:	ed80 1a00 	vstr	s2, [r0]
 8004a06:	1f12      	subs	r2, r2, #4
 8004a08:	1f00      	subs	r0, r0, #4
 8004a0a:	428a      	cmp	r2, r1
 8004a0c:	d2ee      	bcs.n	80049ec <nl_func_relu_generic_array_f32+0x38>
 8004a0e:	4770      	bx	lr
 8004a10:	428a      	cmp	r2, r1
 8004a12:	d3fc      	bcc.n	8004a0e <nl_func_relu_generic_array_f32+0x5a>
 8004a14:	edd2 0a00 	vldr	s1, [r2]
 8004a18:	eef4 0a40 	vcmp.f32	s1, s0
 8004a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a20:	bf48      	it	mi
 8004a22:	eddf 0aa7 	vldrmi	s1, [pc, #668]	; 8004cc0 <.text_73>
 8004a26:	edc0 0a00 	vstr	s1, [r0]
 8004a2a:	1f12      	subs	r2, r2, #4
 8004a2c:	1f00      	subs	r0, r0, #4
 8004a2e:	428a      	cmp	r2, r1
 8004a30:	d2f0      	bcs.n	8004a14 <nl_func_relu_generic_array_f32+0x60>
 8004a32:	4770      	bx	lr
 8004a34:	428a      	cmp	r2, r1
 8004a36:	d3ea      	bcc.n	8004a0e <nl_func_relu_generic_array_f32+0x5a>
 8004a38:	edd2 1a00 	vldr	s3, [r2]
 8004a3c:	eef4 1a41 	vcmp.f32	s3, s2
 8004a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a44:	d50a      	bpl.n	8004a5c <nl_func_relu_generic_array_f32+0xa8>
 8004a46:	eef4 1a40 	vcmp.f32	s3, s0
 8004a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4e:	d507      	bpl.n	8004a60 <nl_func_relu_generic_array_f32+0xac>
 8004a50:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8004a54:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8004a58:	e002      	b.n	8004a60 <nl_func_relu_generic_array_f32+0xac>
 8004a5a:	bf00      	nop
 8004a5c:	eef0 1a41 	vmov.f32	s3, s2
 8004a60:	edc0 1a00 	vstr	s3, [r0]
 8004a64:	1f12      	subs	r2, r2, #4
 8004a66:	1f00      	subs	r0, r0, #4
 8004a68:	428a      	cmp	r2, r1
 8004a6a:	d2e5      	bcs.n	8004a38 <nl_func_relu_generic_array_f32+0x84>
 8004a6c:	4770      	bx	lr
	...

08004a70 <nl_func_relu_thresholded_array_f32>:
 8004a70:	6889      	ldr	r1, [r1, #8]
 8004a72:	ed93 0a00 	vldr	s0, [r3]
 8004a76:	6880      	ldr	r0, [r0, #8]
 8004a78:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004a7c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004a80:	1f1b      	subs	r3, r3, #4
 8004a82:	1f10      	subs	r0, r2, #4
 8004a84:	428b      	cmp	r3, r1
 8004a86:	d30e      	bcc.n	8004aa6 <nl_func_relu_thresholded_array_f32+0x36>
 8004a88:	edd3 0a00 	vldr	s1, [r3]
 8004a8c:	eef4 0a40 	vcmp.f32	s1, s0
 8004a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a94:	bf48      	it	mi
 8004a96:	eddf 0a8a 	vldrmi	s1, [pc, #552]	; 8004cc0 <.text_73>
 8004a9a:	edc0 0a00 	vstr	s1, [r0]
 8004a9e:	1f1b      	subs	r3, r3, #4
 8004aa0:	1f00      	subs	r0, r0, #4
 8004aa2:	428b      	cmp	r3, r1
 8004aa4:	d2f0      	bcs.n	8004a88 <nl_func_relu_thresholded_array_f32+0x18>
 8004aa6:	4770      	bx	lr

08004aa8 <nl_func_elu_array_f32>:
 8004aa8:	b570      	push	{r4, r5, r6, lr}
 8004aaa:	ed2d 8b04 	vpush	{d8-d9}
 8004aae:	688c      	ldr	r4, [r1, #8]
 8004ab0:	6880      	ldr	r0, [r0, #8]
 8004ab2:	ed93 8a00 	vldr	s16, [r3]
 8004ab6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004aba:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004abe:	1f0d      	subs	r5, r1, #4
 8004ac0:	1f16      	subs	r6, r2, #4
 8004ac2:	42a5      	cmp	r5, r4
 8004ac4:	f0c0 802a 	bcc.w	8004b1c <nl_func_elu_array_f32+0x74>
 8004ac8:	edd5 8a00 	vldr	s17, [r5]
 8004acc:	eef5 8a40 	vcmp.f32	s17, #0.0
 8004ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad4:	eeb0 0a68 	vmov.f32	s0, s17
 8004ad8:	bf4c      	ite	mi
 8004ada:	ed9f 9a79 	vldrmi	s18, [pc, #484]	; 8004cc0 <.text_73>
 8004ade:	eeb0 9a68 	vmovpl.f32	s18, s17
 8004ae2:	f00f fcab 	bl	801443c <expf>
 8004ae6:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004aea:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004aee:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004af2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afa:	dc09      	bgt.n	8004b10 <nl_func_elu_array_f32+0x68>
 8004afc:	eeb0 0a68 	vmov.f32	s0, s17
 8004b00:	f00f fc9c 	bl	801443c <expf>
 8004b04:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8004b08:	ee30 1a01 	vadd.f32	s2, s0, s2
 8004b0c:	ee01 9a08 	vmla.f32	s18, s2, s16
 8004b10:	ed86 9a00 	vstr	s18, [r6]
 8004b14:	1f2d      	subs	r5, r5, #4
 8004b16:	1f36      	subs	r6, r6, #4
 8004b18:	42a5      	cmp	r5, r4
 8004b1a:	d2d5      	bcs.n	8004ac8 <nl_func_elu_array_f32+0x20>
 8004b1c:	ecbd 8b04 	vpop	{d8-d9}
 8004b20:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b24 <.text_68>:
 8004b24:	3f800001 	.word	0x3f800001

08004b28 <.text_69>:
 8004b28:	3e4ccccd 	.word	0x3e4ccccd

08004b2c <nl_func_selu_array_f32>:
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	ed2d 8b04 	vpush	{d8-d9}
 8004b32:	688c      	ldr	r4, [r1, #8]
 8004b34:	6880      	ldr	r0, [r0, #8]
 8004b36:	ed93 8a00 	vldr	s16, [r3]
 8004b3a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004b3e:	edd3 8a01 	vldr	s17, [r3, #4]
 8004b42:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004b46:	1f0d      	subs	r5, r1, #4
 8004b48:	1f16      	subs	r6, r2, #4
 8004b4a:	42a5      	cmp	r5, r4
 8004b4c:	f0c0 802c 	bcc.w	8004ba8 <nl_func_selu_array_f32+0x7c>
 8004b50:	ed95 9a00 	vldr	s18, [r5]
 8004b54:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5c:	eeb0 0a49 	vmov.f32	s0, s18
 8004b60:	bf4c      	ite	mi
 8004b62:	eddf 9a57 	vldrmi	s19, [pc, #348]	; 8004cc0 <.text_73>
 8004b66:	eef0 9a49 	vmovpl.f32	s19, s18
 8004b6a:	f00f fc67 	bl	801443c <expf>
 8004b6e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004b72:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004b76:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004b7a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b82:	dc09      	bgt.n	8004b98 <nl_func_selu_array_f32+0x6c>
 8004b84:	eeb0 0a49 	vmov.f32	s0, s18
 8004b88:	f00f fc58 	bl	801443c <expf>
 8004b8c:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8004b90:	ee30 1a01 	vadd.f32	s2, s0, s2
 8004b94:	ee41 9a08 	vmla.f32	s19, s2, s16
 8004b98:	ee28 0aa9 	vmul.f32	s0, s17, s19
 8004b9c:	1f2d      	subs	r5, r5, #4
 8004b9e:	ed86 0a00 	vstr	s0, [r6]
 8004ba2:	1f36      	subs	r6, r6, #4
 8004ba4:	42a5      	cmp	r5, r4
 8004ba6:	d2d3      	bcs.n	8004b50 <nl_func_selu_array_f32+0x24>
 8004ba8:	ecbd 8b04 	vpop	{d8-d9}
 8004bac:	bd70      	pop	{r4, r5, r6, pc}
	...

08004bb0 <nl_func_prelu_array_f32>:
 8004bb0:	6889      	ldr	r1, [r1, #8]
 8004bb2:	6880      	ldr	r0, [r0, #8]
 8004bb4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004bb8:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8004bbc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004bc0:	1f1b      	subs	r3, r3, #4
 8004bc2:	f1ac 0c04 	sub.w	ip, ip, #4
 8004bc6:	1f10      	subs	r0, r2, #4
 8004bc8:	458c      	cmp	ip, r1
 8004bca:	d320      	bcc.n	8004c0e <nl_func_prelu_array_f32+0x5e>
 8004bcc:	ed9c 0a00 	vldr	s0, [ip]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004bd6:	f1ac 0c04 	sub.w	ip, ip, #4
 8004bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bde:	ed92 1a00 	vldr	s2, [r2]
 8004be2:	bf4c      	ite	mi
 8004be4:	eddf 0a36 	vldrmi	s1, [pc, #216]	; 8004cc0 <.text_73>
 8004be8:	eef0 0a40 	vmovpl.f32	s1, s0
 8004bec:	eeb1 0a40 	vneg.f32	s0, s0
 8004bf0:	1f13      	subs	r3, r2, #4
 8004bf2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfa:	bf48      	it	mi
 8004bfc:	ed9f 0a30 	vldrmi	s0, [pc, #192]	; 8004cc0 <.text_73>
 8004c00:	ee41 0a40 	vmls.f32	s1, s2, s0
 8004c04:	edc0 0a00 	vstr	s1, [r0]
 8004c08:	1f00      	subs	r0, r0, #4
 8004c0a:	458c      	cmp	ip, r1
 8004c0c:	d2de      	bcs.n	8004bcc <nl_func_prelu_array_f32+0x1c>
 8004c0e:	4770      	bx	lr

08004c10 <forward_relu>:
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	4604      	mov	r4, r0
 8004c14:	6962      	ldr	r2, [r4, #20]
 8004c16:	8811      	ldrh	r1, [r2, #0]
 8004c18:	2900      	cmp	r1, #0
 8004c1a:	bf1a      	itte	ne
 8004c1c:	6850      	ldrne	r0, [r2, #4]
 8004c1e:	1d00      	addne	r0, r0, #4
 8004c20:	2004      	moveq	r0, #4
 8004c22:	6800      	ldr	r0, [r0, #0]
 8004c24:	2800      	cmp	r0, #0
 8004c26:	bf14      	ite	ne
 8004c28:	6805      	ldrne	r5, [r0, #0]
 8004c2a:	2500      	moveq	r5, #0
 8004c2c:	2902      	cmp	r1, #2
 8004c2e:	bfa6      	itte	ge
 8004c30:	6850      	ldrge	r0, [r2, #4]
 8004c32:	3010      	addge	r0, #16
 8004c34:	2004      	movlt	r0, #4
 8004c36:	6800      	ldr	r0, [r0, #0]
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	bf19      	ittee	ne
 8004c3c:	6800      	ldrne	r0, [r0, #0]
 8004c3e:	f100 0618 	addne.w	r6, r0, #24
 8004c42:	2100      	moveq	r1, #0
 8004c44:	f101 0618 	addeq.w	r6, r1, #24
 8004c48:	69a0      	ldr	r0, [r4, #24]
 8004c4a:	b9f8      	cbnz	r0, 8004c8c <forward_relu+0x7c>
 8004c4c:	f105 0008 	add.w	r0, r5, #8
 8004c50:	f7fd ffd8 	bl	8002c04 <ai_shape_get_size>
 8004c54:	69a9      	ldr	r1, [r5, #24]
 8004c56:	6833      	ldr	r3, [r6, #0]
 8004c58:	6889      	ldr	r1, [r1, #8]
 8004c5a:	689c      	ldr	r4, [r3, #8]
 8004c5c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8004c60:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004c64:	1f12      	subs	r2, r2, #4
 8004c66:	1f00      	subs	r0, r0, #4
 8004c68:	428a      	cmp	r2, r1
 8004c6a:	d328      	bcc.n	8004cbe <forward_relu+0xae>
 8004c6c:	ed92 0a00 	vldr	s0, [r2]
 8004c70:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c78:	bf48      	it	mi
 8004c7a:	ed9f 0a11 	vldrmi	s0, [pc, #68]	; 8004cc0 <.text_73>
 8004c7e:	ed80 0a00 	vstr	s0, [r0]
 8004c82:	1f12      	subs	r2, r2, #4
 8004c84:	1f00      	subs	r0, r0, #4
 8004c86:	428a      	cmp	r2, r1
 8004c88:	d2f0      	bcs.n	8004c6c <forward_relu+0x5c>
 8004c8a:	bd70      	pop	{r4, r5, r6, pc}
 8004c8c:	6840      	ldr	r0, [r0, #4]
 8004c8e:	2801      	cmp	r0, #1
 8004c90:	f105 0008 	add.w	r0, r5, #8
 8004c94:	d109      	bne.n	8004caa <forward_relu+0x9a>
 8004c96:	f7fd ffb5 	bl	8002c04 <ai_shape_get_size>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	69a0      	ldr	r0, [r4, #24]
 8004c9e:	69a9      	ldr	r1, [r5, #24]
 8004ca0:	6883      	ldr	r3, [r0, #8]
 8004ca2:	6830      	ldr	r0, [r6, #0]
 8004ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ca8:	e6e2      	b.n	8004a70 <nl_func_relu_thresholded_array_f32>
 8004caa:	f7fd ffab 	bl	8002c04 <ai_shape_get_size>
 8004cae:	69a1      	ldr	r1, [r4, #24]
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	6830      	ldr	r0, [r6, #0]
 8004cb4:	688b      	ldr	r3, [r1, #8]
 8004cb6:	69a9      	ldr	r1, [r5, #24]
 8004cb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004cbc:	e67a      	b.n	80049b4 <nl_func_relu_generic_array_f32>
 8004cbe:	bd70      	pop	{r4, r5, r6, pc}

08004cc0 <.text_73>:
 8004cc0:	00000000 	.word	0x00000000

08004cc4 <forward_relu_thresholded>:
 8004cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	f04f 0601 	mov.w	r6, #1
 8004ccc:	6953      	ldr	r3, [r2, #20]
 8004cce:	8819      	ldrh	r1, [r3, #0]
 8004cd0:	2900      	cmp	r1, #0
 8004cd2:	bf1a      	itte	ne
 8004cd4:	6858      	ldrne	r0, [r3, #4]
 8004cd6:	1d00      	addne	r0, r0, #4
 8004cd8:	2004      	moveq	r0, #4
 8004cda:	6800      	ldr	r0, [r0, #0]
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	bf14      	ite	ne
 8004ce0:	6804      	ldrne	r4, [r0, #0]
 8004ce2:	2400      	moveq	r4, #0
 8004ce4:	2902      	cmp	r1, #2
 8004ce6:	bfa6      	itte	ge
 8004ce8:	6858      	ldrge	r0, [r3, #4]
 8004cea:	3010      	addge	r0, #16
 8004cec:	2004      	movlt	r0, #4
 8004cee:	6800      	ldr	r0, [r0, #0]
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	bf19      	ittee	ne
 8004cf4:	6800      	ldrne	r0, [r0, #0]
 8004cf6:	f100 0518 	addne.w	r5, r0, #24
 8004cfa:	2100      	moveq	r1, #0
 8004cfc:	f101 0518 	addeq.w	r5, r1, #24
 8004d00:	f104 0108 	add.w	r1, r4, #8
 8004d04:	680b      	ldr	r3, [r1, #0]
 8004d06:	0a1b      	lsrs	r3, r3, #8
 8004d08:	d022      	beq.n	8004d50 <forward_relu_thresholded+0x8c>
 8004d0a:	684f      	ldr	r7, [r1, #4]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8004d12:	f1a1 0c04 	sub.w	ip, r1, #4
 8004d16:	f010 0103 	ands.w	r1, r0, #3
 8004d1a:	d006      	beq.n	8004d2a <forward_relu_thresholded+0x66>
 8004d1c:	1e5b      	subs	r3, r3, #1
 8004d1e:	f85c e904 	ldr.w	lr, [ip], #-4
 8004d22:	1e49      	subs	r1, r1, #1
 8004d24:	fb0e f606 	mul.w	r6, lr, r6
 8004d28:	d1f8      	bne.n	8004d1c <forward_relu_thresholded+0x58>
 8004d2a:	0880      	lsrs	r0, r0, #2
 8004d2c:	d010      	beq.n	8004d50 <forward_relu_thresholded+0x8c>
 8004d2e:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8004d32:	3910      	subs	r1, #16
 8004d34:	68cb      	ldr	r3, [r1, #12]
 8004d36:	688f      	ldr	r7, [r1, #8]
 8004d38:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004d3c:	f851 e910 	ldr.w	lr, [r1], #-16
 8004d40:	437b      	muls	r3, r7
 8004d42:	fb0c f303 	mul.w	r3, ip, r3
 8004d46:	fb0e f303 	mul.w	r3, lr, r3
 8004d4a:	435e      	muls	r6, r3
 8004d4c:	1e40      	subs	r0, r0, #1
 8004d4e:	d1f1      	bne.n	8004d34 <forward_relu_thresholded+0x70>
 8004d50:	6990      	ldr	r0, [r2, #24]
 8004d52:	682a      	ldr	r2, [r5, #0]
 8004d54:	6881      	ldr	r1, [r0, #8]
 8004d56:	69a0      	ldr	r0, [r4, #24]
 8004d58:	6880      	ldr	r0, [r0, #8]
 8004d5a:	6893      	ldr	r3, [r2, #8]
 8004d5c:	ed91 0a00 	vldr	s0, [r1]
 8004d60:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 8004d64:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8004d68:	1f09      	subs	r1, r1, #4
 8004d6a:	1f22      	subs	r2, r4, #4
 8004d6c:	4281      	cmp	r1, r0
 8004d6e:	d30e      	bcc.n	8004d8e <forward_relu_thresholded+0xca>
 8004d70:	edd1 0a00 	vldr	s1, [r1]
 8004d74:	eef4 0a40 	vcmp.f32	s1, s0
 8004d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7c:	bf48      	it	mi
 8004d7e:	eddf 0ac1 	vldrmi	s1, [pc, #772]	; 8005084 <.text_80>
 8004d82:	edc2 0a00 	vstr	s1, [r2]
 8004d86:	1f09      	subs	r1, r1, #4
 8004d88:	1f12      	subs	r2, r2, #4
 8004d8a:	4281      	cmp	r1, r0
 8004d8c:	d2f0      	bcs.n	8004d70 <forward_relu_thresholded+0xac>
 8004d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d90 <forward_elu>:
 8004d90:	b570      	push	{r4, r5, r6, lr}
 8004d92:	4604      	mov	r4, r0
 8004d94:	6962      	ldr	r2, [r4, #20]
 8004d96:	8811      	ldrh	r1, [r2, #0]
 8004d98:	2900      	cmp	r1, #0
 8004d9a:	bf1a      	itte	ne
 8004d9c:	6850      	ldrne	r0, [r2, #4]
 8004d9e:	1d00      	addne	r0, r0, #4
 8004da0:	2004      	moveq	r0, #4
 8004da2:	6800      	ldr	r0, [r0, #0]
 8004da4:	2800      	cmp	r0, #0
 8004da6:	bf14      	ite	ne
 8004da8:	6805      	ldrne	r5, [r0, #0]
 8004daa:	2500      	moveq	r5, #0
 8004dac:	2902      	cmp	r1, #2
 8004dae:	bfa6      	itte	ge
 8004db0:	6850      	ldrge	r0, [r2, #4]
 8004db2:	3010      	addge	r0, #16
 8004db4:	2004      	movlt	r0, #4
 8004db6:	6800      	ldr	r0, [r0, #0]
 8004db8:	2800      	cmp	r0, #0
 8004dba:	bf19      	ittee	ne
 8004dbc:	6800      	ldrne	r0, [r0, #0]
 8004dbe:	f100 0618 	addne.w	r6, r0, #24
 8004dc2:	2100      	moveq	r1, #0
 8004dc4:	f101 0618 	addeq.w	r6, r1, #24
 8004dc8:	f105 0008 	add.w	r0, r5, #8
 8004dcc:	f7fd ff1a 	bl	8002c04 <ai_shape_get_size>
 8004dd0:	69a1      	ldr	r1, [r4, #24]
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	6830      	ldr	r0, [r6, #0]
 8004dd6:	688b      	ldr	r3, [r1, #8]
 8004dd8:	69a9      	ldr	r1, [r5, #24]
 8004dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004dde:	e663      	b.n	8004aa8 <nl_func_elu_array_f32>

08004de0 <forward_selu>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	4604      	mov	r4, r0
 8004de4:	6962      	ldr	r2, [r4, #20]
 8004de6:	8811      	ldrh	r1, [r2, #0]
 8004de8:	2900      	cmp	r1, #0
 8004dea:	bf1a      	itte	ne
 8004dec:	6850      	ldrne	r0, [r2, #4]
 8004dee:	1d00      	addne	r0, r0, #4
 8004df0:	2004      	moveq	r0, #4
 8004df2:	6800      	ldr	r0, [r0, #0]
 8004df4:	2800      	cmp	r0, #0
 8004df6:	bf14      	ite	ne
 8004df8:	6805      	ldrne	r5, [r0, #0]
 8004dfa:	2500      	moveq	r5, #0
 8004dfc:	2902      	cmp	r1, #2
 8004dfe:	bfa6      	itte	ge
 8004e00:	6850      	ldrge	r0, [r2, #4]
 8004e02:	3010      	addge	r0, #16
 8004e04:	2004      	movlt	r0, #4
 8004e06:	6800      	ldr	r0, [r0, #0]
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	bf19      	ittee	ne
 8004e0c:	6800      	ldrne	r0, [r0, #0]
 8004e0e:	f100 0618 	addne.w	r6, r0, #24
 8004e12:	2100      	moveq	r1, #0
 8004e14:	f101 0618 	addeq.w	r6, r1, #24
 8004e18:	f105 0008 	add.w	r0, r5, #8
 8004e1c:	f7fd fef2 	bl	8002c04 <ai_shape_get_size>
 8004e20:	69a1      	ldr	r1, [r4, #24]
 8004e22:	4602      	mov	r2, r0
 8004e24:	6830      	ldr	r0, [r6, #0]
 8004e26:	688b      	ldr	r3, [r1, #8]
 8004e28:	69a9      	ldr	r1, [r5, #24]
 8004e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004e2e:	e67d      	b.n	8004b2c <nl_func_selu_array_f32>

08004e30 <forward_prelu>:
 8004e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e34:	b083      	sub	sp, #12
 8004e36:	6942      	ldr	r2, [r0, #20]
 8004e38:	8810      	ldrh	r0, [r2, #0]
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	bf1a      	itte	ne
 8004e3e:	6851      	ldrne	r1, [r2, #4]
 8004e40:	1d09      	addne	r1, r1, #4
 8004e42:	2104      	moveq	r1, #4
 8004e44:	6809      	ldr	r1, [r1, #0]
 8004e46:	2900      	cmp	r1, #0
 8004e48:	bf19      	ittee	ne
 8004e4a:	6809      	ldrne	r1, [r1, #0]
 8004e4c:	f101 0518 	addne.w	r5, r1, #24
 8004e50:	2300      	moveq	r3, #0
 8004e52:	f103 0518 	addeq.w	r5, r3, #24
 8004e56:	2801      	cmp	r0, #1
 8004e58:	bfc6      	itte	gt
 8004e5a:	6851      	ldrgt	r1, [r2, #4]
 8004e5c:	3110      	addgt	r1, #16
 8004e5e:	2104      	movle	r1, #4
 8004e60:	6809      	ldr	r1, [r1, #0]
 8004e62:	2900      	cmp	r1, #0
 8004e64:	bf19      	ittee	ne
 8004e66:	6809      	ldrne	r1, [r1, #0]
 8004e68:	f101 0618 	addne.w	r6, r1, #24
 8004e6c:	2300      	moveq	r3, #0
 8004e6e:	f103 0618 	addeq.w	r6, r3, #24
 8004e72:	2802      	cmp	r0, #2
 8004e74:	bfc6      	itte	gt
 8004e76:	6850      	ldrgt	r0, [r2, #4]
 8004e78:	301c      	addgt	r0, #28
 8004e7a:	2004      	movle	r0, #4
 8004e7c:	6800      	ldr	r0, [r0, #0]
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	bf14      	ite	ne
 8004e82:	6804      	ldrne	r4, [r0, #0]
 8004e84:	2400      	moveq	r4, #0
 8004e86:	69a0      	ldr	r0, [r4, #24]
 8004e88:	6887      	ldr	r7, [r0, #8]
 8004e8a:	b12c      	cbz	r4, 8004e98 <forward_prelu+0x68>
 8004e8c:	6841      	ldr	r1, [r0, #4]
 8004e8e:	6800      	ldr	r0, [r0, #0]
 8004e90:	f001 fbde 	bl	8006650 <ai_array_get_byte_size>
 8004e94:	4680      	mov	r8, r0
 8004e96:	e001      	b.n	8004e9c <forward_prelu+0x6c>
 8004e98:	f04f 0801 	mov.w	r8, #1
 8004e9c:	6828      	ldr	r0, [r5, #0]
 8004e9e:	3408      	adds	r4, #8
 8004ea0:	6841      	ldr	r1, [r0, #4]
 8004ea2:	6800      	ldr	r0, [r0, #0]
 8004ea4:	f001 fbd4 	bl	8006650 <ai_array_get_byte_size>
 8004ea8:	4601      	mov	r1, r0
 8004eaa:	6828      	ldr	r0, [r5, #0]
 8004eac:	6833      	ldr	r3, [r6, #0]
 8004eae:	6880      	ldr	r0, [r0, #8]
 8004eb0:	4401      	add	r1, r0
 8004eb2:	4288      	cmp	r0, r1
 8004eb4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8004eb8:	9400      	str	r4, [sp, #0]
 8004eba:	d240      	bcs.n	8004f3e <forward_prelu+0x10e>
 8004ebc:	9702      	str	r7, [sp, #8]
 8004ebe:	4607      	mov	r7, r0
 8004ec0:	9101      	str	r1, [sp, #4]
 8004ec2:	6829      	ldr	r1, [r5, #0]
 8004ec4:	f04f 0201 	mov.w	r2, #1
 8004ec8:	608f      	str	r7, [r1, #8]
 8004eca:	6834      	ldr	r4, [r6, #0]
 8004ecc:	f8c4 9008 	str.w	r9, [r4, #8]
 8004ed0:	9b00      	ldr	r3, [sp, #0]
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	0a00      	lsrs	r0, r0, #8
 8004ed6:	d029      	beq.n	8004f2c <forward_prelu+0xfc>
 8004ed8:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8004edc:	4684      	mov	ip, r0
 8004ede:	eb0e 0380 	add.w	r3, lr, r0, lsl #2
 8004ee2:	f1a3 0a04 	sub.w	sl, r3, #4
 8004ee6:	f01c 0303 	ands.w	r3, ip, #3
 8004eea:	d006      	beq.n	8004efa <forward_prelu+0xca>
 8004eec:	1e40      	subs	r0, r0, #1
 8004eee:	f85a b904 	ldr.w	fp, [sl], #-4
 8004ef2:	1e5b      	subs	r3, r3, #1
 8004ef4:	fb0b f202 	mul.w	r2, fp, r2
 8004ef8:	d1f8      	bne.n	8004eec <forward_prelu+0xbc>
 8004efa:	ea5f 0c9c 	movs.w	ip, ip, lsr #2
 8004efe:	4663      	mov	r3, ip
 8004f00:	d014      	beq.n	8004f2c <forward_prelu+0xfc>
 8004f02:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 8004f06:	3810      	subs	r0, #16
 8004f08:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8004f0c:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8004f10:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8004f14:	f850 b910 	ldr.w	fp, [r0], #-16
 8004f18:	1e5b      	subs	r3, r3, #1
 8004f1a:	fb0e fc0c 	mul.w	ip, lr, ip
 8004f1e:	fb0a fc0c 	mul.w	ip, sl, ip
 8004f22:	fb0b fc0c 	mul.w	ip, fp, ip
 8004f26:	fb0c f202 	mul.w	r2, ip, r2
 8004f2a:	d1ed      	bne.n	8004f08 <forward_prelu+0xd8>
 8004f2c:	9b02      	ldr	r3, [sp, #8]
 8004f2e:	4620      	mov	r0, r4
 8004f30:	4447      	add	r7, r8
 8004f32:	44c1      	add	r9, r8
 8004f34:	f7ff fe3c 	bl	8004bb0 <nl_func_prelu_array_f32>
 8004f38:	9801      	ldr	r0, [sp, #4]
 8004f3a:	4287      	cmp	r7, r0
 8004f3c:	d3c1      	bcc.n	8004ec2 <forward_prelu+0x92>
 8004f3e:	6828      	ldr	r0, [r5, #0]
 8004f40:	68c1      	ldr	r1, [r0, #12]
 8004f42:	6081      	str	r1, [r0, #8]
 8004f44:	6830      	ldr	r0, [r6, #0]
 8004f46:	68c2      	ldr	r2, [r0, #12]
 8004f48:	6082      	str	r2, [r0, #8]
 8004f4a:	b003      	add	sp, #12
 8004f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004f50 <forward_clip>:
 8004f50:	b570      	push	{r4, r5, r6, lr}
 8004f52:	4604      	mov	r4, r0
 8004f54:	6962      	ldr	r2, [r4, #20]
 8004f56:	8811      	ldrh	r1, [r2, #0]
 8004f58:	2900      	cmp	r1, #0
 8004f5a:	bf1a      	itte	ne
 8004f5c:	6850      	ldrne	r0, [r2, #4]
 8004f5e:	1d00      	addne	r0, r0, #4
 8004f60:	2004      	moveq	r0, #4
 8004f62:	6800      	ldr	r0, [r0, #0]
 8004f64:	2800      	cmp	r0, #0
 8004f66:	bf14      	ite	ne
 8004f68:	6805      	ldrne	r5, [r0, #0]
 8004f6a:	2500      	moveq	r5, #0
 8004f6c:	2902      	cmp	r1, #2
 8004f6e:	bfa6      	itte	ge
 8004f70:	6850      	ldrge	r0, [r2, #4]
 8004f72:	3010      	addge	r0, #16
 8004f74:	2004      	movlt	r0, #4
 8004f76:	6800      	ldr	r0, [r0, #0]
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	bf19      	ittee	ne
 8004f7c:	6800      	ldrne	r0, [r0, #0]
 8004f7e:	f100 0618 	addne.w	r6, r0, #24
 8004f82:	2100      	moveq	r1, #0
 8004f84:	f101 0618 	addeq.w	r6, r1, #24
 8004f88:	f105 0008 	add.w	r0, r5, #8
 8004f8c:	f7fd fe3a 	bl	8002c04 <ai_shape_get_size>
 8004f90:	69a1      	ldr	r1, [r4, #24]
 8004f92:	4602      	mov	r2, r0
 8004f94:	6830      	ldr	r0, [r6, #0]
 8004f96:	688b      	ldr	r3, [r1, #8]
 8004f98:	69a9      	ldr	r1, [r5, #24]
 8004f9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f9e:	e46f      	b.n	8004880 <nl_func_clip_array_f32>

08004fa0 <forward_hard_sigmoid>:
 8004fa0:	b4f0      	push	{r4, r5, r6, r7}
 8004fa2:	6942      	ldr	r2, [r0, #20]
 8004fa4:	f04f 0501 	mov.w	r5, #1
 8004fa8:	8811      	ldrh	r1, [r2, #0]
 8004faa:	2900      	cmp	r1, #0
 8004fac:	bf1a      	itte	ne
 8004fae:	6850      	ldrne	r0, [r2, #4]
 8004fb0:	1d00      	addne	r0, r0, #4
 8004fb2:	2004      	moveq	r0, #4
 8004fb4:	6800      	ldr	r0, [r0, #0]
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	bf14      	ite	ne
 8004fba:	6803      	ldrne	r3, [r0, #0]
 8004fbc:	2300      	moveq	r3, #0
 8004fbe:	2902      	cmp	r1, #2
 8004fc0:	bfa6      	itte	ge
 8004fc2:	6850      	ldrge	r0, [r2, #4]
 8004fc4:	3010      	addge	r0, #16
 8004fc6:	2004      	movlt	r0, #4
 8004fc8:	6800      	ldr	r0, [r0, #0]
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	bf19      	ittee	ne
 8004fce:	6800      	ldrne	r0, [r0, #0]
 8004fd0:	f100 0418 	addne.w	r4, r0, #24
 8004fd4:	2100      	moveq	r1, #0
 8004fd6:	f101 0418 	addeq.w	r4, r1, #24
 8004fda:	f103 0108 	add.w	r1, r3, #8
 8004fde:	680a      	ldr	r2, [r1, #0]
 8004fe0:	0a12      	lsrs	r2, r2, #8
 8004fe2:	d01f      	beq.n	8005024 <forward_hard_sigmoid+0x84>
 8004fe4:	684e      	ldr	r6, [r1, #4]
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004fec:	1f0f      	subs	r7, r1, #4
 8004fee:	f010 0103 	ands.w	r1, r0, #3
 8004ff2:	d006      	beq.n	8005002 <forward_hard_sigmoid+0x62>
 8004ff4:	1e52      	subs	r2, r2, #1
 8004ff6:	f857 c904 	ldr.w	ip, [r7], #-4
 8004ffa:	1e49      	subs	r1, r1, #1
 8004ffc:	fb0c f505 	mul.w	r5, ip, r5
 8005000:	d1f8      	bne.n	8004ff4 <forward_hard_sigmoid+0x54>
 8005002:	0880      	lsrs	r0, r0, #2
 8005004:	d00e      	beq.n	8005024 <forward_hard_sigmoid+0x84>
 8005006:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800500a:	3910      	subs	r1, #16
 800500c:	68ca      	ldr	r2, [r1, #12]
 800500e:	688e      	ldr	r6, [r1, #8]
 8005010:	684f      	ldr	r7, [r1, #4]
 8005012:	f851 c910 	ldr.w	ip, [r1], #-16
 8005016:	4372      	muls	r2, r6
 8005018:	437a      	muls	r2, r7
 800501a:	fb0c f202 	mul.w	r2, ip, r2
 800501e:	4355      	muls	r5, r2
 8005020:	1e40      	subs	r0, r0, #1
 8005022:	d1f3      	bne.n	800500c <forward_hard_sigmoid+0x6c>
 8005024:	6998      	ldr	r0, [r3, #24]
 8005026:	6822      	ldr	r2, [r4, #0]
 8005028:	6880      	ldr	r0, [r0, #8]
 800502a:	6893      	ldr	r3, [r2, #8]
 800502c:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8005030:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8005034:	1f09      	subs	r1, r1, #4
 8005036:	1f22      	subs	r2, r4, #4
 8005038:	4281      	cmp	r1, r0
 800503a:	d321      	bcc.n	8005080 <forward_hard_sigmoid+0xe0>
 800503c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005040:	eddf 0a11 	vldr	s1, [pc, #68]	; 8005088 <.text_81>
 8005044:	edd1 1a00 	vldr	s3, [r1]
 8005048:	ed9f 2a10 	vldr	s4, [pc, #64]	; 800508c <.text_82>
 800504c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8005050:	ee01 1a82 	vmla.f32	s2, s3, s4
 8005054:	eeb4 1a60 	vcmp.f32	s2, s1
 8005058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800505c:	da08      	bge.n	8005070 <forward_hard_sigmoid+0xd0>
 800505e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8005062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005066:	d505      	bpl.n	8005074 <forward_hard_sigmoid+0xd4>
 8005068:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8005084 <.text_80>
 800506c:	e002      	b.n	8005074 <forward_hard_sigmoid+0xd4>
 800506e:	bf00      	nop
 8005070:	eeb0 1a40 	vmov.f32	s2, s0
 8005074:	ed82 1a00 	vstr	s2, [r2]
 8005078:	1f09      	subs	r1, r1, #4
 800507a:	1f12      	subs	r2, r2, #4
 800507c:	4281      	cmp	r1, r0
 800507e:	d2e1      	bcs.n	8005044 <forward_hard_sigmoid+0xa4>
 8005080:	bcf0      	pop	{r4, r5, r6, r7}
 8005082:	4770      	bx	lr

08005084 <.text_80>:
 8005084:	00000000 	.word	0x00000000

08005088 <.text_81>:
 8005088:	3f800001 	.word	0x3f800001

0800508c <.text_82>:
 800508c:	3e4ccccd 	.word	0x3e4ccccd

08005090 <forward_sm>:
 8005090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005092:	b083      	sub	sp, #12
 8005094:	6942      	ldr	r2, [r0, #20]
 8005096:	8811      	ldrh	r1, [r2, #0]
 8005098:	2900      	cmp	r1, #0
 800509a:	bf1a      	itte	ne
 800509c:	6850      	ldrne	r0, [r2, #4]
 800509e:	1d00      	addne	r0, r0, #4
 80050a0:	2004      	moveq	r0, #4
 80050a2:	6800      	ldr	r0, [r0, #0]
 80050a4:	2800      	cmp	r0, #0
 80050a6:	bf14      	ite	ne
 80050a8:	6804      	ldrne	r4, [r0, #0]
 80050aa:	2400      	moveq	r4, #0
 80050ac:	2902      	cmp	r1, #2
 80050ae:	bfa6      	itte	ge
 80050b0:	6850      	ldrge	r0, [r2, #4]
 80050b2:	3010      	addge	r0, #16
 80050b4:	2004      	movlt	r0, #4
 80050b6:	6800      	ldr	r0, [r0, #0]
 80050b8:	2800      	cmp	r0, #0
 80050ba:	bf14      	ite	ne
 80050bc:	6805      	ldrne	r5, [r0, #0]
 80050be:	2500      	moveq	r5, #0
 80050c0:	68e0      	ldr	r0, [r4, #12]
 80050c2:	68e9      	ldr	r1, [r5, #12]
 80050c4:	6846      	ldr	r6, [r0, #4]
 80050c6:	f104 0008 	add.w	r0, r4, #8
 80050ca:	684f      	ldr	r7, [r1, #4]
 80050cc:	f7fd fd9a 	bl	8002c04 <ai_shape_get_size>
 80050d0:	4602      	mov	r2, r0
 80050d2:	9701      	str	r7, [sp, #4]
 80050d4:	9600      	str	r6, [sp, #0]
 80050d6:	69a1      	ldr	r1, [r4, #24]
 80050d8:	69a8      	ldr	r0, [r5, #24]
 80050da:	4633      	mov	r3, r6
 80050dc:	f7ff fb70 	bl	80047c0 <nl_func_sm_array_f32>
 80050e0:	b003      	add	sp, #12
 80050e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050e4 <forward_hardmax>:
 80050e4:	b430      	push	{r4, r5}
 80050e6:	6943      	ldr	r3, [r0, #20]
 80050e8:	6980      	ldr	r0, [r0, #24]
 80050ea:	881a      	ldrh	r2, [r3, #0]
 80050ec:	2a00      	cmp	r2, #0
 80050ee:	bf1a      	itte	ne
 80050f0:	6859      	ldrne	r1, [r3, #4]
 80050f2:	1d09      	addne	r1, r1, #4
 80050f4:	2104      	moveq	r1, #4
 80050f6:	6809      	ldr	r1, [r1, #0]
 80050f8:	2900      	cmp	r1, #0
 80050fa:	bf14      	ite	ne
 80050fc:	680c      	ldrne	r4, [r1, #0]
 80050fe:	2400      	moveq	r4, #0
 8005100:	2a02      	cmp	r2, #2
 8005102:	bfa6      	itte	ge
 8005104:	6859      	ldrge	r1, [r3, #4]
 8005106:	3110      	addge	r1, #16
 8005108:	2104      	movlt	r1, #4
 800510a:	6809      	ldr	r1, [r1, #0]
 800510c:	6883      	ldr	r3, [r0, #8]
 800510e:	2900      	cmp	r1, #0
 8005110:	bf19      	ittee	ne
 8005112:	6809      	ldrne	r1, [r1, #0]
 8005114:	f101 0518 	addne.w	r5, r1, #24
 8005118:	2200      	moveq	r2, #0
 800511a:	f102 0518 	addeq.w	r5, r2, #24
 800511e:	f104 0208 	add.w	r2, r4, #8
 8005122:	69a1      	ldr	r1, [r4, #24]
 8005124:	6828      	ldr	r0, [r5, #0]
 8005126:	bc30      	pop	{r4, r5}
 8005128:	f7ff bbd0 	b.w	80048cc <nl_func_hardmax_array_f32>

0800512c <pool_func_mp_array_f32>:
 800512c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005130:	b08c      	sub	sp, #48	; 0x30
 8005132:	4688      	mov	r8, r1
 8005134:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8005136:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 800513a:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800513c:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8005140:	f8bd 005c 	ldrh.w	r0, [sp, #92]	; 0x5c
 8005144:	991d      	ldr	r1, [sp, #116]	; 0x74
 8005146:	1e66      	subs	r6, r4, #1
 8005148:	4615      	mov	r5, r2
 800514a:	f8cd e014 	str.w	lr, [sp, #20]
 800514e:	f9bd e068 	ldrsh.w	lr, [sp, #104]	; 0x68
 8005152:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005154:	6889      	ldr	r1, [r1, #8]
 8005156:	fb16 fe0e 	smulbb	lr, r6, lr
 800515a:	ebae 0e0c 	sub.w	lr, lr, ip
 800515e:	44be      	add	lr, r7
 8005160:	f1ae 0601 	sub.w	r6, lr, #1
 8005164:	1b76      	subs	r6, r6, r5
 8005166:	ea50 000c 	orrs.w	r0, r0, ip
 800516a:	f040 80ea 	bne.w	8005342 <pool_func_mp_array_f32+0x216>
 800516e:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 8005172:	f9bd e05c 	ldrsh.w	lr, [sp, #92]	; 0x5c
 8005176:	f9bd 0054 	ldrsh.w	r0, [sp, #84]	; 0x54
 800517a:	f1a9 0a01 	sub.w	sl, r9, #1
 800517e:	fb1a fa02 	smulbb	sl, sl, r2
 8005182:	ebaa 0a0e 	sub.w	sl, sl, lr
 8005186:	4482      	add	sl, r0
 8005188:	f1aa 0901 	sub.w	r9, sl, #1
 800518c:	eba9 0908 	sub.w	r9, r9, r8
 8005190:	fa0f f989 	sxth.w	r9, r9
 8005194:	f1b9 0f00 	cmp.w	r9, #0
 8005198:	bf44      	itt	mi
 800519a:	b236      	sxthmi	r6, r6
 800519c:	2e00      	cmpmi	r6, #0
 800519e:	f140 80d0 	bpl.w	8005342 <pool_func_mp_array_f32+0x216>
 80051a2:	2500      	movs	r5, #0
 80051a4:	0020      	movs	r0, r4
 80051a6:	9509      	str	r5, [sp, #36]	; 0x24
 80051a8:	f000 8188 	beq.w	80054bc <pool_func_mp_array_f32+0x390>
 80051ac:	b23f      	sxth	r7, r7
 80051ae:	ed9f 0ac5 	vldr	s0, [pc, #788]	; 80054c4 <.text_3>
 80051b2:	f8ad 7006 	strh.w	r7, [sp, #6]
 80051b6:	9502      	str	r5, [sp, #8]
 80051b8:	9508      	str	r5, [sp, #32]
 80051ba:	9407      	str	r4, [sp, #28]
 80051bc:	ea4f 0403 	mov.w	r4, r3
 80051c0:	f8bd 006c 	ldrh.w	r0, [sp, #108]	; 0x6c
 80051c4:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80051c8:	2800      	cmp	r0, #0
 80051ca:	f000 809c 	beq.w	8005306 <pool_func_mp_array_f32+0x1da>
 80051ce:	f8bd 6068 	ldrh.w	r6, [sp, #104]	; 0x68
 80051d2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80051d6:	f9bd 0054 	ldrsh.w	r0, [sp, #84]	; 0x54
 80051da:	f8bd c06c 	ldrh.w	ip, [sp, #108]	; 0x6c
 80051de:	9d08      	ldr	r5, [sp, #32]
 80051e0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80051e4:	f04f 0a00 	mov.w	sl, #0
 80051e8:	9503      	str	r5, [sp, #12]
 80051ea:	fb06 f909 	mul.w	r9, r6, r9
 80051ee:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 80051f2:	9104      	str	r1, [sp, #16]
 80051f4:	f8ad 0000 	strh.w	r0, [sp]
 80051f8:	fa0f f989 	sxth.w	r9, r9
 80051fc:	f8cd c018 	str.w	ip, [sp, #24]
 8005200:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8005204:	f8ad 8004 	strh.w	r8, [sp, #4]
 8005208:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800520c:	2100      	movs	r1, #0
 800520e:	f9bd e000 	ldrsh.w	lr, [sp]
 8005212:	2800      	cmp	r0, #0
 8005214:	d05f      	beq.n	80052d6 <pool_func_mp_array_f32+0x1aa>
 8005216:	9b03      	ldr	r3, [sp, #12]
 8005218:	f10d 0808 	add.w	r8, sp, #8
 800521c:	f9b8 6000 	ldrsh.w	r6, [r8]
 8005220:	9a04      	ldr	r2, [sp, #16]
 8005222:	4363      	muls	r3, r4
 8005224:	fa0f f58a 	sxth.w	r5, sl
 8005228:	960a      	str	r6, [sp, #40]	; 0x28
 800522a:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 800522e:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8005232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005234:	eef0 0a40 	vmov.f32	s1, s0
 8005238:	42ba      	cmp	r2, r7
 800523a:	da45      	bge.n	80052c8 <pool_func_mp_array_f32+0x19c>
 800523c:	fb08 f902 	mul.w	r9, r8, r2
 8005240:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005242:	9805      	ldr	r0, [sp, #20]
 8005244:	1aba      	subs	r2, r7, r2
 8005246:	4575      	cmp	r5, lr
 8005248:	462e      	mov	r6, r5
 800524a:	da39      	bge.n	80052c0 <pool_func_mp_array_f32+0x194>
 800524c:	ebae 0305 	sub.w	r3, lr, r5
 8005250:	ea5f 7bc3 	movs.w	fp, r3, lsl #31
 8005254:	d50f      	bpl.n	8005276 <pool_func_mp_array_f32+0x14a>
 8005256:	eb09 0b06 	add.w	fp, r9, r6
 800525a:	fb0b 1b04 	mla	fp, fp, r4, r1
 800525e:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8005262:	ed9b 1a00 	vldr	s2, [fp]
 8005266:	eeb4 1a60 	vcmp.f32	s2, s1
 800526a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526e:	bf58      	it	pl
 8005270:	eef0 0a41 	vmovpl.f32	s1, s2
 8005274:	1c76      	adds	r6, r6, #1
 8005276:	085b      	lsrs	r3, r3, #1
 8005278:	f000 8022 	beq.w	80052c0 <pool_func_mp_array_f32+0x194>
 800527c:	eb09 0b06 	add.w	fp, r9, r6
 8005280:	fb0b 1b04 	mla	fp, fp, r4, r1
 8005284:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8005288:	ed9b 1a00 	vldr	s2, [fp]
 800528c:	eeb4 1a60 	vcmp.f32	s2, s1
 8005290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005294:	bf58      	it	pl
 8005296:	eef0 0a41 	vmovpl.f32	s1, s2
 800529a:	1c76      	adds	r6, r6, #1
 800529c:	eb09 0b06 	add.w	fp, r9, r6
 80052a0:	fb0b 1b04 	mla	fp, fp, r4, r1
 80052a4:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 80052a8:	ed9b 1a00 	vldr	s2, [fp]
 80052ac:	eeb4 1a60 	vcmp.f32	s2, s1
 80052b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b4:	bf58      	it	pl
 80052b6:	eef0 0a41 	vmovpl.f32	s1, s2
 80052ba:	1c76      	adds	r6, r6, #1
 80052bc:	1e5b      	subs	r3, r3, #1
 80052be:	d1dd      	bne.n	800527c <pool_func_mp_array_f32+0x150>
 80052c0:	1e52      	subs	r2, r2, #1
 80052c2:	44c1      	add	r9, r8
 80052c4:	d1bf      	bne.n	8005246 <pool_func_mp_array_f32+0x11a>
 80052c6:	9005      	str	r0, [sp, #20]
 80052c8:	1c49      	adds	r1, r1, #1
 80052ca:	edcc 0a00 	vstr	s1, [ip]
 80052ce:	42a1      	cmp	r1, r4
 80052d0:	f10c 0c04 	add.w	ip, ip, #4
 80052d4:	dbad      	blt.n	8005232 <pool_func_mp_array_f32+0x106>
 80052d6:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80052da:	f8bd 2000 	ldrh.w	r2, [sp]
 80052de:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 80052e2:	9803      	ldr	r0, [sp, #12]
 80052e4:	448a      	add	sl, r1
 80052e6:	9906      	ldr	r1, [sp, #24]
 80052e8:	1c40      	adds	r0, r0, #1
 80052ea:	9003      	str	r0, [sp, #12]
 80052ec:	189a      	adds	r2, r3, r2
 80052ee:	1e49      	subs	r1, r1, #1
 80052f0:	f8ad 2000 	strh.w	r2, [sp]
 80052f4:	9106      	str	r1, [sp, #24]
 80052f6:	d187      	bne.n	8005208 <pool_func_mp_array_f32+0xdc>
 80052f8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80052fc:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 8005300:	9904      	ldr	r1, [sp, #16]
 8005302:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8005306:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 800530a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800530c:	9d08      	ldr	r5, [sp, #32]
 800530e:	f8bd 6068 	ldrh.w	r6, [sp, #104]	; 0x68
 8005312:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005316:	1c40      	adds	r0, r0, #1
 8005318:	19ef      	adds	r7, r5, r7
 800531a:	9009      	str	r0, [sp, #36]	; 0x24
 800531c:	9708      	str	r7, [sp, #32]
 800531e:	4476      	add	r6, lr
 8005320:	9602      	str	r6, [sp, #8]
 8005322:	f8bd 7006 	ldrh.w	r7, [sp, #6]
 8005326:	f9bd 5068 	ldrsh.w	r5, [sp, #104]	; 0x68
 800532a:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800532e:	19ef      	adds	r7, r5, r7
 8005330:	f8ad 7006 	strh.w	r7, [sp, #6]
 8005334:	f1be 0e01 	subs.w	lr, lr, #1
 8005338:	f8cd e01c 	str.w	lr, [sp, #28]
 800533c:	f000 80be 	beq.w	80054bc <pool_func_mp_array_f32+0x390>
 8005340:	e73e      	b.n	80051c0 <pool_func_mp_array_f32+0x94>
 8005342:	0020      	movs	r0, r4
 8005344:	f000 80ba 	beq.w	80054bc <pool_func_mp_array_f32+0x390>
 8005348:	f1cc 0c00 	rsb	ip, ip, #0
 800534c:	4467      	add	r7, ip
 800534e:	f8ad c000 	strh.w	ip, [sp]
 8005352:	2600      	movs	r6, #0
 8005354:	f8ad 700a 	strh.w	r7, [sp, #10]
 8005358:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 80054c4 <.text_3>
 800535c:	9609      	str	r6, [sp, #36]	; 0x24
 800535e:	9408      	str	r4, [sp, #32]
 8005360:	f8bd 006c 	ldrh.w	r0, [sp, #108]	; 0x6c
 8005364:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8005368:	2800      	cmp	r0, #0
 800536a:	f000 808e 	beq.w	800548a <pool_func_mp_array_f32+0x35e>
 800536e:	f9bd 605c 	ldrsh.w	r6, [sp, #92]	; 0x5c
 8005372:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
 8005376:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 800537a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800537e:	f8cd e00c 	str.w	lr, [sp, #12]
 8005382:	f8bd e06c 	ldrh.w	lr, [sp, #108]	; 0x6c
 8005386:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 800538a:	4276      	negs	r6, r6
 800538c:	19bf      	adds	r7, r7, r6
 800538e:	9104      	str	r1, [sp, #16]
 8005390:	f8ad 6006 	strh.w	r6, [sp, #6]
 8005394:	f8ad 7008 	strh.w	r7, [sp, #8]
 8005398:	f8cd e01c 	str.w	lr, [sp, #28]
 800539c:	f8ad 8004 	strh.w	r8, [sp, #4]
 80053a0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80053a4:	2600      	movs	r6, #0
 80053a6:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 80053aa:	2900      	cmp	r1, #0
 80053ac:	d051      	beq.n	8005452 <pool_func_mp_array_f32+0x326>
 80053ae:	9b03      	ldr	r3, [sp, #12]
 80053b0:	9a04      	ldr	r2, [sp, #16]
 80053b2:	f9bd 4006 	ldrsh.w	r4, [sp, #6]
 80053b6:	4359      	muls	r1, r3
 80053b8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80053bc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80053c0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80053c4:	f8cd 1018 	str.w	r1, [sp, #24]
 80053c8:	f9bd 1000 	ldrsh.w	r1, [sp]
 80053cc:	eef0 0a40 	vmov.f32	s1, s0
 80053d0:	4551      	cmp	r1, sl
 80053d2:	da2c      	bge.n	800542e <pool_func_mp_array_f32+0x302>
 80053d4:	fb03 f901 	mul.w	r9, r3, r1
 80053d8:	f8ad 5002 	strh.w	r5, [sp, #2]
 80053dc:	4284      	cmp	r4, r0
 80053de:	4625      	mov	r5, r4
 80053e0:	da1f      	bge.n	8005422 <pool_func_mp_array_f32+0x2f6>
 80053e2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80053e6:	f8dd e014 	ldr.w	lr, [sp, #20]
 80053ea:	2900      	cmp	r1, #0
 80053ec:	bf58      	it	pl
 80053ee:	2d00      	cmppl	r5, #0
 80053f0:	d412      	bmi.n	8005418 <pool_func_mp_array_f32+0x2ec>
 80053f2:	42b9      	cmp	r1, r7
 80053f4:	bfb8      	it	lt
 80053f6:	429d      	cmplt	r5, r3
 80053f8:	da0e      	bge.n	8005418 <pool_func_mp_array_f32+0x2ec>
 80053fa:	eb09 0b05 	add.w	fp, r9, r5
 80053fe:	fb0b 6b02 	mla	fp, fp, r2, r6
 8005402:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 8005406:	ed9b 1a00 	vldr	s2, [fp]
 800540a:	eeb4 1a60 	vcmp.f32	s2, s1
 800540e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005412:	bf58      	it	pl
 8005414:	eef0 0a41 	vmovpl.f32	s1, s2
 8005418:	1c6d      	adds	r5, r5, #1
 800541a:	4285      	cmp	r5, r0
 800541c:	dbe5      	blt.n	80053ea <pool_func_mp_array_f32+0x2be>
 800541e:	f8cd e014 	str.w	lr, [sp, #20]
 8005422:	1c49      	adds	r1, r1, #1
 8005424:	4551      	cmp	r1, sl
 8005426:	4499      	add	r9, r3
 8005428:	dbd8      	blt.n	80053dc <pool_func_mp_array_f32+0x2b0>
 800542a:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 800542e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005432:	1c76      	adds	r6, r6, #1
 8005434:	4296      	cmp	r6, r2
 8005436:	edc8 0a00 	vstr	s1, [r8]
 800543a:	9f06      	ldr	r7, [sp, #24]
 800543c:	f107 0e04 	add.w	lr, r7, #4
 8005440:	f8cd e018 	str.w	lr, [sp, #24]
 8005444:	dbc0      	blt.n	80053c8 <pool_func_mp_array_f32+0x29c>
 8005446:	f8ad 2002 	strh.w	r2, [sp, #2]
 800544a:	f8ad 4006 	strh.w	r4, [sp, #6]
 800544e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005452:	9903      	ldr	r1, [sp, #12]
 8005454:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8005458:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800545c:	1c49      	adds	r1, r1, #1
 800545e:	9103      	str	r1, [sp, #12]
 8005460:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8005464:	188a      	adds	r2, r1, r2
 8005466:	9907      	ldr	r1, [sp, #28]
 8005468:	f8ad 2008 	strh.w	r2, [sp, #8]
 800546c:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8005470:	18d3      	adds	r3, r2, r3
 8005472:	1e49      	subs	r1, r1, #1
 8005474:	f8ad 3006 	strh.w	r3, [sp, #6]
 8005478:	9107      	str	r1, [sp, #28]
 800547a:	d191      	bne.n	80053a0 <pool_func_mp_array_f32+0x274>
 800547c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005480:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 8005484:	9904      	ldr	r1, [sp, #16]
 8005486:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 800548a:	f8bd c06c 	ldrh.w	ip, [sp, #108]	; 0x6c
 800548e:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8005492:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	; 0x68
 8005496:	f8bd 6000 	ldrh.w	r6, [sp]
 800549a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800549c:	44a4      	add	ip, r4
 800549e:	f9bd 4068 	ldrsh.w	r4, [sp, #104]	; 0x68
 80054a2:	44be      	add	lr, r7
 80054a4:	9f08      	ldr	r7, [sp, #32]
 80054a6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80054aa:	f8ad e00a 	strh.w	lr, [sp, #10]
 80054ae:	19a6      	adds	r6, r4, r6
 80054b0:	1e7f      	subs	r7, r7, #1
 80054b2:	f8ad 6000 	strh.w	r6, [sp]
 80054b6:	9708      	str	r7, [sp, #32]
 80054b8:	f47f af52 	bne.w	8005360 <pool_func_mp_array_f32+0x234>
 80054bc:	b00c      	add	sp, #48	; 0x30
 80054be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080054c4 <.text_3>:
 80054c4:	cf000000 	.word	0xcf000000

080054c8 <pool_func_ap_array_f32>:
 80054c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054cc:	468b      	mov	fp, r1
 80054ce:	4699      	mov	r9, r3
 80054d0:	b08c      	sub	sp, #48	; 0x30
 80054d2:	4614      	mov	r4, r2
 80054d4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80054d6:	f9bd c068 	ldrsh.w	ip, [sp, #104]	; 0x68
 80054da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80054dc:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 80054e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80054e2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80054e4:	1e4f      	subs	r7, r1, #1
 80054e6:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 80054ea:	fb17 fc0c 	smulbb	ip, r7, ip
 80054ee:	6880      	ldr	r0, [r0, #8]
 80054f0:	ea5a 0a03 	orrs.w	sl, sl, r3
 80054f4:	68ad      	ldr	r5, [r5, #8]
 80054f6:	ebac 0c03 	sub.w	ip, ip, r3
 80054fa:	4494      	add	ip, r2
 80054fc:	f1ac 0e01 	sub.w	lr, ip, #1
 8005500:	ebae 0e04 	sub.w	lr, lr, r4
 8005504:	f040 80e4 	bne.w	80056d0 <pool_func_ap_array_f32+0x208>
 8005508:	f9bd 606c 	ldrsh.w	r6, [sp, #108]	; 0x6c
 800550c:	f9bd c05c 	ldrsh.w	ip, [sp, #92]	; 0x5c
 8005510:	1e77      	subs	r7, r6, #1
 8005512:	fb17 fa08 	smulbb	sl, r7, r8
 8005516:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
 800551a:	ebaa 0a0c 	sub.w	sl, sl, ip
 800551e:	44ba      	add	sl, r7
 8005520:	f1aa 0601 	sub.w	r6, sl, #1
 8005524:	eba6 060b 	sub.w	r6, r6, fp
 8005528:	b236      	sxth	r6, r6
 800552a:	2e00      	cmp	r6, #0
 800552c:	bf44      	itt	mi
 800552e:	fa0f fe8e 	sxthmi.w	lr, lr
 8005532:	f1be 0f00 	cmpmi.w	lr, #0
 8005536:	f140 80cb 	bpl.w	80056d0 <pool_func_ap_array_f32+0x208>
 800553a:	2400      	movs	r4, #0
 800553c:	000b      	movs	r3, r1
 800553e:	9409      	str	r4, [sp, #36]	; 0x24
 8005540:	f000 81b9 	beq.w	80058b6 <pool_func_ap_array_f32+0x3ee>
 8005544:	b212      	sxth	r2, r2
 8005546:	9408      	str	r4, [sp, #32]
 8005548:	f8ad 2004 	strh.w	r2, [sp, #4]
 800554c:	9407      	str	r4, [sp, #28]
 800554e:	9106      	str	r1, [sp, #24]
 8005550:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8005554:	f9bd e004 	ldrsh.w	lr, [sp, #4]
 8005558:	2900      	cmp	r1, #0
 800555a:	f000 809f 	beq.w	800569c <pool_func_ap_array_f32+0x1d4>
 800555e:	9907      	ldr	r1, [sp, #28]
 8005560:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005562:	9102      	str	r1, [sp, #8]
 8005564:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8005568:	2700      	movs	r7, #0
 800556a:	ae08      	add	r6, sp, #32
 800556c:	f9bd a054 	ldrsh.w	sl, [sp, #84]	; 0x54
 8005570:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8005574:	464c      	mov	r4, r9
 8005576:	434a      	muls	r2, r1
 8005578:	b212      	sxth	r2, r2
 800557a:	920b      	str	r2, [sp, #44]	; 0x2c
 800557c:	5ff1      	ldrsh	r1, [r6, r7]
 800557e:	f8ad 9002 	strh.w	r9, [sp, #2]
 8005582:	910a      	str	r1, [sp, #40]	; 0x28
 8005584:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8005588:	9505      	str	r5, [sp, #20]
 800558a:	f8ad a000 	strh.w	sl, [sp]
 800558e:	9303      	str	r3, [sp, #12]
 8005590:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8005594:	2200      	movs	r2, #0
 8005596:	f9bd c000 	ldrsh.w	ip, [sp]
 800559a:	2900      	cmp	r1, #0
 800559c:	d067      	beq.n	800566e <pool_func_ap_array_f32+0x1a6>
 800559e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80055a2:	9d05      	ldr	r5, [sp, #20]
 80055a4:	f8cd e010 	str.w	lr, [sp, #16]
 80055a8:	f8ad b006 	strh.w	fp, [sp, #6]
 80055ac:	fb08 f804 	mul.w	r8, r8, r4
 80055b0:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 80055b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055b6:	9904      	ldr	r1, [sp, #16]
 80055b8:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 80058bc <.text_5>
 80055bc:	eddf 0abf 	vldr	s1, [pc, #764]	; 80058bc <.text_5>
 80055c0:	428b      	cmp	r3, r1
 80055c2:	da46      	bge.n	8005652 <pool_func_ap_array_f32+0x18a>
 80055c4:	f8bd b006 	ldrh.w	fp, [sp, #6]
 80055c8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80055cc:	ee10 ea90 	vmov	lr, s1
 80055d0:	fb0b f103 	mul.w	r1, fp, r3
 80055d4:	9b04      	ldr	r3, [sp, #16]
 80055d6:	eba3 0808 	sub.w	r8, r3, r8
 80055da:	4603      	mov	r3, r0
 80055dc:	fa0f fa87 	sxth.w	sl, r7
 80055e0:	45e2      	cmp	sl, ip
 80055e2:	46b9      	mov	r9, r7
 80055e4:	da2e      	bge.n	8005644 <pool_func_ap_array_f32+0x17c>
 80055e6:	ebac 000a 	sub.w	r0, ip, sl
 80055ea:	44e6      	add	lr, ip
 80055ec:	07c6      	lsls	r6, r0, #31
 80055ee:	ebae 0e0a 	sub.w	lr, lr, sl
 80055f2:	d50a      	bpl.n	800560a <pool_func_ap_array_f32+0x142>
 80055f4:	448a      	add	sl, r1
 80055f6:	f109 0901 	add.w	r9, r9, #1
 80055fa:	fb0a 2a04 	mla	sl, sl, r4, r2
 80055fe:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 8005602:	edda 0a00 	vldr	s1, [sl]
 8005606:	ee30 0a20 	vadd.f32	s0, s0, s1
 800560a:	0840      	lsrs	r0, r0, #1
 800560c:	f000 801a 	beq.w	8005644 <pool_func_ap_array_f32+0x17c>
 8005610:	fa01 fa89 	sxtah	sl, r1, r9
 8005614:	f109 0901 	add.w	r9, r9, #1
 8005618:	fb0a 2a04 	mla	sl, sl, r4, r2
 800561c:	fa01 f689 	sxtah	r6, r1, r9
 8005620:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 8005624:	fb06 2604 	mla	r6, r6, r4, r2
 8005628:	1e40      	subs	r0, r0, #1
 800562a:	f109 0901 	add.w	r9, r9, #1
 800562e:	edda 0a00 	vldr	s1, [sl]
 8005632:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
 8005636:	ee30 0a20 	vadd.f32	s0, s0, s1
 800563a:	ed9a 1a00 	vldr	s2, [sl]
 800563e:	ee30 0a01 	vadd.f32	s0, s0, s2
 8005642:	d1e5      	bne.n	8005610 <pool_func_ap_array_f32+0x148>
 8005644:	f1b8 0801 	subs.w	r8, r8, #1
 8005648:	4459      	add	r1, fp
 800564a:	d1c7      	bne.n	80055dc <pool_func_ap_array_f32+0x114>
 800564c:	4618      	mov	r0, r3
 800564e:	ee00 ea90 	vmov	s1, lr
 8005652:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8005656:	1c52      	adds	r2, r2, #1
 8005658:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800565c:	ed85 0a00 	vstr	s0, [r5]
 8005660:	1d2d      	adds	r5, r5, #4
 8005662:	42a2      	cmp	r2, r4
 8005664:	dba6      	blt.n	80055b4 <pool_func_ap_array_f32+0xec>
 8005666:	f8dd e010 	ldr.w	lr, [sp, #16]
 800566a:	f8bd b006 	ldrh.w	fp, [sp, #6]
 800566e:	9a02      	ldr	r2, [sp, #8]
 8005670:	f8bd 3000 	ldrh.w	r3, [sp]
 8005674:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8005678:	1c52      	adds	r2, r2, #1
 800567a:	9202      	str	r2, [sp, #8]
 800567c:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8005680:	18d3      	adds	r3, r2, r3
 8005682:	f8ad 3000 	strh.w	r3, [sp]
 8005686:	9b03      	ldr	r3, [sp, #12]
 8005688:	19cf      	adds	r7, r1, r7
 800568a:	1e5b      	subs	r3, r3, #1
 800568c:	9303      	str	r3, [sp, #12]
 800568e:	f47f af7f 	bne.w	8005590 <pool_func_ap_array_f32+0xc8>
 8005692:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 8005696:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 800569a:	9d05      	ldr	r5, [sp, #20]
 800569c:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 80056a0:	9a07      	ldr	r2, [sp, #28]
 80056a2:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 80056a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056a8:	9c08      	ldr	r4, [sp, #32]
 80056aa:	18d3      	adds	r3, r2, r3
 80056ac:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
 80056b0:	9307      	str	r3, [sp, #28]
 80056b2:	1c49      	adds	r1, r1, #1
 80056b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80056b8:	19e7      	adds	r7, r4, r7
 80056ba:	9c06      	ldr	r4, [sp, #24]
 80056bc:	9109      	str	r1, [sp, #36]	; 0x24
 80056be:	9708      	str	r7, [sp, #32]
 80056c0:	18d3      	adds	r3, r2, r3
 80056c2:	1e64      	subs	r4, r4, #1
 80056c4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80056c8:	9406      	str	r4, [sp, #24]
 80056ca:	f000 80f4 	beq.w	80058b6 <pool_func_ap_array_f32+0x3ee>
 80056ce:	e73f      	b.n	8005550 <pool_func_ap_array_f32+0x88>
 80056d0:	000f      	movs	r7, r1
 80056d2:	f000 80f0 	beq.w	80058b6 <pool_func_ap_array_f32+0x3ee>
 80056d6:	425b      	negs	r3, r3
 80056d8:	18d2      	adds	r2, r2, r3
 80056da:	f04f 0e00 	mov.w	lr, #0
 80056de:	f8ad 3000 	strh.w	r3, [sp]
 80056e2:	f8ad 200a 	strh.w	r2, [sp, #10]
 80056e6:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 80056ea:	9108      	str	r1, [sp, #32]
 80056ec:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 80056f0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80056f4:	2900      	cmp	r1, #0
 80056f6:	f000 80c6 	beq.w	8005886 <pool_func_ap_array_f32+0x3be>
 80056fa:	f9bd 705c 	ldrsh.w	r7, [sp, #92]	; 0x5c
 80056fe:	f9bd 6054 	ldrsh.w	r6, [sp, #84]	; 0x54
 8005702:	f8bd a06c 	ldrh.w	sl, [sp, #108]	; 0x6c
 8005706:	f8ad 9002 	strh.w	r9, [sp, #2]
 800570a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800570c:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8005710:	9204      	str	r2, [sp, #16]
 8005712:	427f      	negs	r7, r7
 8005714:	19f6      	adds	r6, r6, r7
 8005716:	9505      	str	r5, [sp, #20]
 8005718:	f8ad 7004 	strh.w	r7, [sp, #4]
 800571c:	f8ad 6008 	strh.w	r6, [sp, #8]
 8005720:	f8cd a01c 	str.w	sl, [sp, #28]
 8005724:	f8ad b006 	strh.w	fp, [sp, #6]
 8005728:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800572c:	2100      	movs	r1, #0
 800572e:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
 8005732:	2a00      	cmp	r2, #0
 8005734:	f000 808a 	beq.w	800584c <pool_func_ap_array_f32+0x384>
 8005738:	9f04      	ldr	r7, [sp, #16]
 800573a:	9d05      	ldr	r5, [sp, #20]
 800573c:	f8ad 400c 	strh.w	r4, [sp, #12]
 8005740:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8005744:	fb07 fb02 	mul.w	fp, r7, r2
 8005748:	eb05 058b 	add.w	r5, r5, fp, lsl #2
 800574c:	f8cd 5018 	str.w	r5, [sp, #24]
 8005750:	f9bd 5000 	ldrsh.w	r5, [sp]
 8005754:	ed9f 0a59 	vldr	s0, [pc, #356]	; 80058bc <.text_5>
 8005758:	eddf 0a58 	vldr	s1, [pc, #352]	; 80058bc <.text_5>
 800575c:	f8bd 4002 	ldrh.w	r4, [sp, #2]
 8005760:	429d      	cmp	r5, r3
 8005762:	da60      	bge.n	8005826 <pool_func_ap_array_f32+0x35e>
 8005764:	930a      	str	r3, [sp, #40]	; 0x28
 8005766:	fb09 fe05 	mul.w	lr, r9, r5
 800576a:	462b      	mov	r3, r5
 800576c:	ee10 2a90 	vmov	r2, s1
 8005770:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 8005774:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8005778:	4545      	cmp	r5, r8
 800577a:	462f      	mov	r7, r5
 800577c:	da47      	bge.n	800580e <pool_func_ap_array_f32+0x346>
 800577e:	eba8 0a05 	sub.w	sl, r8, r5
 8005782:	ea5f 76ca 	movs.w	r6, sl, lsl #31
 8005786:	d513      	bpl.n	80057b0 <pool_func_ap_array_f32+0x2e8>
 8005788:	2b00      	cmp	r3, #0
 800578a:	bf58      	it	pl
 800578c:	2f00      	cmppl	r7, #0
 800578e:	d40e      	bmi.n	80057ae <pool_func_ap_array_f32+0x2e6>
 8005790:	455b      	cmp	r3, fp
 8005792:	bfb8      	it	lt
 8005794:	454f      	cmplt	r7, r9
 8005796:	da0a      	bge.n	80057ae <pool_func_ap_array_f32+0x2e6>
 8005798:	eb0e 0607 	add.w	r6, lr, r7
 800579c:	1c52      	adds	r2, r2, #1
 800579e:	fb06 1604 	mla	r6, r6, r4, r1
 80057a2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80057a6:	edd6 0a00 	vldr	s1, [r6]
 80057aa:	ee30 0a20 	vadd.f32	s0, s0, s1
 80057ae:	1c7f      	adds	r7, r7, #1
 80057b0:	ea5f 0a5a 	movs.w	sl, sl, lsr #1
 80057b4:	d02b      	beq.n	800580e <pool_func_ap_array_f32+0x346>
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d405      	bmi.n	80057c6 <pool_func_ap_array_f32+0x2fe>
 80057ba:	2f00      	cmp	r7, #0
 80057bc:	bf48      	it	mi
 80057be:	1c7e      	addmi	r6, r7, #1
 80057c0:	d410      	bmi.n	80057e4 <pool_func_ap_array_f32+0x31c>
 80057c2:	455b      	cmp	r3, fp
 80057c4:	db01      	blt.n	80057ca <pool_func_ap_array_f32+0x302>
 80057c6:	1c7e      	adds	r6, r7, #1
 80057c8:	e01d      	b.n	8005806 <pool_func_ap_array_f32+0x33e>
 80057ca:	1c7e      	adds	r6, r7, #1
 80057cc:	454f      	cmp	r7, r9
 80057ce:	da09      	bge.n	80057e4 <pool_func_ap_array_f32+0x31c>
 80057d0:	4477      	add	r7, lr
 80057d2:	1c52      	adds	r2, r2, #1
 80057d4:	fb07 1704 	mla	r7, r7, r4, r1
 80057d8:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80057dc:	edd7 0a00 	vldr	s1, [r7]
 80057e0:	ee30 0a20 	vadd.f32	s0, s0, s1
 80057e4:	2e00      	cmp	r6, #0
 80057e6:	d40e      	bmi.n	8005806 <pool_func_ap_array_f32+0x33e>
 80057e8:	455b      	cmp	r3, fp
 80057ea:	bfb8      	it	lt
 80057ec:	454e      	cmplt	r6, r9
 80057ee:	da0a      	bge.n	8005806 <pool_func_ap_array_f32+0x33e>
 80057f0:	eb0e 0706 	add.w	r7, lr, r6
 80057f4:	1c52      	adds	r2, r2, #1
 80057f6:	fb07 1704 	mla	r7, r7, r4, r1
 80057fa:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80057fe:	edd7 0a00 	vldr	s1, [r7]
 8005802:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005806:	1c77      	adds	r7, r6, #1
 8005808:	f1ba 0a01 	subs.w	sl, sl, #1
 800580c:	d1d3      	bne.n	80057b6 <pool_func_ap_array_f32+0x2ee>
 800580e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005810:	1c5b      	adds	r3, r3, #1
 8005812:	44ce      	add	lr, r9
 8005814:	42bb      	cmp	r3, r7
 8005816:	dbaf      	blt.n	8005778 <pool_func_ap_array_f32+0x2b0>
 8005818:	463b      	mov	r3, r7
 800581a:	ee00 2a90 	vmov	s1, r2
 800581e:	f8ad 5004 	strh.w	r5, [sp, #4]
 8005822:	f8ad b00c 	strh.w	fp, [sp, #12]
 8005826:	9d06      	ldr	r5, [sp, #24]
 8005828:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800582c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8005830:	1c49      	adds	r1, r1, #1
 8005832:	42a1      	cmp	r1, r4
 8005834:	ed85 0a00 	vstr	s0, [r5]
 8005838:	9a06      	ldr	r2, [sp, #24]
 800583a:	f102 0b04 	add.w	fp, r2, #4
 800583e:	f8cd b018 	str.w	fp, [sp, #24]
 8005842:	db85      	blt.n	8005750 <pool_func_ap_array_f32+0x288>
 8005844:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8005848:	f8ad 9006 	strh.w	r9, [sp, #6]
 800584c:	9d04      	ldr	r5, [sp, #16]
 800584e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8005852:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8005856:	f9bd b064 	ldrsh.w	fp, [sp, #100]	; 0x64
 800585a:	1c6d      	adds	r5, r5, #1
 800585c:	9504      	str	r5, [sp, #16]
 800585e:	f9bd 5064 	ldrsh.w	r5, [sp, #100]	; 0x64
 8005862:	1869      	adds	r1, r5, r1
 8005864:	9d07      	ldr	r5, [sp, #28]
 8005866:	445a      	add	r2, fp
 8005868:	f8ad 1008 	strh.w	r1, [sp, #8]
 800586c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005870:	1e6d      	subs	r5, r5, #1
 8005872:	9507      	str	r5, [sp, #28]
 8005874:	f47f af58 	bne.w	8005728 <pool_func_ap_array_f32+0x260>
 8005878:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 800587c:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8005880:	9d05      	ldr	r5, [sp, #20]
 8005882:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8005886:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 800588a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800588c:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8005890:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 8005894:	19d7      	adds	r7, r2, r7
 8005896:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
 800589a:	9709      	str	r7, [sp, #36]	; 0x24
 800589c:	f8bd 7000 	ldrh.w	r7, [sp]
 80058a0:	449e      	add	lr, r3
 80058a2:	9b08      	ldr	r3, [sp, #32]
 80058a4:	f8ad e00a 	strh.w	lr, [sp, #10]
 80058a8:	19d7      	adds	r7, r2, r7
 80058aa:	1e5b      	subs	r3, r3, #1
 80058ac:	f8ad 7000 	strh.w	r7, [sp]
 80058b0:	9308      	str	r3, [sp, #32]
 80058b2:	f47f af1b 	bne.w	80056ec <pool_func_ap_array_f32+0x224>
 80058b6:	b00c      	add	sp, #48	; 0x30
 80058b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080058bc <.text_5>:
 80058bc:	00000000 	.word	0x00000000

080058c0 <pool_func_mp_kernel_array_f32>:
 80058c0:	b470      	push	{r4, r5, r6}
 80058c2:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 80058c6:	42a1      	cmp	r1, r4
 80058c8:	d257      	bcs.n	800597a <pool_func_mp_kernel_array_f32+0xba>
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d051      	beq.n	8005972 <pool_func_mp_kernel_array_f32+0xb2>
 80058ce:	f013 0203 	ands.w	r2, r3, #3
 80058d2:	460d      	mov	r5, r1
 80058d4:	4606      	mov	r6, r0
 80058d6:	d011      	beq.n	80058fc <pool_func_mp_kernel_array_f32+0x3c>
 80058d8:	ed96 0a00 	vldr	s0, [r6]
 80058dc:	edd5 0a00 	vldr	s1, [r5]
 80058e0:	eef4 0a40 	vcmp.f32	s1, s0
 80058e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e8:	bf58      	it	pl
 80058ea:	eeb0 0a60 	vmovpl.f32	s0, s1
 80058ee:	ed86 0a00 	vstr	s0, [r6]
 80058f2:	1e52      	subs	r2, r2, #1
 80058f4:	1d36      	adds	r6, r6, #4
 80058f6:	1d2d      	adds	r5, r5, #4
 80058f8:	2a00      	cmp	r2, #0
 80058fa:	d1ed      	bne.n	80058d8 <pool_func_mp_kernel_array_f32+0x18>
 80058fc:	089a      	lsrs	r2, r3, #2
 80058fe:	d038      	beq.n	8005972 <pool_func_mp_kernel_array_f32+0xb2>
 8005900:	edd5 0a00 	vldr	s1, [r5]
 8005904:	edd6 1a00 	vldr	s3, [r6]
 8005908:	eef4 0a61 	vcmp.f32	s1, s3
 800590c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005910:	bf48      	it	mi
 8005912:	eef0 0a61 	vmovmi.f32	s1, s3
 8005916:	edc6 0a00 	vstr	s1, [r6]
 800591a:	edd5 0a01 	vldr	s1, [r5, #4]
 800591e:	edd6 1a01 	vldr	s3, [r6, #4]
 8005922:	eef4 0a61 	vcmp.f32	s1, s3
 8005926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800592a:	ed96 0a02 	vldr	s0, [r6, #8]
 800592e:	bf48      	it	mi
 8005930:	eef0 0a61 	vmovmi.f32	s1, s3
 8005934:	edc6 0a01 	vstr	s1, [r6, #4]
 8005938:	ed95 1a02 	vldr	s2, [r5, #8]
 800593c:	eeb4 1a40 	vcmp.f32	s2, s0
 8005940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005944:	edd6 1a03 	vldr	s3, [r6, #12]
 8005948:	bf48      	it	mi
 800594a:	eeb0 1a40 	vmovmi.f32	s2, s0
 800594e:	ed86 1a02 	vstr	s2, [r6, #8]
 8005952:	edd5 0a03 	vldr	s1, [r5, #12]
 8005956:	eef4 0a61 	vcmp.f32	s1, s3
 800595a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800595e:	bf58      	it	pl
 8005960:	eef0 1a60 	vmovpl.f32	s3, s1
 8005964:	edc6 1a03 	vstr	s3, [r6, #12]
 8005968:	1e52      	subs	r2, r2, #1
 800596a:	3610      	adds	r6, #16
 800596c:	3510      	adds	r5, #16
 800596e:	2a00      	cmp	r2, #0
 8005970:	d1c6      	bne.n	8005900 <pool_func_mp_kernel_array_f32+0x40>
 8005972:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005976:	42a1      	cmp	r1, r4
 8005978:	d3a7      	bcc.n	80058ca <pool_func_mp_kernel_array_f32+0xa>
 800597a:	bc70      	pop	{r4, r5, r6}
 800597c:	4770      	bx	lr
	...

08005980 <pool_func_ap_kernel_array_f32>:
 8005980:	b470      	push	{r4, r5, r6}
 8005982:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 8005986:	42a1      	cmp	r1, r4
 8005988:	d24f      	bcs.n	8005a2a <pool_func_ap_kernel_array_f32+0xaa>
 800598a:	2b00      	cmp	r3, #0
 800598c:	d049      	beq.n	8005a22 <pool_func_ap_kernel_array_f32+0xa2>
 800598e:	f013 0203 	ands.w	r2, r3, #3
 8005992:	460d      	mov	r5, r1
 8005994:	4606      	mov	r6, r0
 8005996:	d00e      	beq.n	80059b6 <pool_func_ap_kernel_array_f32+0x36>
 8005998:	4288      	cmp	r0, r1
 800599a:	ed95 0a00 	vldr	s0, [r5]
 800599e:	bf1c      	itt	ne
 80059a0:	edd6 0a00 	vldrne	s1, [r6]
 80059a4:	ee30 0a80 	vaddne.f32	s0, s1, s0
 80059a8:	ed86 0a00 	vstr	s0, [r6]
 80059ac:	1e52      	subs	r2, r2, #1
 80059ae:	1d36      	adds	r6, r6, #4
 80059b0:	1d2d      	adds	r5, r5, #4
 80059b2:	2a00      	cmp	r2, #0
 80059b4:	d1f0      	bne.n	8005998 <pool_func_ap_kernel_array_f32+0x18>
 80059b6:	089a      	lsrs	r2, r3, #2
 80059b8:	d033      	beq.n	8005a22 <pool_func_ap_kernel_array_f32+0xa2>
 80059ba:	4288      	cmp	r0, r1
 80059bc:	edd5 1a00 	vldr	s3, [r5]
 80059c0:	d10c      	bne.n	80059dc <pool_func_ap_kernel_array_f32+0x5c>
 80059c2:	edc6 1a00 	vstr	s3, [r6]
 80059c6:	ed95 0a01 	vldr	s0, [r5, #4]
 80059ca:	ed86 0a01 	vstr	s0, [r6, #4]
 80059ce:	edd5 1a02 	vldr	s3, [r5, #8]
 80059d2:	edc6 1a02 	vstr	s3, [r6, #8]
 80059d6:	edd5 1a03 	vldr	s3, [r5, #12]
 80059da:	e01b      	b.n	8005a14 <pool_func_ap_kernel_array_f32+0x94>
 80059dc:	edd6 0a00 	vldr	s1, [r6]
 80059e0:	ee30 0aa1 	vadd.f32	s0, s1, s3
 80059e4:	ed86 0a00 	vstr	s0, [r6]
 80059e8:	ed96 1a01 	vldr	s2, [r6, #4]
 80059ec:	ed95 0a01 	vldr	s0, [r5, #4]
 80059f0:	ee71 0a00 	vadd.f32	s1, s2, s0
 80059f4:	edc6 0a01 	vstr	s1, [r6, #4]
 80059f8:	edd6 1a02 	vldr	s3, [r6, #8]
 80059fc:	edd5 0a02 	vldr	s1, [r5, #8]
 8005a00:	ee31 0aa0 	vadd.f32	s0, s3, s1
 8005a04:	ed86 0a02 	vstr	s0, [r6, #8]
 8005a08:	ed96 0a03 	vldr	s0, [r6, #12]
 8005a0c:	ed95 1a03 	vldr	s2, [r5, #12]
 8005a10:	ee70 1a01 	vadd.f32	s3, s0, s2
 8005a14:	edc6 1a03 	vstr	s3, [r6, #12]
 8005a18:	1e52      	subs	r2, r2, #1
 8005a1a:	3610      	adds	r6, #16
 8005a1c:	3510      	adds	r5, #16
 8005a1e:	2a00      	cmp	r2, #0
 8005a20:	d1cb      	bne.n	80059ba <pool_func_ap_kernel_array_f32+0x3a>
 8005a22:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005a26:	42a1      	cmp	r1, r4
 8005a28:	d3af      	bcc.n	800598a <pool_func_ap_kernel_array_f32+0xa>
 8005a2a:	9903      	ldr	r1, [sp, #12]
 8005a2c:	b3a1      	cbz	r1, 8005a98 <pool_func_ap_kernel_array_f32+0x118>
 8005a2e:	ee00 1a10 	vmov	s0, r1
 8005a32:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8005a36:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005a3a:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8005a3e:	b35b      	cbz	r3, 8005a98 <pool_func_ap_kernel_array_f32+0x118>
 8005a40:	f013 0103 	ands.w	r1, r3, #3
 8005a44:	f000 800a 	beq.w	8005a5c <pool_func_ap_kernel_array_f32+0xdc>
 8005a48:	edd0 0a00 	vldr	s1, [r0]
 8005a4c:	1e49      	subs	r1, r1, #1
 8005a4e:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005a52:	edc0 0a00 	vstr	s1, [r0]
 8005a56:	f100 0004 	add.w	r0, r0, #4
 8005a5a:	d1f5      	bne.n	8005a48 <pool_func_ap_kernel_array_f32+0xc8>
 8005a5c:	089b      	lsrs	r3, r3, #2
 8005a5e:	d01b      	beq.n	8005a98 <pool_func_ap_kernel_array_f32+0x118>
 8005a60:	edd0 0a00 	vldr	s1, [r0]
 8005a64:	1e5b      	subs	r3, r3, #1
 8005a66:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005a6a:	edc0 0a00 	vstr	s1, [r0]
 8005a6e:	ed90 1a01 	vldr	s2, [r0, #4]
 8005a72:	ee21 1a00 	vmul.f32	s2, s2, s0
 8005a76:	ed80 1a01 	vstr	s2, [r0, #4]
 8005a7a:	edd0 0a02 	vldr	s1, [r0, #8]
 8005a7e:	ed90 1a03 	vldr	s2, [r0, #12]
 8005a82:	ee60 1a80 	vmul.f32	s3, s1, s0
 8005a86:	ee61 0a00 	vmul.f32	s1, s2, s0
 8005a8a:	edc0 1a02 	vstr	s3, [r0, #8]
 8005a8e:	edc0 0a03 	vstr	s1, [r0, #12]
 8005a92:	f100 0010 	add.w	r0, r0, #16
 8005a96:	d1e3      	bne.n	8005a60 <pool_func_ap_kernel_array_f32+0xe0>
 8005a98:	bc70      	pop	{r4, r5, r6}
 8005a9a:	4770      	bx	lr

08005a9c <forward_mp>:
 8005a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa0:	b08e      	sub	sp, #56	; 0x38
 8005aa2:	4680      	mov	r8, r0
 8005aa4:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8005aa8:	8811      	ldrh	r1, [r2, #0]
 8005aaa:	2900      	cmp	r1, #0
 8005aac:	bf1a      	itte	ne
 8005aae:	6850      	ldrne	r0, [r2, #4]
 8005ab0:	1d00      	addne	r0, r0, #4
 8005ab2:	2004      	moveq	r0, #4
 8005ab4:	6800      	ldr	r0, [r0, #0]
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	bf14      	ite	ne
 8005aba:	6805      	ldrne	r5, [r0, #0]
 8005abc:	2500      	moveq	r5, #0
 8005abe:	2901      	cmp	r1, #1
 8005ac0:	bfc6      	itte	gt
 8005ac2:	6850      	ldrgt	r0, [r2, #4]
 8005ac4:	3010      	addgt	r0, #16
 8005ac6:	2004      	movle	r0, #4
 8005ac8:	6800      	ldr	r0, [r0, #0]
 8005aca:	68ea      	ldr	r2, [r5, #12]
 8005acc:	2800      	cmp	r0, #0
 8005ace:	bf14      	ite	ne
 8005ad0:	6807      	ldrne	r7, [r0, #0]
 8005ad2:	2700      	moveq	r7, #0
 8005ad4:	68f9      	ldr	r1, [r7, #12]
 8005ad6:	68d6      	ldr	r6, [r2, #12]
 8005ad8:	68cb      	ldr	r3, [r1, #12]
 8005ada:	9609      	str	r6, [sp, #36]	; 0x24
 8005adc:	6889      	ldr	r1, [r1, #8]
 8005ade:	9108      	str	r1, [sp, #32]
 8005ae0:	6896      	ldr	r6, [r2, #8]
 8005ae2:	6851      	ldr	r1, [r2, #4]
 8005ae4:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8005ae8:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f8cd c01c 	str.w	ip, [sp, #28]
 8005af2:	f8d8 0020 	ldr.w	r0, [r8, #32]
 8005af6:	f8d8 e024 	ldr.w	lr, [r8, #36]	; 0x24
 8005afa:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8005afe:	f8d8 c02c 	ldr.w	ip, [r8, #44]	; 0x2c
 8005b02:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8005b06:	69bf      	ldr	r7, [r7, #24]
 8005b08:	f8dc 9000 	ldr.w	r9, [ip]
 8005b0c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8005b10:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8005b14:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8005b18:	f1c9 0900 	rsb	r9, r9, #0
 8005b1c:	f8cd 9000 	str.w	r9, [sp]
 8005b20:	f000 80d8 	beq.w	8005cd4 <forward_mp+0x238>
 8005b24:	9301      	str	r3, [sp, #4]
 8005b26:	4264      	negs	r4, r4
 8005b28:	940c      	str	r4, [sp, #48]	; 0x30
 8005b2a:	fb01 f706 	mul.w	r7, r1, r6
 8005b2e:	970b      	str	r7, [sp, #44]	; 0x2c
 8005b30:	9d00      	ldr	r5, [sp, #0]
 8005b32:	9b00      	ldr	r3, [sp, #0]
 8005b34:	9f07      	ldr	r7, [sp, #28]
 8005b36:	9c00      	ldr	r4, [sp, #0]
 8005b38:	426d      	negs	r5, r5
 8005b3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005b3c:	bfcc      	ite	gt
 8005b3e:	f04f 0c00 	movgt.w	ip, #0
 8005b42:	f8dd c000 	ldrle.w	ip, [sp]
 8005b46:	1aeb      	subs	r3, r5, r3
 8005b48:	42bb      	cmp	r3, r7
 8005b4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b4c:	bf88      	it	hi
 8005b4e:	463b      	movhi	r3, r7
 8005b50:	191c      	adds	r4, r3, r4
 8005b52:	9b08      	ldr	r3, [sp, #32]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 80b4 	beq.w	8005cc2 <forward_mp+0x226>
 8005b5a:	fb06 fa0c 	mul.w	sl, r6, ip
 8005b5e:	9603      	str	r6, [sp, #12]
 8005b60:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005b64:	9202      	str	r2, [sp, #8]
 8005b66:	9006      	str	r0, [sp, #24]
 8005b68:	f8cd c014 	str.w	ip, [sp, #20]
 8005b6c:	9404      	str	r4, [sp, #16]
 8005b6e:	4268      	negs	r0, r5
 8005b70:	9f03      	ldr	r7, [sp, #12]
 8005b72:	9a02      	ldr	r2, [sp, #8]
 8005b74:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8005b78:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005b7a:	bfcc      	ite	gt
 8005b7c:	2000      	movgt	r0, #0
 8005b7e:	4628      	movle	r0, r5
 8005b80:	1b7f      	subs	r7, r7, r5
 8005b82:	4297      	cmp	r7, r2
 8005b84:	bf88      	it	hi
 8005b86:	4617      	movhi	r7, r2
 8005b88:	197f      	adds	r7, r7, r5
 8005b8a:	1a3f      	subs	r7, r7, r0
 8005b8c:	4460      	add	r0, ip
 8005b8e:	434f      	muls	r7, r1
 8005b90:	4348      	muls	r0, r1
 8005b92:	eb08 0c80 	add.w	ip, r8, r0, lsl #2
 8005b96:	b311      	cbz	r1, 8005bde <forward_mp+0x142>
 8005b98:	f011 0003 	ands.w	r0, r1, #3
 8005b9c:	4672      	mov	r2, lr
 8005b9e:	4664      	mov	r4, ip
 8005ba0:	d005      	beq.n	8005bae <forward_mp+0x112>
 8005ba2:	1e40      	subs	r0, r0, #1
 8005ba4:	f854 9b04 	ldr.w	r9, [r4], #4
 8005ba8:	f842 9b04 	str.w	r9, [r2], #4
 8005bac:	d1f9      	bne.n	8005ba2 <forward_mp+0x106>
 8005bae:	0888      	lsrs	r0, r1, #2
 8005bb0:	f000 8015 	beq.w	8005bde <forward_mp+0x142>
 8005bb4:	ed94 0a00 	vldr	s0, [r4]
 8005bb8:	1e40      	subs	r0, r0, #1
 8005bba:	ed82 0a00 	vstr	s0, [r2]
 8005bbe:	edd4 0a01 	vldr	s1, [r4, #4]
 8005bc2:	edc2 0a01 	vstr	s1, [r2, #4]
 8005bc6:	ed94 0a02 	vldr	s0, [r4, #8]
 8005bca:	ed82 0a02 	vstr	s0, [r2, #8]
 8005bce:	edd4 0a03 	vldr	s1, [r4, #12]
 8005bd2:	3410      	adds	r4, #16
 8005bd4:	edc2 0a03 	vstr	s1, [r2, #12]
 8005bd8:	3210      	adds	r2, #16
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d1ea      	bne.n	8005bb4 <forward_mp+0x118>
 8005bde:	9805      	ldr	r0, [sp, #20]
 8005be0:	9a04      	ldr	r2, [sp, #16]
 8005be2:	4290      	cmp	r0, r2
 8005be4:	da64      	bge.n	8005cb0 <forward_mp+0x214>
 8005be6:	1a12      	subs	r2, r2, r0
 8005be8:	46e2      	mov	sl, ip
 8005bea:	eb0a 0b87 	add.w	fp, sl, r7, lsl #2
 8005bee:	45da      	cmp	sl, fp
 8005bf0:	d25a      	bcs.n	8005ca8 <forward_mp+0x20c>
 8005bf2:	2900      	cmp	r1, #0
 8005bf4:	d054      	beq.n	8005ca0 <forward_mp+0x204>
 8005bf6:	f011 0003 	ands.w	r0, r1, #3
 8005bfa:	4654      	mov	r4, sl
 8005bfc:	46f1      	mov	r9, lr
 8005bfe:	d012      	beq.n	8005c26 <forward_mp+0x18a>
 8005c00:	ed99 0a00 	vldr	s0, [r9]
 8005c04:	edd4 0a00 	vldr	s1, [r4]
 8005c08:	eef4 0a40 	vcmp.f32	s1, s0
 8005c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c10:	bf58      	it	pl
 8005c12:	eeb0 0a60 	vmovpl.f32	s0, s1
 8005c16:	1e40      	subs	r0, r0, #1
 8005c18:	1d24      	adds	r4, r4, #4
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	ed89 0a00 	vstr	s0, [r9]
 8005c20:	f109 0904 	add.w	r9, r9, #4
 8005c24:	d1ec      	bne.n	8005c00 <forward_mp+0x164>
 8005c26:	0888      	lsrs	r0, r1, #2
 8005c28:	f000 803a 	beq.w	8005ca0 <forward_mp+0x204>
 8005c2c:	edd4 0a00 	vldr	s1, [r4]
 8005c30:	edd9 1a00 	vldr	s3, [r9]
 8005c34:	eef4 0a61 	vcmp.f32	s1, s3
 8005c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c3c:	bf48      	it	mi
 8005c3e:	eef0 0a61 	vmovmi.f32	s1, s3
 8005c42:	edc9 0a00 	vstr	s1, [r9]
 8005c46:	edd4 0a01 	vldr	s1, [r4, #4]
 8005c4a:	edd9 1a01 	vldr	s3, [r9, #4]
 8005c4e:	eef4 0a61 	vcmp.f32	s1, s3
 8005c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c56:	ed99 0a02 	vldr	s0, [r9, #8]
 8005c5a:	bf48      	it	mi
 8005c5c:	eef0 0a61 	vmovmi.f32	s1, s3
 8005c60:	edc9 0a01 	vstr	s1, [r9, #4]
 8005c64:	ed94 1a02 	vldr	s2, [r4, #8]
 8005c68:	eeb4 1a40 	vcmp.f32	s2, s0
 8005c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c70:	edd9 1a03 	vldr	s3, [r9, #12]
 8005c74:	bf48      	it	mi
 8005c76:	eeb0 1a40 	vmovmi.f32	s2, s0
 8005c7a:	ed89 1a02 	vstr	s2, [r9, #8]
 8005c7e:	edd4 0a03 	vldr	s1, [r4, #12]
 8005c82:	eef4 0a61 	vcmp.f32	s1, s3
 8005c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c8a:	bf58      	it	pl
 8005c8c:	eef0 1a60 	vmovpl.f32	s3, s1
 8005c90:	1e40      	subs	r0, r0, #1
 8005c92:	3410      	adds	r4, #16
 8005c94:	2800      	cmp	r0, #0
 8005c96:	edc9 1a03 	vstr	s3, [r9, #12]
 8005c9a:	f109 0910 	add.w	r9, r9, #16
 8005c9e:	d1c5      	bne.n	8005c2c <forward_mp+0x190>
 8005ca0:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 8005ca4:	45da      	cmp	sl, fp
 8005ca6:	d3a4      	bcc.n	8005bf2 <forward_mp+0x156>
 8005ca8:	1e52      	subs	r2, r2, #1
 8005caa:	eb0c 0c86 	add.w	ip, ip, r6, lsl #2
 8005cae:	d19b      	bne.n	8005be8 <forward_mp+0x14c>
 8005cb0:	9806      	ldr	r0, [sp, #24]
 8005cb2:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 8005cb6:	1945      	adds	r5, r0, r5
 8005cb8:	1e5b      	subs	r3, r3, #1
 8005cba:	f47f af58 	bne.w	8005b6e <forward_mp+0xd2>
 8005cbe:	9e03      	ldr	r6, [sp, #12]
 8005cc0:	9a02      	ldr	r2, [sp, #8]
 8005cc2:	9f00      	ldr	r7, [sp, #0]
 8005cc4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005cc6:	19ef      	adds	r7, r5, r7
 8005cc8:	9700      	str	r7, [sp, #0]
 8005cca:	9c01      	ldr	r4, [sp, #4]
 8005ccc:	1e64      	subs	r4, r4, #1
 8005cce:	9401      	str	r4, [sp, #4]
 8005cd0:	f47f af2e 	bne.w	8005b30 <forward_mp+0x94>
 8005cd4:	b00e      	add	sp, #56	; 0x38
 8005cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005cdc <forward_ap>:
 8005cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce0:	b097      	sub	sp, #92	; 0x5c
 8005ce2:	4680      	mov	r8, r0
 8005ce4:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8005ce8:	8811      	ldrh	r1, [r2, #0]
 8005cea:	2900      	cmp	r1, #0
 8005cec:	bf1a      	itte	ne
 8005cee:	6850      	ldrne	r0, [r2, #4]
 8005cf0:	1d00      	addne	r0, r0, #4
 8005cf2:	2004      	moveq	r0, #4
 8005cf4:	6800      	ldr	r0, [r0, #0]
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	bf14      	ite	ne
 8005cfa:	6806      	ldrne	r6, [r0, #0]
 8005cfc:	2600      	moveq	r6, #0
 8005cfe:	2901      	cmp	r1, #1
 8005d00:	68f3      	ldr	r3, [r6, #12]
 8005d02:	bfc6      	itte	gt
 8005d04:	6850      	ldrgt	r0, [r2, #4]
 8005d06:	3010      	addgt	r0, #16
 8005d08:	2004      	movle	r0, #4
 8005d0a:	6800      	ldr	r0, [r0, #0]
 8005d0c:	68dc      	ldr	r4, [r3, #12]
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	bf14      	ite	ne
 8005d12:	f8d0 e000 	ldrne.w	lr, [r0]
 8005d16:	f04f 0e00 	moveq.w	lr, #0
 8005d1a:	f8de 200c 	ldr.w	r2, [lr, #12]
 8005d1e:	68d0      	ldr	r0, [r2, #12]
 8005d20:	940d      	str	r4, [sp, #52]	; 0x34
 8005d22:	6892      	ldr	r2, [r2, #8]
 8005d24:	920c      	str	r2, [sp, #48]	; 0x30
 8005d26:	689c      	ldr	r4, [r3, #8]
 8005d28:	6859      	ldr	r1, [r3, #4]
 8005d2a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8005d2e:	f8d8 a01c 	ldr.w	sl, [r8, #28]
 8005d32:	f8cd a014 	str.w	sl, [sp, #20]
 8005d36:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8005d3a:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 8005d3e:	9516      	str	r5, [sp, #88]	; 0x58
 8005d40:	f8d8 c02c 	ldr.w	ip, [r8, #44]	; 0x2c
 8005d44:	69b6      	ldr	r6, [r6, #24]
 8005d46:	f8de e018 	ldr.w	lr, [lr, #24]
 8005d4a:	f8dc 7000 	ldr.w	r7, [ip]
 8005d4e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8005d52:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8005d56:	f8de 9008 	ldr.w	r9, [lr, #8]
 8005d5a:	427f      	negs	r7, r7
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	9701      	str	r7, [sp, #4]
 8005d60:	f000 813a 	beq.w	8005fd8 <forward_ap+0x2fc>
 8005d64:	9004      	str	r0, [sp, #16]
 8005d66:	426d      	negs	r5, r5
 8005d68:	9515      	str	r5, [sp, #84]	; 0x54
 8005d6a:	9d05      	ldr	r5, [sp, #20]
 8005d6c:	fb01 f604 	mul.w	r6, r1, r4
 8005d70:	435d      	muls	r5, r3
 8005d72:	9514      	str	r5, [sp, #80]	; 0x50
 8005d74:	f8cd 604c 	str.w	r6, [sp, #76]	; 0x4c
 8005d78:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005d7c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8005d7e:	9801      	ldr	r0, [sp, #4]
 8005d80:	9d05      	ldr	r5, [sp, #20]
 8005d82:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8005d84:	f1dc 0c00 	rsbs	ip, ip, #0
 8005d88:	bfcc      	ite	gt
 8005d8a:	f04f 0e00 	movgt.w	lr, #0
 8005d8e:	f8dd e004 	ldrle.w	lr, [sp, #4]
 8005d92:	1a30      	subs	r0, r6, r0
 8005d94:	42a8      	cmp	r0, r5
 8005d96:	9e01      	ldr	r6, [sp, #4]
 8005d98:	9700      	str	r7, [sp, #0]
 8005d9a:	bf88      	it	hi
 8005d9c:	4628      	movhi	r0, r5
 8005d9e:	1986      	adds	r6, r0, r6
 8005da0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005da2:	2800      	cmp	r0, #0
 8005da4:	f000 810a 	beq.w	8005fbc <forward_ap+0x2e0>
 8005da8:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8005dac:	fb04 f70e 	mul.w	r7, r4, lr
 8005db0:	f8cd b008 	str.w	fp, [sp, #8]
 8005db4:	ebae 0506 	sub.w	r5, lr, r6
 8005db8:	9712      	str	r7, [sp, #72]	; 0x48
 8005dba:	9511      	str	r5, [sp, #68]	; 0x44
 8005dbc:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005dc0:	9407      	str	r4, [sp, #28]
 8005dc2:	9306      	str	r3, [sp, #24]
 8005dc4:	920b      	str	r2, [sp, #44]	; 0x2c
 8005dc6:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005dca:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8005dce:	9608      	str	r6, [sp, #32]
 8005dd0:	9b00      	ldr	r3, [sp, #0]
 8005dd2:	9a07      	ldr	r2, [sp, #28]
 8005dd4:	9800      	ldr	r0, [sp, #0]
 8005dd6:	9d00      	ldr	r5, [sp, #0]
 8005dd8:	425b      	negs	r3, r3
 8005dda:	9b06      	ldr	r3, [sp, #24]
 8005ddc:	bfcc      	ite	gt
 8005dde:	f04f 0e00 	movgt.w	lr, #0
 8005de2:	f8dd e000 	ldrle.w	lr, [sp]
 8005de6:	1a10      	subs	r0, r2, r0
 8005de8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005dea:	4298      	cmp	r0, r3
 8005dec:	9203      	str	r2, [sp, #12]
 8005dee:	bf88      	it	hi
 8005df0:	4618      	movhi	r0, r3
 8005df2:	1945      	adds	r5, r0, r5
 8005df4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005df6:	ebae 0405 	sub.w	r4, lr, r5
 8005dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	eba5 080e 	sub.w	r8, r5, lr
 8005e02:	4344      	muls	r4, r0
 8005e04:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005e06:	fb08 f801 	mul.w	r8, r8, r1
 8005e0a:	4470      	add	r0, lr
 8005e0c:	4348      	muls	r0, r1
 8005e0e:	eb03 0680 	add.w	r6, r3, r0, lsl #2
 8005e12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e14:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	bf14      	ite	ne
 8005e1c:	f8dd a050 	ldrne.w	sl, [sp, #80]	; 0x50
 8005e20:	46a2      	moveq	sl, r4
 8005e22:	b189      	cbz	r1, 8005e48 <forward_ap+0x16c>
 8005e24:	f011 0003 	ands.w	r0, r1, #3
 8005e28:	464b      	mov	r3, r9
 8005e2a:	d003      	beq.n	8005e34 <forward_ap+0x158>
 8005e2c:	1e40      	subs	r0, r0, #1
 8005e2e:	f843 2b04 	str.w	r2, [r3], #4
 8005e32:	d1fb      	bne.n	8005e2c <forward_ap+0x150>
 8005e34:	0888      	lsrs	r0, r1, #2
 8005e36:	d007      	beq.n	8005e48 <forward_ap+0x16c>
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	1e40      	subs	r0, r0, #1
 8005e3c:	605a      	str	r2, [r3, #4]
 8005e3e:	609a      	str	r2, [r3, #8]
 8005e40:	60da      	str	r2, [r3, #12]
 8005e42:	f103 0310 	add.w	r3, r3, #16
 8005e46:	d1f7      	bne.n	8005e38 <forward_ap+0x15c>
 8005e48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e4a:	9b08      	ldr	r3, [sp, #32]
 8005e4c:	4298      	cmp	r0, r3
 8005e4e:	f280 80a3 	bge.w	8005f98 <forward_ap+0x2bc>
 8005e52:	eba5 0e0e 	sub.w	lr, r5, lr
 8005e56:	1a1b      	subs	r3, r3, r0
 8005e58:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 8005e5c:	4694      	mov	ip, r2
 8005e5e:	9410      	str	r4, [sp, #64]	; 0x40
 8005e60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e62:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005e64:	46b6      	mov	lr, r6
 8005e66:	eb0e 0588 	add.w	r5, lr, r8, lsl #2
 8005e6a:	4494      	add	ip, r2
 8005e6c:	4560      	cmp	r0, ip
 8005e6e:	bf0c      	ite	eq
 8005e70:	4654      	moveq	r4, sl
 8005e72:	2400      	movne	r4, #0
 8005e74:	45ae      	cmp	lr, r5
 8005e76:	d24c      	bcs.n	8005f12 <forward_ap+0x236>
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2900      	cmp	r1, #0
 8005e7c:	d045      	beq.n	8005f0a <forward_ap+0x22e>
 8005e7e:	f011 0003 	ands.w	r0, r1, #3
 8005e82:	4677      	mov	r7, lr
 8005e84:	46cb      	mov	fp, r9
 8005e86:	d010      	beq.n	8005eaa <forward_ap+0x1ce>
 8005e88:	45f1      	cmp	r9, lr
 8005e8a:	ed97 0a00 	vldr	s0, [r7]
 8005e8e:	bf1c      	itt	ne
 8005e90:	eddb 0a00 	vldrne	s1, [fp]
 8005e94:	ee30 0a80 	vaddne.f32	s0, s1, s0
 8005e98:	1c52      	adds	r2, r2, #1
 8005e9a:	1e40      	subs	r0, r0, #1
 8005e9c:	1d3f      	adds	r7, r7, #4
 8005e9e:	ed8b 0a00 	vstr	s0, [fp]
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	f10b 0b04 	add.w	fp, fp, #4
 8005ea8:	d1ee      	bne.n	8005e88 <forward_ap+0x1ac>
 8005eaa:	0888      	lsrs	r0, r1, #2
 8005eac:	d02d      	beq.n	8005f0a <forward_ap+0x22e>
 8005eae:	eb0e 0782 	add.w	r7, lr, r2, lsl #2
 8005eb2:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8005eb6:	45f1      	cmp	r9, lr
 8005eb8:	edd7 1a00 	vldr	s3, [r7]
 8005ebc:	bf1c      	itt	ne
 8005ebe:	ed92 0a00 	vldrne	s0, [r2]
 8005ec2:	ee70 1a21 	vaddne.f32	s3, s0, s3
 8005ec6:	edc2 1a00 	vstr	s3, [r2]
 8005eca:	edd7 1a01 	vldr	s3, [r7, #4]
 8005ece:	bf1c      	itt	ne
 8005ed0:	edd2 0a01 	vldrne	s1, [r2, #4]
 8005ed4:	ee70 1aa1 	vaddne.f32	s3, s1, s3
 8005ed8:	edc2 1a01 	vstr	s3, [r2, #4]
 8005edc:	ed97 1a02 	vldr	s2, [r7, #8]
 8005ee0:	bf1c      	itt	ne
 8005ee2:	ed92 0a02 	vldrne	s0, [r2, #8]
 8005ee6:	ee30 1a01 	vaddne.f32	s2, s0, s2
 8005eea:	ed82 1a02 	vstr	s2, [r2, #8]
 8005eee:	edd7 1a03 	vldr	s3, [r7, #12]
 8005ef2:	bf1c      	itt	ne
 8005ef4:	edd2 0a03 	vldrne	s1, [r2, #12]
 8005ef8:	ee70 1aa1 	vaddne.f32	s3, s1, s3
 8005efc:	edc2 1a03 	vstr	s3, [r2, #12]
 8005f00:	1e40      	subs	r0, r0, #1
 8005f02:	3210      	adds	r2, #16
 8005f04:	3710      	adds	r7, #16
 8005f06:	2800      	cmp	r0, #0
 8005f08:	d1d5      	bne.n	8005eb6 <forward_ap+0x1da>
 8005f0a:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 8005f0e:	45ae      	cmp	lr, r5
 8005f10:	d3b2      	bcc.n	8005e78 <forward_ap+0x19c>
 8005f12:	2c00      	cmp	r4, #0
 8005f14:	d03a      	beq.n	8005f8c <forward_ap+0x2b0>
 8005f16:	ee00 4a10 	vmov	s0, r4
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8005f20:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005f24:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8005f28:	b381      	cbz	r1, 8005f8c <forward_ap+0x2b0>
 8005f2a:	f011 0003 	ands.w	r0, r1, #3
 8005f2e:	464c      	mov	r4, r9
 8005f30:	f000 800b 	beq.w	8005f4a <forward_ap+0x26e>
 8005f34:	edd4 0a00 	vldr	s1, [r4]
 8005f38:	1c52      	adds	r2, r2, #1
 8005f3a:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005f3e:	1e40      	subs	r0, r0, #1
 8005f40:	edc4 0a00 	vstr	s1, [r4]
 8005f44:	f104 0404 	add.w	r4, r4, #4
 8005f48:	d1f4      	bne.n	8005f34 <forward_ap+0x258>
 8005f4a:	0888      	lsrs	r0, r1, #2
 8005f4c:	f000 801e 	beq.w	8005f8c <forward_ap+0x2b0>
 8005f50:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8005f54:	edd2 0a00 	vldr	s1, [r2]
 8005f58:	1e40      	subs	r0, r0, #1
 8005f5a:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005f5e:	edc2 0a00 	vstr	s1, [r2]
 8005f62:	ed92 1a01 	vldr	s2, [r2, #4]
 8005f66:	ee21 1a00 	vmul.f32	s2, s2, s0
 8005f6a:	ed82 1a01 	vstr	s2, [r2, #4]
 8005f6e:	edd2 0a02 	vldr	s1, [r2, #8]
 8005f72:	ed92 1a03 	vldr	s2, [r2, #12]
 8005f76:	ee60 1a80 	vmul.f32	s3, s1, s0
 8005f7a:	ee61 0a00 	vmul.f32	s1, s2, s0
 8005f7e:	edc2 1a02 	vstr	s3, [r2, #8]
 8005f82:	edc2 0a03 	vstr	s1, [r2, #12]
 8005f86:	f102 0210 	add.w	r2, r2, #16
 8005f8a:	d1e3      	bne.n	8005f54 <forward_ap+0x278>
 8005f8c:	1e5b      	subs	r3, r3, #1
 8005f8e:	9803      	ldr	r0, [sp, #12]
 8005f90:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8005f94:	f47f af64 	bne.w	8005e60 <forward_ap+0x184>
 8005f98:	9a00      	ldr	r2, [sp, #0]
 8005f9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f9c:	9c02      	ldr	r4, [sp, #8]
 8005f9e:	eb09 0981 	add.w	r9, r9, r1, lsl #2
 8005fa2:	189a      	adds	r2, r3, r2
 8005fa4:	9200      	str	r2, [sp, #0]
 8005fa6:	1e64      	subs	r4, r4, #1
 8005fa8:	9402      	str	r4, [sp, #8]
 8005faa:	f47f af11 	bne.w	8005dd0 <forward_ap+0xf4>
 8005fae:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8005fb2:	9c07      	ldr	r4, [sp, #28]
 8005fb4:	9b06      	ldr	r3, [sp, #24]
 8005fb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fb8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005fbc:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005fc0:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8005fc2:	f8dd e010 	ldr.w	lr, [sp, #16]
 8005fc6:	44b4      	add	ip, r6
 8005fc8:	f8cd c004 	str.w	ip, [sp, #4]
 8005fcc:	f1be 0e01 	subs.w	lr, lr, #1
 8005fd0:	f8cd e010 	str.w	lr, [sp, #16]
 8005fd4:	f47f aed0 	bne.w	8005d78 <forward_ap+0x9c>
 8005fd8:	b017      	add	sp, #92	; 0x5c
 8005fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005fe0 <ai_array_fmt_name>:
 8005fe0:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005fe4:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005fe8:	d062      	beq.n	80060b0 <ai_array_fmt_name+0xd0>
 8005fea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005fee:	1a89      	subs	r1, r1, r2
 8005ff0:	f000 8094 	beq.w	800611c <ai_array_fmt_name+0x13c>
 8005ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ff8:	1a89      	subs	r1, r1, r2
 8005ffa:	d071      	beq.n	80060e0 <ai_array_fmt_name+0x100>
 8005ffc:	1a89      	subs	r1, r1, r2
 8005ffe:	d063      	beq.n	80060c8 <ai_array_fmt_name+0xe8>
 8006000:	1fc9      	subs	r1, r1, #7
 8006002:	f000 808e 	beq.w	8006122 <ai_array_fmt_name+0x142>
 8006006:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800600a:	1a89      	subs	r1, r1, r2
 800600c:	d05f      	beq.n	80060ce <ai_array_fmt_name+0xee>
 800600e:	390f      	subs	r1, #15
 8006010:	f000 808a 	beq.w	8006128 <ai_array_fmt_name+0x148>
 8006014:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8006018:	1a89      	subs	r1, r1, r2
 800601a:	d05b      	beq.n	80060d4 <ai_array_fmt_name+0xf4>
 800601c:	391f      	subs	r1, #31
 800601e:	f000 8086 	beq.w	800612e <ai_array_fmt_name+0x14e>
 8006022:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8006026:	1a89      	subs	r1, r1, r2
 8006028:	d057      	beq.n	80060da <ai_array_fmt_name+0xfa>
 800602a:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 8006600 <.text_15>
 800602e:	1a89      	subs	r1, r1, r2
 8006030:	f000 808f 	beq.w	8006152 <ai_array_fmt_name+0x172>
 8006034:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006038:	1a89      	subs	r1, r1, r2
 800603a:	f000 8087 	beq.w	800614c <ai_array_fmt_name+0x16c>
 800603e:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 8006604 <.text_16>
 8006042:	1a89      	subs	r1, r1, r2
 8006044:	d05e      	beq.n	8006104 <ai_array_fmt_name+0x124>
 8006046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800604a:	1a89      	subs	r1, r1, r2
 800604c:	d057      	beq.n	80060fe <ai_array_fmt_name+0x11e>
 800604e:	1a89      	subs	r1, r1, r2
 8006050:	d049      	beq.n	80060e6 <ai_array_fmt_name+0x106>
 8006052:	1fc9      	subs	r1, r1, #7
 8006054:	d059      	beq.n	800610a <ai_array_fmt_name+0x12a>
 8006056:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800605a:	1a89      	subs	r1, r1, r2
 800605c:	d046      	beq.n	80060ec <ai_array_fmt_name+0x10c>
 800605e:	390f      	subs	r1, #15
 8006060:	d056      	beq.n	8006110 <ai_array_fmt_name+0x130>
 8006062:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8006066:	1a89      	subs	r1, r1, r2
 8006068:	d043      	beq.n	80060f2 <ai_array_fmt_name+0x112>
 800606a:	391f      	subs	r1, #31
 800606c:	d053      	beq.n	8006116 <ai_array_fmt_name+0x136>
 800606e:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8006072:	1a89      	subs	r1, r1, r2
 8006074:	d040      	beq.n	80060f8 <ai_array_fmt_name+0x118>
 8006076:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 8006600 <.text_15>
 800607a:	1a89      	subs	r1, r1, r2
 800607c:	d063      	beq.n	8006146 <ai_array_fmt_name+0x166>
 800607e:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006082:	1a89      	subs	r1, r1, r2
 8006084:	d05c      	beq.n	8006140 <ai_array_fmt_name+0x160>
 8006086:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 8006608 <.text_17>
 800608a:	1a89      	subs	r1, r1, r2
 800608c:	d019      	beq.n	80060c2 <ai_array_fmt_name+0xe2>
 800608e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006092:	1a89      	subs	r1, r1, r2
 8006094:	d00f      	beq.n	80060b6 <ai_array_fmt_name+0xd6>
 8006096:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800609a:	1a89      	subs	r1, r1, r2
 800609c:	d00e      	beq.n	80060bc <ai_array_fmt_name+0xdc>
 800609e:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 800660c <.text_18>
 80060a2:	1a89      	subs	r1, r1, r2
 80060a4:	d049      	beq.n	800613a <ai_array_fmt_name+0x15a>
 80060a6:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80060aa:	1a89      	subs	r1, r1, r2
 80060ac:	d042      	beq.n	8006134 <ai_array_fmt_name+0x154>
 80060ae:	e053      	b.n	8006158 <ai_array_fmt_name+0x178>
 80060b0:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 80060b4:	4770      	bx	lr
 80060b6:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 80060ba:	4770      	bx	lr
 80060bc:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 80060c0:	4770      	bx	lr
 80060c2:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 80060c6:	4770      	bx	lr
 80060c8:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 80060cc:	4770      	bx	lr
 80060ce:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 80060d2:	4770      	bx	lr
 80060d4:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 80060d8:	4770      	bx	lr
 80060da:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 80060de:	4770      	bx	lr
 80060e0:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 80060e4:	4770      	bx	lr
 80060e6:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80060ea:	4770      	bx	lr
 80060ec:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80060f0:	4770      	bx	lr
 80060f2:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80060f6:	4770      	bx	lr
 80060f8:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80060fc:	4770      	bx	lr
 80060fe:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8006102:	4770      	bx	lr
 8006104:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8006108:	4770      	bx	lr
 800610a:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 800610e:	4770      	bx	lr
 8006110:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8006114:	4770      	bx	lr
 8006116:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 800611a:	4770      	bx	lr
 800611c:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8006120:	4770      	bx	lr
 8006122:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 8006126:	4770      	bx	lr
 8006128:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 800612c:	4770      	bx	lr
 800612e:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 8006132:	4770      	bx	lr
 8006134:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 8006138:	4770      	bx	lr
 800613a:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 800613e:	4770      	bx	lr
 8006140:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 8006144:	4770      	bx	lr
 8006146:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 800614a:	4770      	bx	lr
 800614c:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8006150:	4770      	bx	lr
 8006152:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 8006156:	4770      	bx	lr
 8006158:	f36f 000d 	bfc	r0, #0, #14
 800615c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006160:	2840      	cmp	r0, #64	; 0x40
 8006162:	d009      	beq.n	8006178 <ai_array_fmt_name+0x198>
 8006164:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 8006610 <.text_19>
 8006168:	4288      	cmp	r0, r1
 800616a:	d00b      	beq.n	8006184 <ai_array_fmt_name+0x1a4>
 800616c:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 8006614 <.text_20>
 8006170:	4288      	cmp	r0, r1
 8006172:	d004      	beq.n	800617e <ai_array_fmt_name+0x19e>
 8006174:	a07a      	add	r0, pc, #488	; (adr r0, 8006360 <.text_8>)
 8006176:	4770      	bx	lr
 8006178:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 800617c:	4770      	bx	lr
 800617e:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 8006182:	4770      	bx	lr
 8006184:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 8006188:	4770      	bx	lr

0800618a <ai_array_fmt_exported>:
 800618a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800618e:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8006192:	d068      	beq.n	8006266 <ai_array_fmt_exported+0xdc>
 8006194:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006198:	1a89      	subs	r1, r1, r2
 800619a:	d064      	beq.n	8006266 <ai_array_fmt_exported+0xdc>
 800619c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061a0:	1a89      	subs	r1, r1, r2
 80061a2:	d062      	beq.n	800626a <ai_array_fmt_exported+0xe0>
 80061a4:	1a89      	subs	r1, r1, r2
 80061a6:	d05e      	beq.n	8006266 <ai_array_fmt_exported+0xdc>
 80061a8:	1fc9      	subs	r1, r1, #7
 80061aa:	d05c      	beq.n	8006266 <ai_array_fmt_exported+0xdc>
 80061ac:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80061b0:	1a89      	subs	r1, r1, r2
 80061b2:	d058      	beq.n	8006266 <ai_array_fmt_exported+0xdc>
 80061b4:	390f      	subs	r1, #15
 80061b6:	d056      	beq.n	8006266 <ai_array_fmt_exported+0xdc>
 80061b8:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80061bc:	1a89      	subs	r1, r1, r2
 80061be:	d054      	beq.n	800626a <ai_array_fmt_exported+0xe0>
 80061c0:	391f      	subs	r1, #31
 80061c2:	d052      	beq.n	800626a <ai_array_fmt_exported+0xe0>
 80061c4:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80061c8:	1a89      	subs	r1, r1, r2
 80061ca:	d04e      	beq.n	800626a <ai_array_fmt_exported+0xe0>
 80061cc:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 8006600 <.text_15>
 80061d0:	1a89      	subs	r1, r1, r2
 80061d2:	d04a      	beq.n	800626a <ai_array_fmt_exported+0xe0>
 80061d4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80061d8:	1a89      	subs	r1, r1, r2
 80061da:	d046      	beq.n	800626a <ai_array_fmt_exported+0xe0>
 80061dc:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 8006604 <.text_16>
 80061e0:	1a89      	subs	r1, r1, r2
 80061e2:	d040      	beq.n	8006266 <ai_array_fmt_exported+0xdc>
 80061e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061e8:	1a89      	subs	r1, r1, r2
 80061ea:	d03e      	beq.n	800626a <ai_array_fmt_exported+0xe0>
 80061ec:	1a89      	subs	r1, r1, r2
 80061ee:	d03a      	beq.n	8006266 <ai_array_fmt_exported+0xdc>
 80061f0:	1fc9      	subs	r1, r1, #7
 80061f2:	d038      	beq.n	8006266 <ai_array_fmt_exported+0xdc>
 80061f4:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80061f8:	1a89      	subs	r1, r1, r2
 80061fa:	d034      	beq.n	8006266 <ai_array_fmt_exported+0xdc>
 80061fc:	390f      	subs	r1, #15
 80061fe:	d032      	beq.n	8006266 <ai_array_fmt_exported+0xdc>
 8006200:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8006204:	1a89      	subs	r1, r1, r2
 8006206:	d030      	beq.n	800626a <ai_array_fmt_exported+0xe0>
 8006208:	391f      	subs	r1, #31
 800620a:	d02e      	beq.n	800626a <ai_array_fmt_exported+0xe0>
 800620c:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8006210:	1a89      	subs	r1, r1, r2
 8006212:	d02a      	beq.n	800626a <ai_array_fmt_exported+0xe0>
 8006214:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8006600 <.text_15>
 8006218:	1a89      	subs	r1, r1, r2
 800621a:	d026      	beq.n	800626a <ai_array_fmt_exported+0xe0>
 800621c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006220:	1a89      	subs	r1, r1, r2
 8006222:	d022      	beq.n	800626a <ai_array_fmt_exported+0xe0>
 8006224:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 8006608 <.text_17>
 8006228:	1a89      	subs	r1, r1, r2
 800622a:	d01e      	beq.n	800626a <ai_array_fmt_exported+0xe0>
 800622c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006230:	1a89      	subs	r1, r1, r2
 8006232:	d018      	beq.n	8006266 <ai_array_fmt_exported+0xdc>
 8006234:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006238:	1a89      	subs	r1, r1, r2
 800623a:	d016      	beq.n	800626a <ai_array_fmt_exported+0xe0>
 800623c:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 800660c <.text_18>
 8006240:	1a89      	subs	r1, r1, r2
 8006242:	d012      	beq.n	800626a <ai_array_fmt_exported+0xe0>
 8006244:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006248:	1a89      	subs	r1, r1, r2
 800624a:	d00e      	beq.n	800626a <ai_array_fmt_exported+0xe0>
 800624c:	f36f 000d 	bfc	r0, #0, #14
 8006250:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006254:	2840      	cmp	r0, #64	; 0x40
 8006256:	bf1f      	itttt	ne
 8006258:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8006610 <.text_19>
 800625c:	4298      	cmpne	r0, r3
 800625e:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8006614 <.text_20>
 8006262:	4298      	cmpne	r0, r3
 8006264:	d101      	bne.n	800626a <ai_array_fmt_exported+0xe0>
 8006266:	2001      	movs	r0, #1
 8006268:	4770      	bx	lr
 800626a:	2000      	movs	r0, #0
 800626c:	4770      	bx	lr

0800626e <ai_array_fmt_valid>:
 800626e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8006272:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8006276:	d069      	beq.n	800634c <ai_array_fmt_valid+0xde>
 8006278:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800627c:	1a89      	subs	r1, r1, r2
 800627e:	d065      	beq.n	800634c <ai_array_fmt_valid+0xde>
 8006280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006284:	1a89      	subs	r1, r1, r2
 8006286:	d061      	beq.n	800634c <ai_array_fmt_valid+0xde>
 8006288:	1a89      	subs	r1, r1, r2
 800628a:	d05f      	beq.n	800634c <ai_array_fmt_valid+0xde>
 800628c:	1fc9      	subs	r1, r1, #7
 800628e:	d05d      	beq.n	800634c <ai_array_fmt_valid+0xde>
 8006290:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006294:	1a89      	subs	r1, r1, r2
 8006296:	d059      	beq.n	800634c <ai_array_fmt_valid+0xde>
 8006298:	390f      	subs	r1, #15
 800629a:	d057      	beq.n	800634c <ai_array_fmt_valid+0xde>
 800629c:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80062a0:	1a89      	subs	r1, r1, r2
 80062a2:	d053      	beq.n	800634c <ai_array_fmt_valid+0xde>
 80062a4:	391f      	subs	r1, #31
 80062a6:	d051      	beq.n	800634c <ai_array_fmt_valid+0xde>
 80062a8:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80062ac:	1a89      	subs	r1, r1, r2
 80062ae:	d04d      	beq.n	800634c <ai_array_fmt_valid+0xde>
 80062b0:	f8df 234c 	ldr.w	r2, [pc, #844]	; 8006600 <.text_15>
 80062b4:	1a89      	subs	r1, r1, r2
 80062b6:	d049      	beq.n	800634c <ai_array_fmt_valid+0xde>
 80062b8:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80062bc:	1a89      	subs	r1, r1, r2
 80062be:	d045      	beq.n	800634c <ai_array_fmt_valid+0xde>
 80062c0:	f8df 2340 	ldr.w	r2, [pc, #832]	; 8006604 <.text_16>
 80062c4:	1a89      	subs	r1, r1, r2
 80062c6:	d041      	beq.n	800634c <ai_array_fmt_valid+0xde>
 80062c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062cc:	1a89      	subs	r1, r1, r2
 80062ce:	d03d      	beq.n	800634c <ai_array_fmt_valid+0xde>
 80062d0:	1a89      	subs	r1, r1, r2
 80062d2:	d03b      	beq.n	800634c <ai_array_fmt_valid+0xde>
 80062d4:	1fc9      	subs	r1, r1, #7
 80062d6:	d039      	beq.n	800634c <ai_array_fmt_valid+0xde>
 80062d8:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80062dc:	1a89      	subs	r1, r1, r2
 80062de:	d035      	beq.n	800634c <ai_array_fmt_valid+0xde>
 80062e0:	390f      	subs	r1, #15
 80062e2:	d033      	beq.n	800634c <ai_array_fmt_valid+0xde>
 80062e4:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80062e8:	1a89      	subs	r1, r1, r2
 80062ea:	d02f      	beq.n	800634c <ai_array_fmt_valid+0xde>
 80062ec:	391f      	subs	r1, #31
 80062ee:	d02d      	beq.n	800634c <ai_array_fmt_valid+0xde>
 80062f0:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80062f4:	1a89      	subs	r1, r1, r2
 80062f6:	d029      	beq.n	800634c <ai_array_fmt_valid+0xde>
 80062f8:	f8df 2304 	ldr.w	r2, [pc, #772]	; 8006600 <.text_15>
 80062fc:	1a89      	subs	r1, r1, r2
 80062fe:	d025      	beq.n	800634c <ai_array_fmt_valid+0xde>
 8006300:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006304:	1a89      	subs	r1, r1, r2
 8006306:	d021      	beq.n	800634c <ai_array_fmt_valid+0xde>
 8006308:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 8006608 <.text_17>
 800630c:	1a89      	subs	r1, r1, r2
 800630e:	d01d      	beq.n	800634c <ai_array_fmt_valid+0xde>
 8006310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006314:	1a89      	subs	r1, r1, r2
 8006316:	d019      	beq.n	800634c <ai_array_fmt_valid+0xde>
 8006318:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800631c:	1a89      	subs	r1, r1, r2
 800631e:	d015      	beq.n	800634c <ai_array_fmt_valid+0xde>
 8006320:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 800660c <.text_18>
 8006324:	1a89      	subs	r1, r1, r2
 8006326:	d011      	beq.n	800634c <ai_array_fmt_valid+0xde>
 8006328:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800632c:	1a89      	subs	r1, r1, r2
 800632e:	bf1e      	ittt	ne
 8006330:	f36f 000d 	bfcne	r0, #0, #14
 8006334:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8006338:	2840      	cmpne	r0, #64	; 0x40
 800633a:	d007      	beq.n	800634c <ai_array_fmt_valid+0xde>
 800633c:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 8006610 <.text_19>
 8006340:	4298      	cmp	r0, r3
 8006342:	bf1c      	itt	ne
 8006344:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 8006614 <.text_20>
 8006348:	4298      	cmpne	r0, r3
 800634a:	d101      	bne.n	8006350 <ai_array_fmt_valid+0xe2>
 800634c:	2001      	movs	r0, #1
 800634e:	4770      	bx	lr
 8006350:	2000      	movs	r0, #0
 8006352:	4770      	bx	lr

08006354 <ai_array_fmt_get_formats>:
 8006354:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 8006618 <.text_21>
 8006358:	6001      	str	r1, [r0, #0]
 800635a:	201c      	movs	r0, #28
 800635c:	4770      	bx	lr
	...

08006360 <.text_8>:
 8006360:	00000000 	.word	0x00000000

08006364 <ai_buffer_fmt_name>:
 8006364:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8006368:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800636c:	d022      	beq.n	80063b4 <ai_buffer_fmt_name+0x50>
 800636e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006372:	1a89      	subs	r1, r1, r2
 8006374:	d039      	beq.n	80063ea <ai_buffer_fmt_name+0x86>
 8006376:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800637a:	1a89      	subs	r1, r1, r2
 800637c:	d020      	beq.n	80063c0 <ai_buffer_fmt_name+0x5c>
 800637e:	1fc9      	subs	r1, r1, #7
 8006380:	d036      	beq.n	80063f0 <ai_buffer_fmt_name+0x8c>
 8006382:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006386:	1a89      	subs	r1, r1, r2
 8006388:	d01d      	beq.n	80063c6 <ai_buffer_fmt_name+0x62>
 800638a:	390f      	subs	r1, #15
 800638c:	d033      	beq.n	80063f6 <ai_buffer_fmt_name+0x92>
 800638e:	4aa3      	ldr	r2, [pc, #652]	; (800661c <.text_22>)
 8006390:	1a89      	subs	r1, r1, r2
 8006392:	d021      	beq.n	80063d8 <ai_buffer_fmt_name+0x74>
 8006394:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006398:	1a89      	subs	r1, r1, r2
 800639a:	d017      	beq.n	80063cc <ai_buffer_fmt_name+0x68>
 800639c:	1fc9      	subs	r1, r1, #7
 800639e:	d01e      	beq.n	80063de <ai_buffer_fmt_name+0x7a>
 80063a0:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80063a4:	1a89      	subs	r1, r1, r2
 80063a6:	d014      	beq.n	80063d2 <ai_buffer_fmt_name+0x6e>
 80063a8:	390f      	subs	r1, #15
 80063aa:	d01b      	beq.n	80063e4 <ai_buffer_fmt_name+0x80>
 80063ac:	4a9c      	ldr	r2, [pc, #624]	; (8006620 <.text_23>)
 80063ae:	1a89      	subs	r1, r1, r2
 80063b0:	d003      	beq.n	80063ba <ai_buffer_fmt_name+0x56>
 80063b2:	e023      	b.n	80063fc <ai_buffer_fmt_name+0x98>
 80063b4:	f20f 3070 	addw	r0, pc, #880	; 0x370
 80063b8:	4770      	bx	lr
 80063ba:	f20f 3078 	addw	r0, pc, #888	; 0x378
 80063be:	4770      	bx	lr
 80063c0:	f20f 3094 	addw	r0, pc, #916	; 0x394
 80063c4:	4770      	bx	lr
 80063c6:	f20f 3098 	addw	r0, pc, #920	; 0x398
 80063ca:	4770      	bx	lr
 80063cc:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 80063d0:	4770      	bx	lr
 80063d2:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 80063d6:	4770      	bx	lr
 80063d8:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 80063dc:	4770      	bx	lr
 80063de:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 80063e2:	4770      	bx	lr
 80063e4:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 80063e8:	4770      	bx	lr
 80063ea:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 80063ee:	4770      	bx	lr
 80063f0:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 80063f4:	4770      	bx	lr
 80063f6:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 80063fa:	4770      	bx	lr
 80063fc:	0b80      	lsrs	r0, r0, #14
 80063fe:	0380      	lsls	r0, r0, #14
 8006400:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006404:	2840      	cmp	r0, #64	; 0x40
 8006406:	d007      	beq.n	8006418 <ai_buffer_fmt_name+0xb4>
 8006408:	4981      	ldr	r1, [pc, #516]	; (8006610 <.text_19>)
 800640a:	4288      	cmp	r0, r1
 800640c:	d00a      	beq.n	8006424 <ai_buffer_fmt_name+0xc0>
 800640e:	4981      	ldr	r1, [pc, #516]	; (8006614 <.text_20>)
 8006410:	4288      	cmp	r0, r1
 8006412:	d004      	beq.n	800641e <ai_buffer_fmt_name+0xba>
 8006414:	a079      	add	r0, pc, #484	; (adr r0, 80065fc <.text_14>)
 8006416:	4770      	bx	lr
 8006418:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 800641c:	4770      	bx	lr
 800641e:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 8006422:	4770      	bx	lr
 8006424:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 8006428:	4770      	bx	lr

0800642a <ai_buffer_fmt_valid>:
 800642a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800642e:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8006432:	d02d      	beq.n	8006490 <ai_buffer_fmt_valid+0x66>
 8006434:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006438:	1a89      	subs	r1, r1, r2
 800643a:	d029      	beq.n	8006490 <ai_buffer_fmt_valid+0x66>
 800643c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006440:	1a89      	subs	r1, r1, r2
 8006442:	d025      	beq.n	8006490 <ai_buffer_fmt_valid+0x66>
 8006444:	1fc9      	subs	r1, r1, #7
 8006446:	d023      	beq.n	8006490 <ai_buffer_fmt_valid+0x66>
 8006448:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800644c:	1a89      	subs	r1, r1, r2
 800644e:	d01f      	beq.n	8006490 <ai_buffer_fmt_valid+0x66>
 8006450:	390f      	subs	r1, #15
 8006452:	d01d      	beq.n	8006490 <ai_buffer_fmt_valid+0x66>
 8006454:	4a71      	ldr	r2, [pc, #452]	; (800661c <.text_22>)
 8006456:	1a89      	subs	r1, r1, r2
 8006458:	d01a      	beq.n	8006490 <ai_buffer_fmt_valid+0x66>
 800645a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800645e:	1a89      	subs	r1, r1, r2
 8006460:	d016      	beq.n	8006490 <ai_buffer_fmt_valid+0x66>
 8006462:	1fc9      	subs	r1, r1, #7
 8006464:	d014      	beq.n	8006490 <ai_buffer_fmt_valid+0x66>
 8006466:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800646a:	1a89      	subs	r1, r1, r2
 800646c:	d010      	beq.n	8006490 <ai_buffer_fmt_valid+0x66>
 800646e:	390f      	subs	r1, #15
 8006470:	d00e      	beq.n	8006490 <ai_buffer_fmt_valid+0x66>
 8006472:	4a6b      	ldr	r2, [pc, #428]	; (8006620 <.text_23>)
 8006474:	1a89      	subs	r1, r1, r2
 8006476:	bf1f      	itttt	ne
 8006478:	0b80      	lsrne	r0, r0, #14
 800647a:	0380      	lslne	r0, r0, #14
 800647c:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8006480:	2840      	cmpne	r0, #64	; 0x40
 8006482:	d005      	beq.n	8006490 <ai_buffer_fmt_valid+0x66>
 8006484:	4b62      	ldr	r3, [pc, #392]	; (8006610 <.text_19>)
 8006486:	4298      	cmp	r0, r3
 8006488:	bf1c      	itt	ne
 800648a:	4b62      	ldrne	r3, [pc, #392]	; (8006614 <.text_20>)
 800648c:	4298      	cmpne	r0, r3
 800648e:	d101      	bne.n	8006494 <ai_buffer_fmt_valid+0x6a>
 8006490:	2001      	movs	r0, #1
 8006492:	4770      	bx	lr
 8006494:	2000      	movs	r0, #0
 8006496:	4770      	bx	lr

08006498 <ai_buffer_fmt_get_formats>:
 8006498:	4962      	ldr	r1, [pc, #392]	; (8006624 <.text_24>)
 800649a:	6001      	str	r1, [r0, #0]
 800649c:	200c      	movs	r0, #12
 800649e:	4770      	bx	lr

080064a0 <ai_array_to_buffer_fmt>:
 80064a0:	4601      	mov	r1, r0
 80064a2:	2040      	movs	r0, #64	; 0x40
 80064a4:	f3c1 4243 	ubfx	r2, r1, #17, #4
 80064a8:	2a02      	cmp	r2, #2
 80064aa:	d104      	bne.n	80064b6 <ai_array_to_buffer_fmt+0x16>
 80064ac:	485e      	ldr	r0, [pc, #376]	; (8006628 <.text_25>)
 80064ae:	4008      	ands	r0, r1
 80064b0:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 80064b4:	e037      	b.n	8006526 <ai_array_to_buffer_fmt+0x86>
 80064b6:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 80064ba:	4b55      	ldr	r3, [pc, #340]	; (8006610 <.text_19>)
 80064bc:	1ad2      	subs	r2, r2, r3
 80064be:	d02d      	beq.n	800651c <ai_array_to_buffer_fmt+0x7c>
 80064c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064c4:	1ad2      	subs	r2, r2, r3
 80064c6:	d01b      	beq.n	8006500 <ai_array_to_buffer_fmt+0x60>
 80064c8:	1fd2      	subs	r2, r2, #7
 80064ca:	d029      	beq.n	8006520 <ai_array_to_buffer_fmt+0x80>
 80064cc:	f240 33f9 	movw	r3, #1017	; 0x3f9
 80064d0:	1ad2      	subs	r2, r2, r3
 80064d2:	d017      	beq.n	8006504 <ai_array_to_buffer_fmt+0x64>
 80064d4:	3a0f      	subs	r2, #15
 80064d6:	d025      	beq.n	8006524 <ai_array_to_buffer_fmt+0x84>
 80064d8:	4b50      	ldr	r3, [pc, #320]	; (800661c <.text_22>)
 80064da:	1ad2      	subs	r2, r2, r3
 80064dc:	d018      	beq.n	8006510 <ai_array_to_buffer_fmt+0x70>
 80064de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064e2:	1ad2      	subs	r2, r2, r3
 80064e4:	d010      	beq.n	8006508 <ai_array_to_buffer_fmt+0x68>
 80064e6:	1fd2      	subs	r2, r2, #7
 80064e8:	d014      	beq.n	8006514 <ai_array_to_buffer_fmt+0x74>
 80064ea:	f240 33f9 	movw	r3, #1017	; 0x3f9
 80064ee:	1ad2      	subs	r2, r2, r3
 80064f0:	d00c      	beq.n	800650c <ai_array_to_buffer_fmt+0x6c>
 80064f2:	3a0f      	subs	r2, #15
 80064f4:	d010      	beq.n	8006518 <ai_array_to_buffer_fmt+0x78>
 80064f6:	4b4a      	ldr	r3, [pc, #296]	; (8006620 <.text_23>)
 80064f8:	1ad2      	subs	r2, r2, r3
 80064fa:	d114      	bne.n	8006526 <ai_array_to_buffer_fmt+0x86>
 80064fc:	484b      	ldr	r0, [pc, #300]	; (800662c <.text_26>)
 80064fe:	e012      	b.n	8006526 <ai_array_to_buffer_fmt+0x86>
 8006500:	484b      	ldr	r0, [pc, #300]	; (8006630 <.text_27>)
 8006502:	e010      	b.n	8006526 <ai_array_to_buffer_fmt+0x86>
 8006504:	484b      	ldr	r0, [pc, #300]	; (8006634 <.text_28>)
 8006506:	e00e      	b.n	8006526 <ai_array_to_buffer_fmt+0x86>
 8006508:	484b      	ldr	r0, [pc, #300]	; (8006638 <.text_29>)
 800650a:	e00c      	b.n	8006526 <ai_array_to_buffer_fmt+0x86>
 800650c:	484b      	ldr	r0, [pc, #300]	; (800663c <.text_30>)
 800650e:	e00a      	b.n	8006526 <ai_array_to_buffer_fmt+0x86>
 8006510:	4840      	ldr	r0, [pc, #256]	; (8006614 <.text_20>)
 8006512:	e008      	b.n	8006526 <ai_array_to_buffer_fmt+0x86>
 8006514:	484a      	ldr	r0, [pc, #296]	; (8006640 <.text_31>)
 8006516:	e006      	b.n	8006526 <ai_array_to_buffer_fmt+0x86>
 8006518:	484a      	ldr	r0, [pc, #296]	; (8006644 <.text_32>)
 800651a:	e004      	b.n	8006526 <ai_array_to_buffer_fmt+0x86>
 800651c:	4618      	mov	r0, r3
 800651e:	e002      	b.n	8006526 <ai_array_to_buffer_fmt+0x86>
 8006520:	4849      	ldr	r0, [pc, #292]	; (8006648 <.text_33>)
 8006522:	e000      	b.n	8006526 <ai_array_to_buffer_fmt+0x86>
 8006524:	4849      	ldr	r0, [pc, #292]	; (800664c <.text_34>)
 8006526:	004a      	lsls	r2, r1, #1
 8006528:	bf4c      	ite	mi
 800652a:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 800652e:	2200      	movpl	r2, #0
 8006530:	4310      	orrs	r0, r2
 8006532:	008a      	lsls	r2, r1, #2
 8006534:	bf4c      	ite	mi
 8006536:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 800653a:	2200      	movpl	r2, #0
 800653c:	4310      	orrs	r0, r2
 800653e:	0109      	lsls	r1, r1, #4
 8006540:	bf4c      	ite	mi
 8006542:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 8006546:	2100      	movpl	r1, #0
 8006548:	4308      	orrs	r0, r1
 800654a:	4770      	bx	lr

0800654c <ai_buffer_to_array_fmt>:
 800654c:	4602      	mov	r2, r0
 800654e:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 8006552:	3840      	subs	r0, #64	; 0x40
 8006554:	d022      	beq.n	800659c <ai_buffer_to_array_fmt+0x50>
 8006556:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800655a:	1a40      	subs	r0, r0, r1
 800655c:	d030      	beq.n	80065c0 <ai_buffer_to_array_fmt+0x74>
 800655e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006562:	1a40      	subs	r0, r0, r1
 8006564:	d01e      	beq.n	80065a4 <ai_buffer_to_array_fmt+0x58>
 8006566:	1fc0      	subs	r0, r0, #7
 8006568:	d02c      	beq.n	80065c4 <ai_buffer_to_array_fmt+0x78>
 800656a:	f240 31f9 	movw	r1, #1017	; 0x3f9
 800656e:	1a40      	subs	r0, r0, r1
 8006570:	d01a      	beq.n	80065a8 <ai_buffer_to_array_fmt+0x5c>
 8006572:	380f      	subs	r0, #15
 8006574:	d028      	beq.n	80065c8 <ai_buffer_to_array_fmt+0x7c>
 8006576:	4929      	ldr	r1, [pc, #164]	; (800661c <.text_22>)
 8006578:	1a40      	subs	r0, r0, r1
 800657a:	d01b      	beq.n	80065b4 <ai_buffer_to_array_fmt+0x68>
 800657c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006580:	1a40      	subs	r0, r0, r1
 8006582:	d013      	beq.n	80065ac <ai_buffer_to_array_fmt+0x60>
 8006584:	1fc0      	subs	r0, r0, #7
 8006586:	d017      	beq.n	80065b8 <ai_buffer_to_array_fmt+0x6c>
 8006588:	f240 31f9 	movw	r1, #1017	; 0x3f9
 800658c:	1a40      	subs	r0, r0, r1
 800658e:	d00f      	beq.n	80065b0 <ai_buffer_to_array_fmt+0x64>
 8006590:	380f      	subs	r0, #15
 8006592:	d013      	beq.n	80065bc <ai_buffer_to_array_fmt+0x70>
 8006594:	4922      	ldr	r1, [pc, #136]	; (8006620 <.text_23>)
 8006596:	1a40      	subs	r0, r0, r1
 8006598:	d002      	beq.n	80065a0 <ai_buffer_to_array_fmt+0x54>
 800659a:	e017      	b.n	80065cc <ai_buffer_to_array_fmt+0x80>
 800659c:	2040      	movs	r0, #64	; 0x40
 800659e:	e01f      	b.n	80065e0 <ai_buffer_to_array_fmt+0x94>
 80065a0:	4822      	ldr	r0, [pc, #136]	; (800662c <.text_26>)
 80065a2:	e01d      	b.n	80065e0 <ai_buffer_to_array_fmt+0x94>
 80065a4:	4822      	ldr	r0, [pc, #136]	; (8006630 <.text_27>)
 80065a6:	e01b      	b.n	80065e0 <ai_buffer_to_array_fmt+0x94>
 80065a8:	4822      	ldr	r0, [pc, #136]	; (8006634 <.text_28>)
 80065aa:	e019      	b.n	80065e0 <ai_buffer_to_array_fmt+0x94>
 80065ac:	4822      	ldr	r0, [pc, #136]	; (8006638 <.text_29>)
 80065ae:	e017      	b.n	80065e0 <ai_buffer_to_array_fmt+0x94>
 80065b0:	4822      	ldr	r0, [pc, #136]	; (800663c <.text_30>)
 80065b2:	e015      	b.n	80065e0 <ai_buffer_to_array_fmt+0x94>
 80065b4:	4817      	ldr	r0, [pc, #92]	; (8006614 <.text_20>)
 80065b6:	e013      	b.n	80065e0 <ai_buffer_to_array_fmt+0x94>
 80065b8:	4821      	ldr	r0, [pc, #132]	; (8006640 <.text_31>)
 80065ba:	e011      	b.n	80065e0 <ai_buffer_to_array_fmt+0x94>
 80065bc:	4821      	ldr	r0, [pc, #132]	; (8006644 <.text_32>)
 80065be:	e00f      	b.n	80065e0 <ai_buffer_to_array_fmt+0x94>
 80065c0:	4813      	ldr	r0, [pc, #76]	; (8006610 <.text_19>)
 80065c2:	e00d      	b.n	80065e0 <ai_buffer_to_array_fmt+0x94>
 80065c4:	4820      	ldr	r0, [pc, #128]	; (8006648 <.text_33>)
 80065c6:	e00b      	b.n	80065e0 <ai_buffer_to_array_fmt+0x94>
 80065c8:	4820      	ldr	r0, [pc, #128]	; (800664c <.text_34>)
 80065ca:	e009      	b.n	80065e0 <ai_buffer_to_array_fmt+0x94>
 80065cc:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 80065d0:	f3c2 000d 	ubfx	r0, r2, #0, #14
 80065d4:	2900      	cmp	r1, #0
 80065d6:	bf14      	ite	ne
 80065d8:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 80065dc:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 80065e0:	0051      	lsls	r1, r2, #1
 80065e2:	bf48      	it	mi
 80065e4:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 80065e8:	0093      	lsls	r3, r2, #2
 80065ea:	bf48      	it	mi
 80065ec:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 80065f0:	0111      	lsls	r1, r2, #4
 80065f2:	bf48      	it	mi
 80065f4:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 80065f8:	4770      	bx	lr
	...

080065fc <.text_14>:
 80065fc:	00000000 	.word	0x00000000

08006600 <.text_15>:
 8006600:	002be80f 	.word	0x002be80f

08006604 <.text_16>:
 8006604:	003bf7f1 	.word	0x003bf7f1

08006608 <.text_17>:
 8006608:	00b9fff1 	.word	0x00b9fff1

0800660c <.text_18>:
 800660c:	004df000 	.word	0x004df000

08006610 <.text_19>:
 8006610:	00040040 	.word	0x00040040

08006614 <.text_20>:
 8006614:	00840040 	.word	0x00840040

08006618 <.text_21>:
 8006618:	080194c0 	.word	0x080194c0

0800661c <.text_22>:
 800661c:	007ff7f1 	.word	0x007ff7f1

08006620 <.text_23>:
 8006620:	00fe07f1 	.word	0x00fe07f1

08006624 <.text_24>:
 8006624:	08019530 	.word	0x08019530

08006628 <.text_25>:
 8006628:	00803fff 	.word	0x00803fff

0800662c <.text_26>:
 800662c:	01821040 	.word	0x01821040

08006630 <.text_27>:
 8006630:	00040440 	.word	0x00040440

08006634 <.text_28>:
 8006634:	00040840 	.word	0x00040840

08006638 <.text_29>:
 8006638:	00840440 	.word	0x00840440

0800663c <.text_30>:
 800663c:	00840840 	.word	0x00840840

08006640 <.text_31>:
 8006640:	00840447 	.word	0x00840447

08006644 <.text_32>:
 8006644:	0084084f 	.word	0x0084084f

08006648 <.text_33>:
 8006648:	00040447 	.word	0x00040447

0800664c <.text_34>:
 800664c:	0004084f 	.word	0x0004084f

08006650 <ai_array_get_byte_size>:
 8006650:	b909      	cbnz	r1, 8006656 <ai_array_get_byte_size+0x6>
 8006652:	2000      	movs	r0, #0
 8006654:	4770      	bx	lr
 8006656:	11c2      	asrs	r2, r0, #7
 8006658:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800665c:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8006660:	189b      	adds	r3, r3, r2
 8006662:	4359      	muls	r1, r3
 8006664:	ea4f 4c60 	mov.w	ip, r0, asr #17
 8006668:	f00c 0c0f 	and.w	ip, ip, #15
 800666c:	1543      	asrs	r3, r0, #21
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	1dc9      	adds	r1, r1, #7
 8006674:	08c9      	lsrs	r1, r1, #3
 8006676:	00c9      	lsls	r1, r1, #3
 8006678:	40d9      	lsrs	r1, r3
 800667a:	f1bc 0f04 	cmp.w	ip, #4
 800667e:	d00a      	beq.n	8006696 <ai_array_get_byte_size+0x46>
 8006680:	f1bc 0f08 	cmp.w	ip, #8
 8006684:	bf02      	ittt	eq
 8006686:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 800668a:	1882      	addeq	r2, r0, r2
 800668c:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8006690:	1dc9      	adds	r1, r1, #7
 8006692:	08c8      	lsrs	r0, r1, #3
 8006694:	4770      	bx	lr
 8006696:	f3c0 3082 	ubfx	r0, r0, #14, #3
 800669a:	1882      	adds	r2, r0, r2
 800669c:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 80066a0:	1dc9      	adds	r1, r1, #7
 80066a2:	08c8      	lsrs	r0, r1, #3
 80066a4:	4770      	bx	lr

080066a6 <ai_array_get_data_byte_size>:
 80066a6:	b909      	cbnz	r1, 80066ac <ai_array_get_data_byte_size+0x6>
 80066a8:	2000      	movs	r0, #0
 80066aa:	4770      	bx	lr
 80066ac:	11c2      	asrs	r2, r0, #7
 80066ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80066b2:	f3c0 3382 	ubfx	r3, r0, #14, #3
 80066b6:	189a      	adds	r2, r3, r2
 80066b8:	4351      	muls	r1, r2
 80066ba:	1540      	asrs	r0, r0, #21
 80066bc:	f000 0003 	and.w	r0, r0, #3
 80066c0:	1dc9      	adds	r1, r1, #7
 80066c2:	08c9      	lsrs	r1, r1, #3
 80066c4:	00c9      	lsls	r1, r1, #3
 80066c6:	40c1      	lsrs	r1, r0
 80066c8:	1dc9      	adds	r1, r1, #7
 80066ca:	08c8      	lsrs	r0, r1, #3
 80066cc:	4770      	bx	lr

080066ce <ai_array_get_elems_from_size>:
 80066ce:	b909      	cbnz	r1, 80066d4 <ai_array_get_elems_from_size+0x6>
 80066d0:	2000      	movs	r0, #0
 80066d2:	4770      	bx	lr
 80066d4:	1442      	asrs	r2, r0, #17
 80066d6:	00c9      	lsls	r1, r1, #3
 80066d8:	f002 020f 	and.w	r2, r2, #15
 80066dc:	2a04      	cmp	r2, #4
 80066de:	d002      	beq.n	80066e6 <ai_array_get_elems_from_size+0x18>
 80066e0:	2a08      	cmp	r2, #8
 80066e2:	d009      	beq.n	80066f8 <ai_array_get_elems_from_size+0x2a>
 80066e4:	e010      	b.n	8006708 <ai_array_get_elems_from_size+0x3a>
 80066e6:	11c3      	asrs	r3, r0, #7
 80066e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ec:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80066f0:	18d2      	adds	r2, r2, r3
 80066f2:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 80066f6:	e007      	b.n	8006708 <ai_array_get_elems_from_size+0x3a>
 80066f8:	11c2      	asrs	r2, r0, #7
 80066fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80066fe:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8006702:	189a      	adds	r2, r3, r2
 8006704:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 8006708:	1542      	asrs	r2, r0, #21
 800670a:	f002 0203 	and.w	r2, r2, #3
 800670e:	4091      	lsls	r1, r2
 8006710:	1dc9      	adds	r1, r1, #7
 8006712:	11c3      	asrs	r3, r0, #7
 8006714:	08c9      	lsrs	r1, r1, #3
 8006716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800671a:	f3c0 3082 	ubfx	r0, r0, #14, #3
 800671e:	00c9      	lsls	r1, r1, #3
 8006720:	18c0      	adds	r0, r0, r3
 8006722:	fbb1 f0f0 	udiv	r0, r1, r0
 8006726:	4770      	bx	lr

08006728 <.text_38>:
 8006728:	5f544d46 	.word	0x5f544d46
 800672c:	454e4f4e 	.word	0x454e4f4e
 8006730:	00          	.byte	0x00
 8006731:	00          	.byte	0x00
	...

08006734 <.text_39>:
 8006734:	5f544d46 	.word	0x5f544d46
 8006738:	414f4c46 	.word	0x414f4c46
 800673c:	0054      	.short	0x0054
	...

08006740 <.text_40>:
 8006740:	5f544d46 	.word	0x5f544d46
 8006744:	414f4c46 	.word	0x414f4c46
 8006748:	00343654 	.word	0x00343654

0800674c <.text_41>:
 800674c:	5f544d46 	.word	0x5f544d46
 8006750:	414f4c46 	.word	0x414f4c46
 8006754:	00363154 	.word	0x00363154

08006758 <.text_42>:
 8006758:	5f544d46 	.word	0x5f544d46
 800675c:	00003855 	.word	0x00003855

08006760 <.text_43>:
 8006760:	5f544d46 	.word	0x5f544d46
 8006764:	00363155 	.word	0x00363155

08006768 <.text_44>:
 8006768:	5f544d46 	.word	0x5f544d46
 800676c:	00323355 	.word	0x00323355

08006770 <.text_45>:
 8006770:	5f544d46 	.word	0x5f544d46
 8006774:	00343655 	.word	0x00343655

08006778 <.text_46>:
 8006778:	5f544d46 	.word	0x5f544d46
 800677c:	00003455 	.word	0x00003455

08006780 <.text_47>:
 8006780:	5f544d46 	.word	0x5f544d46
 8006784:	00003853 	.word	0x00003853

08006788 <.text_48>:
 8006788:	5f544d46 	.word	0x5f544d46
 800678c:	00363153 	.word	0x00363153

08006790 <.text_49>:
 8006790:	5f544d46 	.word	0x5f544d46
 8006794:	00323353 	.word	0x00323353

08006798 <.text_50>:
 8006798:	5f544d46 	.word	0x5f544d46
 800679c:	00343653 	.word	0x00343653

080067a0 <.text_51>:
 80067a0:	5f544d46 	.word	0x5f544d46
 80067a4:	00003453 	.word	0x00003453

080067a8 <.text_52>:
 80067a8:	5f544d46 	.word	0x5f544d46
 80067ac:	0051      	.short	0x0051
	...

080067b0 <.text_53>:
 80067b0:	5f544d46 	.word	0x5f544d46
 80067b4:	00003751 	.word	0x00003751

080067b8 <.text_54>:
 80067b8:	5f544d46 	.word	0x5f544d46
 80067bc:	00353151 	.word	0x00353151

080067c0 <.text_55>:
 80067c0:	5f544d46 	.word	0x5f544d46
 80067c4:	00313351 	.word	0x00313351

080067c8 <.text_56>:
 80067c8:	5f544d46 	.word	0x5f544d46
 80067cc:	00005155 	.word	0x00005155

080067d0 <.text_57>:
 80067d0:	5f544d46 	.word	0x5f544d46
 80067d4:	00375155 	.word	0x00375155

080067d8 <.text_58>:
 80067d8:	5f544d46 	.word	0x5f544d46
 80067dc:	35315155 	.word	0x35315155
 80067e0:	00          	.byte	0x00
 80067e1:	00          	.byte	0x00
	...

080067e4 <.text_59>:
 80067e4:	5f544d46 	.word	0x5f544d46
 80067e8:	31335155 	.word	0x31335155
 80067ec:	00          	.byte	0x00
 80067ed:	00          	.byte	0x00
	...

080067f0 <.text_60>:
 80067f0:	5f544d46 	.word	0x5f544d46
 80067f4:	3454554c 	.word	0x3454554c
 80067f8:	4f4c465f 	.word	0x4f4c465f
 80067fc:	00005441 	.word	0x00005441

08006800 <.text_61>:
 8006800:	5f544d46 	.word	0x5f544d46
 8006804:	3854554c 	.word	0x3854554c
 8006808:	4f4c465f 	.word	0x4f4c465f
 800680c:	00005441 	.word	0x00005441

08006810 <.text_62>:
 8006810:	5f544d46 	.word	0x5f544d46
 8006814:	3454554c 	.word	0x3454554c
 8006818:	3531515f 	.word	0x3531515f
 800681c:	00          	.byte	0x00
 800681d:	00          	.byte	0x00
	...

08006820 <.text_63>:
 8006820:	5f544d46 	.word	0x5f544d46
 8006824:	3854554c 	.word	0x3854554c
 8006828:	3531515f 	.word	0x3531515f
 800682c:	00          	.byte	0x00
 800682d:	00          	.byte	0x00
	...

08006830 <.text_64>:
 8006830:	5f544d46 	.word	0x5f544d46
 8006834:	3454554c 	.word	0x3454554c
 8006838:	3151555f 	.word	0x3151555f
 800683c:	0035      	.short	0x0035
	...

08006840 <.text_65>:
 8006840:	5f544d46 	.word	0x5f544d46
 8006844:	3854554c 	.word	0x3854554c
 8006848:	3151555f 	.word	0x3151555f
 800684c:	0035      	.short	0x0035
	...

08006850 <.text_66>:
 8006850:	415f4941 	.word	0x415f4941
 8006854:	59415252 	.word	0x59415252
 8006858:	524f465f 	.word	0x524f465f
 800685c:	5f54414d 	.word	0x5f54414d
 8006860:	454e4f4e 	.word	0x454e4f4e
 8006864:	00          	.byte	0x00
 8006865:	00          	.byte	0x00
	...

08006868 <.text_67>:
 8006868:	415f4941 	.word	0x415f4941
 800686c:	59415252 	.word	0x59415252
 8006870:	524f465f 	.word	0x524f465f
 8006874:	5f54414d 	.word	0x5f54414d
 8006878:	0051      	.short	0x0051
	...

0800687c <.text_68>:
 800687c:	415f4941 	.word	0x415f4941
 8006880:	59415252 	.word	0x59415252
 8006884:	524f465f 	.word	0x524f465f
 8006888:	5f54414d 	.word	0x5f54414d
 800688c:	00005155 	.word	0x00005155

08006890 <.text_69>:
 8006890:	425f4941 	.word	0x425f4941
 8006894:	45464655 	.word	0x45464655
 8006898:	4f465f52 	.word	0x4f465f52
 800689c:	54414d52 	.word	0x54414d52
 80068a0:	4e4f4e5f 	.word	0x4e4f4e5f
 80068a4:	0045      	.short	0x0045
	...

080068a8 <.text_70>:
 80068a8:	425f4941 	.word	0x425f4941
 80068ac:	45464655 	.word	0x45464655
 80068b0:	4f465f52 	.word	0x4f465f52
 80068b4:	54414d52 	.word	0x54414d52
 80068b8:	0000515f 	.word	0x0000515f

080068bc <.text_71>:
 80068bc:	425f4941 	.word	0x425f4941
 80068c0:	45464655 	.word	0x45464655
 80068c4:	4f465f52 	.word	0x4f465f52
 80068c8:	54414d52 	.word	0x54414d52
 80068cc:	0051555f 	.word	0x0051555f

080068d0 <ai_math_dot_array>:
 80068d0:	b530      	push	{r4, r5, lr}
 80068d2:	4604      	mov	r4, r0
 80068d4:	4608      	mov	r0, r1
 80068d6:	4611      	mov	r1, r2
 80068d8:	b081      	sub	sp, #4
 80068da:	461a      	mov	r2, r3
 80068dc:	2500      	movs	r5, #0
 80068de:	9500      	str	r5, [sp, #0]
 80068e0:	466b      	mov	r3, sp
 80068e2:	f001 fd2e 	bl	8008342 <arm_dot_prod_f32>
 80068e6:	ed94 0a00 	vldr	s0, [r4]
 80068ea:	eddd 0a00 	vldr	s1, [sp]
 80068ee:	ee70 0a20 	vadd.f32	s1, s0, s1
 80068f2:	edc4 0a00 	vstr	s1, [r4]
 80068f6:	b001      	add	sp, #4
 80068f8:	bd30      	pop	{r4, r5, pc}
	...

080068fc <ai_math_sqrt>:
 80068fc:	eef0 0a40 	vmov.f32	s1, s0
 8006900:	eef5 0a40 	vcmp.f32	s1, #0.0
 8006904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006908:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80069b0 <.text_13>
 800690c:	db01      	blt.n	8006912 <ai_math_sqrt+0x16>
 800690e:	eeb1 0ae0 	vsqrt.f32	s0, s1
 8006912:	4770      	bx	lr

08006914 <ai_math_exp>:
 8006914:	f00d bd92 	b.w	801443c <expf>

08006918 <ai_math_pow>:
 8006918:	f00d bfe2 	b.w	80148e0 <powf>

0800691c <ai_math_tanh>:
 800691c:	f00e b9ae 	b.w	8014c7c <tanhf>

08006920 <ai_math_cosh>:
 8006920:	f00e bbaa 	b.w	8015078 <coshf>

08006924 <ai_math_relu>:
 8006924:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800692c:	bf48      	it	mi
 800692e:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 80069b0 <.text_13>
 8006932:	4770      	bx	lr

08006934 <ai_math_prelu>:
 8006934:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800693c:	bf48      	it	mi
 800693e:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 8006942:	4770      	bx	lr

08006944 <ai_math_sigmoid>:
 8006944:	b500      	push	{lr}
 8006946:	b081      	sub	sp, #4
 8006948:	eeb1 0a40 	vneg.f32	s0, s0
 800694c:	f00d fd76 	bl	801443c <expf>
 8006950:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006954:	b001      	add	sp, #4
 8006956:	ee30 0a20 	vadd.f32	s0, s0, s1
 800695a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800695e:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8006962:	bd00      	pop	{pc}

08006964 <ai_math_hard_sigmoid>:
 8006964:	eef0 0a40 	vmov.f32	s1, s0
 8006968:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80069b4 <.text_14>
 800696c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8006970:	ee00 0a81 	vmla.f32	s0, s1, s2
 8006974:	eddf 0a10 	vldr	s1, [pc, #64]	; 80069b8 <.text_15>
 8006978:	eeb4 0a60 	vcmp.f32	s0, s1
 800697c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006980:	da07      	bge.n	8006992 <ai_math_hard_sigmoid+0x2e>
 8006982:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800698a:	d504      	bpl.n	8006996 <ai_math_hard_sigmoid+0x32>
 800698c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80069b0 <.text_13>
 8006990:	4770      	bx	lr
 8006992:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006996:	4770      	bx	lr

08006998 <ai_math_sign>:
 8006998:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800699c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a0:	bfcc      	ite	gt
 80069a2:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 80069bc <.text_16>
 80069a6:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 80069c0 <.text_17>
 80069aa:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80069ae:	4770      	bx	lr

080069b0 <.text_13>:
 80069b0:	00000000 	.word	0x00000000

080069b4 <.text_14>:
 80069b4:	3e4ccccd 	.word	0x3e4ccccd

080069b8 <.text_15>:
 80069b8:	3f800001 	.word	0x3f800001

080069bc <.text_16>:
 80069bc:	00000001 	.word	0x00000001

080069c0 <.text_17>:
 80069c0:	ffffffff 	.word	0xffffffff

080069c4 <ai_div>:
 80069c4:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80069c8:	4770      	bx	lr

080069ca <ai_floor_div>:
 80069ca:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80069ce:	f00d bdbb 	b.w	8014548 <floorf>

080069d2 <ai_floor_mod>:
 80069d2:	f00e bbad 	b.w	8015130 <fmodf>

080069d6 <ai_max>:
 80069d6:	eef4 0a40 	vcmp.f32	s1, s0
 80069da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069de:	bf58      	it	pl
 80069e0:	eeb0 0a60 	vmovpl.f32	s0, s1
 80069e4:	4770      	bx	lr

080069e6 <ai_min>:
 80069e6:	eeb4 0a60 	vcmp.f32	s0, s1
 80069ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ee:	bf58      	it	pl
 80069f0:	eeb0 0a60 	vmovpl.f32	s0, s1
 80069f4:	4770      	bx	lr

080069f6 <ai_mul>:
 80069f6:	ee20 0a20 	vmul.f32	s0, s0, s1
 80069fa:	4770      	bx	lr

080069fc <ai_sub>:
 80069fc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006a00:	4770      	bx	lr

08006a02 <ai_sum>:
 8006a02:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006a06:	4770      	bx	lr

08006a08 <__aeabi_memset>:
 8006a08:	b470      	push	{r4, r5, r6}
 8006a0a:	0784      	lsls	r4, r0, #30
 8006a0c:	d046      	beq.n	8006a9c <__aeabi_memset+0x94>
 8006a0e:	1e4c      	subs	r4, r1, #1
 8006a10:	2900      	cmp	r1, #0
 8006a12:	d041      	beq.n	8006a98 <__aeabi_memset+0x90>
 8006a14:	b2d5      	uxtb	r5, r2
 8006a16:	4603      	mov	r3, r0
 8006a18:	e002      	b.n	8006a20 <__aeabi_memset+0x18>
 8006a1a:	1e61      	subs	r1, r4, #1
 8006a1c:	b3e4      	cbz	r4, 8006a98 <__aeabi_memset+0x90>
 8006a1e:	460c      	mov	r4, r1
 8006a20:	f803 5b01 	strb.w	r5, [r3], #1
 8006a24:	0799      	lsls	r1, r3, #30
 8006a26:	d1f8      	bne.n	8006a1a <__aeabi_memset+0x12>
 8006a28:	2c03      	cmp	r4, #3
 8006a2a:	d92e      	bls.n	8006a8a <__aeabi_memset+0x82>
 8006a2c:	b2d5      	uxtb	r5, r2
 8006a2e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8006a32:	2c0f      	cmp	r4, #15
 8006a34:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006a38:	d919      	bls.n	8006a6e <__aeabi_memset+0x66>
 8006a3a:	4626      	mov	r6, r4
 8006a3c:	f103 0110 	add.w	r1, r3, #16
 8006a40:	3e10      	subs	r6, #16
 8006a42:	2e0f      	cmp	r6, #15
 8006a44:	f841 5c10 	str.w	r5, [r1, #-16]
 8006a48:	f841 5c0c 	str.w	r5, [r1, #-12]
 8006a4c:	f841 5c08 	str.w	r5, [r1, #-8]
 8006a50:	f841 5c04 	str.w	r5, [r1, #-4]
 8006a54:	f101 0110 	add.w	r1, r1, #16
 8006a58:	d8f2      	bhi.n	8006a40 <__aeabi_memset+0x38>
 8006a5a:	f1a4 0110 	sub.w	r1, r4, #16
 8006a5e:	f021 010f 	bic.w	r1, r1, #15
 8006a62:	f004 040f 	and.w	r4, r4, #15
 8006a66:	3110      	adds	r1, #16
 8006a68:	2c03      	cmp	r4, #3
 8006a6a:	440b      	add	r3, r1
 8006a6c:	d90d      	bls.n	8006a8a <__aeabi_memset+0x82>
 8006a6e:	461e      	mov	r6, r3
 8006a70:	4621      	mov	r1, r4
 8006a72:	3904      	subs	r1, #4
 8006a74:	2903      	cmp	r1, #3
 8006a76:	f846 5b04 	str.w	r5, [r6], #4
 8006a7a:	d8fa      	bhi.n	8006a72 <__aeabi_memset+0x6a>
 8006a7c:	1f21      	subs	r1, r4, #4
 8006a7e:	f021 0103 	bic.w	r1, r1, #3
 8006a82:	3104      	adds	r1, #4
 8006a84:	440b      	add	r3, r1
 8006a86:	f004 0403 	and.w	r4, r4, #3
 8006a8a:	b12c      	cbz	r4, 8006a98 <__aeabi_memset+0x90>
 8006a8c:	b2d2      	uxtb	r2, r2
 8006a8e:	441c      	add	r4, r3
 8006a90:	f803 2b01 	strb.w	r2, [r3], #1
 8006a94:	42a3      	cmp	r3, r4
 8006a96:	d1fb      	bne.n	8006a90 <__aeabi_memset+0x88>
 8006a98:	bc70      	pop	{r4, r5, r6}
 8006a9a:	4770      	bx	lr
 8006a9c:	460c      	mov	r4, r1
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	e7c2      	b.n	8006a28 <__aeabi_memset+0x20>

08006aa2 <strlen>:
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006aa8:	2a00      	cmp	r2, #0
 8006aaa:	d1fb      	bne.n	8006aa4 <strlen+0x2>
 8006aac:	1a18      	subs	r0, r3, r0
 8006aae:	3801      	subs	r0, #1
 8006ab0:	4770      	bx	lr
	...

08006ac0 <memchr>:
 8006ac0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006ac4:	2a10      	cmp	r2, #16
 8006ac6:	db2b      	blt.n	8006b20 <memchr+0x60>
 8006ac8:	f010 0f07 	tst.w	r0, #7
 8006acc:	d008      	beq.n	8006ae0 <memchr+0x20>
 8006ace:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006ad2:	3a01      	subs	r2, #1
 8006ad4:	428b      	cmp	r3, r1
 8006ad6:	d02d      	beq.n	8006b34 <memchr+0x74>
 8006ad8:	f010 0f07 	tst.w	r0, #7
 8006adc:	b342      	cbz	r2, 8006b30 <memchr+0x70>
 8006ade:	d1f6      	bne.n	8006ace <memchr+0xe>
 8006ae0:	b4f0      	push	{r4, r5, r6, r7}
 8006ae2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8006ae6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8006aea:	f022 0407 	bic.w	r4, r2, #7
 8006aee:	f07f 0700 	mvns.w	r7, #0
 8006af2:	2300      	movs	r3, #0
 8006af4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006af8:	3c08      	subs	r4, #8
 8006afa:	ea85 0501 	eor.w	r5, r5, r1
 8006afe:	ea86 0601 	eor.w	r6, r6, r1
 8006b02:	fa85 f547 	uadd8	r5, r5, r7
 8006b06:	faa3 f587 	sel	r5, r3, r7
 8006b0a:	fa86 f647 	uadd8	r6, r6, r7
 8006b0e:	faa5 f687 	sel	r6, r5, r7
 8006b12:	b98e      	cbnz	r6, 8006b38 <memchr+0x78>
 8006b14:	d1ee      	bne.n	8006af4 <memchr+0x34>
 8006b16:	bcf0      	pop	{r4, r5, r6, r7}
 8006b18:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006b1c:	f002 0207 	and.w	r2, r2, #7
 8006b20:	b132      	cbz	r2, 8006b30 <memchr+0x70>
 8006b22:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006b26:	3a01      	subs	r2, #1
 8006b28:	ea83 0301 	eor.w	r3, r3, r1
 8006b2c:	b113      	cbz	r3, 8006b34 <memchr+0x74>
 8006b2e:	d1f8      	bne.n	8006b22 <memchr+0x62>
 8006b30:	2000      	movs	r0, #0
 8006b32:	4770      	bx	lr
 8006b34:	3801      	subs	r0, #1
 8006b36:	4770      	bx	lr
 8006b38:	2d00      	cmp	r5, #0
 8006b3a:	bf06      	itte	eq
 8006b3c:	4635      	moveq	r5, r6
 8006b3e:	3803      	subeq	r0, #3
 8006b40:	3807      	subne	r0, #7
 8006b42:	f015 0f01 	tst.w	r5, #1
 8006b46:	d107      	bne.n	8006b58 <memchr+0x98>
 8006b48:	3001      	adds	r0, #1
 8006b4a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8006b4e:	bf02      	ittt	eq
 8006b50:	3001      	addeq	r0, #1
 8006b52:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006b56:	3001      	addeq	r0, #1
 8006b58:	bcf0      	pop	{r4, r5, r6, r7}
 8006b5a:	3801      	subs	r0, #1
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop

08006b60 <__aeabi_uldivmod>:
 8006b60:	b953      	cbnz	r3, 8006b78 <__aeabi_uldivmod+0x18>
 8006b62:	b94a      	cbnz	r2, 8006b78 <__aeabi_uldivmod+0x18>
 8006b64:	2900      	cmp	r1, #0
 8006b66:	bf08      	it	eq
 8006b68:	2800      	cmpeq	r0, #0
 8006b6a:	bf1c      	itt	ne
 8006b6c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8006b70:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8006b74:	f000 b972 	b.w	8006e5c <__aeabi_idiv0>
 8006b78:	f1ad 0c08 	sub.w	ip, sp, #8
 8006b7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006b80:	f000 f806 	bl	8006b90 <__udivmoddi4>
 8006b84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006b88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b8c:	b004      	add	sp, #16
 8006b8e:	4770      	bx	lr

08006b90 <__udivmoddi4>:
 8006b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	9e08      	ldr	r6, [sp, #32]
 8006b96:	4604      	mov	r4, r0
 8006b98:	4688      	mov	r8, r1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d14b      	bne.n	8006c36 <__udivmoddi4+0xa6>
 8006b9e:	428a      	cmp	r2, r1
 8006ba0:	4615      	mov	r5, r2
 8006ba2:	d967      	bls.n	8006c74 <__udivmoddi4+0xe4>
 8006ba4:	fab2 f282 	clz	r2, r2
 8006ba8:	b14a      	cbz	r2, 8006bbe <__udivmoddi4+0x2e>
 8006baa:	f1c2 0720 	rsb	r7, r2, #32
 8006bae:	fa01 f302 	lsl.w	r3, r1, r2
 8006bb2:	fa20 f707 	lsr.w	r7, r0, r7
 8006bb6:	4095      	lsls	r5, r2
 8006bb8:	ea47 0803 	orr.w	r8, r7, r3
 8006bbc:	4094      	lsls	r4, r2
 8006bbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006bc2:	0c23      	lsrs	r3, r4, #16
 8006bc4:	fbb8 f7fe 	udiv	r7, r8, lr
 8006bc8:	fa1f fc85 	uxth.w	ip, r5
 8006bcc:	fb0e 8817 	mls	r8, lr, r7, r8
 8006bd0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8006bd4:	fb07 f10c 	mul.w	r1, r7, ip
 8006bd8:	4299      	cmp	r1, r3
 8006bda:	d909      	bls.n	8006bf0 <__udivmoddi4+0x60>
 8006bdc:	18eb      	adds	r3, r5, r3
 8006bde:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8006be2:	f080 811b 	bcs.w	8006e1c <__udivmoddi4+0x28c>
 8006be6:	4299      	cmp	r1, r3
 8006be8:	f240 8118 	bls.w	8006e1c <__udivmoddi4+0x28c>
 8006bec:	3f02      	subs	r7, #2
 8006bee:	442b      	add	r3, r5
 8006bf0:	1a5b      	subs	r3, r3, r1
 8006bf2:	b2a4      	uxth	r4, r4
 8006bf4:	fbb3 f0fe 	udiv	r0, r3, lr
 8006bf8:	fb0e 3310 	mls	r3, lr, r0, r3
 8006bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006c00:	fb00 fc0c 	mul.w	ip, r0, ip
 8006c04:	45a4      	cmp	ip, r4
 8006c06:	d909      	bls.n	8006c1c <__udivmoddi4+0x8c>
 8006c08:	192c      	adds	r4, r5, r4
 8006c0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006c0e:	f080 8107 	bcs.w	8006e20 <__udivmoddi4+0x290>
 8006c12:	45a4      	cmp	ip, r4
 8006c14:	f240 8104 	bls.w	8006e20 <__udivmoddi4+0x290>
 8006c18:	3802      	subs	r0, #2
 8006c1a:	442c      	add	r4, r5
 8006c1c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8006c20:	eba4 040c 	sub.w	r4, r4, ip
 8006c24:	2700      	movs	r7, #0
 8006c26:	b11e      	cbz	r6, 8006c30 <__udivmoddi4+0xa0>
 8006c28:	40d4      	lsrs	r4, r2
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	e9c6 4300 	strd	r4, r3, [r6]
 8006c30:	4639      	mov	r1, r7
 8006c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c36:	428b      	cmp	r3, r1
 8006c38:	d909      	bls.n	8006c4e <__udivmoddi4+0xbe>
 8006c3a:	2e00      	cmp	r6, #0
 8006c3c:	f000 80eb 	beq.w	8006e16 <__udivmoddi4+0x286>
 8006c40:	2700      	movs	r7, #0
 8006c42:	e9c6 0100 	strd	r0, r1, [r6]
 8006c46:	4638      	mov	r0, r7
 8006c48:	4639      	mov	r1, r7
 8006c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c4e:	fab3 f783 	clz	r7, r3
 8006c52:	2f00      	cmp	r7, #0
 8006c54:	d147      	bne.n	8006ce6 <__udivmoddi4+0x156>
 8006c56:	428b      	cmp	r3, r1
 8006c58:	d302      	bcc.n	8006c60 <__udivmoddi4+0xd0>
 8006c5a:	4282      	cmp	r2, r0
 8006c5c:	f200 80fa 	bhi.w	8006e54 <__udivmoddi4+0x2c4>
 8006c60:	1a84      	subs	r4, r0, r2
 8006c62:	eb61 0303 	sbc.w	r3, r1, r3
 8006c66:	2001      	movs	r0, #1
 8006c68:	4698      	mov	r8, r3
 8006c6a:	2e00      	cmp	r6, #0
 8006c6c:	d0e0      	beq.n	8006c30 <__udivmoddi4+0xa0>
 8006c6e:	e9c6 4800 	strd	r4, r8, [r6]
 8006c72:	e7dd      	b.n	8006c30 <__udivmoddi4+0xa0>
 8006c74:	b902      	cbnz	r2, 8006c78 <__udivmoddi4+0xe8>
 8006c76:	deff      	udf	#255	; 0xff
 8006c78:	fab2 f282 	clz	r2, r2
 8006c7c:	2a00      	cmp	r2, #0
 8006c7e:	f040 808f 	bne.w	8006da0 <__udivmoddi4+0x210>
 8006c82:	1b49      	subs	r1, r1, r5
 8006c84:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006c88:	fa1f f885 	uxth.w	r8, r5
 8006c8c:	2701      	movs	r7, #1
 8006c8e:	fbb1 fcfe 	udiv	ip, r1, lr
 8006c92:	0c23      	lsrs	r3, r4, #16
 8006c94:	fb0e 111c 	mls	r1, lr, ip, r1
 8006c98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006c9c:	fb08 f10c 	mul.w	r1, r8, ip
 8006ca0:	4299      	cmp	r1, r3
 8006ca2:	d907      	bls.n	8006cb4 <__udivmoddi4+0x124>
 8006ca4:	18eb      	adds	r3, r5, r3
 8006ca6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8006caa:	d202      	bcs.n	8006cb2 <__udivmoddi4+0x122>
 8006cac:	4299      	cmp	r1, r3
 8006cae:	f200 80cd 	bhi.w	8006e4c <__udivmoddi4+0x2bc>
 8006cb2:	4684      	mov	ip, r0
 8006cb4:	1a59      	subs	r1, r3, r1
 8006cb6:	b2a3      	uxth	r3, r4
 8006cb8:	fbb1 f0fe 	udiv	r0, r1, lr
 8006cbc:	fb0e 1410 	mls	r4, lr, r0, r1
 8006cc0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006cc4:	fb08 f800 	mul.w	r8, r8, r0
 8006cc8:	45a0      	cmp	r8, r4
 8006cca:	d907      	bls.n	8006cdc <__udivmoddi4+0x14c>
 8006ccc:	192c      	adds	r4, r5, r4
 8006cce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006cd2:	d202      	bcs.n	8006cda <__udivmoddi4+0x14a>
 8006cd4:	45a0      	cmp	r8, r4
 8006cd6:	f200 80b6 	bhi.w	8006e46 <__udivmoddi4+0x2b6>
 8006cda:	4618      	mov	r0, r3
 8006cdc:	eba4 0408 	sub.w	r4, r4, r8
 8006ce0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8006ce4:	e79f      	b.n	8006c26 <__udivmoddi4+0x96>
 8006ce6:	f1c7 0c20 	rsb	ip, r7, #32
 8006cea:	40bb      	lsls	r3, r7
 8006cec:	fa22 fe0c 	lsr.w	lr, r2, ip
 8006cf0:	ea4e 0e03 	orr.w	lr, lr, r3
 8006cf4:	fa01 f407 	lsl.w	r4, r1, r7
 8006cf8:	fa20 f50c 	lsr.w	r5, r0, ip
 8006cfc:	fa21 f30c 	lsr.w	r3, r1, ip
 8006d00:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8006d04:	4325      	orrs	r5, r4
 8006d06:	fbb3 f9f8 	udiv	r9, r3, r8
 8006d0a:	0c2c      	lsrs	r4, r5, #16
 8006d0c:	fb08 3319 	mls	r3, r8, r9, r3
 8006d10:	fa1f fa8e 	uxth.w	sl, lr
 8006d14:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8006d18:	fb09 f40a 	mul.w	r4, r9, sl
 8006d1c:	429c      	cmp	r4, r3
 8006d1e:	fa02 f207 	lsl.w	r2, r2, r7
 8006d22:	fa00 f107 	lsl.w	r1, r0, r7
 8006d26:	d90b      	bls.n	8006d40 <__udivmoddi4+0x1b0>
 8006d28:	eb1e 0303 	adds.w	r3, lr, r3
 8006d2c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8006d30:	f080 8087 	bcs.w	8006e42 <__udivmoddi4+0x2b2>
 8006d34:	429c      	cmp	r4, r3
 8006d36:	f240 8084 	bls.w	8006e42 <__udivmoddi4+0x2b2>
 8006d3a:	f1a9 0902 	sub.w	r9, r9, #2
 8006d3e:	4473      	add	r3, lr
 8006d40:	1b1b      	subs	r3, r3, r4
 8006d42:	b2ad      	uxth	r5, r5
 8006d44:	fbb3 f0f8 	udiv	r0, r3, r8
 8006d48:	fb08 3310 	mls	r3, r8, r0, r3
 8006d4c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8006d50:	fb00 fa0a 	mul.w	sl, r0, sl
 8006d54:	45a2      	cmp	sl, r4
 8006d56:	d908      	bls.n	8006d6a <__udivmoddi4+0x1da>
 8006d58:	eb1e 0404 	adds.w	r4, lr, r4
 8006d5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006d60:	d26b      	bcs.n	8006e3a <__udivmoddi4+0x2aa>
 8006d62:	45a2      	cmp	sl, r4
 8006d64:	d969      	bls.n	8006e3a <__udivmoddi4+0x2aa>
 8006d66:	3802      	subs	r0, #2
 8006d68:	4474      	add	r4, lr
 8006d6a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8006d6e:	fba0 8902 	umull	r8, r9, r0, r2
 8006d72:	eba4 040a 	sub.w	r4, r4, sl
 8006d76:	454c      	cmp	r4, r9
 8006d78:	46c2      	mov	sl, r8
 8006d7a:	464b      	mov	r3, r9
 8006d7c:	d354      	bcc.n	8006e28 <__udivmoddi4+0x298>
 8006d7e:	d051      	beq.n	8006e24 <__udivmoddi4+0x294>
 8006d80:	2e00      	cmp	r6, #0
 8006d82:	d069      	beq.n	8006e58 <__udivmoddi4+0x2c8>
 8006d84:	ebb1 050a 	subs.w	r5, r1, sl
 8006d88:	eb64 0403 	sbc.w	r4, r4, r3
 8006d8c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8006d90:	40fd      	lsrs	r5, r7
 8006d92:	40fc      	lsrs	r4, r7
 8006d94:	ea4c 0505 	orr.w	r5, ip, r5
 8006d98:	e9c6 5400 	strd	r5, r4, [r6]
 8006d9c:	2700      	movs	r7, #0
 8006d9e:	e747      	b.n	8006c30 <__udivmoddi4+0xa0>
 8006da0:	f1c2 0320 	rsb	r3, r2, #32
 8006da4:	fa20 f703 	lsr.w	r7, r0, r3
 8006da8:	4095      	lsls	r5, r2
 8006daa:	fa01 f002 	lsl.w	r0, r1, r2
 8006dae:	fa21 f303 	lsr.w	r3, r1, r3
 8006db2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006db6:	4338      	orrs	r0, r7
 8006db8:	0c01      	lsrs	r1, r0, #16
 8006dba:	fbb3 f7fe 	udiv	r7, r3, lr
 8006dbe:	fa1f f885 	uxth.w	r8, r5
 8006dc2:	fb0e 3317 	mls	r3, lr, r7, r3
 8006dc6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006dca:	fb07 f308 	mul.w	r3, r7, r8
 8006dce:	428b      	cmp	r3, r1
 8006dd0:	fa04 f402 	lsl.w	r4, r4, r2
 8006dd4:	d907      	bls.n	8006de6 <__udivmoddi4+0x256>
 8006dd6:	1869      	adds	r1, r5, r1
 8006dd8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8006ddc:	d22f      	bcs.n	8006e3e <__udivmoddi4+0x2ae>
 8006dde:	428b      	cmp	r3, r1
 8006de0:	d92d      	bls.n	8006e3e <__udivmoddi4+0x2ae>
 8006de2:	3f02      	subs	r7, #2
 8006de4:	4429      	add	r1, r5
 8006de6:	1acb      	subs	r3, r1, r3
 8006de8:	b281      	uxth	r1, r0
 8006dea:	fbb3 f0fe 	udiv	r0, r3, lr
 8006dee:	fb0e 3310 	mls	r3, lr, r0, r3
 8006df2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006df6:	fb00 f308 	mul.w	r3, r0, r8
 8006dfa:	428b      	cmp	r3, r1
 8006dfc:	d907      	bls.n	8006e0e <__udivmoddi4+0x27e>
 8006dfe:	1869      	adds	r1, r5, r1
 8006e00:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8006e04:	d217      	bcs.n	8006e36 <__udivmoddi4+0x2a6>
 8006e06:	428b      	cmp	r3, r1
 8006e08:	d915      	bls.n	8006e36 <__udivmoddi4+0x2a6>
 8006e0a:	3802      	subs	r0, #2
 8006e0c:	4429      	add	r1, r5
 8006e0e:	1ac9      	subs	r1, r1, r3
 8006e10:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8006e14:	e73b      	b.n	8006c8e <__udivmoddi4+0xfe>
 8006e16:	4637      	mov	r7, r6
 8006e18:	4630      	mov	r0, r6
 8006e1a:	e709      	b.n	8006c30 <__udivmoddi4+0xa0>
 8006e1c:	4607      	mov	r7, r0
 8006e1e:	e6e7      	b.n	8006bf0 <__udivmoddi4+0x60>
 8006e20:	4618      	mov	r0, r3
 8006e22:	e6fb      	b.n	8006c1c <__udivmoddi4+0x8c>
 8006e24:	4541      	cmp	r1, r8
 8006e26:	d2ab      	bcs.n	8006d80 <__udivmoddi4+0x1f0>
 8006e28:	ebb8 0a02 	subs.w	sl, r8, r2
 8006e2c:	eb69 020e 	sbc.w	r2, r9, lr
 8006e30:	3801      	subs	r0, #1
 8006e32:	4613      	mov	r3, r2
 8006e34:	e7a4      	b.n	8006d80 <__udivmoddi4+0x1f0>
 8006e36:	4660      	mov	r0, ip
 8006e38:	e7e9      	b.n	8006e0e <__udivmoddi4+0x27e>
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	e795      	b.n	8006d6a <__udivmoddi4+0x1da>
 8006e3e:	4667      	mov	r7, ip
 8006e40:	e7d1      	b.n	8006de6 <__udivmoddi4+0x256>
 8006e42:	4681      	mov	r9, r0
 8006e44:	e77c      	b.n	8006d40 <__udivmoddi4+0x1b0>
 8006e46:	3802      	subs	r0, #2
 8006e48:	442c      	add	r4, r5
 8006e4a:	e747      	b.n	8006cdc <__udivmoddi4+0x14c>
 8006e4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8006e50:	442b      	add	r3, r5
 8006e52:	e72f      	b.n	8006cb4 <__udivmoddi4+0x124>
 8006e54:	4638      	mov	r0, r7
 8006e56:	e708      	b.n	8006c6a <__udivmoddi4+0xda>
 8006e58:	4637      	mov	r7, r6
 8006e5a:	e6e9      	b.n	8006c30 <__udivmoddi4+0xa0>

08006e5c <__aeabi_idiv0>:
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop

08006e60 <main>:
enum status bufferStatus;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                               	 	   	    Main			                                                                      //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main(void)
{
 8006e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e62:	f5ad 3d06 	sub.w	sp, sp, #137216	; 0x21800
 8006e66:	b0a3      	sub	sp, #140	; 0x8c
 8006e68:	af04      	add	r7, sp, #16
	float hammingKoeffizienten[SLICESIZE];
	int32_t scrBuff[SCRTCHSIZE];
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//                                                      Initialisierung                                                                               //
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	HAL_Init();//Initialisierung der Hardware Abstraction Layer
 8006e6a:	f003 fe7d 	bl	800ab68 <HAL_Init>
	SystemClock_Config();//Initialisierung der Clock
 8006e6e:	f000 faf1 	bl	8007454 <SystemClock_Config>
	MX_GPIO_Init();//Initialisierung der GPIO-Ports
 8006e72:	f000 fbdf 	bl	8007634 <MX_GPIO_Init>
	MX_CRC_Init();//Initialisierung der zyklischen Redundanzpruefung
 8006e76:	f000 fb8b 	bl	8007590 <MX_CRC_Init>
	MX_USART1_UART_Init();//Initialisierung der USART
 8006e7a:	f000 fbab 	bl	80075d4 <MX_USART1_UART_Init>
	MX_X_CUBE_AI_Init();//Initialisierung der Inferenz des neuronalen Netzes
 8006e7e:	f00c fd37 	bl	80138f0 <MX_X_CUBE_AI_Init>
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);//Initialisierung des Eingabeknopfs
 8006e82:	2100      	movs	r1, #0
 8006e84:	2000      	movs	r0, #0
 8006e86:	f008 fe33 	bl	800faf0 <BSP_PB_Init>
	BSP_LED_Init(LED1);//Initialisierung der USER_LED Nummer 1(Rot)
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	f008 fdcc 	bl	800fa28 <BSP_LED_Init>
	BSP_LED_Init(LED2);//Initialisierung der USER_LED Nummer 2(Gruen)
 8006e90:	2001      	movs	r0, #1
 8006e92:	f008 fdc9 	bl	800fa28 <BSP_LED_Init>
	BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ,DEFAULT_AUDIO_IN_BIT_RESOLUTION,DEFAULT_AUDIO_IN_CHANNEL_NBR);//Initialisierung der Mikrofonaufnahme
 8006e96:	2202      	movs	r2, #2
 8006e98:	2110      	movs	r1, #16
 8006e9a:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8006e9e:	f009 fbe5 	bl	801066c <BSP_AUDIO_IN_Init>
	BSP_AUDIO_IN_AllocScratch(scrBuff,SCRTCHSIZE);//Initialisierung des Scratchbuffers der DFSDM-Schnittstelle
 8006ea2:	4b80      	ldr	r3, [pc, #512]	; (80070a4 <main+0x244>)
 8006ea4:	4a80      	ldr	r2, [pc, #512]	; (80070a8 <main+0x248>)
 8006ea6:	443a      	add	r2, r7
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f009 fc5c 	bl	801076c <BSP_AUDIO_IN_AllocScratch>
	BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE1,60,DEFAULT_AUDIO_IN_FREQ);//Initialisierung der Audioausgabe
 8006eb4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8006eb8:	213c      	movs	r1, #60	; 0x3c
 8006eba:	2002      	movs	r0, #2
 8006ebc:	f009 f85a 	bl	800ff74 <BSP_AUDIO_OUT_Init>
	BSP_SDRAM_Init();
 8006ec0:	f00a ffd6 	bl	8011e70 <BSP_SDRAM_Init>
	hammingInit(hammingKoeffizienten,SLICESIZE);//Initialisierung der Hammingfensterkoeffizienten
 8006ec4:	4b79      	ldr	r3, [pc, #484]	; (80070ac <main+0x24c>)
 8006ec6:	443b      	add	r3, r7
 8006ec8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fa4b 	bl	8007368 <hammingInit>
	arm_rfft_fast_init_f32(&fftInstanz,SLICESIZE);//Initialisierung der float32-rfft
 8006ed2:	4b77      	ldr	r3, [pc, #476]	; (80070b0 <main+0x250>)
 8006ed4:	443b      	add	r3, r7
 8006ed6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006eda:	4618      	mov	r0, r3
 8006edc:	f003 fd6e 	bl	800a9bc <arm_rfft_fast_init_f32>
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//                                                       Programmablauf                                                                               //
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	int gedrueckt = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	4a74      	ldr	r2, [pc, #464]	; (80070b4 <main+0x254>)
 8006ee4:	443a      	add	r2, r7
 8006ee6:	6013      	str	r3, [r2, #0]
	bufferStatus = LEER;
 8006ee8:	4b73      	ldr	r3, [pc, #460]	; (80070b8 <main+0x258>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	701a      	strb	r2, [r3, #0]
    int16_t *dataIn = (int16_t*)(SDRAM_DEVICE_ADDR);
 8006eee:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8006ef2:	4a72      	ldr	r2, [pc, #456]	; (80070bc <main+0x25c>)
 8006ef4:	443a      	add	r2, r7
 8006ef6:	6013      	str	r3, [r2, #0]
    int16_t *dataOut = (int16_t*)(SDRAM_DEVICE_ADDR+BUFFSIZE);
 8006ef8:	4b71      	ldr	r3, [pc, #452]	; (80070c0 <main+0x260>)
 8006efa:	4a72      	ldr	r2, [pc, #456]	; (80070c4 <main+0x264>)
 8006efc:	443a      	add	r2, r7
 8006efe:	6013      	str	r3, [r2, #0]
//	int16_t dataIn[BUFFSIZE];
//	int16_t dataOut[BUFFSIZE];
	while (1)
	{
		//0->Knopf nicht gedrueckt, 1-> Knopf gedrueckt
		gedrueckt = BSP_PB_GetState(BUTTON_USER);
 8006f00:	2000      	movs	r0, #0
 8006f02:	f008 fe49 	bl	800fb98 <BSP_PB_GetState>
 8006f06:	4603      	mov	r3, r0
 8006f08:	4a6a      	ldr	r2, [pc, #424]	; (80070b4 <main+0x254>)
 8006f0a:	443a      	add	r2, r7
 8006f0c:	6013      	str	r3, [r2, #0]
		if(gedrueckt)
 8006f0e:	4b69      	ldr	r3, [pc, #420]	; (80070b4 <main+0x254>)
 8006f10:	443b      	add	r3, r7
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d0f3      	beq.n	8006f00 <main+0xa0>
		{
			//Aufnahme
			BSP_LED_On(LED1);
 8006f18:	2000      	movs	r0, #0
 8006f1a:	f008 fdb5 	bl	800fa88 <BSP_LED_On>
			uint8_t text[50]="Starte Aufnahme\n\r";
 8006f1e:	4e6a      	ldr	r6, [pc, #424]	; (80070c8 <main+0x268>)
 8006f20:	4b61      	ldr	r3, [pc, #388]	; (80070a8 <main+0x248>)
 8006f22:	443b      	add	r3, r7
 8006f24:	441e      	add	r6, r3
 8006f26:	4b69      	ldr	r3, [pc, #420]	; (80070cc <main+0x26c>)
 8006f28:	4634      	mov	r4, r6
 8006f2a:	461d      	mov	r5, r3
 8006f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f30:	682b      	ldr	r3, [r5, #0]
 8006f32:	8023      	strh	r3, [r4, #0]
 8006f34:	f106 0312 	add.w	r3, r6, #18
 8006f38:	2220      	movs	r2, #32
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f010 fabd 	bl	80174bc <memset>
			HAL_UART_Transmit(&huart1,text,sizeof(text),100);
 8006f42:	4961      	ldr	r1, [pc, #388]	; (80070c8 <main+0x268>)
 8006f44:	4b58      	ldr	r3, [pc, #352]	; (80070a8 <main+0x248>)
 8006f46:	443b      	add	r3, r7
 8006f48:	4419      	add	r1, r3
 8006f4a:	2364      	movs	r3, #100	; 0x64
 8006f4c:	2232      	movs	r2, #50	; 0x32
 8006f4e:	4860      	ldr	r0, [pc, #384]	; (80070d0 <main+0x270>)
 8006f50:	f007 fff4 	bl	800ef3c <HAL_UART_Transmit>
			//Die Aufnahme ist ein Stereosignal, der Signalaufbau ist(fuer links=l,rechts=r):l1-r1-l2-r2-l3-r3-....
			memset(dataIn,0,sizeof(dataIn));
 8006f54:	2204      	movs	r2, #4
 8006f56:	2100      	movs	r1, #0
 8006f58:	4b58      	ldr	r3, [pc, #352]	; (80070bc <main+0x25c>)
 8006f5a:	443b      	add	r3, r7
 8006f5c:	6818      	ldr	r0, [r3, #0]
 8006f5e:	f010 faad 	bl	80174bc <memset>
			BSP_AUDIO_IN_Record(&dataIn[0],BUFFSIZE*sizeof(uint16_t));
 8006f62:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8006f66:	4b55      	ldr	r3, [pc, #340]	; (80070bc <main+0x25c>)
 8006f68:	443b      	add	r3, r7
 8006f6a:	6818      	ldr	r0, [r3, #0]
 8006f6c:	f009 fc32 	bl	80107d4 <BSP_AUDIO_IN_Record>
			while(bufferStatus!=VOLL)
 8006f70:	e010      	b.n	8006f94 <main+0x134>
			{
				//Wenn die erste Haelfte der Daten fertig aufgenommen ist, wird sie in dem Outputbuffer kopiert.
				//Dort kann sie nicht vom zyklischen Schreiben der Aufnahme ueberschrieben werden
				if(bufferStatus==HALB)
 8006f72:	4b51      	ldr	r3, [pc, #324]	; (80070b8 <main+0x258>)
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d10c      	bne.n	8006f94 <main+0x134>
				{
					memcpy(&dataOut[0],&dataIn[0],(BUFFSIZE/2)*sizeof(int16_t));
 8006f7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006f7e:	4b4f      	ldr	r3, [pc, #316]	; (80070bc <main+0x25c>)
 8006f80:	443b      	add	r3, r7
 8006f82:	6819      	ldr	r1, [r3, #0]
 8006f84:	4b4f      	ldr	r3, [pc, #316]	; (80070c4 <main+0x264>)
 8006f86:	443b      	add	r3, r7
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	f010 fa8c 	bl	80174a6 <memcpy>
					bufferStatus=LEER;
 8006f8e:	4b4a      	ldr	r3, [pc, #296]	; (80070b8 <main+0x258>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	701a      	strb	r2, [r3, #0]
			while(bufferStatus!=VOLL)
 8006f94:	4b48      	ldr	r3, [pc, #288]	; (80070b8 <main+0x258>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d1ea      	bne.n	8006f72 <main+0x112>
				}
			}
			BSP_AUDIO_IN_Stop();
 8006f9c:	f009 fc90 	bl	80108c0 <BSP_AUDIO_IN_Stop>
			bufferStatus=LEER;
 8006fa0:	4b45      	ldr	r3, [pc, #276]	; (80070b8 <main+0x258>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	701a      	strb	r2, [r3, #0]

			//Restliche Aufnahmedaten im Outputbbuffer speichern
			memcpy(&dataOut[BUFFSIZE/2],&dataIn[BUFFSIZE/2],(BUFFSIZE/2)*sizeof(int16_t));
 8006fa6:	4b47      	ldr	r3, [pc, #284]	; (80070c4 <main+0x264>)
 8006fa8:	443b      	add	r3, r7
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f503 3080 	add.w	r0, r3, #65536	; 0x10000
 8006fb0:	4b42      	ldr	r3, [pc, #264]	; (80070bc <main+0x25c>)
 8006fb2:	443b      	add	r3, r7
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006fba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	f010 fa71 	bl	80174a6 <memcpy>
			BSP_LED_Off(LED1);
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	f008 fd79 	bl	800fabc <BSP_LED_Off>
			sprintf(text,"Aufnahme abgeschlossen, starte Verarbeitung\n\r");
 8006fca:	4b3f      	ldr	r3, [pc, #252]	; (80070c8 <main+0x268>)
 8006fcc:	4a36      	ldr	r2, [pc, #216]	; (80070a8 <main+0x248>)
 8006fce:	443a      	add	r2, r7
 8006fd0:	4413      	add	r3, r2
 8006fd2:	4a40      	ldr	r2, [pc, #256]	; (80070d4 <main+0x274>)
 8006fd4:	461c      	mov	r4, r3
 8006fd6:	4615      	mov	r5, r2
 8006fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fe0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006fe4:	c407      	stmia	r4!, {r0, r1, r2}
 8006fe6:	8023      	strh	r3, [r4, #0]
			HAL_UART_Transmit(&huart1,text,sizeof(text),100);
 8006fe8:	4937      	ldr	r1, [pc, #220]	; (80070c8 <main+0x268>)
 8006fea:	4b2f      	ldr	r3, [pc, #188]	; (80070a8 <main+0x248>)
 8006fec:	443b      	add	r3, r7
 8006fee:	4419      	add	r1, r3
 8006ff0:	2364      	movs	r3, #100	; 0x64
 8006ff2:	2232      	movs	r2, #50	; 0x32
 8006ff4:	4836      	ldr	r0, [pc, #216]	; (80070d0 <main+0x270>)
 8006ff6:	f007 ffa1 	bl	800ef3c <HAL_UART_Transmit>
			//Verarbeitung
			BSP_LED_On(LED2);
 8006ffa:	2001      	movs	r0, #1
 8006ffc:	f008 fd44 	bl	800fa88 <BSP_LED_On>
			float spektrogramm [SPECTROHEIGHT*SPECTROWIDTH];
			for(int sliceNummer = 0;sliceNummer<SPECTROHEIGHT;sliceNummer++)
 8007000:	2300      	movs	r3, #0
 8007002:	4a35      	ldr	r2, [pc, #212]	; (80070d8 <main+0x278>)
 8007004:	443a      	add	r2, r7
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	e109      	b.n	800721e <main+0x3be>
			{
				//Datenrahmen festlegen
				uint16_t datenSlice[SLICESIZE];
				for(int sliceIndex=0;sliceIndex<SLICESIZE;sliceIndex++)
 800700a:	2300      	movs	r3, #0
 800700c:	4a33      	ldr	r2, [pc, #204]	; (80070dc <main+0x27c>)
 800700e:	443a      	add	r2, r7
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	e020      	b.n	8007056 <main+0x1f6>
				{
					datenSlice[sliceIndex]=dataOut[(sliceNummer*SLICESIZE)+(sliceIndex*2)];
 8007014:	4b30      	ldr	r3, [pc, #192]	; (80070d8 <main+0x278>)
 8007016:	443b      	add	r3, r7
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	021a      	lsls	r2, r3, #8
 800701c:	4b2f      	ldr	r3, [pc, #188]	; (80070dc <main+0x27c>)
 800701e:	443b      	add	r3, r7
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	461a      	mov	r2, r3
 8007028:	4b26      	ldr	r3, [pc, #152]	; (80070c4 <main+0x264>)
 800702a:	443b      	add	r3, r7
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4413      	add	r3, r2
 8007030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007034:	b299      	uxth	r1, r3
 8007036:	4b2a      	ldr	r3, [pc, #168]	; (80070e0 <main+0x280>)
 8007038:	4a1b      	ldr	r2, [pc, #108]	; (80070a8 <main+0x248>)
 800703a:	443a      	add	r2, r7
 800703c:	4413      	add	r3, r2
 800703e:	4a27      	ldr	r2, [pc, #156]	; (80070dc <main+0x27c>)
 8007040:	443a      	add	r2, r7
 8007042:	6812      	ldr	r2, [r2, #0]
 8007044:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				for(int sliceIndex=0;sliceIndex<SLICESIZE;sliceIndex++)
 8007048:	4b24      	ldr	r3, [pc, #144]	; (80070dc <main+0x27c>)
 800704a:	443b      	add	r3, r7
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3301      	adds	r3, #1
 8007050:	4a22      	ldr	r2, [pc, #136]	; (80070dc <main+0x27c>)
 8007052:	443a      	add	r2, r7
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	4b21      	ldr	r3, [pc, #132]	; (80070dc <main+0x27c>)
 8007058:	443b      	add	r3, r7
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007060:	dbd8      	blt.n	8007014 <main+0x1b4>
				}
				//Fenstern
				float gefensterteWerte[SLICESIZE];
				fenstern(hammingKoeffizienten,datenSlice,gefensterteWerte,SLICESIZE);
 8007062:	4a20      	ldr	r2, [pc, #128]	; (80070e4 <main+0x284>)
 8007064:	4b10      	ldr	r3, [pc, #64]	; (80070a8 <main+0x248>)
 8007066:	443b      	add	r3, r7
 8007068:	441a      	add	r2, r3
 800706a:	491d      	ldr	r1, [pc, #116]	; (80070e0 <main+0x280>)
 800706c:	4b0e      	ldr	r3, [pc, #56]	; (80070a8 <main+0x248>)
 800706e:	443b      	add	r3, r7
 8007070:	4419      	add	r1, r3
 8007072:	480e      	ldr	r0, [pc, #56]	; (80070ac <main+0x24c>)
 8007074:	4438      	add	r0, r7
 8007076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800707a:	f000 f9bd 	bl	80073f8 <fenstern>
				//FFT
				float fftWerte[SLICESIZE];
				arm_rfft_fast_f32(&fftInstanz,gefensterteWerte,fftWerte,0);
 800707e:	4a1a      	ldr	r2, [pc, #104]	; (80070e8 <main+0x288>)
 8007080:	4b09      	ldr	r3, [pc, #36]	; (80070a8 <main+0x248>)
 8007082:	443b      	add	r3, r7
 8007084:	441a      	add	r2, r3
 8007086:	4917      	ldr	r1, [pc, #92]	; (80070e4 <main+0x284>)
 8007088:	4b07      	ldr	r3, [pc, #28]	; (80070a8 <main+0x248>)
 800708a:	443b      	add	r3, r7
 800708c:	4419      	add	r1, r3
 800708e:	4808      	ldr	r0, [pc, #32]	; (80070b0 <main+0x250>)
 8007090:	4438      	add	r0, r7
 8007092:	2300      	movs	r3, #0
 8007094:	f003 fc64 	bl	800a960 <arm_rfft_fast_f32>
				//Betrag bilden und skalieren
				float werteSlice[SLICESIZE/2];
				for(int sliceindex = 0;sliceindex<(SLICESIZE);sliceindex+=2)
 8007098:	2300      	movs	r3, #0
 800709a:	4a14      	ldr	r2, [pc, #80]	; (80070ec <main+0x28c>)
 800709c:	443a      	add	r2, r7
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	e09d      	b.n	80071de <main+0x37e>
 80070a2:	bf00      	nop
 80070a4:	fffef7cc 	.word	0xfffef7cc
 80070a8:	00021878 	.word	0x00021878
 80070ac:	00021044 	.word	0x00021044
 80070b0:	00021844 	.word	0x00021844
 80070b4:	00021864 	.word	0x00021864
 80070b8:	2002aa28 	.word	0x2002aa28
 80070bc:	00021860 	.word	0x00021860
 80070c0:	c0010000 	.word	0xc0010000
 80070c4:	0002185c 	.word	0x0002185c
 80070c8:	fffde78c 	.word	0xfffde78c
 80070cc:	0801948c 	.word	0x0801948c
 80070d0:	2002aa2c 	.word	0x2002aa2c
 80070d4:	08019430 	.word	0x08019430
 80070d8:	00021874 	.word	0x00021874
 80070dc:	00021870 	.word	0x00021870
 80070e0:	fffde7c0 	.word	0xfffde7c0
 80070e4:	fffdefc0 	.word	0xfffdefc0
 80070e8:	fffdf7c0 	.word	0xfffdf7c0
 80070ec:	0002186c 	.word	0x0002186c
				{
					float temp = sqrt(fftWerte[sliceindex]*fftWerte[sliceindex]+fftWerte[sliceindex+1]*fftWerte[sliceindex+1]);
 80070f0:	4b7b      	ldr	r3, [pc, #492]	; (80072e0 <main+0x480>)
 80070f2:	4a7c      	ldr	r2, [pc, #496]	; (80072e4 <main+0x484>)
 80070f4:	443a      	add	r2, r7
 80070f6:	4413      	add	r3, r2
 80070f8:	4a7b      	ldr	r2, [pc, #492]	; (80072e8 <main+0x488>)
 80070fa:	443a      	add	r2, r7
 80070fc:	6812      	ldr	r2, [r2, #0]
 80070fe:	0092      	lsls	r2, r2, #2
 8007100:	4413      	add	r3, r2
 8007102:	ed93 7a00 	vldr	s14, [r3]
 8007106:	4b76      	ldr	r3, [pc, #472]	; (80072e0 <main+0x480>)
 8007108:	4a76      	ldr	r2, [pc, #472]	; (80072e4 <main+0x484>)
 800710a:	443a      	add	r2, r7
 800710c:	4413      	add	r3, r2
 800710e:	4a76      	ldr	r2, [pc, #472]	; (80072e8 <main+0x488>)
 8007110:	443a      	add	r2, r7
 8007112:	6812      	ldr	r2, [r2, #0]
 8007114:	0092      	lsls	r2, r2, #2
 8007116:	4413      	add	r3, r2
 8007118:	edd3 7a00 	vldr	s15, [r3]
 800711c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007120:	4b71      	ldr	r3, [pc, #452]	; (80072e8 <main+0x488>)
 8007122:	443b      	add	r3, r7
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	1c5a      	adds	r2, r3, #1
 8007128:	4b6d      	ldr	r3, [pc, #436]	; (80072e0 <main+0x480>)
 800712a:	496e      	ldr	r1, [pc, #440]	; (80072e4 <main+0x484>)
 800712c:	4439      	add	r1, r7
 800712e:	440b      	add	r3, r1
 8007130:	0092      	lsls	r2, r2, #2
 8007132:	4413      	add	r3, r2
 8007134:	edd3 6a00 	vldr	s13, [r3]
 8007138:	4b6b      	ldr	r3, [pc, #428]	; (80072e8 <main+0x488>)
 800713a:	443b      	add	r3, r7
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	4b67      	ldr	r3, [pc, #412]	; (80072e0 <main+0x480>)
 8007142:	4968      	ldr	r1, [pc, #416]	; (80072e4 <main+0x484>)
 8007144:	4439      	add	r1, r7
 8007146:	440b      	add	r3, r1
 8007148:	0092      	lsls	r2, r2, #2
 800714a:	4413      	add	r3, r2
 800714c:	edd3 7a00 	vldr	s15, [r3]
 8007150:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007158:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800715c:	eeb0 0b47 	vmov.f64	d0, d7
 8007160:	f00d fdde 	bl	8014d20 <sqrt>
 8007164:	eeb0 7b40 	vmov.f64	d7, d0
 8007168:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800716c:	4b5f      	ldr	r3, [pc, #380]	; (80072ec <main+0x48c>)
 800716e:	443b      	add	r3, r7
 8007170:	edc3 7a00 	vstr	s15, [r3]
					if(temp>65535)
 8007174:	4b5d      	ldr	r3, [pc, #372]	; (80072ec <main+0x48c>)
 8007176:	443b      	add	r3, r7
 8007178:	edd3 7a00 	vldr	s15, [r3]
 800717c:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80072f0 <main+0x490>
 8007180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007188:	dd03      	ble.n	8007192 <main+0x332>
					{
						temp=65535;//Werte groesser 2^16 werden auf den maximalwert von uint16 gesetzt
 800718a:	4b5a      	ldr	r3, [pc, #360]	; (80072f4 <main+0x494>)
 800718c:	4a57      	ldr	r2, [pc, #348]	; (80072ec <main+0x48c>)
 800718e:	443a      	add	r2, r7
 8007190:	6013      	str	r3, [r2, #0]
					}
					werteSlice[sliceindex/2]=(float)((uint16_t)temp>>8);//Skalierung auf Integerwert zwischen 0 und 256
 8007192:	4b56      	ldr	r3, [pc, #344]	; (80072ec <main+0x48c>)
 8007194:	443b      	add	r3, r7
 8007196:	edd3 7a00 	vldr	s15, [r3]
 800719a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800719e:	ee17 3a90 	vmov	r3, s15
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	0a1b      	lsrs	r3, r3, #8
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	4b4e      	ldr	r3, [pc, #312]	; (80072e8 <main+0x488>)
 80071ae:	443b      	add	r3, r7
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	da00      	bge.n	80071b8 <main+0x358>
 80071b6:	3301      	adds	r3, #1
 80071b8:	105b      	asrs	r3, r3, #1
 80071ba:	461a      	mov	r2, r3
 80071bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071c0:	4b4d      	ldr	r3, [pc, #308]	; (80072f8 <main+0x498>)
 80071c2:	4948      	ldr	r1, [pc, #288]	; (80072e4 <main+0x484>)
 80071c4:	4439      	add	r1, r7
 80071c6:	440b      	add	r3, r1
 80071c8:	0092      	lsls	r2, r2, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	edc3 7a00 	vstr	s15, [r3]
				for(int sliceindex = 0;sliceindex<(SLICESIZE);sliceindex+=2)
 80071d0:	4b45      	ldr	r3, [pc, #276]	; (80072e8 <main+0x488>)
 80071d2:	443b      	add	r3, r7
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3302      	adds	r3, #2
 80071d8:	4a43      	ldr	r2, [pc, #268]	; (80072e8 <main+0x488>)
 80071da:	443a      	add	r2, r7
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	4b42      	ldr	r3, [pc, #264]	; (80072e8 <main+0x488>)
 80071e0:	443b      	add	r3, r7
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071e8:	db82      	blt.n	80070f0 <main+0x290>
				}
				//Anhaengen
				memcpy(&spektrogramm[sliceNummer*SPECTROWIDTH],werteSlice,sizeof(werteSlice));
 80071ea:	4b44      	ldr	r3, [pc, #272]	; (80072fc <main+0x49c>)
 80071ec:	443b      	add	r3, r7
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	021a      	lsls	r2, r3, #8
 80071f2:	4b43      	ldr	r3, [pc, #268]	; (8007300 <main+0x4a0>)
 80071f4:	493b      	ldr	r1, [pc, #236]	; (80072e4 <main+0x484>)
 80071f6:	4439      	add	r1, r7
 80071f8:	440b      	add	r3, r1
 80071fa:	0092      	lsls	r2, r2, #2
 80071fc:	1898      	adds	r0, r3, r2
 80071fe:	4b3e      	ldr	r3, [pc, #248]	; (80072f8 <main+0x498>)
 8007200:	4a38      	ldr	r2, [pc, #224]	; (80072e4 <main+0x484>)
 8007202:	443a      	add	r2, r7
 8007204:	4413      	add	r3, r2
 8007206:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800720a:	4619      	mov	r1, r3
 800720c:	f010 f94b 	bl	80174a6 <memcpy>
			for(int sliceNummer = 0;sliceNummer<SPECTROHEIGHT;sliceNummer++)
 8007210:	4b3a      	ldr	r3, [pc, #232]	; (80072fc <main+0x49c>)
 8007212:	443b      	add	r3, r7
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	3301      	adds	r3, #1
 8007218:	4a38      	ldr	r2, [pc, #224]	; (80072fc <main+0x49c>)
 800721a:	443a      	add	r2, r7
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	4b37      	ldr	r3, [pc, #220]	; (80072fc <main+0x49c>)
 8007220:	443b      	add	r3, r7
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2b3d      	cmp	r3, #61	; 0x3d
 8007226:	f77f aef0 	ble.w	800700a <main+0x1aa>
			}
			//Auswerten
			AI_ALIGNED(4)
			static ai_i8 aiInput[SPECTROHEIGHT*SPECTROWIDTH];
			memcpy(&aiInput[0],&spektrogramm[0],SPECTROHEIGHT*SPECTROWIDTH*sizeof(float));
 800722a:	4b35      	ldr	r3, [pc, #212]	; (8007300 <main+0x4a0>)
 800722c:	4a2d      	ldr	r2, [pc, #180]	; (80072e4 <main+0x484>)
 800722e:	443a      	add	r2, r7
 8007230:	4413      	add	r3, r2
 8007232:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8007236:	4619      	mov	r1, r3
 8007238:	4832      	ldr	r0, [pc, #200]	; (8007304 <main+0x4a4>)
 800723a:	f010 f934 	bl	80174a6 <memcpy>
			//ai_i8 *aiInput = &spektrogramm[0];
			float aiOutput[OUTPUTSIZE];
			aiRun(aiInput, aiOutput);
 800723e:	4b32      	ldr	r3, [pc, #200]	; (8007308 <main+0x4a8>)
 8007240:	4a28      	ldr	r2, [pc, #160]	; (80072e4 <main+0x484>)
 8007242:	443a      	add	r2, r7
 8007244:	4413      	add	r3, r2
 8007246:	4619      	mov	r1, r3
 8007248:	482e      	ldr	r0, [pc, #184]	; (8007304 <main+0x4a4>)
 800724a:	f00c fb11 	bl	8013870 <aiRun>
			sprintf(text,"Auswertung beendet\n\r");
 800724e:	4b2f      	ldr	r3, [pc, #188]	; (800730c <main+0x4ac>)
 8007250:	4a24      	ldr	r2, [pc, #144]	; (80072e4 <main+0x484>)
 8007252:	443a      	add	r2, r7
 8007254:	4413      	add	r3, r2
 8007256:	4a2e      	ldr	r2, [pc, #184]	; (8007310 <main+0x4b0>)
 8007258:	461c      	mov	r4, r3
 800725a:	4615      	mov	r5, r2
 800725c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800725e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007260:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007264:	6020      	str	r0, [r4, #0]
 8007266:	3404      	adds	r4, #4
 8007268:	7021      	strb	r1, [r4, #0]
			HAL_UART_Transmit(&huart1,text,sizeof(text),100);
 800726a:	4928      	ldr	r1, [pc, #160]	; (800730c <main+0x4ac>)
 800726c:	4b1d      	ldr	r3, [pc, #116]	; (80072e4 <main+0x484>)
 800726e:	443b      	add	r3, r7
 8007270:	4419      	add	r1, r3
 8007272:	2364      	movs	r3, #100	; 0x64
 8007274:	2232      	movs	r2, #50	; 0x32
 8007276:	4827      	ldr	r0, [pc, #156]	; (8007314 <main+0x4b4>)
 8007278:	f007 fe60 	bl	800ef3c <HAL_UART_Transmit>
			sprintf(text,"N:%f,M:%f,S:%f\n\r)",aiOutput[0],aiOutput[1],aiOutput[2]);
 800727c:	4b22      	ldr	r3, [pc, #136]	; (8007308 <main+0x4a8>)
 800727e:	4a19      	ldr	r2, [pc, #100]	; (80072e4 <main+0x484>)
 8007280:	443a      	add	r2, r7
 8007282:	4413      	add	r3, r2
 8007284:	edd3 7a00 	vldr	s15, [r3]
 8007288:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800728c:	4b1e      	ldr	r3, [pc, #120]	; (8007308 <main+0x4a8>)
 800728e:	4a15      	ldr	r2, [pc, #84]	; (80072e4 <main+0x484>)
 8007290:	443a      	add	r2, r7
 8007292:	4413      	add	r3, r2
 8007294:	edd3 7a01 	vldr	s15, [r3, #4]
 8007298:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800729c:	4b1a      	ldr	r3, [pc, #104]	; (8007308 <main+0x4a8>)
 800729e:	4a11      	ldr	r2, [pc, #68]	; (80072e4 <main+0x484>)
 80072a0:	443a      	add	r2, r7
 80072a2:	4413      	add	r3, r2
 80072a4:	edd3 6a02 	vldr	s13, [r3, #8]
 80072a8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80072ac:	4817      	ldr	r0, [pc, #92]	; (800730c <main+0x4ac>)
 80072ae:	4b0d      	ldr	r3, [pc, #52]	; (80072e4 <main+0x484>)
 80072b0:	443b      	add	r3, r7
 80072b2:	4418      	add	r0, r3
 80072b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80072b8:	ed8d 7b00 	vstr	d7, [sp]
 80072bc:	ec53 2b15 	vmov	r2, r3, d5
 80072c0:	4915      	ldr	r1, [pc, #84]	; (8007318 <main+0x4b8>)
 80072c2:	f010 fd3d 	bl	8017d40 <siprintf>
			HAL_UART_Transmit(&huart1,text,sizeof(text),100);
 80072c6:	4911      	ldr	r1, [pc, #68]	; (800730c <main+0x4ac>)
 80072c8:	4b06      	ldr	r3, [pc, #24]	; (80072e4 <main+0x484>)
 80072ca:	443b      	add	r3, r7
 80072cc:	4419      	add	r1, r3
 80072ce:	2364      	movs	r3, #100	; 0x64
 80072d0:	2232      	movs	r2, #50	; 0x32
 80072d2:	4810      	ldr	r0, [pc, #64]	; (8007314 <main+0x4b4>)
 80072d4:	f007 fe32 	bl	800ef3c <HAL_UART_Transmit>
			BSP_LED_Off(LED2);
 80072d8:	2001      	movs	r0, #1
 80072da:	f008 fbef 	bl	800fabc <BSP_LED_Off>
		gedrueckt = BSP_PB_GetState(BUTTON_USER);
 80072de:	e60f      	b.n	8006f00 <main+0xa0>
 80072e0:	fffdf7c0 	.word	0xfffdf7c0
 80072e4:	00021878 	.word	0x00021878
 80072e8:	0002186c 	.word	0x0002186c
 80072ec:	00021868 	.word	0x00021868
 80072f0:	477fff00 	.word	0x477fff00
 80072f4:	477fff00 	.word	0x477fff00
 80072f8:	fffdebc0 	.word	0xfffdebc0
 80072fc:	00021874 	.word	0x00021874
 8007300:	fffdffc0 	.word	0xfffdffc0
 8007304:	20000cc4 	.word	0x20000cc4
 8007308:	fffef7c0 	.word	0xfffef7c0
 800730c:	fffde78c 	.word	0xfffde78c
 8007310:	08019460 	.word	0x08019460
 8007314:	2002aa2c 	.word	0x2002aa2c
 8007318:	08019478 	.word	0x08019478

0800731c <BSP_AUDIO_IN_TransferComplete_CallBack>:
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                    Funktionsdefinitionen                                                                           //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800731c:	b480      	push	{r7}
 800731e:	af00      	add	r7, sp, #0
	bufferStatus=VOLL;
 8007320:	4b03      	ldr	r3, [pc, #12]	; (8007330 <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 8007322:	2202      	movs	r2, #2
 8007324:	701a      	strb	r2, [r3, #0]
}
 8007326:	bf00      	nop
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	2002aa28 	.word	0x2002aa28

08007334 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 8007334:	b480      	push	{r7}
 8007336:	af00      	add	r7, sp, #0
	bufferStatus=HALB;
 8007338:	4b03      	ldr	r3, [pc, #12]	; (8007348 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 800733a:	2201      	movs	r2, #1
 800733c:	701a      	strb	r2, [r3, #0]
}
 800733e:	bf00      	nop
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	2002aa28 	.word	0x2002aa28

0800734c <BSP_AUDIO_IN_Error_CallBack>:
void BSP_AUDIO_IN_Error_CallBack(void)
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
	bufferStatus=LEER;
 8007350:	4b03      	ldr	r3, [pc, #12]	; (8007360 <BSP_AUDIO_IN_Error_CallBack+0x14>)
 8007352:	2200      	movs	r2, #0
 8007354:	701a      	strb	r2, [r3, #0]
}
 8007356:	bf00      	nop
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	2002aa28 	.word	0x2002aa28
 8007364:	00000000 	.word	0x00000000

08007368 <hammingInit>:


void hammingInit(float *coefficient_array, int size)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
	for(int i=0;i<size;i++)
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	e029      	b.n	80073cc <hammingInit+0x64>
	{
		coefficient_array[i]=0.54-0.46*cos((2*M_PI*i)/(size-1));
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007382:	ed9f 6b17 	vldr	d6, [pc, #92]	; 80073e0 <hammingInit+0x78>
 8007386:	ee27 6b06 	vmul.f64	d6, d7, d6
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	3b01      	subs	r3, #1
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007396:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800739a:	eeb0 0b45 	vmov.f64	d0, d5
 800739e:	f00c fc77 	bl	8013c90 <cos>
 80073a2:	eeb0 6b40 	vmov.f64	d6, d0
 80073a6:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80073e8 <hammingInit+0x80>
 80073aa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80073ae:	ed9f 6b10 	vldr	d6, [pc, #64]	; 80073f0 <hammingInit+0x88>
 80073b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80073c2:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0;i<size;i++)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	3301      	adds	r3, #1
 80073ca:	60fb      	str	r3, [r7, #12]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	dbd1      	blt.n	8007378 <hammingInit+0x10>
	}
}
 80073d4:	bf00      	nop
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	f3af 8000 	nop.w
 80073e0:	54442d18 	.word	0x54442d18
 80073e4:	401921fb 	.word	0x401921fb
 80073e8:	d70a3d71 	.word	0xd70a3d71
 80073ec:	3fdd70a3 	.word	0x3fdd70a3
 80073f0:	147ae148 	.word	0x147ae148
 80073f4:	3fe147ae 	.word	0x3fe147ae

080073f8 <fenstern>:

void fenstern(float *koeffizientenArray,uint16_t *input,float *output,int elementAnzahl)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
 8007404:	603b      	str	r3, [r7, #0]
	for(int i=0;i<elementAnzahl;i++)
 8007406:	2300      	movs	r3, #0
 8007408:	617b      	str	r3, [r7, #20]
 800740a:	e019      	b.n	8007440 <fenstern+0x48>
	{
		output[i]=(float)input[i]*koeffizientenArray[i];
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	005b      	lsls	r3, r3, #1
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	4413      	add	r3, r2
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	ee07 3a90 	vmov	s15, r3
 800741a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	4413      	add	r3, r2
 8007426:	edd3 7a00 	vldr	s15, [r3]
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	4413      	add	r3, r2
 8007432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007436:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0;i<elementAnzahl;i++)
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	3301      	adds	r3, #1
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	429a      	cmp	r2, r3
 8007446:	dbe1      	blt.n	800740c <fenstern+0x14>
	}
}
 8007448:	bf00      	nop
 800744a:	371c      	adds	r7, #28
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b0b8      	sub	sp, #224	; 0xe0
 8007458:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800745a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800745e:	2234      	movs	r2, #52	; 0x34
 8007460:	2100      	movs	r1, #0
 8007462:	4618      	mov	r0, r3
 8007464:	f010 f82a 	bl	80174bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007468:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800746c:	2200      	movs	r2, #0
 800746e:	601a      	str	r2, [r3, #0]
 8007470:	605a      	str	r2, [r3, #4]
 8007472:	609a      	str	r2, [r3, #8]
 8007474:	60da      	str	r2, [r3, #12]
 8007476:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007478:	f107 0308 	add.w	r3, r7, #8
 800747c:	2290      	movs	r2, #144	; 0x90
 800747e:	2100      	movs	r1, #0
 8007480:	4618      	mov	r0, r3
 8007482:	f010 f81b 	bl	80174bc <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8007486:	4b3f      	ldr	r3, [pc, #252]	; (8007584 <SystemClock_Config+0x130>)
 8007488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748a:	4a3e      	ldr	r2, [pc, #248]	; (8007584 <SystemClock_Config+0x130>)
 800748c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007490:	6413      	str	r3, [r2, #64]	; 0x40
 8007492:	4b3c      	ldr	r3, [pc, #240]	; (8007584 <SystemClock_Config+0x130>)
 8007494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800749a:	607b      	str	r3, [r7, #4]
 800749c:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800749e:	4b3a      	ldr	r3, [pc, #232]	; (8007588 <SystemClock_Config+0x134>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80074a6:	4a38      	ldr	r2, [pc, #224]	; (8007588 <SystemClock_Config+0x134>)
 80074a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074ac:	6013      	str	r3, [r2, #0]
 80074ae:	4b36      	ldr	r3, [pc, #216]	; (8007588 <SystemClock_Config+0x134>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80074b6:	603b      	str	r3, [r7, #0]
 80074b8:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80074ba:	2302      	movs	r3, #2
 80074bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80074c0:	2301      	movs	r3, #1
 80074c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80074c6:	2310      	movs	r3, #16
 80074c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80074cc:	2302      	movs	r3, #2
 80074ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80074d2:	2300      	movs	r3, #0
 80074d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 8;
 80074d8:	2308      	movs	r3, #8
 80074da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 192;
 80074de:	23c0      	movs	r3, #192	; 0xc0
 80074e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80074e4:	2304      	movs	r3, #4
 80074e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80074ea:	2304      	movs	r3, #4
 80074ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80074f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80074f4:	4618      	mov	r0, r3
 80074f6:	f005 fdd1 	bl	800d09c <HAL_RCC_OscConfig>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <SystemClock_Config+0xb0>
	{
		Error_Handler();
 8007500:	f000 fc7e 	bl	8007e00 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007504:	230f      	movs	r3, #15
 8007506:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800750a:	2302      	movs	r3, #2
 800750c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007510:	2300      	movs	r3, #0
 8007512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007516:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800751a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800751e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007522:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8007526:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800752a:	2103      	movs	r1, #3
 800752c:	4618      	mov	r0, r3
 800752e:	f006 f827 	bl	800d580 <HAL_RCC_ClockConfig>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <SystemClock_Config+0xe8>
	{
		Error_Handler();
 8007538:	f000 fc62 	bl	8007e00 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 800753c:	4b13      	ldr	r3, [pc, #76]	; (800758c <SystemClock_Config+0x138>)
 800753e:	60bb      	str	r3, [r7, #8]
			|RCC_PERIPHCLK_SAI1;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8007540:	23c0      	movs	r3, #192	; 0xc0
 8007542:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8007544:	2302      	movs	r3, #2
 8007546:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 8007548:	2306      	movs	r3, #6
 800754a:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800754c:	2300      	movs	r3, #0
 800754e:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8007550:	2301      	movs	r3, #1
 8007552:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8007554:	2300      	movs	r3, #0
 8007556:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8007558:	2300      	movs	r3, #0
 800755a:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800755c:	2300      	movs	r3, #0
 800755e:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8007560:	2300      	movs	r3, #0
 8007562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007566:	f107 0308 	add.w	r3, r7, #8
 800756a:	4618      	mov	r0, r3
 800756c:	f006 f9d6 	bl	800d91c <HAL_RCCEx_PeriphCLKConfig>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <SystemClock_Config+0x126>
	{
		Error_Handler();
 8007576:	f000 fc43 	bl	8007e00 <Error_Handler>
	}
}
 800757a:	bf00      	nop
 800757c:	37e0      	adds	r7, #224	; 0xe0
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	40023800 	.word	0x40023800
 8007588:	40007000 	.word	0x40007000
 800758c:	08080040 	.word	0x08080040

08007590 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	af00      	add	r7, sp, #0
	hcrc.Instance = CRC;
 8007594:	4b0d      	ldr	r3, [pc, #52]	; (80075cc <MX_CRC_Init+0x3c>)
 8007596:	4a0e      	ldr	r2, [pc, #56]	; (80075d0 <MX_CRC_Init+0x40>)
 8007598:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800759a:	4b0c      	ldr	r3, [pc, #48]	; (80075cc <MX_CRC_Init+0x3c>)
 800759c:	2200      	movs	r2, #0
 800759e:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80075a0:	4b0a      	ldr	r3, [pc, #40]	; (80075cc <MX_CRC_Init+0x3c>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80075a6:	4b09      	ldr	r3, [pc, #36]	; (80075cc <MX_CRC_Init+0x3c>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80075ac:	4b07      	ldr	r3, [pc, #28]	; (80075cc <MX_CRC_Init+0x3c>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80075b2:	4b06      	ldr	r3, [pc, #24]	; (80075cc <MX_CRC_Init+0x3c>)
 80075b4:	2201      	movs	r2, #1
 80075b6:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80075b8:	4804      	ldr	r0, [pc, #16]	; (80075cc <MX_CRC_Init+0x3c>)
 80075ba:	f003 fc67 	bl	800ae8c <HAL_CRC_Init>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 80075c4:	f000 fc1c 	bl	8007e00 <Error_Handler>
	}
}
 80075c8:	bf00      	nop
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	2002aa04 	.word	0x2002aa04
 80075d0:	40023000 	.word	0x40023000

080075d4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 80075d8:	4b14      	ldr	r3, [pc, #80]	; (800762c <MX_USART1_UART_Init+0x58>)
 80075da:	4a15      	ldr	r2, [pc, #84]	; (8007630 <MX_USART1_UART_Init+0x5c>)
 80075dc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80075de:	4b13      	ldr	r3, [pc, #76]	; (800762c <MX_USART1_UART_Init+0x58>)
 80075e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80075e4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80075e6:	4b11      	ldr	r3, [pc, #68]	; (800762c <MX_USART1_UART_Init+0x58>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80075ec:	4b0f      	ldr	r3, [pc, #60]	; (800762c <MX_USART1_UART_Init+0x58>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80075f2:	4b0e      	ldr	r3, [pc, #56]	; (800762c <MX_USART1_UART_Init+0x58>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80075f8:	4b0c      	ldr	r3, [pc, #48]	; (800762c <MX_USART1_UART_Init+0x58>)
 80075fa:	220c      	movs	r2, #12
 80075fc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80075fe:	4b0b      	ldr	r3, [pc, #44]	; (800762c <MX_USART1_UART_Init+0x58>)
 8007600:	2200      	movs	r2, #0
 8007602:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007604:	4b09      	ldr	r3, [pc, #36]	; (800762c <MX_USART1_UART_Init+0x58>)
 8007606:	2200      	movs	r2, #0
 8007608:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800760a:	4b08      	ldr	r3, [pc, #32]	; (800762c <MX_USART1_UART_Init+0x58>)
 800760c:	2200      	movs	r2, #0
 800760e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007610:	4b06      	ldr	r3, [pc, #24]	; (800762c <MX_USART1_UART_Init+0x58>)
 8007612:	2200      	movs	r2, #0
 8007614:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8007616:	4805      	ldr	r0, [pc, #20]	; (800762c <MX_USART1_UART_Init+0x58>)
 8007618:	f007 fc42 	bl	800eea0 <HAL_UART_Init>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d001      	beq.n	8007626 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8007622:	f000 fbed 	bl	8007e00 <Error_Handler>
	}
}
 8007626:	bf00      	nop
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	2002aa2c 	.word	0x2002aa2c
 8007630:	40011000 	.word	0x40011000

08007634 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b090      	sub	sp, #64	; 0x40
 8007638:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800763a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800763e:	2200      	movs	r2, #0
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	605a      	str	r2, [r3, #4]
 8007644:	609a      	str	r2, [r3, #8]
 8007646:	60da      	str	r2, [r3, #12]
 8007648:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800764a:	4bac      	ldr	r3, [pc, #688]	; (80078fc <MX_GPIO_Init+0x2c8>)
 800764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764e:	4aab      	ldr	r2, [pc, #684]	; (80078fc <MX_GPIO_Init+0x2c8>)
 8007650:	f043 0310 	orr.w	r3, r3, #16
 8007654:	6313      	str	r3, [r2, #48]	; 0x30
 8007656:	4ba9      	ldr	r3, [pc, #676]	; (80078fc <MX_GPIO_Init+0x2c8>)
 8007658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765a:	f003 0310 	and.w	r3, r3, #16
 800765e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007660:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8007662:	4ba6      	ldr	r3, [pc, #664]	; (80078fc <MX_GPIO_Init+0x2c8>)
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007666:	4aa5      	ldr	r2, [pc, #660]	; (80078fc <MX_GPIO_Init+0x2c8>)
 8007668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800766c:	6313      	str	r3, [r2, #48]	; 0x30
 800766e:	4ba3      	ldr	r3, [pc, #652]	; (80078fc <MX_GPIO_Init+0x2c8>)
 8007670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007676:	627b      	str	r3, [r7, #36]	; 0x24
 8007678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800767a:	4ba0      	ldr	r3, [pc, #640]	; (80078fc <MX_GPIO_Init+0x2c8>)
 800767c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767e:	4a9f      	ldr	r2, [pc, #636]	; (80078fc <MX_GPIO_Init+0x2c8>)
 8007680:	f043 0302 	orr.w	r3, r3, #2
 8007684:	6313      	str	r3, [r2, #48]	; 0x30
 8007686:	4b9d      	ldr	r3, [pc, #628]	; (80078fc <MX_GPIO_Init+0x2c8>)
 8007688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	623b      	str	r3, [r7, #32]
 8007690:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8007692:	4b9a      	ldr	r3, [pc, #616]	; (80078fc <MX_GPIO_Init+0x2c8>)
 8007694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007696:	4a99      	ldr	r2, [pc, #612]	; (80078fc <MX_GPIO_Init+0x2c8>)
 8007698:	f043 0308 	orr.w	r3, r3, #8
 800769c:	6313      	str	r3, [r2, #48]	; 0x30
 800769e:	4b97      	ldr	r3, [pc, #604]	; (80078fc <MX_GPIO_Init+0x2c8>)
 80076a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a2:	f003 0308 	and.w	r3, r3, #8
 80076a6:	61fb      	str	r3, [r7, #28]
 80076a8:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80076aa:	4b94      	ldr	r3, [pc, #592]	; (80078fc <MX_GPIO_Init+0x2c8>)
 80076ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ae:	4a93      	ldr	r2, [pc, #588]	; (80078fc <MX_GPIO_Init+0x2c8>)
 80076b0:	f043 0304 	orr.w	r3, r3, #4
 80076b4:	6313      	str	r3, [r2, #48]	; 0x30
 80076b6:	4b91      	ldr	r3, [pc, #580]	; (80078fc <MX_GPIO_Init+0x2c8>)
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	f003 0304 	and.w	r3, r3, #4
 80076be:	61bb      	str	r3, [r7, #24]
 80076c0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80076c2:	4b8e      	ldr	r3, [pc, #568]	; (80078fc <MX_GPIO_Init+0x2c8>)
 80076c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c6:	4a8d      	ldr	r2, [pc, #564]	; (80078fc <MX_GPIO_Init+0x2c8>)
 80076c8:	f043 0301 	orr.w	r3, r3, #1
 80076cc:	6313      	str	r3, [r2, #48]	; 0x30
 80076ce:	4b8b      	ldr	r3, [pc, #556]	; (80078fc <MX_GPIO_Init+0x2c8>)
 80076d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	617b      	str	r3, [r7, #20]
 80076d8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 80076da:	4b88      	ldr	r3, [pc, #544]	; (80078fc <MX_GPIO_Init+0x2c8>)
 80076dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076de:	4a87      	ldr	r2, [pc, #540]	; (80078fc <MX_GPIO_Init+0x2c8>)
 80076e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076e4:	6313      	str	r3, [r2, #48]	; 0x30
 80076e6:	4b85      	ldr	r3, [pc, #532]	; (80078fc <MX_GPIO_Init+0x2c8>)
 80076e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076ee:	613b      	str	r3, [r7, #16]
 80076f0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 80076f2:	4b82      	ldr	r3, [pc, #520]	; (80078fc <MX_GPIO_Init+0x2c8>)
 80076f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f6:	4a81      	ldr	r2, [pc, #516]	; (80078fc <MX_GPIO_Init+0x2c8>)
 80076f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076fc:	6313      	str	r3, [r2, #48]	; 0x30
 80076fe:	4b7f      	ldr	r3, [pc, #508]	; (80078fc <MX_GPIO_Init+0x2c8>)
 8007700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 800770a:	4b7c      	ldr	r3, [pc, #496]	; (80078fc <MX_GPIO_Init+0x2c8>)
 800770c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770e:	4a7b      	ldr	r2, [pc, #492]	; (80078fc <MX_GPIO_Init+0x2c8>)
 8007710:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007714:	6313      	str	r3, [r2, #48]	; 0x30
 8007716:	4b79      	ldr	r3, [pc, #484]	; (80078fc <MX_GPIO_Init+0x2c8>)
 8007718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800771e:	60bb      	str	r3, [r7, #8]
 8007720:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8007722:	4b76      	ldr	r3, [pc, #472]	; (80078fc <MX_GPIO_Init+0x2c8>)
 8007724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007726:	4a75      	ldr	r2, [pc, #468]	; (80078fc <MX_GPIO_Init+0x2c8>)
 8007728:	f043 0320 	orr.w	r3, r3, #32
 800772c:	6313      	str	r3, [r2, #48]	; 0x30
 800772e:	4b73      	ldr	r3, [pc, #460]	; (80078fc <MX_GPIO_Init+0x2c8>)
 8007730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007732:	f003 0320 	and.w	r3, r3, #32
 8007736:	607b      	str	r3, [r7, #4]
 8007738:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800773a:	4b70      	ldr	r3, [pc, #448]	; (80078fc <MX_GPIO_Init+0x2c8>)
 800773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773e:	4a6f      	ldr	r2, [pc, #444]	; (80078fc <MX_GPIO_Init+0x2c8>)
 8007740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007744:	6313      	str	r3, [r2, #48]	; 0x30
 8007746:	4b6d      	ldr	r3, [pc, #436]	; (80078fc <MX_GPIO_Init+0x2c8>)
 8007748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8007752:	2304      	movs	r3, #4
 8007754:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007756:	2302      	movs	r3, #2
 8007758:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800775a:	2300      	movs	r3, #0
 800775c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800775e:	2303      	movs	r3, #3
 8007760:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8007762:	2309      	movs	r3, #9
 8007764:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8007766:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800776a:	4619      	mov	r1, r3
 800776c:	4864      	ldr	r0, [pc, #400]	; (8007900 <MX_GPIO_Init+0x2cc>)
 800776e:	f004 fc83 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8007772:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8007776:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007778:	2302      	movs	r3, #2
 800777a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800777c:	2300      	movs	r3, #0
 800777e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007780:	2303      	movs	r3, #3
 8007782:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007784:	230b      	movs	r3, #11
 8007786:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800778c:	4619      	mov	r1, r3
 800778e:	485d      	ldr	r0, [pc, #372]	; (8007904 <MX_GPIO_Init+0x2d0>)
 8007790:	f004 fc72 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin 
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
	GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8007794:	f64f 7383 	movw	r3, #65411	; 0xff83
 8007798:	62fb      	str	r3, [r7, #44]	; 0x2c
			|FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
			|FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800779a:	2302      	movs	r3, #2
 800779c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800779e:	2300      	movs	r3, #0
 80077a0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077a2:	2303      	movs	r3, #3
 80077a4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80077a6:	230c      	movs	r3, #12
 80077a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80077aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077ae:	4619      	mov	r1, r3
 80077b0:	4853      	ldr	r0, [pc, #332]	; (8007900 <MX_GPIO_Init+0x2cc>)
 80077b2:	f004 fc61 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80077b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80077ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80077bc:	2312      	movs	r3, #18
 80077be:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80077c0:	2301      	movs	r3, #1
 80077c2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077c4:	2300      	movs	r3, #0
 80077c6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80077c8:	2304      	movs	r3, #4
 80077ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077d0:	4619      	mov	r1, r3
 80077d2:	484d      	ldr	r0, [pc, #308]	; (8007908 <MX_GPIO_Init+0x2d4>)
 80077d4:	f004 fc50 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80077d8:	f643 4323 	movw	r3, #15395	; 0x3c23
 80077dc:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077de:	2302      	movs	r3, #2
 80077e0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077e6:	2303      	movs	r3, #3
 80077e8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80077ea:	230a      	movs	r3, #10
 80077ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077f2:	4619      	mov	r1, r3
 80077f4:	4844      	ldr	r0, [pc, #272]	; (8007908 <MX_GPIO_Init+0x2d4>)
 80077f6:	f004 fc3f 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : uSD_D3_Pin uSD_D2_Pin */
	GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 80077fa:	2318      	movs	r3, #24
 80077fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077fe:	2302      	movs	r3, #2
 8007800:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007802:	2300      	movs	r3, #0
 8007804:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007806:	2303      	movs	r3, #3
 8007808:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800780a:	230a      	movs	r3, #10
 800780c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800780e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007812:	4619      	mov	r1, r3
 8007814:	483c      	ldr	r0, [pc, #240]	; (8007908 <MX_GPIO_Init+0x2d4>)
 8007816:	f004 fc2f 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : uSD_CMD_Pin uSD_CLK_Pin */
	GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 800781a:	23c0      	movs	r3, #192	; 0xc0
 800781c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800781e:	2302      	movs	r3, #2
 8007820:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007822:	2300      	movs	r3, #0
 8007824:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007826:	2303      	movs	r3, #3
 8007828:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800782a:	230b      	movs	r3, #11
 800782c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800782e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007832:	4619      	mov	r1, r3
 8007834:	4835      	ldr	r0, [pc, #212]	; (800790c <MX_GPIO_Init+0x2d8>)
 8007836:	f004 fc1f 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : WIFI_RX_Pin */
	GPIO_InitStruct.Pin = WIFI_RX_Pin;
 800783a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800783e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007840:	2302      	movs	r3, #2
 8007842:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007844:	2300      	movs	r3, #0
 8007846:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007848:	2303      	movs	r3, #3
 800784a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800784c:	2308      	movs	r3, #8
 800784e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8007850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007854:	4619      	mov	r1, r3
 8007856:	482e      	ldr	r0, [pc, #184]	; (8007910 <MX_GPIO_Init+0x2dc>)
 8007858:	f004 fc0e 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : CEC_Pin */
	GPIO_InitStruct.Pin = CEC_Pin;
 800785c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007860:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007862:	2312      	movs	r3, #18
 8007864:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007866:	2300      	movs	r3, #0
 8007868:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800786a:	2300      	movs	r3, #0
 800786c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 800786e:	2304      	movs	r3, #4
 8007870:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8007872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007876:	4619      	mov	r1, r3
 8007878:	4826      	ldr	r0, [pc, #152]	; (8007914 <MX_GPIO_Init+0x2e0>)
 800787a:	f004 fbfd 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : AUDIO_SDA_Pin */
	GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 800787e:	2380      	movs	r3, #128	; 0x80
 8007880:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007882:	2312      	movs	r3, #18
 8007884:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007886:	2301      	movs	r3, #1
 8007888:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800788a:	2303      	movs	r3, #3
 800788c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 800788e:	230b      	movs	r3, #11
 8007890:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8007892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007896:	4619      	mov	r1, r3
 8007898:	481b      	ldr	r0, [pc, #108]	; (8007908 <MX_GPIO_Init+0x2d4>)
 800789a:	f004 fbed 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800789e:	2340      	movs	r3, #64	; 0x40
 80078a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078a2:	2302      	movs	r3, #2
 80078a4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078a6:	2300      	movs	r3, #0
 80078a8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078aa:	2303      	movs	r3, #3
 80078ac:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80078ae:	230a      	movs	r3, #10
 80078b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80078b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078b6:	4619      	mov	r1, r3
 80078b8:	4813      	ldr	r0, [pc, #76]	; (8007908 <MX_GPIO_Init+0x2d4>)
 80078ba:	f004 fbdd 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A12_Pin
                           FMC_A10_Pin FMC_BA1_Pin FMC_BA0_Pin */
	GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 80078be:	f248 1337 	movw	r3, #33079	; 0x8137
 80078c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			|FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078c4:	2302      	movs	r3, #2
 80078c6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078c8:	2300      	movs	r3, #0
 80078ca:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078cc:	2303      	movs	r3, #3
 80078ce:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80078d0:	230c      	movs	r3, #12
 80078d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80078d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078d8:	4619      	mov	r1, r3
 80078da:	480a      	ldr	r0, [pc, #40]	; (8007904 <MX_GPIO_Init+0x2d0>)
 80078dc:	f004 fbcc 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD_USER1_Pin Audio_INT_Pin WIFI_RST_Pin DSI_RESET_Pin
                           ARD_D8_Pin LD_USER2_Pin ARD_D7_Pin ARD_D4_Pin 
                           ARD_D2_Pin */
	GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|DSI_RESET_Pin
 80078e0:	f24f 033b 	movw	r3, #61499	; 0xf03b
 80078e4:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ARD_D8_Pin|LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin
			|ARD_D2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078e6:	2300      	movs	r3, #0
 80078e8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80078ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078f2:	4619      	mov	r1, r3
 80078f4:	4808      	ldr	r0, [pc, #32]	; (8007918 <MX_GPIO_Init+0x2e4>)
 80078f6:	f004 fbbf 	bl	800c078 <HAL_GPIO_Init>
 80078fa:	e00f      	b.n	800791c <MX_GPIO_Init+0x2e8>
 80078fc:	40023800 	.word	0x40023800
 8007900:	40021000 	.word	0x40021000
 8007904:	40021800 	.word	0x40021800
 8007908:	40020400 	.word	0x40020400
 800790c:	40020c00 	.word	0x40020c00
 8007910:	40020800 	.word	0x40020800
 8007914:	40020000 	.word	0x40020000
 8007918:	40022400 	.word	0x40022400

	/*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
	GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800791c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8007920:	62fb      	str	r3, [r7, #44]	; 0x2c
			|FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007922:	2302      	movs	r3, #2
 8007924:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007926:	2300      	movs	r3, #0
 8007928:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800792a:	2303      	movs	r3, #3
 800792c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800792e:	230c      	movs	r3, #12
 8007930:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007936:	4619      	mov	r1, r3
 8007938:	48bb      	ldr	r0, [pc, #748]	; (8007c28 <MX_GPIO_Init+0x5f4>)
 800793a:	f004 fb9d 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 800793e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007942:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007944:	2302      	movs	r3, #2
 8007946:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007948:	2300      	movs	r3, #0
 800794a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800794c:	2303      	movs	r3, #3
 800794e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8007950:	2309      	movs	r3, #9
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007958:	4619      	mov	r1, r3
 800795a:	48b4      	ldr	r0, [pc, #720]	; (8007c2c <MX_GPIO_Init+0x5f8>)
 800795c:	f004 fb8c 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D13_SCK_Pin */
	GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8007960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007964:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007966:	2302      	movs	r3, #2
 8007968:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800796a:	2300      	movs	r3, #0
 800796c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800796e:	2300      	movs	r3, #0
 8007970:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007972:	2305      	movs	r3, #5
 8007974:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8007976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800797a:	4619      	mov	r1, r3
 800797c:	48ac      	ldr	r0, [pc, #688]	; (8007c30 <MX_GPIO_Init+0x5fc>)
 800797e:	f004 fb7b 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : NC4_Pin NC5_Pin uSD_Detect_Pin LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 8007982:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 8007986:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007988:	2300      	movs	r3, #0
 800798a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800798c:	2300      	movs	r3, #0
 800798e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8007990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007994:	4619      	mov	r1, r3
 8007996:	48a7      	ldr	r0, [pc, #668]	; (8007c34 <MX_GPIO_Init+0x600>)
 8007998:	f004 fb6e 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : FMC_NBL2_Pin D27_Pin D26_Pin FMC_NBL3_Pin
                           D29_Pin D31_Pin D28_Pin D25_Pin 
                           D30_Pin D24_Pin */
	GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 800799c:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80079a0:	62fb      	str	r3, [r7, #44]	; 0x2c
			|D29_Pin|D31_Pin|D28_Pin|D25_Pin
			|D30_Pin|D24_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079a2:	2302      	movs	r3, #2
 80079a4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079a6:	2300      	movs	r3, #0
 80079a8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079aa:	2303      	movs	r3, #3
 80079ac:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80079ae:	230c      	movs	r3, #12
 80079b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80079b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80079b6:	4619      	mov	r1, r3
 80079b8:	489e      	ldr	r0, [pc, #632]	; (8007c34 <MX_GPIO_Init+0x600>)
 80079ba:	f004 fb5d 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin
                           NC7_Pin */
	GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 80079be:	23f8      	movs	r3, #248	; 0xf8
 80079c0:	62fb      	str	r3, [r7, #44]	; 0x2c
			|NC7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079c2:	2300      	movs	r3, #0
 80079c4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079c6:	2300      	movs	r3, #0
 80079c8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80079ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80079ce:	4619      	mov	r1, r3
 80079d0:	4899      	ldr	r0, [pc, #612]	; (8007c38 <MX_GPIO_Init+0x604>)
 80079d2:	f004 fb51 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPDIF_RX_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 80079d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079da:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079dc:	2302      	movs	r3, #2
 80079de:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079e0:	2300      	movs	r3, #0
 80079e2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079e4:	2300      	movs	r3, #0
 80079e6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 80079e8:	2307      	movs	r3, #7
 80079ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 80079ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80079f0:	4619      	mov	r1, r3
 80079f2:	4892      	ldr	r0, [pc, #584]	; (8007c3c <MX_GPIO_Init+0x608>)
 80079f4:	f004 fb40 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : uSD_D1_Pin uSD_D0_Pin */
	GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 80079f8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80079fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079fe:	2302      	movs	r3, #2
 8007a00:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a02:	2300      	movs	r3, #0
 8007a04:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a06:	2303      	movs	r3, #3
 8007a08:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8007a0a:	230b      	movs	r3, #11
 8007a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a12:	4619      	mov	r1, r3
 8007a14:	4889      	ldr	r0, [pc, #548]	; (8007c3c <MX_GPIO_Init+0x608>)
 8007a16:	f004 fb2f 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8007a1a:	2330      	movs	r3, #48	; 0x30
 8007a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a22:	2300      	movs	r3, #0
 8007a24:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	487e      	ldr	r0, [pc, #504]	; (8007c28 <MX_GPIO_Init+0x5f4>)
 8007a2e:	f004 fb23 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI2_NSS_Pin */
	GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8007a32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a36:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a38:	2302      	movs	r3, #2
 8007a3a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a40:	2303      	movs	r3, #3
 8007a42:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007a44:	2305      	movs	r3, #5
 8007a46:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8007a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	4878      	ldr	r0, [pc, #480]	; (8007c30 <MX_GPIO_Init+0x5fc>)
 8007a50:	f004 fb12 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin 
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
	GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8007a54:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8007a58:	62fb      	str	r3, [r7, #44]	; 0x2c
			|FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
			|FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a62:	2303      	movs	r3, #3
 8007a64:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007a66:	230c      	movs	r3, #12
 8007a68:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a6e:	4619      	mov	r1, r3
 8007a70:	4873      	ldr	r0, [pc, #460]	; (8007c40 <MX_GPIO_Init+0x60c>)
 8007a72:	f004 fb01 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : WIFI_TX_Pin */
	GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8007a76:	2304      	movs	r3, #4
 8007a78:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a82:	2303      	movs	r3, #3
 8007a84:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007a86:	2308      	movs	r3, #8
 8007a88:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8007a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4865      	ldr	r0, [pc, #404]	; (8007c28 <MX_GPIO_Init+0x5f4>)
 8007a92:	f004 faf1 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : D23_Pin D21_Pin D22_Pin FMC_SDNME_Pin
                           FMC_SDNE0_Pin FMC_SDCKE0_Pin D20_Pin FMC_D_7_Pin 
                           FMC_D19_Pin FMC_D16_Pin FMC_D18_Pin */
	GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 8007a96:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8007a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			|FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
			|FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007aa8:	230c      	movs	r3, #12
 8007aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007aac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	4864      	ldr	r0, [pc, #400]	; (8007c44 <MX_GPIO_Init+0x610>)
 8007ab4:	f004 fae0 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8007ab8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007abc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007abe:	2302      	movs	r3, #2
 8007ac0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8007aca:	230a      	movs	r3, #10
 8007acc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8007ace:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	4857      	ldr	r0, [pc, #348]	; (8007c34 <MX_GPIO_Init+0x600>)
 8007ad6:	f004 facf 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : CEC_CLK_Pin */
	GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8007ada:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007aec:	2300      	movs	r3, #0
 8007aee:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8007af0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007af4:	4619      	mov	r1, r3
 8007af6:	484e      	ldr	r0, [pc, #312]	; (8007c30 <MX_GPIO_Init+0x5fc>)
 8007af8:	f004 fabe 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 8007afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b00:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007b02:	4b51      	ldr	r3, [pc, #324]	; (8007c48 <MX_GPIO_Init+0x614>)
 8007b04:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b06:	2300      	movs	r3, #0
 8007b08:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8007b0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b0e:	4619      	mov	r1, r3
 8007b10:	4848      	ldr	r0, [pc, #288]	; (8007c34 <MX_GPIO_Init+0x600>)
 8007b12:	f004 fab1 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D5_PWM_Pin */
	GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8007b16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b20:	2300      	movs	r3, #0
 8007b22:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b24:	2300      	movs	r3, #0
 8007b26:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007b28:	2302      	movs	r3, #2
 8007b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8007b2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b30:	4619      	mov	r1, r3
 8007b32:	483e      	ldr	r0, [pc, #248]	; (8007c2c <MX_GPIO_Init+0x5f8>)
 8007b34:	f004 faa0 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D0_RX_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8007b38:	23c0      	movs	r3, #192	; 0xc0
 8007b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b40:	2300      	movs	r3, #0
 8007b42:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b44:	2303      	movs	r3, #3
 8007b46:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007b48:	2308      	movs	r3, #8
 8007b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b50:	4619      	mov	r1, r3
 8007b52:	4836      	ldr	r0, [pc, #216]	; (8007c2c <MX_GPIO_Init+0x5f8>)
 8007b54:	f004 fa90 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8007b58:	2310      	movs	r3, #16
 8007b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b60:	2300      	movs	r3, #0
 8007b62:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b64:	2303      	movs	r3, #3
 8007b66:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8007b68:	230a      	movs	r3, #10
 8007b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8007b6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b70:	4619      	mov	r1, r3
 8007b72:	4834      	ldr	r0, [pc, #208]	; (8007c44 <MX_GPIO_Init+0x610>)
 8007b74:	f004 fa80 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : EXT_SDA_Pin EXT_SCL_Pin */
	GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8007b78:	2348      	movs	r3, #72	; 0x48
 8007b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b80:	2300      	movs	r3, #0
 8007b82:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b88:	4619      	mov	r1, r3
 8007b8a:	482c      	ldr	r0, [pc, #176]	; (8007c3c <MX_GPIO_Init+0x608>)
 8007b8c:	f004 fa74 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D6_PWM_Pin */
	GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8007b90:	2380      	movs	r3, #128	; 0x80
 8007b92:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b94:	2302      	movs	r3, #2
 8007b96:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8007ba4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007ba8:	4619      	mov	r1, r3
 8007baa:	4825      	ldr	r0, [pc, #148]	; (8007c40 <MX_GPIO_Init+0x60c>)
 8007bac:	f004 fa64 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D3_PWM_Pin */
	GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8007bb0:	2340      	movs	r3, #64	; 0x40
 8007bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8007bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007bc8:	4619      	mov	r1, r3
 8007bca:	481d      	ldr	r0, [pc, #116]	; (8007c40 <MX_GPIO_Init+0x60c>)
 8007bcc:	f004 fa54 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_A1_Pin ARDUINO_A2_Pin ARDUINO_A3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8007bd0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8007bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007bde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007be2:	4619      	mov	r1, r3
 8007be4:	4816      	ldr	r0, [pc, #88]	; (8007c40 <MX_GPIO_Init+0x60c>)
 8007be6:	f004 fa47 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_STP_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8007bea:	2301      	movs	r3, #1
 8007bec:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bee:	2302      	movs	r3, #2
 8007bf0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8007bfa:	230a      	movs	r3, #10
 8007bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8007bfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c02:	4619      	mov	r1, r3
 8007c04:	4809      	ldr	r0, [pc, #36]	; (8007c2c <MX_GPIO_Init+0x5f8>)
 8007c06:	f004 fa37 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007c0a:	2332      	movs	r3, #50	; 0x32
 8007c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c0e:	2302      	movs	r3, #2
 8007c10:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c16:	2303      	movs	r3, #3
 8007c18:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007c1a:	230b      	movs	r3, #11
 8007c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c22:	4619      	mov	r1, r3
 8007c24:	e012      	b.n	8007c4c <MX_GPIO_Init+0x618>
 8007c26:	bf00      	nop
 8007c28:	40020c00 	.word	0x40020c00
 8007c2c:	40020800 	.word	0x40020800
 8007c30:	40020000 	.word	0x40020000
 8007c34:	40022000 	.word	0x40022000
 8007c38:	40022800 	.word	0x40022800
 8007c3c:	40021800 	.word	0x40021800
 8007c40:	40021400 	.word	0x40021400
 8007c44:	40021c00 	.word	0x40021c00
 8007c48:	10120000 	.word	0x10120000
 8007c4c:	4865      	ldr	r0, [pc, #404]	; (8007de4 <MX_GPIO_Init+0x7b0>)
 8007c4e:	f004 fa13 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_A2_Pin */
	GPIO_InitStruct.Pin = ARD_A2_Pin;
 8007c52:	2304      	movs	r3, #4
 8007c54:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c56:	2303      	movs	r3, #3
 8007c58:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8007c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c62:	4619      	mov	r1, r3
 8007c64:	485f      	ldr	r0, [pc, #380]	; (8007de4 <MX_GPIO_Init+0x7b0>)
 8007c66:	f004 fa07 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007c6a:	2304      	movs	r3, #4
 8007c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c6e:	2302      	movs	r3, #2
 8007c70:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c72:	2300      	movs	r3, #0
 8007c74:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c76:	2303      	movs	r3, #3
 8007c78:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8007c7a:	2309      	movs	r3, #9
 8007c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c82:	4619      	mov	r1, r3
 8007c84:	4858      	ldr	r0, [pc, #352]	; (8007de8 <MX_GPIO_Init+0x7b4>)
 8007c86:	f004 f9f7 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : AUDIO_SCL_Pin */
	GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8007c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007c90:	2312      	movs	r3, #18
 8007c92:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c94:	2301      	movs	r3, #1
 8007c96:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8007c9c:	2304      	movs	r3, #4
 8007c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8007ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	4851      	ldr	r0, [pc, #324]	; (8007dec <MX_GPIO_Init+0x7b8>)
 8007ca8:	f004 f9e6 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D3_Pin */
	GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8007cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8007cbe:	2309      	movs	r3, #9
 8007cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8007cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	4848      	ldr	r0, [pc, #288]	; (8007dec <MX_GPIO_Init+0x7b8>)
 8007cca:	f004 f9d5 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007cce:	2386      	movs	r3, #134	; 0x86
 8007cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007cde:	230b      	movs	r3, #11
 8007ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ce2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	4841      	ldr	r0, [pc, #260]	; (8007df0 <MX_GPIO_Init+0x7bc>)
 8007cea:	f004 f9c5 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : B_USER_Pin */
	GPIO_InitStruct.Pin = B_USER_Pin;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007cf2:	4b40      	ldr	r3, [pc, #256]	; (8007df4 <MX_GPIO_Init+0x7c0>)
 8007cf4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8007cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007cfe:	4619      	mov	r1, r3
 8007d00:	483b      	ldr	r0, [pc, #236]	; (8007df0 <MX_GPIO_Init+0x7bc>)
 8007d02:	f004 f9b9 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_A1_Pin ARD_A0_Pin */
	GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8007d06:	2350      	movs	r3, #80	; 0x50
 8007d08:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d16:	4619      	mov	r1, r3
 8007d18:	4835      	ldr	r0, [pc, #212]	; (8007df0 <MX_GPIO_Init+0x7bc>)
 8007d1a:	f004 f9ad 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPDIF_TX_Pin */
	GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8007d1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d22:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d24:	2302      	movs	r3, #2
 8007d26:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8007d30:	230a      	movs	r3, #10
 8007d32:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8007d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d38:	4619      	mov	r1, r3
 8007d3a:	482c      	ldr	r0, [pc, #176]	; (8007dec <MX_GPIO_Init+0x7b8>)
 8007d3c:	f004 f99c 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : EXT_RST_Pin */
	GPIO_InitStruct.Pin = EXT_RST_Pin;
 8007d40:	2380      	movs	r3, #128	; 0x80
 8007d42:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d44:	2300      	movs	r3, #0
 8007d46:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8007d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d50:	4619      	mov	r1, r3
 8007d52:	4829      	ldr	r0, [pc, #164]	; (8007df8 <MX_GPIO_Init+0x7c4>)
 8007d54:	f004 f990 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8007d58:	2328      	movs	r3, #40	; 0x28
 8007d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d60:	2300      	movs	r3, #0
 8007d62:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d64:	2303      	movs	r3, #3
 8007d66:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8007d68:	230a      	movs	r3, #10
 8007d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d70:	4619      	mov	r1, r3
 8007d72:	481f      	ldr	r0, [pc, #124]	; (8007df0 <MX_GPIO_Init+0x7bc>)
 8007d74:	f004 f980 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : DSIHOST_TE_Pin */
	GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 8007d78:	2304      	movs	r3, #4
 8007d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d80:	2300      	movs	r3, #0
 8007d82:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d84:	2300      	movs	r3, #0
 8007d86:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8007d88:	230d      	movs	r3, #13
 8007d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8007d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d90:	4619      	mov	r1, r3
 8007d92:	481a      	ldr	r0, [pc, #104]	; (8007dfc <MX_GPIO_Init+0x7c8>)
 8007d94:	f004 f970 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8007d98:	2340      	movs	r3, #64	; 0x40
 8007d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007da0:	2300      	movs	r3, #0
 8007da2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007da4:	2300      	movs	r3, #0
 8007da6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8007da8:	2309      	movs	r3, #9
 8007daa:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8007dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007db0:	4619      	mov	r1, r3
 8007db2:	4811      	ldr	r0, [pc, #68]	; (8007df8 <MX_GPIO_Init+0x7c4>)
 8007db4:	f004 f960 	bl	800c078 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8007db8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007dca:	2305      	movs	r3, #5
 8007dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007dce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	4804      	ldr	r0, [pc, #16]	; (8007de8 <MX_GPIO_Init+0x7b4>)
 8007dd6:	f004 f94f 	bl	800c078 <HAL_GPIO_Init>

}
 8007dda:	bf00      	nop
 8007ddc:	3740      	adds	r7, #64	; 0x40
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	40020800 	.word	0x40020800
 8007de8:	40020400 	.word	0x40020400
 8007dec:	40020c00 	.word	0x40020c00
 8007df0:	40020000 	.word	0x40020000
 8007df4:	10110000 	.word	0x10110000
 8007df8:	40021c00 	.word	0x40021c00
 8007dfc:	40022400 	.word	0x40022400

08007e00 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8007e00:	b480      	push	{r7}
 8007e02:	af00      	add	r7, sp, #0
	//wo keine fehler sind muss nicht gehandelt werden!
}
 8007e04:	bf00      	nop
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
	...

08007e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007e16:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <HAL_MspInit+0x44>)
 8007e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1a:	4a0e      	ldr	r2, [pc, #56]	; (8007e54 <HAL_MspInit+0x44>)
 8007e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e20:	6413      	str	r3, [r2, #64]	; 0x40
 8007e22:	4b0c      	ldr	r3, [pc, #48]	; (8007e54 <HAL_MspInit+0x44>)
 8007e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e2a:	607b      	str	r3, [r7, #4]
 8007e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e2e:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <HAL_MspInit+0x44>)
 8007e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e32:	4a08      	ldr	r2, [pc, #32]	; (8007e54 <HAL_MspInit+0x44>)
 8007e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e38:	6453      	str	r3, [r2, #68]	; 0x44
 8007e3a:	4b06      	ldr	r3, [pc, #24]	; (8007e54 <HAL_MspInit+0x44>)
 8007e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e42:	603b      	str	r3, [r7, #0]
 8007e44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	40023800 	.word	0x40023800

08007e58 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a0a      	ldr	r2, [pc, #40]	; (8007e90 <HAL_CRC_MspInit+0x38>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d10b      	bne.n	8007e82 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007e6a:	4b0a      	ldr	r3, [pc, #40]	; (8007e94 <HAL_CRC_MspInit+0x3c>)
 8007e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6e:	4a09      	ldr	r2, [pc, #36]	; (8007e94 <HAL_CRC_MspInit+0x3c>)
 8007e70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e74:	6313      	str	r3, [r2, #48]	; 0x30
 8007e76:	4b07      	ldr	r3, [pc, #28]	; (8007e94 <HAL_CRC_MspInit+0x3c>)
 8007e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e7e:	60fb      	str	r3, [r7, #12]
 8007e80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8007e82:	bf00      	nop
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	40023000 	.word	0x40023000
 8007e94:	40023800 	.word	0x40023800

08007e98 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b08a      	sub	sp, #40	; 0x28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ea0:	f107 0314 	add.w	r3, r7, #20
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	605a      	str	r2, [r3, #4]
 8007eaa:	609a      	str	r2, [r3, #8]
 8007eac:	60da      	str	r2, [r3, #12]
 8007eae:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8007eb0:	4b26      	ldr	r3, [pc, #152]	; (8007f4c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d144      	bne.n	8007f42 <HAL_DFSDM_ChannelMspInit+0xaa>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8007eb8:	4b25      	ldr	r3, [pc, #148]	; (8007f50 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8007eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ebc:	4a24      	ldr	r2, [pc, #144]	; (8007f50 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8007ebe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ec2:	6453      	str	r3, [r2, #68]	; 0x44
 8007ec4:	4b22      	ldr	r3, [pc, #136]	; (8007f50 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8007ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ecc:	613b      	str	r3, [r7, #16]
 8007ece:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ed0:	4b1f      	ldr	r3, [pc, #124]	; (8007f50 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8007ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed4:	4a1e      	ldr	r2, [pc, #120]	; (8007f50 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8007ed6:	f043 0304 	orr.w	r3, r3, #4
 8007eda:	6313      	str	r3, [r2, #48]	; 0x30
 8007edc:	4b1c      	ldr	r3, [pc, #112]	; (8007f50 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8007ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee0:	f003 0304 	and.w	r3, r3, #4
 8007ee4:	60fb      	str	r3, [r7, #12]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007ee8:	4b19      	ldr	r3, [pc, #100]	; (8007f50 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8007eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eec:	4a18      	ldr	r2, [pc, #96]	; (8007f50 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8007eee:	f043 0308 	orr.w	r3, r3, #8
 8007ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8007ef4:	4b16      	ldr	r3, [pc, #88]	; (8007f50 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8007ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef8:	f003 0308 	and.w	r3, r3, #8
 8007efc:	60bb      	str	r3, [r7, #8]
 8007efe:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PC11     ------> DFSDM1_DATIN5
    PD3     ------> DFSDM1_CKOUT
    PC3     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin|DFSDM_DATIN1_Pin;
 8007f00:	f640 0308 	movw	r3, #2056	; 0x808
 8007f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f06:	2302      	movs	r3, #2
 8007f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8007f12:	2303      	movs	r3, #3
 8007f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f16:	f107 0314 	add.w	r3, r7, #20
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	480d      	ldr	r0, [pc, #52]	; (8007f54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8007f1e:	f004 f8ab 	bl	800c078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8007f22:	2308      	movs	r3, #8
 8007f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f26:	2302      	movs	r3, #2
 8007f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8007f32:	2303      	movs	r3, #3
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8007f36:	f107 0314 	add.w	r3, r7, #20
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	4806      	ldr	r0, [pc, #24]	; (8007f58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8007f3e:	f004 f89b 	bl	800c078 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8007f42:	bf00      	nop
 8007f44:	3728      	adds	r7, #40	; 0x28
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20004ac4 	.word	0x20004ac4
 8007f50:	40023800 	.word	0x40023800
 8007f54:	40020800 	.word	0x40020800
 8007f58:	40020c00 	.word	0x40020c00

08007f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b08a      	sub	sp, #40	; 0x28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f64:	f107 0314 	add.w	r3, r7, #20
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]
 8007f6c:	605a      	str	r2, [r3, #4]
 8007f6e:	609a      	str	r2, [r3, #8]
 8007f70:	60da      	str	r2, [r3, #12]
 8007f72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a20      	ldr	r2, [pc, #128]	; (8007ffc <HAL_UART_MspInit+0xa0>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d139      	bne.n	8007ff2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007f7e:	4b20      	ldr	r3, [pc, #128]	; (8008000 <HAL_UART_MspInit+0xa4>)
 8007f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f82:	4a1f      	ldr	r2, [pc, #124]	; (8008000 <HAL_UART_MspInit+0xa4>)
 8007f84:	f043 0310 	orr.w	r3, r3, #16
 8007f88:	6453      	str	r3, [r2, #68]	; 0x44
 8007f8a:	4b1d      	ldr	r3, [pc, #116]	; (8008000 <HAL_UART_MspInit+0xa4>)
 8007f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f8e:	f003 0310 	and.w	r3, r3, #16
 8007f92:	613b      	str	r3, [r7, #16]
 8007f94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f96:	4b1a      	ldr	r3, [pc, #104]	; (8008000 <HAL_UART_MspInit+0xa4>)
 8007f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9a:	4a19      	ldr	r2, [pc, #100]	; (8008000 <HAL_UART_MspInit+0xa4>)
 8007f9c:	f043 0301 	orr.w	r3, r3, #1
 8007fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8007fa2:	4b17      	ldr	r3, [pc, #92]	; (8008000 <HAL_UART_MspInit+0xa4>)
 8007fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	60fb      	str	r3, [r7, #12]
 8007fac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8007fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007fc0:	2307      	movs	r3, #7
 8007fc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8007fc4:	f107 0314 	add.w	r3, r7, #20
 8007fc8:	4619      	mov	r1, r3
 8007fca:	480e      	ldr	r0, [pc, #56]	; (8008004 <HAL_UART_MspInit+0xa8>)
 8007fcc:	f004 f854 	bl	800c078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8007fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007fe2:	2307      	movs	r3, #7
 8007fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8007fe6:	f107 0314 	add.w	r3, r7, #20
 8007fea:	4619      	mov	r1, r3
 8007fec:	4805      	ldr	r0, [pc, #20]	; (8008004 <HAL_UART_MspInit+0xa8>)
 8007fee:	f004 f843 	bl	800c078 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007ff2:	bf00      	nop
 8007ff4:	3728      	adds	r7, #40	; 0x28
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	40011000 	.word	0x40011000
 8008000:	40023800 	.word	0x40023800
 8008004:	40020000 	.word	0x40020000

08008008 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b08a      	sub	sp, #40	; 0x28
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a32      	ldr	r2, [pc, #200]	; (80080e0 <HAL_SAI_MspInit+0xd8>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d134      	bne.n	8008084 <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800801a:	4b32      	ldr	r3, [pc, #200]	; (80080e4 <HAL_SAI_MspInit+0xdc>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10b      	bne.n	800803a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8008022:	4b31      	ldr	r3, [pc, #196]	; (80080e8 <HAL_SAI_MspInit+0xe0>)
 8008024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008026:	4a30      	ldr	r2, [pc, #192]	; (80080e8 <HAL_SAI_MspInit+0xe0>)
 8008028:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800802c:	6453      	str	r3, [r2, #68]	; 0x44
 800802e:	4b2e      	ldr	r3, [pc, #184]	; (80080e8 <HAL_SAI_MspInit+0xe0>)
 8008030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008036:	613b      	str	r3, [r7, #16]
 8008038:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800803a:	4b2a      	ldr	r3, [pc, #168]	; (80080e4 <HAL_SAI_MspInit+0xdc>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3301      	adds	r3, #1
 8008040:	4a28      	ldr	r2, [pc, #160]	; (80080e4 <HAL_SAI_MspInit+0xdc>)
 8008042:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A 
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8008044:	2370      	movs	r3, #112	; 0x70
 8008046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008048:	2302      	movs	r3, #2
 800804a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800804c:	2300      	movs	r3, #0
 800804e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008050:	2300      	movs	r3, #0
 8008052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008054:	2306      	movs	r3, #6
 8008056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008058:	f107 0314 	add.w	r3, r7, #20
 800805c:	4619      	mov	r1, r3
 800805e:	4823      	ldr	r0, [pc, #140]	; (80080ec <HAL_SAI_MspInit+0xe4>)
 8008060:	f004 f80a 	bl	800c078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8008064:	2380      	movs	r3, #128	; 0x80
 8008066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008068:	2302      	movs	r3, #2
 800806a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800806c:	2300      	movs	r3, #0
 800806e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008070:	2300      	movs	r3, #0
 8008072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008074:	2306      	movs	r3, #6
 8008076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8008078:	f107 0314 	add.w	r3, r7, #20
 800807c:	4619      	mov	r1, r3
 800807e:	481c      	ldr	r0, [pc, #112]	; (80080f0 <HAL_SAI_MspInit+0xe8>)
 8008080:	f003 fffa 	bl	800c078 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a1a      	ldr	r2, [pc, #104]	; (80080f4 <HAL_SAI_MspInit+0xec>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d124      	bne.n	80080d8 <HAL_SAI_MspInit+0xd0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800808e:	4b15      	ldr	r3, [pc, #84]	; (80080e4 <HAL_SAI_MspInit+0xdc>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10b      	bne.n	80080ae <HAL_SAI_MspInit+0xa6>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8008096:	4b14      	ldr	r3, [pc, #80]	; (80080e8 <HAL_SAI_MspInit+0xe0>)
 8008098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809a:	4a13      	ldr	r2, [pc, #76]	; (80080e8 <HAL_SAI_MspInit+0xe0>)
 800809c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80080a0:	6453      	str	r3, [r2, #68]	; 0x44
 80080a2:	4b11      	ldr	r3, [pc, #68]	; (80080e8 <HAL_SAI_MspInit+0xe0>)
 80080a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080aa:	60fb      	str	r3, [r7, #12]
 80080ac:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80080ae:	4b0d      	ldr	r3, [pc, #52]	; (80080e4 <HAL_SAI_MspInit+0xdc>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3301      	adds	r3, #1
 80080b4:	4a0b      	ldr	r2, [pc, #44]	; (80080e4 <HAL_SAI_MspInit+0xdc>)
 80080b6:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 80080b8:	2308      	movs	r3, #8
 80080ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080bc:	2302      	movs	r3, #2
 80080be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080c0:	2300      	movs	r3, #0
 80080c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080c4:	2300      	movs	r3, #0
 80080c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80080c8:	2306      	movs	r3, #6
 80080ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 80080cc:	f107 0314 	add.w	r3, r7, #20
 80080d0:	4619      	mov	r1, r3
 80080d2:	4806      	ldr	r0, [pc, #24]	; (80080ec <HAL_SAI_MspInit+0xe4>)
 80080d4:	f003 ffd0 	bl	800c078 <HAL_GPIO_Init>

    }
}
 80080d8:	bf00      	nop
 80080da:	3728      	adds	r7, #40	; 0x28
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	40015804 	.word	0x40015804
 80080e4:	20004ac8 	.word	0x20004ac8
 80080e8:	40023800 	.word	0x40023800
 80080ec:	40021000 	.word	0x40021000
 80080f0:	40021800 	.word	0x40021800
 80080f4:	40015824 	.word	0x40015824

080080f8 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a1a      	ldr	r2, [pc, #104]	; (8008170 <HAL_SAI_MspDeInit+0x78>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d116      	bne.n	8008138 <HAL_SAI_MspDeInit+0x40>
    {
    SAI1_client --;
 800810a:	4b1a      	ldr	r3, [pc, #104]	; (8008174 <HAL_SAI_MspDeInit+0x7c>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3b01      	subs	r3, #1
 8008110:	4a18      	ldr	r2, [pc, #96]	; (8008174 <HAL_SAI_MspDeInit+0x7c>)
 8008112:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 8008114:	4b17      	ldr	r3, [pc, #92]	; (8008174 <HAL_SAI_MspDeInit+0x7c>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d105      	bne.n	8008128 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */ 
       __HAL_RCC_SAI1_CLK_DISABLE();
 800811c:	4b16      	ldr	r3, [pc, #88]	; (8008178 <HAL_SAI_MspDeInit+0x80>)
 800811e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008120:	4a15      	ldr	r2, [pc, #84]	; (8008178 <HAL_SAI_MspDeInit+0x80>)
 8008122:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008126:	6453      	str	r3, [r2, #68]	; 0x44
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A 
    */
    HAL_GPIO_DeInit(GPIOE, SAI1_FSA_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin);
 8008128:	2170      	movs	r1, #112	; 0x70
 800812a:	4814      	ldr	r0, [pc, #80]	; (800817c <HAL_SAI_MspDeInit+0x84>)
 800812c:	f004 f94e 	bl	800c3cc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SAI1_MCLKA_GPIO_Port, SAI1_MCLKA_Pin);
 8008130:	2180      	movs	r1, #128	; 0x80
 8008132:	4813      	ldr	r0, [pc, #76]	; (8008180 <HAL_SAI_MspDeInit+0x88>)
 8008134:	f004 f94a 	bl	800c3cc <HAL_GPIO_DeInit>

    }
    if(hsai->Instance==SAI1_Block_B)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a11      	ldr	r2, [pc, #68]	; (8008184 <HAL_SAI_MspDeInit+0x8c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d112      	bne.n	8008168 <HAL_SAI_MspDeInit+0x70>
    {
    SAI1_client --;
 8008142:	4b0c      	ldr	r3, [pc, #48]	; (8008174 <HAL_SAI_MspDeInit+0x7c>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3b01      	subs	r3, #1
 8008148:	4a0a      	ldr	r2, [pc, #40]	; (8008174 <HAL_SAI_MspDeInit+0x7c>)
 800814a:	6013      	str	r3, [r2, #0]
      if (SAI1_client == 0)
 800814c:	4b09      	ldr	r3, [pc, #36]	; (8008174 <HAL_SAI_MspDeInit+0x7c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d105      	bne.n	8008160 <HAL_SAI_MspDeInit+0x68>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI1_CLK_DISABLE();
 8008154:	4b08      	ldr	r3, [pc, #32]	; (8008178 <HAL_SAI_MspDeInit+0x80>)
 8008156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008158:	4a07      	ldr	r2, [pc, #28]	; (8008178 <HAL_SAI_MspDeInit+0x80>)
 800815a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800815e:	6453      	str	r3, [r2, #68]	; 0x44
      }
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    HAL_GPIO_DeInit(SAI1_SDB_GPIO_Port, SAI1_SDB_Pin);
 8008160:	2108      	movs	r1, #8
 8008162:	4806      	ldr	r0, [pc, #24]	; (800817c <HAL_SAI_MspDeInit+0x84>)
 8008164:	f004 f932 	bl	800c3cc <HAL_GPIO_DeInit>

    }
}
 8008168:	bf00      	nop
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	40015804 	.word	0x40015804
 8008174:	20004ac8 	.word	0x20004ac8
 8008178:	40023800 	.word	0x40023800
 800817c:	40021000 	.word	0x40021000
 8008180:	40021800 	.word	0x40021800
 8008184:	40015824 	.word	0x40015824

08008188 <DMA2_Stream0_IRQHandler>:
/* USER CODE BEGIN TD */
extern DFSDM_Filter_HandleTypeDef hAudioInTopLeftFilter;
extern DFSDM_Filter_HandleTypeDef hAudioInTopRightFilter;
extern SAI_HandleTypeDef haudio_out_sai;
void AUDIO_DFSDMx_DMAx_TOP_LEFT_IRQHandler(void)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(hAudioInTopLeftFilter.hdmaReg);
 800818c:	4b03      	ldr	r3, [pc, #12]	; (800819c <DMA2_Stream0_IRQHandler+0x14>)
 800818e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008190:	4618      	mov	r0, r3
 8008192:	f003 fd09 	bl	800bba8 <HAL_DMA_IRQHandler>
}
 8008196:	bf00      	nop
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	2002ac6c 	.word	0x2002ac6c

080081a0 <DMA2_Stream5_IRQHandler>:
void AUDIO_DFSDMx_DMAx_TOP_RIGHT_IRQHandler(void)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(hAudioInTopRightFilter.hdmaReg);
 80081a4:	4b03      	ldr	r3, [pc, #12]	; (80081b4 <DMA2_Stream5_IRQHandler+0x14>)
 80081a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a8:	4618      	mov	r0, r3
 80081aa:	f003 fcfd 	bl	800bba8 <HAL_DMA_IRQHandler>
}
 80081ae:	bf00      	nop
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	2002ae88 	.word	0x2002ae88

080081b8 <DMA2_Stream1_IRQHandler>:
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 80081bc:	4b03      	ldr	r3, [pc, #12]	; (80081cc <DMA2_Stream1_IRQHandler+0x14>)
 80081be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081c0:	4618      	mov	r0, r3
 80081c2:	f003 fcf1 	bl	800bba8 <HAL_DMA_IRQHandler>
}
 80081c6:	bf00      	nop
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	2002abe8 	.word	0x2002abe8

080081d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80081d0:	b480      	push	{r7}
 80081d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80081d4:	bf00      	nop
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80081de:	b480      	push	{r7}
 80081e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80081e2:	e7fe      	b.n	80081e2 <HardFault_Handler+0x4>

080081e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80081e4:	b480      	push	{r7}
 80081e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80081e8:	e7fe      	b.n	80081e8 <MemManage_Handler+0x4>

080081ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80081ea:	b480      	push	{r7}
 80081ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80081ee:	e7fe      	b.n	80081ee <BusFault_Handler+0x4>

080081f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80081f0:	b480      	push	{r7}
 80081f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80081f4:	e7fe      	b.n	80081f4 <UsageFault_Handler+0x4>

080081f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80081f6:	b480      	push	{r7}
 80081f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80081fa:	bf00      	nop
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008204:	b480      	push	{r7}
 8008206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008208:	bf00      	nop
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008212:	b480      	push	{r7}
 8008214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008216:	bf00      	nop
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008224:	f002 fcde 	bl	800abe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008228:	bf00      	nop
 800822a:	bd80      	pop	{r7, pc}

0800822c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008234:	4b11      	ldr	r3, [pc, #68]	; (800827c <_sbrk+0x50>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d102      	bne.n	8008242 <_sbrk+0x16>
		heap_end = &end;
 800823c:	4b0f      	ldr	r3, [pc, #60]	; (800827c <_sbrk+0x50>)
 800823e:	4a10      	ldr	r2, [pc, #64]	; (8008280 <_sbrk+0x54>)
 8008240:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008242:	4b0e      	ldr	r3, [pc, #56]	; (800827c <_sbrk+0x50>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008248:	4b0c      	ldr	r3, [pc, #48]	; (800827c <_sbrk+0x50>)
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4413      	add	r3, r2
 8008250:	466a      	mov	r2, sp
 8008252:	4293      	cmp	r3, r2
 8008254:	d907      	bls.n	8008266 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008256:	f00f f8ed 	bl	8017434 <__errno>
 800825a:	4602      	mov	r2, r0
 800825c:	230c      	movs	r3, #12
 800825e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008264:	e006      	b.n	8008274 <_sbrk+0x48>
	}

	heap_end += incr;
 8008266:	4b05      	ldr	r3, [pc, #20]	; (800827c <_sbrk+0x50>)
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4413      	add	r3, r2
 800826e:	4a03      	ldr	r2, [pc, #12]	; (800827c <_sbrk+0x50>)
 8008270:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008272:	68fb      	ldr	r3, [r7, #12]
}
 8008274:	4618      	mov	r0, r3
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	20004acc 	.word	0x20004acc
 8008280:	2002afb0 	.word	0x2002afb0

08008284 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008284:	b480      	push	{r7}
 8008286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008288:	4b15      	ldr	r3, [pc, #84]	; (80082e0 <SystemInit+0x5c>)
 800828a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800828e:	4a14      	ldr	r2, [pc, #80]	; (80082e0 <SystemInit+0x5c>)
 8008290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008298:	4b12      	ldr	r3, [pc, #72]	; (80082e4 <SystemInit+0x60>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a11      	ldr	r2, [pc, #68]	; (80082e4 <SystemInit+0x60>)
 800829e:	f043 0301 	orr.w	r3, r3, #1
 80082a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80082a4:	4b0f      	ldr	r3, [pc, #60]	; (80082e4 <SystemInit+0x60>)
 80082a6:	2200      	movs	r2, #0
 80082a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80082aa:	4b0e      	ldr	r3, [pc, #56]	; (80082e4 <SystemInit+0x60>)
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	490d      	ldr	r1, [pc, #52]	; (80082e4 <SystemInit+0x60>)
 80082b0:	4b0d      	ldr	r3, [pc, #52]	; (80082e8 <SystemInit+0x64>)
 80082b2:	4013      	ands	r3, r2
 80082b4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80082b6:	4b0b      	ldr	r3, [pc, #44]	; (80082e4 <SystemInit+0x60>)
 80082b8:	4a0c      	ldr	r2, [pc, #48]	; (80082ec <SystemInit+0x68>)
 80082ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80082bc:	4b09      	ldr	r3, [pc, #36]	; (80082e4 <SystemInit+0x60>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a08      	ldr	r2, [pc, #32]	; (80082e4 <SystemInit+0x60>)
 80082c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80082c8:	4b06      	ldr	r3, [pc, #24]	; (80082e4 <SystemInit+0x60>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80082ce:	4b04      	ldr	r3, [pc, #16]	; (80082e0 <SystemInit+0x5c>)
 80082d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80082d4:	609a      	str	r2, [r3, #8]
#endif
}
 80082d6:	bf00      	nop
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	e000ed00 	.word	0xe000ed00
 80082e4:	40023800 	.word	0x40023800
 80082e8:	fef6ffff 	.word	0xfef6ffff
 80082ec:	24003010 	.word	0x24003010

080082f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80082f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008328 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80082f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80082f6:	e003      	b.n	8008300 <LoopCopyDataInit>

080082f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80082f8:	4b0c      	ldr	r3, [pc, #48]	; (800832c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80082fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80082fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80082fe:	3104      	adds	r1, #4

08008300 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008300:	480b      	ldr	r0, [pc, #44]	; (8008330 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008302:	4b0c      	ldr	r3, [pc, #48]	; (8008334 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008304:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008306:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008308:	d3f6      	bcc.n	80082f8 <CopyDataInit>
  ldr  r2, =_sbss
 800830a:	4a0b      	ldr	r2, [pc, #44]	; (8008338 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800830c:	e002      	b.n	8008314 <LoopFillZerobss>

0800830e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800830e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008310:	f842 3b04 	str.w	r3, [r2], #4

08008314 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008314:	4b09      	ldr	r3, [pc, #36]	; (800833c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008316:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008318:	d3f9      	bcc.n	800830e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800831a:	f7ff ffb3 	bl	8008284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800831e:	f00f f88f 	bl	8017440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008322:	f7fe fd9d 	bl	8006e60 <main>
  bx  lr    
 8008326:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008328:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800832c:	0803ebb0 	.word	0x0803ebb0
  ldr  r0, =_sdata
 8008330:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008334:	20000ca8 	.word	0x20000ca8
  ldr  r2, =_sbss
 8008338:	20000ca8 	.word	0x20000ca8
  ldr  r3, = _ebss
 800833c:	2002afac 	.word	0x2002afac

08008340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008340:	e7fe      	b.n	8008340 <ADC_IRQHandler>

08008342 <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 8008342:	b480      	push	{r7}
 8008344:	b087      	sub	sp, #28
 8008346:	af00      	add	r7, sp, #0
 8008348:	60f8      	str	r0, [r7, #12]
 800834a:	60b9      	str	r1, [r7, #8]
 800834c:	607a      	str	r2, [r7, #4]
 800834e:	603b      	str	r3, [r7, #0]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8008350:	f04f 0300 	mov.w	r3, #0
 8008354:	617b      	str	r3, [r7, #20]

#if defined (ARM_MATH_DSP)

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	089b      	lsrs	r3, r3, #2
 800835a:	613b      	str	r3, [r7, #16]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 800835c:	e04a      	b.n	80083f4 <arm_dot_prod_f32+0xb2>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer */
    sum += (*pSrcA++) * (*pSrcB++);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	1d1a      	adds	r2, r3, #4
 8008362:	60fa      	str	r2, [r7, #12]
 8008364:	ed93 7a00 	vldr	s14, [r3]
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	1d1a      	adds	r2, r3, #4
 800836c:	60ba      	str	r2, [r7, #8]
 800836e:	edd3 7a00 	vldr	s15, [r3]
 8008372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008376:	ed97 7a05 	vldr	s14, [r7, #20]
 800837a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800837e:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	1d1a      	adds	r2, r3, #4
 8008386:	60fa      	str	r2, [r7, #12]
 8008388:	ed93 7a00 	vldr	s14, [r3]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	1d1a      	adds	r2, r3, #4
 8008390:	60ba      	str	r2, [r7, #8]
 8008392:	edd3 7a00 	vldr	s15, [r3]
 8008396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800839a:	ed97 7a05 	vldr	s14, [r7, #20]
 800839e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083a2:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	1d1a      	adds	r2, r3, #4
 80083aa:	60fa      	str	r2, [r7, #12]
 80083ac:	ed93 7a00 	vldr	s14, [r3]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	1d1a      	adds	r2, r3, #4
 80083b4:	60ba      	str	r2, [r7, #8]
 80083b6:	edd3 7a00 	vldr	s15, [r3]
 80083ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083be:	ed97 7a05 	vldr	s14, [r7, #20]
 80083c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083c6:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	1d1a      	adds	r2, r3, #4
 80083ce:	60fa      	str	r2, [r7, #12]
 80083d0:	ed93 7a00 	vldr	s14, [r3]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	1d1a      	adds	r2, r3, #4
 80083d8:	60ba      	str	r2, [r7, #8]
 80083da:	edd3 7a00 	vldr	s15, [r3]
 80083de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80083e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083ea:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	3b01      	subs	r3, #1
 80083f2:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1b1      	bne.n	800835e <arm_dot_prod_f32+0x1c>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f003 0303 	and.w	r3, r3, #3
 8008400:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 8008402:	e014      	b.n	800842e <arm_dot_prod_f32+0xec>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer. */
    sum += (*pSrcA++) * (*pSrcB++);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	1d1a      	adds	r2, r3, #4
 8008408:	60fa      	str	r2, [r7, #12]
 800840a:	ed93 7a00 	vldr	s14, [r3]
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	1d1a      	adds	r2, r3, #4
 8008412:	60ba      	str	r2, [r7, #8]
 8008414:	edd3 7a00 	vldr	s15, [r3]
 8008418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800841c:	ed97 7a05 	vldr	s14, [r7, #20]
 8008420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008424:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	3b01      	subs	r3, #1
 800842c:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1e7      	bne.n	8008404 <arm_dot_prod_f32+0xc2>
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	601a      	str	r2, [r3, #0]
}
 800843a:	bf00      	nop
 800843c:	371c      	adds	r7, #28
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8008446:	b480      	push	{r7}
 8008448:	b085      	sub	sp, #20
 800844a:	af00      	add	r7, sp, #0
 800844c:	60f8      	str	r0, [r7, #12]
 800844e:	607b      	str	r3, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	817b      	strh	r3, [r7, #10]
 8008454:	4613      	mov	r3, r2
 8008456:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	897a      	ldrh	r2, [r7, #10]
 800845c:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	893a      	ldrh	r2, [r7, #8]
 8008462:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	605a      	str	r2, [r3, #4]
}
 800846a:	bf00      	nop
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <arm_cfft_radix8by2_f32>:
* \endcode
*
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b0a0      	sub	sp, #128	; 0x80
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	881b      	ldrh	r3, [r3, #0]
 8008484:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8008486:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	4413      	add	r3, r2
 800848e:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 800849a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800849c:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 800849e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084a0:	085b      	lsrs	r3, r3, #1
 80084a2:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 80084a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	4413      	add	r3, r2
 80084ac:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 80084ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80084b4:	4413      	add	r3, r2
 80084b6:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- )
 80084b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084ba:	089b      	lsrs	r3, r3, #2
 80084bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084be:	e1b6      	b.n	800882e <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 80084d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 80084de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 80084e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 80084ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 80084f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 80084f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 80084fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 8008502:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 8008508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 800850e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 8008514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 800851a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 8008520:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008524:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	1d1a      	adds	r2, r3, #4
 800852c:	603a      	str	r2, [r7, #0]
 800852e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008532:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 8008536:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800853a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	1d1a      	adds	r2, r3, #4
 8008542:	603a      	str	r2, [r7, #0]
 8008544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008548:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 800854c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008550:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	1d1a      	adds	r2, r3, #4
 8008558:	603a      	str	r2, [r7, #0]
 800855a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800855e:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 8008562:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8008566:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	1d1a      	adds	r2, r3, #4
 800856e:	603a      	str	r2, [r7, #0]
 8008570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008574:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 8008578:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800857c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008584:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 8008588:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800858c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008594:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 8008598:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800859c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80085a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085a4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 80085a8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80085ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80085b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085b4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 80085b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80085bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80085c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085c2:	1d1a      	adds	r2, r3, #4
 80085c4:	67fa      	str	r2, [r7, #124]	; 0x7c
 80085c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085ca:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 80085ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80085d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80085d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085d8:	1d1a      	adds	r2, r3, #4
 80085da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80085dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085e0:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 80085e4:	ed97 7a08 	vldr	s14, [r7, #32]
 80085e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80085ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085ee:	1d1a      	adds	r2, r3, #4
 80085f0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80085f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085f6:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 80085fa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80085fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8008602:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008604:	1d1a      	adds	r2, r3, #4
 8008606:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800860c:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 8008610:	ed97 7a02 	vldr	s14, [r7, #8]
 8008614:	edd7 7a06 	vldr	s15, [r7, #24]
 8008618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800861c:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 8008620:	ed97 7a03 	vldr	s14, [r7, #12]
 8008624:	edd7 7a07 	vldr	s15, [r7, #28]
 8008628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800862c:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 8008630:	ed97 7a04 	vldr	s14, [r7, #16]
 8008634:	edd7 7a08 	vldr	s15, [r7, #32]
 8008638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800863c:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 8008640:	ed97 7a05 	vldr	s14, [r7, #20]
 8008644:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800864c:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 8008650:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008652:	1d1a      	adds	r2, r3, #4
 8008654:	673a      	str	r2, [r7, #112]	; 0x70
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 800865a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800865c:	1d1a      	adds	r2, r3, #4
 800865e:	673a      	str	r2, [r7, #112]	; 0x70
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 8008664:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008668:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800866c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008670:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 8008674:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008678:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800867c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008680:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 8008684:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008688:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800868c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008690:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 8008694:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008698:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800869c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086a0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 80086a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086a6:	1d1a      	adds	r2, r3, #4
 80086a8:	677a      	str	r2, [r7, #116]	; 0x74
 80086aa:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80086ae:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80086b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086b6:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 80086ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086bc:	1d1a      	adds	r2, r3, #4
 80086be:	677a      	str	r2, [r7, #116]	; 0x74
 80086c0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80086c4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80086c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086cc:	edc3 7a00 	vstr	s15, [r3]

        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 80086d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80086d4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80086d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086dc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 80086e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80086e4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80086e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ec:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 80086f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80086f4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80086f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086fc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 8008700:	edd7 7a02 	vldr	s15, [r7, #8]
 8008704:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800870c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 8008710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008712:	1d1a      	adds	r2, r3, #4
 8008714:	67ba      	str	r2, [r7, #120]	; 0x78
 8008716:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800871a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800871e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008722:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8008726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008728:	1d1a      	adds	r2, r3, #4
 800872a:	67ba      	str	r2, [r7, #120]	; 0x78
 800872c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008730:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8008734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008738:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 800873c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800873e:	1d1a      	adds	r2, r3, #4
 8008740:	673a      	str	r2, [r7, #112]	; 0x70
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8008746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008748:	1d1a      	adds	r2, r3, #4
 800874a:	673a      	str	r2, [r7, #112]	; 0x70
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	65bb      	str	r3, [r7, #88]	; 0x58

        m0 = t2[2] * twR;
 8008750:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008754:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800875c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 8008760:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008764:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800876c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 8008770:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008774:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800877c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 8008780:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008784:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800878c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *p2++ = m0 + m1;
 8008790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008792:	1d1a      	adds	r2, r3, #4
 8008794:	677a      	str	r2, [r7, #116]	; 0x74
 8008796:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800879a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800879e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087a2:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 80087a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087a8:	1d1a      	adds	r2, r3, #4
 80087aa:	677a      	str	r2, [r7, #116]	; 0x74
 80087ac:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80087b0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80087b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087b8:	edc3 7a00 	vstr	s15, [r3]

        m0 = t4[2] * twI;
 80087bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80087c0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80087c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 80087cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80087d0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80087d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087d8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 80087dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80087e0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80087e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087e8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 80087ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80087f0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80087f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 80087fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087fe:	1d1a      	adds	r2, r3, #4
 8008800:	67ba      	str	r2, [r7, #120]	; 0x78
 8008802:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008806:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800880a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800880e:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8008812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008814:	1d1a      	adds	r2, r3, #4
 8008816:	67ba      	str	r2, [r7, #120]	; 0x78
 8008818:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800881c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8008820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008824:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- )
 8008828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800882a:	3b01      	subs	r3, #1
 800882c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800882e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008830:	2b00      	cmp	r3, #0
 8008832:	f47f ae45 	bne.w	80084c0 <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8008836:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008838:	b299      	uxth	r1, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	2302      	movs	r3, #2
 8008840:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008842:	f000 fedb 	bl	80095fc <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8008846:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008848:	b299      	uxth	r1, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685a      	ldr	r2, [r3, #4]
 800884e:	2302      	movs	r3, #2
 8008850:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008852:	f000 fed3 	bl	80095fc <arm_radix8_butterfly_f32>
}
 8008856:	bf00      	nop
 8008858:	3780      	adds	r7, #128	; 0x80
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b0ac      	sub	sp, #176	; 0xb0
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	085b      	lsrs	r3, r3, #1
 800886e:	b29b      	uxth	r3, r3
 8008870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8008874:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	4413      	add	r3, r2
 800887e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8008882:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800888c:	4413      	add	r3, r2
 800888e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8008892:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800889c:	4413      	add	r3, r2
 800889e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 80088a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088aa:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 80088ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088b0:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 80088b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088b6:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 80088b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088bc:	3b04      	subs	r3, #4
 80088be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80088c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088c6:	3b04      	subs	r3, #4
 80088c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 80088cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088d0:	3b04      	subs	r3, #4
 80088d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 80088d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80088e0:	4413      	add	r3, r2
 80088e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80088ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80088f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 80088fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008902:	085b      	lsrs	r3, r3, #1
 8008904:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 8008908:	2302      	movs	r3, #2
 800890a:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 800890c:	2304      	movs	r3, #4
 800890e:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8008910:	2306      	movs	r3, #6
 8008912:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	ed93 7a00 	vldr	s14, [r3]
 800891a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800891e:	edd3 7a00 	vldr	s15, [r3]
 8008922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008926:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	ed93 7a00 	vldr	s14, [r3]
 8008930:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008934:	edd3 7a00 	vldr	s15, [r3]
 8008938:	ee77 7a67 	vsub.f32	s15, s14, s15
 800893c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	3304      	adds	r3, #4
 8008944:	ed93 7a00 	vldr	s14, [r3]
 8008948:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800894c:	3304      	adds	r3, #4
 800894e:	edd3 7a00 	vldr	s15, [r3]
 8008952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008956:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	3304      	adds	r3, #4
 800895e:	ed93 7a00 	vldr	s14, [r3]
 8008962:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008966:	3304      	adds	r3, #4
 8008968:	edd3 7a00 	vldr	s15, [r3]
 800896c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008970:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8008974:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008978:	3304      	adds	r3, #4
 800897a:	ed93 7a00 	vldr	s14, [r3]
 800897e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8008982:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008986:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800898a:	3304      	adds	r3, #4
 800898c:	edd3 7a00 	vldr	s15, [r3]
 8008990:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008994:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8008998:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800899c:	edd3 7a00 	vldr	s15, [r3]
 80089a0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80089a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80089a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089ac:	edd3 7a00 	vldr	s15, [r3]
 80089b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089b4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80089b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089bc:	edd3 7a00 	vldr	s15, [r3]
 80089c0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80089c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80089c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089cc:	edd3 7a00 	vldr	s15, [r3]
 80089d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089d4:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80089d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089dc:	3304      	adds	r3, #4
 80089de:	edd3 7a00 	vldr	s15, [r3]
 80089e2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80089e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80089ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089ee:	3304      	adds	r3, #4
 80089f0:	edd3 7a00 	vldr	s15, [r3]
 80089f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089f8:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80089fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a00:	3304      	adds	r3, #4
 8008a02:	edd3 7a00 	vldr	s15, [r3]
 8008a06:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008a0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a12:	3304      	adds	r3, #4
 8008a14:	edd3 7a00 	vldr	s15, [r3]
 8008a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a1c:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8008a20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a24:	ed93 7a00 	vldr	s14, [r3]
 8008a28:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008a2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a34:	edd3 7a00 	vldr	s15, [r3]
 8008a38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a3c:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8008a40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a44:	ed93 7a00 	vldr	s14, [r3]
 8008a48:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8008a4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a54:	edd3 7a00 	vldr	s15, [r3]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	1d1a      	adds	r2, r3, #4
 8008a5c:	603a      	str	r2, [r7, #0]
 8008a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a62:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8008a66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	ed93 7a00 	vldr	s14, [r3]
 8008a70:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008a74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	edd3 7a00 	vldr	s15, [r3]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	1d1a      	adds	r2, r3, #4
 8008a86:	603a      	str	r2, [r7, #0]
 8008a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a8c:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8008a90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a94:	1d1a      	adds	r2, r3, #4
 8008a96:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008a9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a9c:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8008a9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008aa2:	1d1a      	adds	r2, r3, #4
 8008aa4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aaa:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8008aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ab0:	1d1a      	adds	r2, r3, #4
 8008ab2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008ab6:	69fa      	ldr	r2, [r7, #28]
 8008ab8:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8008aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008abe:	1d1a      	adds	r2, r3, #4
 8008ac0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008ac4:	6a3a      	ldr	r2, [r7, #32]
 8008ac6:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8008ac8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008acc:	1d1a      	adds	r2, r3, #4
 8008ace:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8008ad6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ada:	1d1a      	adds	r2, r3, #4
 8008adc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8008ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008aec:	4413      	add	r3, r2
 8008aee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8008af2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008afa:	4413      	add	r3, r2
 8008afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8008b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008b08:	4413      	add	r3, r2
 8008b0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8008b0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b12:	3b02      	subs	r3, #2
 8008b14:	085b      	lsrs	r3, r3, #1
 8008b16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b1a:	e31a      	b.n	8009152 <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	ed93 7a00 	vldr	s14, [r3]
 8008b22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b26:	edd3 7a00 	vldr	s15, [r3]
 8008b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b2e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	ed93 7a00 	vldr	s14, [r3]
 8008b38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b3c:	edd3 7a00 	vldr	s15, [r3]
 8008b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b44:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	ed93 7a00 	vldr	s14, [r3]
 8008b50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b54:	3304      	adds	r3, #4
 8008b56:	edd3 7a00 	vldr	s15, [r3]
 8008b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b5e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	3304      	adds	r3, #4
 8008b66:	ed93 7a00 	vldr	s14, [r3]
 8008b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b6e:	3304      	adds	r3, #4
 8008b70:	edd3 7a00 	vldr	s15, [r3]
 8008b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b78:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8008b7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b80:	3304      	adds	r3, #4
 8008b82:	ed93 7a00 	vldr	s14, [r3]
 8008b86:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8008b8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008b8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b92:	3304      	adds	r3, #4
 8008b94:	edd3 7a00 	vldr	s15, [r3]
 8008b98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b9c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8008ba0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ba4:	edd3 7a00 	vldr	s15, [r3]
 8008ba8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008bac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008bb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008bb4:	edd3 7a00 	vldr	s15, [r3]
 8008bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bbc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8008bc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008bc4:	edd3 7a00 	vldr	s15, [r3]
 8008bc8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8008bcc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008bd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008bd4:	edd3 7a00 	vldr	s15, [r3]
 8008bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008bdc:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8008be0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008be4:	3304      	adds	r3, #4
 8008be6:	edd3 7a00 	vldr	s15, [r3]
 8008bea:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008bee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008bf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	edd3 7a00 	vldr	s15, [r3]
 8008bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c00:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8008c04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c08:	3304      	adds	r3, #4
 8008c0a:	edd3 7a00 	vldr	s15, [r3]
 8008c0e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008c12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008c16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	edd3 7a00 	vldr	s15, [r3]
 8008c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c24:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8008c28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c2c:	ed93 7a00 	vldr	s14, [r3]
 8008c30:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008c34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008c38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c3c:	edd3 7a00 	vldr	s15, [r3]
 8008c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c44:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8008c48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c4c:	ed93 7a00 	vldr	s14, [r3]
 8008c50:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8008c54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008c58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c5c:	edd3 7a00 	vldr	s15, [r3]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	1d1a      	adds	r2, r3, #4
 8008c64:	603a      	str	r2, [r7, #0]
 8008c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c6a:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8008c6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c72:	3304      	adds	r3, #4
 8008c74:	ed93 7a00 	vldr	s14, [r3]
 8008c78:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008c7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008c80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c84:	3304      	adds	r3, #4
 8008c86:	edd3 7a00 	vldr	s15, [r3]
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	1d1a      	adds	r2, r3, #4
 8008c8e:	603a      	str	r2, [r7, #0]
 8008c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c94:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8008c98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c9c:	3b04      	subs	r3, #4
 8008c9e:	ed93 7a00 	vldr	s14, [r3]
 8008ca2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ca6:	3b04      	subs	r3, #4
 8008ca8:	edd3 7a00 	vldr	s15, [r3]
 8008cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cb0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8008cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cb8:	3b04      	subs	r3, #4
 8008cba:	ed93 7a00 	vldr	s14, [r3]
 8008cbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008cc2:	3b04      	subs	r3, #4
 8008cc4:	edd3 7a00 	vldr	s15, [r3]
 8008cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ccc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8008cd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cd4:	ed93 7a00 	vldr	s14, [r3]
 8008cd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008cdc:	edd3 7a00 	vldr	s15, [r3]
 8008ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ce4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8008ce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cec:	ed93 7a00 	vldr	s14, [r3]
 8008cf0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008cf4:	edd3 7a00 	vldr	s15, [r3]
 8008cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008cfc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8008d00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d04:	ed93 7a00 	vldr	s14, [r3]
 8008d08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d0c:	edd3 7a00 	vldr	s15, [r3]
 8008d10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008d14:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d1c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8008d20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d24:	ed93 7a00 	vldr	s14, [r3]
 8008d28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008d2c:	edd3 7a00 	vldr	s15, [r3]
 8008d30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008d34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d38:	3b04      	subs	r3, #4
 8008d3a:	edd3 7a00 	vldr	s15, [r3]
 8008d3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008d42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d46:	3b04      	subs	r3, #4
 8008d48:	edd3 7a00 	vldr	s15, [r3]
 8008d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d50:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8008d54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d58:	3b04      	subs	r3, #4
 8008d5a:	edd3 7a00 	vldr	s15, [r3]
 8008d5e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008d62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008d66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d6a:	3b04      	subs	r3, #4
 8008d6c:	edd3 7a00 	vldr	s15, [r3]
 8008d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d74:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8008d78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d7c:	edd3 7a00 	vldr	s15, [r3]
 8008d80:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8008d84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008d88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d8c:	edd3 7a00 	vldr	s15, [r3]
 8008d90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d94:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8008d98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d9c:	ed93 7a00 	vldr	s14, [r3]
 8008da0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008da4:	edd3 7a00 	vldr	s15, [r3]
 8008da8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008dac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008db4:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8008db8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008dbc:	3b04      	subs	r3, #4
 8008dbe:	ed93 7a00 	vldr	s14, [r3]
 8008dc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008dc6:	3b04      	subs	r3, #4
 8008dc8:	edd3 7a00 	vldr	s15, [r3]
 8008dcc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008dd0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8008dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008dd8:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8008ddc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008de0:	ed93 7a00 	vldr	s14, [r3]
 8008de4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8008de8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008dec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008df0:	edd3 7a00 	vldr	s15, [r3]
 8008df4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008df8:	1f1a      	subs	r2, r3, #4
 8008dfa:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e02:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8008e06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e0a:	3b04      	subs	r3, #4
 8008e0c:	ed93 7a00 	vldr	s14, [r3]
 8008e10:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008e14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e1c:	3b04      	subs	r3, #4
 8008e1e:	edd3 7a00 	vldr	s15, [r3]
 8008e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e26:	1f1a      	subs	r2, r3, #4
 8008e28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e30:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8008e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e38:	1d1a      	adds	r2, r3, #4
 8008e3a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 8008e42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e46:	1d1a      	adds	r2, r3, #4
 8008e48:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)

        // Top
        m0 = t2[0] * twR;
 8008e50:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008e54:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e5c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8008e60:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008e64:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8008e70:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008e74:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e7c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8008e80:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008e84:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e8c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p2++ = m0 + m1;
 8008e90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e94:	1d1a      	adds	r2, r3, #4
 8008e96:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008e9a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008e9e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ea6:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8008eaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008eae:	1d1a      	adds	r2, r3, #4
 8008eb0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008eb4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008eb8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ec0:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8008ec4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008ec8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ed0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8008ed4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008ed8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ee0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8008ee4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008ee8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 8008ef4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008ef8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f00:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd2-- = m0 - m1;
 8008f04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f08:	1f1a      	subs	r2, r3, #4
 8008f0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008f0e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008f12:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008f16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f1a:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8008f1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f22:	1f1a      	subs	r2, r3, #4
 8008f24:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008f28:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008f2c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f34:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8008f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 8008f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8008f48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008f50:	4413      	add	r3, r2
 8008f52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8008f56:	edd7 7a07 	vldr	s15, [r7, #28]
 8008f5a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f62:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8008f66:	edd7 7a08 	vldr	s15, [r7, #32]
 8008f6a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f72:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8008f76:	edd7 7a08 	vldr	s15, [r7, #32]
 8008f7a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f82:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8008f86:	edd7 7a07 	vldr	s15, [r7, #28]
 8008f8a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f92:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p3++ = m0 + m1;
 8008f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f9a:	1d1a      	adds	r2, r3, #4
 8008f9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008fa0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008fa4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fac:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 8008fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fb4:	1d1a      	adds	r2, r3, #4
 8008fb6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008fba:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008fbe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008fc6:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8008fca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008fce:	eef1 7a67 	vneg.f32	s15, s15
 8008fd2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fda:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8008fde:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008fe2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fea:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8008fee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ff2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ffa:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8008ffe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009002:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800900a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd3-- = m0 - m1;
 800900e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009012:	1f1a      	subs	r2, r3, #4
 8009014:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009018:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800901c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009024:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 8009028:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800902c:	1f1a      	subs	r2, r3, #4
 800902e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009032:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009036:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800903a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800903e:	edc3 7a00 	vstr	s15, [r3]

        // COL 4
        twR = tw4[0];
 8009042:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 800904a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8009052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800905a:	4413      	add	r3, r2
 800905c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8009060:	edd7 7a03 	vldr	s15, [r7, #12]
 8009064:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800906c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8009070:	edd7 7a04 	vldr	s15, [r7, #16]
 8009074:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800907c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8009080:	edd7 7a04 	vldr	s15, [r7, #16]
 8009084:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800908c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8009090:	edd7 7a03 	vldr	s15, [r7, #12]
 8009094:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800909c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p4++ = m0 + m1;
 80090a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090a4:	1d1a      	adds	r2, r3, #4
 80090a6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80090aa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80090ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80090b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090b6:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 80090ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090be:	1d1a      	adds	r2, r3, #4
 80090c0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80090c4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80090c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80090cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090d0:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 80090d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80090d8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80090dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090e0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 80090e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80090e8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80090ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090f0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 80090f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80090f8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80090fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009100:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8009104:	edd7 7a06 	vldr	s15, [r7, #24]
 8009108:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800910c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009110:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd4-- = m0 - m1;
 8009114:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009118:	1f1a      	subs	r2, r3, #4
 800911a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800911e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009122:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800912a:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 800912e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009132:	1f1a      	subs	r2, r3, #4
 8009134:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8009138:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800913c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009144:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8009148:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800914c:	3b01      	subs	r3, #1
 800914e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009156:	2b00      	cmp	r3, #0
 8009158:	f47f ace0 	bne.w	8008b1c <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	ed93 7a00 	vldr	s14, [r3]
 8009162:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009166:	edd3 7a00 	vldr	s15, [r3]
 800916a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800916e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	ed93 7a00 	vldr	s14, [r3]
 8009178:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800917c:	edd3 7a00 	vldr	s15, [r3]
 8009180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009184:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	3304      	adds	r3, #4
 800918c:	ed93 7a00 	vldr	s14, [r3]
 8009190:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009194:	3304      	adds	r3, #4
 8009196:	edd3 7a00 	vldr	s15, [r3]
 800919a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800919e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	3304      	adds	r3, #4
 80091a6:	ed93 7a00 	vldr	s14, [r3]
 80091aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091ae:	3304      	adds	r3, #4
 80091b0:	edd3 7a00 	vldr	s15, [r3]
 80091b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091b8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80091bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091c0:	3304      	adds	r3, #4
 80091c2:	ed93 7a00 	vldr	s14, [r3]
 80091c6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80091ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80091ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091d2:	3304      	adds	r3, #4
 80091d4:	edd3 7a00 	vldr	s15, [r3]
 80091d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091dc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80091e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091e4:	edd3 7a00 	vldr	s15, [r3]
 80091e8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80091ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80091f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091f4:	edd3 7a00 	vldr	s15, [r3]
 80091f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091fc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8009200:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009204:	edd3 7a00 	vldr	s15, [r3]
 8009208:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800920c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009210:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009214:	edd3 7a00 	vldr	s15, [r3]
 8009218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800921c:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8009220:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009224:	3304      	adds	r3, #4
 8009226:	edd3 7a00 	vldr	s15, [r3]
 800922a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800922e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009232:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009236:	3304      	adds	r3, #4
 8009238:	edd3 7a00 	vldr	s15, [r3]
 800923c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009240:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8009244:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009248:	3304      	adds	r3, #4
 800924a:	edd3 7a00 	vldr	s15, [r3]
 800924e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009252:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009256:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800925a:	3304      	adds	r3, #4
 800925c:	edd3 7a00 	vldr	s15, [r3]
 8009260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009264:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8009268:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800926c:	ed93 7a00 	vldr	s14, [r3]
 8009270:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009274:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009278:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800927c:	edd3 7a00 	vldr	s15, [r3]
 8009280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009284:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009288:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800928c:	ed93 7a00 	vldr	s14, [r3]
 8009290:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009294:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009298:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800929c:	edd3 7a00 	vldr	s15, [r3]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	1d1a      	adds	r2, r3, #4
 80092a4:	603a      	str	r2, [r7, #0]
 80092a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092aa:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80092ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092b2:	3304      	adds	r3, #4
 80092b4:	ed93 7a00 	vldr	s14, [r3]
 80092b8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80092bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80092c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092c4:	3304      	adds	r3, #4
 80092c6:	edd3 7a00 	vldr	s15, [r3]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	1d1a      	adds	r2, r3, #4
 80092ce:	603a      	str	r2, [r7, #0]
 80092d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092d4:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 80092d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 80092e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 80092e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80092ec:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80092f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092f4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 80092f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80092fc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009304:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8009308:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800930c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009314:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8009318:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800931c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009324:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8009328:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800932c:	1d1a      	adds	r2, r3, #4
 800932e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009332:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009336:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800933a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800933e:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8009342:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009346:	1d1a      	adds	r2, r3, #4
 8009348:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800934c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009350:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009358:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 800935c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8009364:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 800936c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009370:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009378:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 800937c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009380:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009388:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 800938c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009390:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009398:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 800939c:	edd7 7a07 	vldr	s15, [r7, #28]
 80093a0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80093a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093a8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 80093ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093b0:	1d1a      	adds	r2, r3, #4
 80093b2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80093b6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80093ba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80093be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093c2:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 80093c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093ca:	1d1a      	adds	r2, r3, #4
 80093cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80093d0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80093d4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80093d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093dc:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 80093e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 80093e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 80093f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80093f4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80093f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093fc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8009400:	edd7 7a04 	vldr	s15, [r7, #16]
 8009404:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800940c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8009410:	edd7 7a04 	vldr	s15, [r7, #16]
 8009414:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800941c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8009420:	edd7 7a03 	vldr	s15, [r7, #12]
 8009424:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800942c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8009430:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009434:	1d1a      	adds	r2, r3, #4
 8009436:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800943a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800943e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009446:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 800944a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800944e:	1d1a      	adds	r2, r3, #4
 8009450:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009454:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009458:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800945c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009460:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8009464:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009468:	b299      	uxth	r1, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	2304      	movs	r3, #4
 8009470:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8009472:	f000 f8c3 	bl	80095fc <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8009476:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800947a:	b299      	uxth	r1, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	2304      	movs	r3, #4
 8009482:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8009484:	f000 f8ba 	bl	80095fc <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8009488:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800948c:	b299      	uxth	r1, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	2304      	movs	r3, #4
 8009494:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8009496:	f000 f8b1 	bl	80095fc <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4U);
 800949a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800949e:	b299      	uxth	r1, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	685a      	ldr	r2, [r3, #4]
 80094a4:	2304      	movs	r3, #4
 80094a6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80094a8:	f000 f8a8 	bl	80095fc <arm_radix8_butterfly_f32>
}
 80094ac:	bf00      	nop
 80094ae:	37b0      	adds	r7, #176	; 0xb0
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <arm_cfft_f32>:
void arm_cfft_f32(
    const arm_cfft_instance_f32 * S,
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b088      	sub	sp, #32
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	4611      	mov	r1, r2
 80094c0:	461a      	mov	r2, r3
 80094c2:	460b      	mov	r3, r1
 80094c4:	71fb      	strb	r3, [r7, #7]
 80094c6:	4613      	mov	r3, r2
 80094c8:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	881b      	ldrh	r3, [r3, #0]
 80094ce:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if (ifftFlag == 1U)
 80094d0:	79fb      	ldrb	r3, [r7, #7]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d117      	bne.n	8009506 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	3304      	adds	r3, #4
 80094da:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 80094dc:	2300      	movs	r3, #0
 80094de:	61fb      	str	r3, [r7, #28]
 80094e0:	e00d      	b.n	80094fe <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	edd3 7a00 	vldr	s15, [r3]
 80094e8:	eef1 7a67 	vneg.f32	s15, s15
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	3308      	adds	r3, #8
 80094f6:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	3301      	adds	r3, #1
 80094fc:	61fb      	str	r3, [r7, #28]
 80094fe:	69fa      	ldr	r2, [r7, #28]
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	429a      	cmp	r2, r3
 8009504:	d3ed      	bcc.n	80094e2 <arm_cfft_f32+0x2e>
        }
    }

    switch (L)
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800950c:	d024      	beq.n	8009558 <arm_cfft_f32+0xa4>
 800950e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009512:	d80b      	bhi.n	800952c <arm_cfft_f32+0x78>
 8009514:	2b20      	cmp	r3, #32
 8009516:	d01f      	beq.n	8009558 <arm_cfft_f32+0xa4>
 8009518:	2b20      	cmp	r3, #32
 800951a:	d802      	bhi.n	8009522 <arm_cfft_f32+0x6e>
 800951c:	2b10      	cmp	r3, #16
 800951e:	d016      	beq.n	800954e <arm_cfft_f32+0x9a>
 8009520:	e028      	b.n	8009574 <arm_cfft_f32+0xc0>
 8009522:	2b40      	cmp	r3, #64	; 0x40
 8009524:	d01d      	beq.n	8009562 <arm_cfft_f32+0xae>
 8009526:	2b80      	cmp	r3, #128	; 0x80
 8009528:	d011      	beq.n	800954e <arm_cfft_f32+0x9a>
 800952a:	e023      	b.n	8009574 <arm_cfft_f32+0xc0>
 800952c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009530:	d00d      	beq.n	800954e <arm_cfft_f32+0x9a>
 8009532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009536:	d803      	bhi.n	8009540 <arm_cfft_f32+0x8c>
 8009538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800953c:	d011      	beq.n	8009562 <arm_cfft_f32+0xae>
 800953e:	e019      	b.n	8009574 <arm_cfft_f32+0xc0>
 8009540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009544:	d008      	beq.n	8009558 <arm_cfft_f32+0xa4>
 8009546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800954a:	d00a      	beq.n	8009562 <arm_cfft_f32+0xae>
 800954c:	e012      	b.n	8009574 <arm_cfft_f32+0xc0>
    {
    case 16:
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800954e:	68b9      	ldr	r1, [r7, #8]
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f7fe ff90 	bl	8008476 <arm_cfft_radix8by2_f32>
        break;
 8009556:	e00d      	b.n	8009574 <arm_cfft_f32+0xc0>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8009558:	68b9      	ldr	r1, [r7, #8]
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f7ff f97f 	bl	800885e <arm_cfft_radix8by4_f32>
        break;
 8009560:	e008      	b.n	8009574 <arm_cfft_f32+0xc0>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	b299      	uxth	r1, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	685a      	ldr	r2, [r3, #4]
 800956a:	2301      	movs	r3, #1
 800956c:	68b8      	ldr	r0, [r7, #8]
 800956e:	f000 f845 	bl	80095fc <arm_radix8_butterfly_f32>
        break;
 8009572:	bf00      	nop
    }

    if ( bitReverseFlag )
 8009574:	79bb      	ldrb	r3, [r7, #6]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d007      	beq.n	800958a <arm_cfft_f32+0xd6>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	8999      	ldrh	r1, [r3, #12]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	461a      	mov	r2, r3
 8009584:	68b8      	ldr	r0, [r7, #8]
 8009586:	f7f6 fe5b 	bl	8000240 <arm_bitreversal_32>

    if (ifftFlag == 1U)
 800958a:	79fb      	ldrb	r3, [r7, #7]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d130      	bne.n	80095f2 <arm_cfft_f32+0x13e>
    {
        invL = 1.0f/(float32_t)L;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	ee07 3a90 	vmov	s15, r3
 8009596:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800959a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800959e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095a2:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 80095aa:	2300      	movs	r3, #0
 80095ac:	61fb      	str	r3, [r7, #28]
 80095ae:	e01c      	b.n	80095ea <arm_cfft_f32+0x136>
        {
            *pSrc++ *=   invL ;
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	1d1a      	adds	r2, r3, #4
 80095b4:	61ba      	str	r2, [r7, #24]
 80095b6:	ed93 7a00 	vldr	s14, [r3]
 80095ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80095be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095c2:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	edd3 7a00 	vldr	s15, [r3]
 80095cc:	eeb1 7a67 	vneg.f32	s14, s15
 80095d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80095d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	3304      	adds	r3, #4
 80095e2:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	3301      	adds	r3, #1
 80095e8:	61fb      	str	r3, [r7, #28]
 80095ea:	69fa      	ldr	r2, [r7, #28]
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d3de      	bcc.n	80095b0 <arm_cfft_f32+0xfc>
        }
    }
}
 80095f2:	bf00      	nop
 80095f4:	3720      	adds	r7, #32
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
	...

080095fc <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b0bd      	sub	sp, #244	; 0xf4
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	607a      	str	r2, [r7, #4]
 8009606:	461a      	mov	r2, r3
 8009608:	460b      	mov	r3, r1
 800960a:	817b      	strh	r3, [r7, #10]
 800960c:	4613      	mov	r3, r2
 800960e:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8009610:	4b09      	ldr	r3, [pc, #36]	; (8009638 <arm_radix8_butterfly_f32+0x3c>)
 8009612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8009616:	897b      	ldrh	r3, [r7, #10]
 8009618:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 800961c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009620:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8009624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009628:	08db      	lsrs	r3, r3, #3
 800962a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800962e:	2300      	movs	r3, #0
 8009630:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009634:	e002      	b.n	800963c <arm_radix8_butterfly_f32+0x40>
 8009636:	bf00      	nop
 8009638:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 800963c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009644:	4413      	add	r3, r2
 8009646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800964a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800964e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009652:	4413      	add	r3, r2
 8009654:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8009658:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800965c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009660:	4413      	add	r3, r2
 8009662:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8009666:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800966a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800966e:	4413      	add	r3, r2
 8009670:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8009674:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800967c:	4413      	add	r3, r2
 800967e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8009682:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800968a:	4413      	add	r3, r2
 800968c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8009690:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009698:	4413      	add	r3, r2
 800969a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800969e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096a2:	00db      	lsls	r3, r3, #3
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	4413      	add	r3, r2
 80096a8:	ed93 7a00 	vldr	s14, [r3]
 80096ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096b0:	00db      	lsls	r3, r3, #3
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	4413      	add	r3, r2
 80096b6:	edd3 7a00 	vldr	s15, [r3]
 80096ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096be:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80096c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096c6:	00db      	lsls	r3, r3, #3
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	4413      	add	r3, r2
 80096cc:	ed93 7a00 	vldr	s14, [r3]
 80096d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096d4:	00db      	lsls	r3, r3, #3
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	4413      	add	r3, r2
 80096da:	edd3 7a00 	vldr	s15, [r3]
 80096de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096e2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80096e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096ea:	00db      	lsls	r3, r3, #3
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	4413      	add	r3, r2
 80096f0:	ed93 7a00 	vldr	s14, [r3]
 80096f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80096f8:	00db      	lsls	r3, r3, #3
 80096fa:	68fa      	ldr	r2, [r7, #12]
 80096fc:	4413      	add	r3, r2
 80096fe:	edd3 7a00 	vldr	s15, [r3]
 8009702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009706:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800970a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800970e:	00db      	lsls	r3, r3, #3
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	4413      	add	r3, r2
 8009714:	ed93 7a00 	vldr	s14, [r3]
 8009718:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800971c:	00db      	lsls	r3, r3, #3
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	4413      	add	r3, r2
 8009722:	edd3 7a00 	vldr	s15, [r3]
 8009726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800972a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800972e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009732:	00db      	lsls	r3, r3, #3
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	4413      	add	r3, r2
 8009738:	ed93 7a00 	vldr	s14, [r3]
 800973c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009740:	00db      	lsls	r3, r3, #3
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	4413      	add	r3, r2
 8009746:	edd3 7a00 	vldr	s15, [r3]
 800974a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800974e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8009752:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009756:	00db      	lsls	r3, r3, #3
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	4413      	add	r3, r2
 800975c:	ed93 7a00 	vldr	s14, [r3]
 8009760:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009764:	00db      	lsls	r3, r3, #3
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	4413      	add	r3, r2
 800976a:	edd3 7a00 	vldr	s15, [r3]
 800976e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009772:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8009776:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800977a:	00db      	lsls	r3, r3, #3
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	4413      	add	r3, r2
 8009780:	ed93 7a00 	vldr	s14, [r3]
 8009784:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009788:	00db      	lsls	r3, r3, #3
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	4413      	add	r3, r2
 800978e:	edd3 7a00 	vldr	s15, [r3]
 8009792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009796:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800979a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800979e:	00db      	lsls	r3, r3, #3
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	4413      	add	r3, r2
 80097a4:	ed93 7a00 	vldr	s14, [r3]
 80097a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80097ac:	00db      	lsls	r3, r3, #3
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	4413      	add	r3, r2
 80097b2:	edd3 7a00 	vldr	s15, [r3]
 80097b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097ba:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80097be:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80097c2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80097c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097ca:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 80097ce:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80097d2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80097d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097da:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 80097de:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80097e2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80097e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097ea:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 80097ee:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80097f2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80097f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097fa:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 80097fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009802:	00db      	lsls	r3, r3, #3
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	4413      	add	r3, r2
 8009808:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800980c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009814:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8009818:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800981c:	00db      	lsls	r3, r3, #3
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	4413      	add	r3, r2
 8009822:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009826:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800982a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800982e:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8009832:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009836:	00db      	lsls	r3, r3, #3
 8009838:	3304      	adds	r3, #4
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	4413      	add	r3, r2
 800983e:	ed93 7a00 	vldr	s14, [r3]
 8009842:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009846:	00db      	lsls	r3, r3, #3
 8009848:	3304      	adds	r3, #4
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	4413      	add	r3, r2
 800984e:	edd3 7a00 	vldr	s15, [r3]
 8009852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009856:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800985a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800985e:	00db      	lsls	r3, r3, #3
 8009860:	3304      	adds	r3, #4
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	4413      	add	r3, r2
 8009866:	ed93 7a00 	vldr	s14, [r3]
 800986a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800986e:	00db      	lsls	r3, r3, #3
 8009870:	3304      	adds	r3, #4
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	4413      	add	r3, r2
 8009876:	edd3 7a00 	vldr	s15, [r3]
 800987a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800987e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8009882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009886:	00db      	lsls	r3, r3, #3
 8009888:	3304      	adds	r3, #4
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	4413      	add	r3, r2
 800988e:	ed93 7a00 	vldr	s14, [r3]
 8009892:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009896:	00db      	lsls	r3, r3, #3
 8009898:	3304      	adds	r3, #4
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	4413      	add	r3, r2
 800989e:	edd3 7a00 	vldr	s15, [r3]
 80098a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098a6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80098aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80098ae:	00db      	lsls	r3, r3, #3
 80098b0:	3304      	adds	r3, #4
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	4413      	add	r3, r2
 80098b6:	ed93 7a00 	vldr	s14, [r3]
 80098ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80098be:	00db      	lsls	r3, r3, #3
 80098c0:	3304      	adds	r3, #4
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	4413      	add	r3, r2
 80098c6:	edd3 7a00 	vldr	s15, [r3]
 80098ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098ce:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80098d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80098d6:	00db      	lsls	r3, r3, #3
 80098d8:	3304      	adds	r3, #4
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	4413      	add	r3, r2
 80098de:	ed93 7a00 	vldr	s14, [r3]
 80098e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80098e6:	00db      	lsls	r3, r3, #3
 80098e8:	3304      	adds	r3, #4
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	4413      	add	r3, r2
 80098ee:	edd3 7a00 	vldr	s15, [r3]
 80098f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098f6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80098fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80098fe:	00db      	lsls	r3, r3, #3
 8009900:	3304      	adds	r3, #4
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	4413      	add	r3, r2
 8009906:	ed93 7a00 	vldr	s14, [r3]
 800990a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800990e:	00db      	lsls	r3, r3, #3
 8009910:	3304      	adds	r3, #4
 8009912:	68fa      	ldr	r2, [r7, #12]
 8009914:	4413      	add	r3, r2
 8009916:	edd3 7a00 	vldr	s15, [r3]
 800991a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800991e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8009922:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009926:	00db      	lsls	r3, r3, #3
 8009928:	3304      	adds	r3, #4
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	4413      	add	r3, r2
 800992e:	ed93 7a00 	vldr	s14, [r3]
 8009932:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009936:	00db      	lsls	r3, r3, #3
 8009938:	3304      	adds	r3, #4
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	4413      	add	r3, r2
 800993e:	edd3 7a00 	vldr	s15, [r3]
 8009942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009946:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800994a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800994e:	00db      	lsls	r3, r3, #3
 8009950:	3304      	adds	r3, #4
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	4413      	add	r3, r2
 8009956:	ed93 7a00 	vldr	s14, [r3]
 800995a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800995e:	00db      	lsls	r3, r3, #3
 8009960:	3304      	adds	r3, #4
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	4413      	add	r3, r2
 8009966:	edd3 7a00 	vldr	s15, [r3]
 800996a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800996e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8009972:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009976:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800997a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800997e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8009982:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009986:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800998a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800998e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8009992:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8009996:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800999a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800999e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 80099a2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80099a6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80099aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099ae:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80099b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099b6:	00db      	lsls	r3, r3, #3
 80099b8:	3304      	adds	r3, #4
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	4413      	add	r3, r2
 80099be:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80099c2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80099c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099ca:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 80099ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80099d2:	00db      	lsls	r3, r3, #3
 80099d4:	3304      	adds	r3, #4
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	4413      	add	r3, r2
 80099da:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80099de:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80099e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099e6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 80099ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80099ee:	00db      	lsls	r3, r3, #3
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	4413      	add	r3, r2
 80099f4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80099f8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80099fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a00:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8009a04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009a08:	00db      	lsls	r3, r3, #3
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8009a12:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8009a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a1a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8009a1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009a22:	00db      	lsls	r3, r3, #3
 8009a24:	3304      	adds	r3, #4
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	4413      	add	r3, r2
 8009a2a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8009a2e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8009a32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a36:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8009a3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009a3e:	00db      	lsls	r3, r3, #3
 8009a40:	3304      	adds	r3, #4
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	4413      	add	r3, r2
 8009a46:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8009a4a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8009a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a52:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8009a56:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8009a5a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8009a5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a62:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8009a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a6a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8009a6e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8009a72:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8009a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a7a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8009a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a82:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8009a86:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8009a8a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8009a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a92:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8009a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a9a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8009a9e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8009aa2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8009aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009aaa:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8009aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ab2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8009ab6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8009aba:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ac2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8009ac6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8009aca:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ad2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8009ad6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8009ada:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8009ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ae2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8009ae6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8009aea:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8009aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009af2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8009af6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8009afa:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b02:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8009b06:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8009b0a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b12:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8009b16:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8009b1a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8009b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b22:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8009b26:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8009b2a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8009b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b32:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8009b36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b3a:	00db      	lsls	r3, r3, #3
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	4413      	add	r3, r2
 8009b40:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8009b44:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8009b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b4c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8009b50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009b54:	00db      	lsls	r3, r3, #3
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	4413      	add	r3, r2
 8009b5a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8009b5e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8009b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b66:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8009b6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009b6e:	00db      	lsls	r3, r3, #3
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	4413      	add	r3, r2
 8009b74:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8009b78:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8009b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b80:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8009b84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009b88:	00db      	lsls	r3, r3, #3
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8009b92:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8009b96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b9a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8009b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ba2:	00db      	lsls	r3, r3, #3
 8009ba4:	3304      	adds	r3, #4
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	4413      	add	r3, r2
 8009baa:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8009bae:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8009bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bb6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8009bba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009bbe:	00db      	lsls	r3, r3, #3
 8009bc0:	3304      	adds	r3, #4
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8009bca:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8009bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009bd2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8009bd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009bda:	00db      	lsls	r3, r3, #3
 8009bdc:	3304      	adds	r3, #4
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	4413      	add	r3, r2
 8009be2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8009be6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8009bea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bee:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8009bf2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009bf6:	00db      	lsls	r3, r3, #3
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8009c02:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8009c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c0a:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8009c0e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009c12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c16:	4413      	add	r3, r2
 8009c18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8009c1c:	897b      	ldrh	r3, [r7, #10]
 8009c1e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009c22:	429a      	cmp	r2, r3
 8009c24:	f4ff ad0a 	bcc.w	800963c <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8009c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c2c:	2b07      	cmp	r3, #7
 8009c2e:	f240 84e3 	bls.w	800a5f8 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8009c32:	2300      	movs	r3, #0
 8009c34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8009c3e:	893b      	ldrh	r3, [r7, #8]
 8009c40:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009c44:	4413      	add	r3, r2
 8009c46:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8009c48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8009c4e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009c52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c54:	4413      	add	r3, r2
 8009c56:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8009c58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009c5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c5c:	4413      	add	r3, r2
 8009c5e:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8009c60:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009c62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c64:	4413      	add	r3, r2
 8009c66:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8009c68:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009c6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c6c:	4413      	add	r3, r2
 8009c6e:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8009c70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009c72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c74:	4413      	add	r3, r2
 8009c76:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8009c78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c7c:	4413      	add	r3, r2
 8009c7e:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8009c80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009c84:	00db      	lsls	r3, r3, #3
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	4413      	add	r3, r2
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8009c8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c90:	00db      	lsls	r3, r3, #3
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	4413      	add	r3, r2
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8009c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c9c:	00db      	lsls	r3, r3, #3
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8009ca6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ca8:	00db      	lsls	r3, r3, #3
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	4413      	add	r3, r2
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8009cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cb4:	00db      	lsls	r3, r3, #3
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	4413      	add	r3, r2
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8009cbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009cc0:	00db      	lsls	r3, r3, #3
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8009cca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ccc:	00db      	lsls	r3, r3, #3
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8009cd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009cda:	00db      	lsls	r3, r3, #3
 8009cdc:	3304      	adds	r3, #4
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8009ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ce8:	00db      	lsls	r3, r3, #3
 8009cea:	3304      	adds	r3, #4
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	4413      	add	r3, r2
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8009cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cf6:	00db      	lsls	r3, r3, #3
 8009cf8:	3304      	adds	r3, #4
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8009d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d04:	00db      	lsls	r3, r3, #3
 8009d06:	3304      	adds	r3, #4
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8009d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d12:	00db      	lsls	r3, r3, #3
 8009d14:	3304      	adds	r3, #4
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	4413      	add	r3, r2
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8009d1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d20:	00db      	lsls	r3, r3, #3
 8009d22:	3304      	adds	r3, #4
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	4413      	add	r3, r2
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8009d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d2e:	00db      	lsls	r3, r3, #3
 8009d30:	3304      	adds	r3, #4
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	4413      	add	r3, r2
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8009d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8009d42:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d4a:	4413      	add	r3, r2
 8009d4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8009d50:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8009d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d58:	4413      	add	r3, r2
 8009d5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8009d5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d66:	4413      	add	r3, r2
 8009d68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8009d6c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8009d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d74:	4413      	add	r3, r2
 8009d76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8009d7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d82:	4413      	add	r3, r2
 8009d84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8009d88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d90:	4413      	add	r3, r2
 8009d92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8009d96:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d9e:	4413      	add	r3, r2
 8009da0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8009da4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009da8:	00db      	lsls	r3, r3, #3
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	4413      	add	r3, r2
 8009dae:	ed93 7a00 	vldr	s14, [r3]
 8009db2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009db6:	00db      	lsls	r3, r3, #3
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	4413      	add	r3, r2
 8009dbc:	edd3 7a00 	vldr	s15, [r3]
 8009dc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dc4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8009dc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009dcc:	00db      	lsls	r3, r3, #3
 8009dce:	68fa      	ldr	r2, [r7, #12]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	ed93 7a00 	vldr	s14, [r3]
 8009dd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dda:	00db      	lsls	r3, r3, #3
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	4413      	add	r3, r2
 8009de0:	edd3 7a00 	vldr	s15, [r3]
 8009de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009de8:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8009dec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009df0:	00db      	lsls	r3, r3, #3
 8009df2:	68fa      	ldr	r2, [r7, #12]
 8009df4:	4413      	add	r3, r2
 8009df6:	ed93 7a00 	vldr	s14, [r3]
 8009dfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009dfe:	00db      	lsls	r3, r3, #3
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	4413      	add	r3, r2
 8009e04:	edd3 7a00 	vldr	s15, [r3]
 8009e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e0c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8009e10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e14:	00db      	lsls	r3, r3, #3
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	4413      	add	r3, r2
 8009e1a:	ed93 7a00 	vldr	s14, [r3]
 8009e1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009e22:	00db      	lsls	r3, r3, #3
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	4413      	add	r3, r2
 8009e28:	edd3 7a00 	vldr	s15, [r3]
 8009e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e30:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8009e34:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009e38:	00db      	lsls	r3, r3, #3
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	ed93 7a00 	vldr	s14, [r3]
 8009e42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e46:	00db      	lsls	r3, r3, #3
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	edd3 7a00 	vldr	s15, [r3]
 8009e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e54:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8009e58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009e5c:	00db      	lsls	r3, r3, #3
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	4413      	add	r3, r2
 8009e62:	ed93 7a00 	vldr	s14, [r3]
 8009e66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e6a:	00db      	lsls	r3, r3, #3
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	4413      	add	r3, r2
 8009e70:	edd3 7a00 	vldr	s15, [r3]
 8009e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e78:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8009e7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e80:	00db      	lsls	r3, r3, #3
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	4413      	add	r3, r2
 8009e86:	ed93 7a00 	vldr	s14, [r3]
 8009e8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e8e:	00db      	lsls	r3, r3, #3
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	4413      	add	r3, r2
 8009e94:	edd3 7a00 	vldr	s15, [r3]
 8009e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e9c:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8009ea0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ea4:	00db      	lsls	r3, r3, #3
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	ed93 7a00 	vldr	s14, [r3]
 8009eae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009eb2:	00db      	lsls	r3, r3, #3
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	edd3 7a00 	vldr	s15, [r3]
 8009ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ec0:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8009ec4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009ec8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8009ecc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ed0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8009ed4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009ed8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8009edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ee0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8009ee4:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8009ee8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8009eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ef0:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8009ef4:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8009ef8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8009efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f00:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8009f04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009f08:	00db      	lsls	r3, r3, #3
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009f12:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f1a:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8009f1e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009f22:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f2a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8009f2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009f32:	00db      	lsls	r3, r3, #3
 8009f34:	3304      	adds	r3, #4
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	4413      	add	r3, r2
 8009f3a:	ed93 7a00 	vldr	s14, [r3]
 8009f3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f42:	00db      	lsls	r3, r3, #3
 8009f44:	3304      	adds	r3, #4
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	4413      	add	r3, r2
 8009f4a:	edd3 7a00 	vldr	s15, [r3]
 8009f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f52:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8009f56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009f5a:	00db      	lsls	r3, r3, #3
 8009f5c:	3304      	adds	r3, #4
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	4413      	add	r3, r2
 8009f62:	ed93 7a00 	vldr	s14, [r3]
 8009f66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f6a:	00db      	lsls	r3, r3, #3
 8009f6c:	3304      	adds	r3, #4
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	4413      	add	r3, r2
 8009f72:	edd3 7a00 	vldr	s15, [r3]
 8009f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f7a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8009f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f82:	00db      	lsls	r3, r3, #3
 8009f84:	3304      	adds	r3, #4
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	4413      	add	r3, r2
 8009f8a:	ed93 7a00 	vldr	s14, [r3]
 8009f8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009f92:	00db      	lsls	r3, r3, #3
 8009f94:	3304      	adds	r3, #4
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	4413      	add	r3, r2
 8009f9a:	edd3 7a00 	vldr	s15, [r3]
 8009f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fa2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8009fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009faa:	00db      	lsls	r3, r3, #3
 8009fac:	3304      	adds	r3, #4
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	ed93 7a00 	vldr	s14, [r3]
 8009fb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009fba:	00db      	lsls	r3, r3, #3
 8009fbc:	3304      	adds	r3, #4
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	edd3 7a00 	vldr	s15, [r3]
 8009fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fca:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8009fce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009fd2:	00db      	lsls	r3, r3, #3
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	4413      	add	r3, r2
 8009fda:	ed93 7a00 	vldr	s14, [r3]
 8009fde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009fe2:	00db      	lsls	r3, r3, #3
 8009fe4:	3304      	adds	r3, #4
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	4413      	add	r3, r2
 8009fea:	edd3 7a00 	vldr	s15, [r3]
 8009fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ff2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8009ff6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009ffa:	00db      	lsls	r3, r3, #3
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	4413      	add	r3, r2
 800a002:	ed93 7a00 	vldr	s14, [r3]
 800a006:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a00a:	00db      	lsls	r3, r3, #3
 800a00c:	3304      	adds	r3, #4
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	4413      	add	r3, r2
 800a012:	edd3 7a00 	vldr	s15, [r3]
 800a016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a01a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800a01e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a022:	00db      	lsls	r3, r3, #3
 800a024:	3304      	adds	r3, #4
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	4413      	add	r3, r2
 800a02a:	ed93 7a00 	vldr	s14, [r3]
 800a02e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a032:	00db      	lsls	r3, r3, #3
 800a034:	3304      	adds	r3, #4
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	4413      	add	r3, r2
 800a03a:	edd3 7a00 	vldr	s15, [r3]
 800a03e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a042:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800a046:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a04a:	00db      	lsls	r3, r3, #3
 800a04c:	3304      	adds	r3, #4
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	4413      	add	r3, r2
 800a052:	ed93 7a00 	vldr	s14, [r3]
 800a056:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a05a:	00db      	lsls	r3, r3, #3
 800a05c:	3304      	adds	r3, #4
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	4413      	add	r3, r2
 800a062:	edd3 7a00 	vldr	s15, [r3]
 800a066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a06a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800a06e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a072:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a076:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a07a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 800a07e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a082:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a08a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 800a08e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a092:	edd7 7a08 	vldr	s15, [r7, #32]
 800a096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a09a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 800a09e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a0a2:	edd7 7a08 	vldr	s15, [r7, #32]
 800a0a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 800a0ae:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a0b2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a0b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0ba:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 800a0be:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a0c2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a0c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0ca:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800a0ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a0d2:	00db      	lsls	r3, r3, #3
 800a0d4:	3304      	adds	r3, #4
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	4413      	add	r3, r2
 800a0da:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a0de:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a0e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0e6:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800a0ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a0ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a0f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0f6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 800a0fa:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a0fe:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a102:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a106:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 800a10a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a10e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a112:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a116:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800a11a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a11e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a126:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800a12a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a12e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a132:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a136:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800a13a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a13e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a142:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a146:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800a14a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a14e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a152:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a156:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800a15a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	4413      	add	r3, r2
 800a164:	ed97 7a07 	vldr	s14, [r7, #28]
 800a168:	edd7 7a06 	vldr	s15, [r7, #24]
 800a16c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a170:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 800a174:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a178:	00db      	lsls	r3, r3, #3
 800a17a:	3304      	adds	r3, #4
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	4413      	add	r3, r2
 800a180:	ed97 7a05 	vldr	s14, [r7, #20]
 800a184:	edd7 7a04 	vldr	s15, [r7, #16]
 800a188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a18c:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 800a190:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a194:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a19c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 800a1a0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a1a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ac:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800a1b0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a1b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1bc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800a1c0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a1c4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a1c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1cc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800a1d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a1d4:	00db      	lsls	r3, r3, #3
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	4413      	add	r3, r2
 800a1da:	ed97 7a07 	vldr	s14, [r7, #28]
 800a1de:	edd7 7a06 	vldr	s15, [r7, #24]
 800a1e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1e6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800a1ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a1ee:	00db      	lsls	r3, r3, #3
 800a1f0:	3304      	adds	r3, #4
 800a1f2:	68fa      	ldr	r2, [r7, #12]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	ed97 7a05 	vldr	s14, [r7, #20]
 800a1fa:	edd7 7a04 	vldr	s15, [r7, #16]
 800a1fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a202:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800a206:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a20a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800a20e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a212:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800a216:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800a21a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a21e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a222:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800a226:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a22a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a22e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a232:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800a236:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800a23a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800a23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a242:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800a246:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a24a:	00db      	lsls	r3, r3, #3
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	4413      	add	r3, r2
 800a250:	ed97 7a07 	vldr	s14, [r7, #28]
 800a254:	edd7 7a06 	vldr	s15, [r7, #24]
 800a258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a25c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800a260:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a264:	00db      	lsls	r3, r3, #3
 800a266:	3304      	adds	r3, #4
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	4413      	add	r3, r2
 800a26c:	ed97 7a05 	vldr	s14, [r7, #20]
 800a270:	edd7 7a04 	vldr	s15, [r7, #16]
 800a274:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a278:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 800a27c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800a280:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a284:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a288:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a28c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a290:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 800a294:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800a298:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a29c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2a0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a2a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2a8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 800a2ac:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800a2b0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a2b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2b8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a2bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2c0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 800a2c4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800a2c8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a2cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2d0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a2d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2d8:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 800a2dc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a2e0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a2e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2e8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 800a2ec:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a2f0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a2f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2f8:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 800a2fc:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800a300:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a304:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a308:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 800a30c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800a310:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a314:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a318:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 800a31c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a320:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a324:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a328:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 800a32c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a330:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a334:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a338:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 800a33c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800a340:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a344:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a348:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 800a34c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800a350:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a354:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a358:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 800a35c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a360:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a364:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a368:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 800a36c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a370:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a374:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a378:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 800a37c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a380:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a384:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a388:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 800a38c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a390:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a394:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a398:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 800a39c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a3a0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800a3a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3a8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 800a3ac:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a3b0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800a3b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3b8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 800a3bc:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a3c0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a3c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3c8:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 800a3cc:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a3d0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a3d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3d8:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 800a3dc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800a3e0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a3e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3e8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 800a3ec:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800a3f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a3f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3f8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 800a3fc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800a400:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a404:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a408:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 800a40c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800a410:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a414:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a418:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 800a41c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a420:	00db      	lsls	r3, r3, #3
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	4413      	add	r3, r2
 800a426:	ed97 7a07 	vldr	s14, [r7, #28]
 800a42a:	edd7 7a06 	vldr	s15, [r7, #24]
 800a42e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a432:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800a436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a43a:	00db      	lsls	r3, r3, #3
 800a43c:	3304      	adds	r3, #4
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	4413      	add	r3, r2
 800a442:	ed97 7a05 	vldr	s14, [r7, #20]
 800a446:	edd7 7a04 	vldr	s15, [r7, #16]
 800a44a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a44e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800a452:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a456:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800a45a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a45e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800a462:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a466:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800a46a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a46e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800a472:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a476:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800a47a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a47e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800a482:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a486:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800a48a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a48e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800a492:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a496:	00db      	lsls	r3, r3, #3
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	4413      	add	r3, r2
 800a49c:	ed97 7a07 	vldr	s14, [r7, #28]
 800a4a0:	edd7 7a06 	vldr	s15, [r7, #24]
 800a4a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4a8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 800a4ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a4b0:	00db      	lsls	r3, r3, #3
 800a4b2:	3304      	adds	r3, #4
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	ed97 7a05 	vldr	s14, [r7, #20]
 800a4bc:	edd7 7a04 	vldr	s15, [r7, #16]
 800a4c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4c4:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800a4c8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a4cc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a4d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4d4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800a4d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a4dc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a4e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4e4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800a4e8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a4ec:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a4f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4f4:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800a4f8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a4fc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a500:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a504:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800a508:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a50c:	00db      	lsls	r3, r3, #3
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	4413      	add	r3, r2
 800a512:	ed97 7a07 	vldr	s14, [r7, #28]
 800a516:	edd7 7a06 	vldr	s15, [r7, #24]
 800a51a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a51e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800a522:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a526:	00db      	lsls	r3, r3, #3
 800a528:	3304      	adds	r3, #4
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	4413      	add	r3, r2
 800a52e:	ed97 7a05 	vldr	s14, [r7, #20]
 800a532:	edd7 7a04 	vldr	s15, [r7, #16]
 800a536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a53a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800a53e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a542:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800a546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a54a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800a54e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a552:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a55a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800a55e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a562:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a56a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800a56e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a572:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800a576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a57a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800a57e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a582:	00db      	lsls	r3, r3, #3
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	4413      	add	r3, r2
 800a588:	ed97 7a07 	vldr	s14, [r7, #28]
 800a58c:	edd7 7a06 	vldr	s15, [r7, #24]
 800a590:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a594:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800a598:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a59c:	00db      	lsls	r3, r3, #3
 800a59e:	3304      	adds	r3, #4
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	ed97 7a05 	vldr	s14, [r7, #20]
 800a5a8:	edd7 7a04 	vldr	s15, [r7, #16]
 800a5ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5b0:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 800a5b4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a5b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5bc:	4413      	add	r3, r2
 800a5be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 800a5c2:	897b      	ldrh	r3, [r7, #10]
 800a5c4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	f4ff abba 	bcc.w	8009d42 <arm_radix8_butterfly_f32+0x746>

         j++;
 800a5ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 800a5d8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a5dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	f4ff ab2c 	bcc.w	8009c3e <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800a5e6:	893b      	ldrh	r3, [r7, #8]
 800a5e8:	00db      	lsls	r3, r3, #3
 800a5ea:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 800a5ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5f0:	2b07      	cmp	r3, #7
 800a5f2:	f63f a813 	bhi.w	800961c <arm_radix8_butterfly_f32+0x20>
}
 800a5f6:	e000      	b.n	800a5fa <arm_radix8_butterfly_f32+0xffe>
         break;
 800a5f8:	bf00      	nop
}
 800a5fa:	bf00      	nop
 800a5fc:	37f4      	adds	r7, #244	; 0xf4
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop

0800a608 <stage_rfft_f32>:
#include "arm_math.h"

void stage_rfft_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut)
{
 800a608:	b480      	push	{r7}
 800a60a:	b095      	sub	sp, #84	; 0x54
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
   uint32_t  k;								   /* Loop Counter                     */
   float32_t twR, twI;						   /* RFFT Twiddle coefficients        */
   float32_t * pCoeff = S->pTwiddleRFFT;  /* Points to RFFT Twiddle factors   */
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	695b      	ldr	r3, [r3, #20]
 800a618:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						   /* increasing pointer               */
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						   /* decreasing pointer               */
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;				/* temporary variables              */
   float32_t t1a, t1b;				         /* temporary variables              */
   float32_t p0, p1, p2, p3;				   /* temporary variables              */


   k = (S->Sint).fftLen - 1;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	881b      	ldrh	r3, [r3, #0]
 800a626:	3b01      	subs	r3, #1
 800a628:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 800a62a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 800a630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 800a636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 800a63c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800a642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a644:	1d1a      	adds	r2, r3, #4
 800a646:	64ba      	str	r2, [r7, #72]	; 0x48
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 800a64c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a64e:	1d1a      	adds	r2, r3, #4
 800a650:	64ba      	str	r2, [r7, #72]	; 0x48
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	62bb      	str	r3, [r7, #40]	; 0x28

   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800a656:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a65a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a65e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a662:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800a666:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a66a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a66e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a672:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800a676:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a67a:	edd7 7a08 	vldr	s15, [r7, #32]
 800a67e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	1d1a      	adds	r2, r3, #4
 800a686:	607a      	str	r2, [r7, #4]
 800a688:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a68c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a690:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 800a694:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a698:	edd7 7a08 	vldr	s15, [r7, #32]
 800a69c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	1d1a      	adds	r2, r3, #4
 800a6a4:	607a      	str	r2, [r7, #4]
 800a6a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a6aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6ae:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800a6b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6b4:	00db      	lsls	r3, r3, #3
 800a6b6:	68ba      	ldr	r2, [r7, #8]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 800a6bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6be:	3308      	adds	r3, #8
 800a6c0:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 800a6c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 800a6c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 800a6ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 800a6d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 800a6da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6dc:	1d1a      	adds	r2, r3, #4
 800a6de:	64ba      	str	r2, [r7, #72]	; 0x48
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800a6e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6e6:	1d1a      	adds	r2, r3, #4
 800a6e8:	64ba      	str	r2, [r7, #72]	; 0x48
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 800a6ee:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a6f2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a6f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 800a6fe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a702:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a70a:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800a70e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a712:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a71a:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 800a71e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a722:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a72a:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 800a72e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a732:	edd7 7a08 	vldr	s15, [r7, #32]
 800a736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a73a:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 800a73e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a742:	edd7 7a08 	vldr	s15, [r7, #32]
 800a746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a74a:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800a74e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a752:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a756:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a75a:	edd7 7a07 	vldr	s15, [r7, #28]
 800a75e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a762:	edd7 7a04 	vldr	s15, [r7, #16]
 800a766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	1d1a      	adds	r2, r3, #4
 800a76e:	607a      	str	r2, [r7, #4]
 800a770:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a774:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a778:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 800a77c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800a780:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a784:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a788:	edd7 7a06 	vldr	s15, [r7, #24]
 800a78c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a790:	edd7 7a05 	vldr	s15, [r7, #20]
 800a794:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	1d1a      	adds	r2, r3, #4
 800a79c:	607a      	str	r2, [r7, #4]
 800a79e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a7a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a7a6:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 800a7aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7ac:	3308      	adds	r3, #8
 800a7ae:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800a7b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7b2:	3b08      	subs	r3, #8
 800a7b4:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800a7b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7b8:	3b01      	subs	r3, #1
 800a7ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0U);
 800a7bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f47f af7f 	bne.w	800a6c2 <stage_rfft_f32+0xba>
}
 800a7c4:	bf00      	nop
 800a7c6:	3754      	adds	r7, #84	; 0x54
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <merge_rfft_f32>:

/* Prepares data for inverse cfft */
void merge_rfft_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b095      	sub	sp, #84	; 0x54
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	607a      	str	r2, [r7, #4]
   uint32_t  k;								/* Loop Counter                     */
   float32_t twR, twI;						/* RFFT Twiddle coefficients        */
   float32_t *pCoeff = S->pTwiddleRFFT;		/* Points to RFFT Twiddle factors   */
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	695b      	ldr	r3, [r3, #20]
 800a7e0:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						/* increasing pointer               */
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						/* decreasing pointer               */
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;			/* temporary variables              */
   float32_t t1a, t1b, r, s, t, u;			/* temporary variables              */

   k = (S->Sint).fftLen - 1;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	881b      	ldrh	r3, [r3, #0]
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 800a7f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 800a7f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 800a7fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a800:	3308      	adds	r3, #8
 800a802:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800a804:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a808:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a80c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	1d1a      	adds	r2, r3, #4
 800a814:	607a      	str	r2, [r7, #4]
 800a816:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a81a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a81e:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800a822:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a826:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a82a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	1d1a      	adds	r2, r3, #4
 800a832:	607a      	str	r2, [r7, #4]
 800a834:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a838:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a83c:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800a840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a842:	00db      	lsls	r3, r3, #3
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	4413      	add	r3, r2
 800a848:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 800a84a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a84c:	3308      	adds	r3, #8
 800a84e:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0U)
 800a850:	e07c      	b.n	800a94c <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 800a852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 800a858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 800a85e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 800a864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 800a86a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a86c:	1d1a      	adds	r2, r3, #4
 800a86e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800a874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a876:	1d1a      	adds	r2, r3, #4
 800a878:	64ba      	str	r2, [r7, #72]	; 0x48
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 800a87e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a882:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a88a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 800a88e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a892:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a89a:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 800a89e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a8a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a8a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8aa:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 800a8ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a8b2:	edd7 7a08 	vldr	s15, [r7, #32]
 800a8b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ba:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 800a8be:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a8c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a8c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ca:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 800a8ce:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a8d2:	edd7 7a08 	vldr	s15, [r7, #32]
 800a8d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8da:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800a8de:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a8e2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a8e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a8ea:	edd7 7a07 	vldr	s15, [r7, #28]
 800a8ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a8f2:	edd7 7a06 	vldr	s15, [r7, #24]
 800a8f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	1d1a      	adds	r2, r3, #4
 800a8fe:	607a      	str	r2, [r7, #4]
 800a900:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a904:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a908:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800a90c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a910:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a914:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a918:	edd7 7a05 	vldr	s15, [r7, #20]
 800a91c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a920:	edd7 7a04 	vldr	s15, [r7, #16]
 800a924:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	1d1a      	adds	r2, r3, #4
 800a92c:	607a      	str	r2, [r7, #4]
 800a92e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a932:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a936:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 800a93a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a93c:	3308      	adds	r3, #8
 800a93e:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800a940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a942:	3b08      	subs	r3, #8
 800a944:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800a946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a948:	3b01      	subs	r3, #1
 800a94a:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0U)
 800a94c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a94e:	2b00      	cmp	r3, #0
 800a950:	f47f af7f 	bne.w	800a852 <merge_rfft_f32+0x82>
   }

}
 800a954:	bf00      	nop
 800a956:	3754      	adds	r7, #84	; 0x54
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <arm_rfft_fast_f32>:
* @param[in]  ifftFlag        RFFT if flag is 0, RIFFT if flag is 1
* @return none.
*/

void arm_rfft_fast_f32(arm_rfft_fast_instance_f32 * S, float32_t * p, float32_t * pOut, uint8_t ifftFlag)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	607a      	str	r2, [r7, #4]
 800a96c:	70fb      	strb	r3, [r7, #3]
   arm_cfft_instance_f32 * Sint = &(S->Sint);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	617b      	str	r3, [r7, #20]
   Sint->fftLen = S->fftLenRFFT / 2;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	8a1b      	ldrh	r3, [r3, #16]
 800a976:	085b      	lsrs	r3, r3, #1
 800a978:	b29a      	uxth	r2, r3
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	801a      	strh	r2, [r3, #0]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800a97e:	78fb      	ldrb	r3, [r7, #3]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00b      	beq.n	800a99c <arm_rfft_fast_f32+0x3c>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	68b9      	ldr	r1, [r7, #8]
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f7ff ff21 	bl	800a7d0 <merge_rfft_f32>

      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800a98e:	78fa      	ldrb	r2, [r7, #3]
 800a990:	2301      	movs	r3, #1
 800a992:	6879      	ldr	r1, [r7, #4]
 800a994:	6978      	ldr	r0, [r7, #20]
 800a996:	f7fe fd8d 	bl	80094b4 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 800a99a:	e00a      	b.n	800a9b2 <arm_rfft_fast_f32+0x52>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 800a99c:	78fa      	ldrb	r2, [r7, #3]
 800a99e:	2301      	movs	r3, #1
 800a9a0:	68b9      	ldr	r1, [r7, #8]
 800a9a2:	6978      	ldr	r0, [r7, #20]
 800a9a4:	f7fe fd86 	bl	80094b4 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	68b9      	ldr	r1, [r7, #8]
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f7ff fe2b 	bl	800a608 <stage_rfft_f32>
}
 800a9b2:	bf00      	nop
 800a9b4:	3718      	adds	r7, #24
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
	...

0800a9bc <arm_rfft_fast_init_f32>:
* This Function also initializes Twiddle factor table pointer and Bit reversal table pointer.
*/
arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	807b      	strh	r3, [r7, #2]
  arm_cfft_instance_f32 * Sint;
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	73fb      	strb	r3, [r7, #15]
  /*  Initialise the FFT length */
  Sint = &(S->Sint);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	60bb      	str	r3, [r7, #8]
  Sint->fftLen = fftLen/2;
 800a9d0:	887b      	ldrh	r3, [r7, #2]
 800a9d2:	085b      	lsrs	r3, r3, #1
 800a9d4:	b29a      	uxth	r2, r3
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = fftLen;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	887a      	ldrh	r2, [r7, #2]
 800a9de:	821a      	strh	r2, [r3, #16]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (Sint->fftLen)
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	881b      	ldrh	r3, [r3, #0]
 800a9e4:	2b80      	cmp	r3, #128	; 0x80
 800a9e6:	d050      	beq.n	800aa8a <arm_rfft_fast_init_f32+0xce>
 800a9e8:	2b80      	cmp	r3, #128	; 0x80
 800a9ea:	dc06      	bgt.n	800a9fa <arm_rfft_fast_init_f32+0x3e>
 800a9ec:	2b20      	cmp	r3, #32
 800a9ee:	d066      	beq.n	800aabe <arm_rfft_fast_init_f32+0x102>
 800a9f0:	2b40      	cmp	r3, #64	; 0x40
 800a9f2:	d057      	beq.n	800aaa4 <arm_rfft_fast_init_f32+0xe8>
 800a9f4:	2b10      	cmp	r3, #16
 800a9f6:	d06f      	beq.n	800aad8 <arm_rfft_fast_init_f32+0x11c>
 800a9f8:	e07b      	b.n	800aaf2 <arm_rfft_fast_init_f32+0x136>
 800a9fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9fe:	d028      	beq.n	800aa52 <arm_rfft_fast_init_f32+0x96>
 800aa00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa04:	dc03      	bgt.n	800aa0e <arm_rfft_fast_init_f32+0x52>
 800aa06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa0a:	d030      	beq.n	800aa6e <arm_rfft_fast_init_f32+0xb2>
 800aa0c:	e071      	b.n	800aaf2 <arm_rfft_fast_init_f32+0x136>
 800aa0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa12:	d010      	beq.n	800aa36 <arm_rfft_fast_init_f32+0x7a>
 800aa14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa18:	d16b      	bne.n	800aaf2 <arm_rfft_fast_init_f32+0x136>
  {
  case 2048U:
    /*  Initializations of structure parameters for 2048 point FFT */
    /*  Initialise the bit reversal table length */
    Sint->bitRevLength = ARMBITREVINDEXTABLE_2048_TABLE_LENGTH;
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	f44f 626e 	mov.w	r2, #3808	; 0xee0
 800aa20:	819a      	strh	r2, [r3, #12]
    /*  Initialise the bit reversal table pointer */
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	4a38      	ldr	r2, [pc, #224]	; (800ab08 <arm_rfft_fast_init_f32+0x14c>)
 800aa26:	609a      	str	r2, [r3, #8]
    /*  Initialise the Twiddle coefficient pointers */
		Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	4a38      	ldr	r2, [pc, #224]	; (800ab0c <arm_rfft_fast_init_f32+0x150>)
 800aa2c:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a37      	ldr	r2, [pc, #220]	; (800ab10 <arm_rfft_fast_init_f32+0x154>)
 800aa32:	615a      	str	r2, [r3, #20]
    break;
 800aa34:	e060      	b.n	800aaf8 <arm_rfft_fast_init_f32+0x13c>
  case 1024U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_1024_TABLE_LENGTH;
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800aa3c:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	4a34      	ldr	r2, [pc, #208]	; (800ab14 <arm_rfft_fast_init_f32+0x158>)
 800aa42:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	4a34      	ldr	r2, [pc, #208]	; (800ab18 <arm_rfft_fast_init_f32+0x15c>)
 800aa48:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4a33      	ldr	r2, [pc, #204]	; (800ab1c <arm_rfft_fast_init_f32+0x160>)
 800aa4e:	615a      	str	r2, [r3, #20]
    break;
 800aa50:	e052      	b.n	800aaf8 <arm_rfft_fast_init_f32+0x13c>
  case 512U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800aa58:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	4a30      	ldr	r2, [pc, #192]	; (800ab20 <arm_rfft_fast_init_f32+0x164>)
 800aa5e:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	4a30      	ldr	r2, [pc, #192]	; (800ab24 <arm_rfft_fast_init_f32+0x168>)
 800aa64:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a2f      	ldr	r2, [pc, #188]	; (800ab28 <arm_rfft_fast_init_f32+0x16c>)
 800aa6a:	615a      	str	r2, [r3, #20]
    break;
 800aa6c:	e044      	b.n	800aaf8 <arm_rfft_fast_init_f32+0x13c>
  case 256U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800aa74:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	4a2c      	ldr	r2, [pc, #176]	; (800ab2c <arm_rfft_fast_init_f32+0x170>)
 800aa7a:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	4a2c      	ldr	r2, [pc, #176]	; (800ab30 <arm_rfft_fast_init_f32+0x174>)
 800aa80:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a2b      	ldr	r2, [pc, #172]	; (800ab34 <arm_rfft_fast_init_f32+0x178>)
 800aa86:	615a      	str	r2, [r3, #20]
    break;
 800aa88:	e036      	b.n	800aaf8 <arm_rfft_fast_init_f32+0x13c>
  case 128U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	22d0      	movs	r2, #208	; 0xd0
 800aa8e:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	4a29      	ldr	r2, [pc, #164]	; (800ab38 <arm_rfft_fast_init_f32+0x17c>)
 800aa94:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	4a28      	ldr	r2, [pc, #160]	; (800ab3c <arm_rfft_fast_init_f32+0x180>)
 800aa9a:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	4a28      	ldr	r2, [pc, #160]	; (800ab40 <arm_rfft_fast_init_f32+0x184>)
 800aaa0:	615a      	str	r2, [r3, #20]
    break;
 800aaa2:	e029      	b.n	800aaf8 <arm_rfft_fast_init_f32+0x13c>
  case 64U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_64_TABLE_LENGTH;
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	2238      	movs	r2, #56	; 0x38
 800aaa8:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	4a25      	ldr	r2, [pc, #148]	; (800ab44 <arm_rfft_fast_init_f32+0x188>)
 800aaae:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	4a25      	ldr	r2, [pc, #148]	; (800ab48 <arm_rfft_fast_init_f32+0x18c>)
 800aab4:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a24      	ldr	r2, [pc, #144]	; (800ab4c <arm_rfft_fast_init_f32+0x190>)
 800aaba:	615a      	str	r2, [r3, #20]
    break;
 800aabc:	e01c      	b.n	800aaf8 <arm_rfft_fast_init_f32+0x13c>
  case 32U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_32_TABLE_LENGTH;
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	2230      	movs	r2, #48	; 0x30
 800aac2:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	4a22      	ldr	r2, [pc, #136]	; (800ab50 <arm_rfft_fast_init_f32+0x194>)
 800aac8:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	4a21      	ldr	r2, [pc, #132]	; (800ab54 <arm_rfft_fast_init_f32+0x198>)
 800aace:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a21      	ldr	r2, [pc, #132]	; (800ab58 <arm_rfft_fast_init_f32+0x19c>)
 800aad4:	615a      	str	r2, [r3, #20]
    break;
 800aad6:	e00f      	b.n	800aaf8 <arm_rfft_fast_init_f32+0x13c>
  case 16U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_16_TABLE_LENGTH;
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	2214      	movs	r2, #20
 800aadc:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	4a1e      	ldr	r2, [pc, #120]	; (800ab5c <arm_rfft_fast_init_f32+0x1a0>)
 800aae2:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	4a1e      	ldr	r2, [pc, #120]	; (800ab60 <arm_rfft_fast_init_f32+0x1a4>)
 800aae8:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a1d      	ldr	r2, [pc, #116]	; (800ab64 <arm_rfft_fast_init_f32+0x1a8>)
 800aaee:	615a      	str	r2, [r3, #20]
    break;
 800aaf0:	e002      	b.n	800aaf8 <arm_rfft_fast_init_f32+0x13c>
  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
 800aaf2:	23ff      	movs	r3, #255	; 0xff
 800aaf4:	73fb      	strb	r3, [r7, #15]
    break;
 800aaf6:	bf00      	nop
  }

  return (status);
 800aaf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3714      	adds	r7, #20
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr
 800ab08:	08022c90 	.word	0x08022c90
 800ab0c:	0801d4f8 	.word	0x0801d4f8
 800ab10:	080289d0 	.word	0x080289d0
 800ab14:	08021e80 	.word	0x08021e80
 800ab18:	0801b4f8 	.word	0x0801b4f8
 800ab1c:	080269d0 	.word	0x080269d0
 800ab20:	08021b00 	.word	0x08021b00
 800ab24:	0801a4f8 	.word	0x0801a4f8
 800ab28:	080259d0 	.word	0x080259d0
 800ab2c:	08021790 	.word	0x08021790
 800ab30:	08019cf8 	.word	0x08019cf8
 800ab34:	080251d0 	.word	0x080251d0
 800ab38:	080215f0 	.word	0x080215f0
 800ab3c:	080198f8 	.word	0x080198f8
 800ab40:	08024dd0 	.word	0x08024dd0
 800ab44:	08021580 	.word	0x08021580
 800ab48:	080196f8 	.word	0x080196f8
 800ab4c:	08024bd0 	.word	0x08024bd0
 800ab50:	08021520 	.word	0x08021520
 800ab54:	080195f8 	.word	0x080195f8
 800ab58:	08024ad0 	.word	0x08024ad0
 800ab5c:	080214f8 	.word	0x080214f8
 800ab60:	08019578 	.word	0x08019578
 800ab64:	08024a50 	.word	0x08024a50

0800ab68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ab6c:	2003      	movs	r0, #3
 800ab6e:	f000 f94b 	bl	800ae08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ab72:	2000      	movs	r0, #0
 800ab74:	f000 f806 	bl	800ab84 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800ab78:	f7fd f94a 	bl	8007e10 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	bd80      	pop	{r7, pc}
	...

0800ab84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ab8c:	4b12      	ldr	r3, [pc, #72]	; (800abd8 <HAL_InitTick+0x54>)
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	4b12      	ldr	r3, [pc, #72]	; (800abdc <HAL_InitTick+0x58>)
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	4619      	mov	r1, r3
 800ab96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ab9a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aba2:	4618      	mov	r0, r3
 800aba4:	f000 f965 	bl	800ae72 <HAL_SYSTICK_Config>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d001      	beq.n	800abb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	e00e      	b.n	800abd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2b0f      	cmp	r3, #15
 800abb6:	d80a      	bhi.n	800abce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800abb8:	2200      	movs	r2, #0
 800abba:	6879      	ldr	r1, [r7, #4]
 800abbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abc0:	f000 f92d 	bl	800ae1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800abc4:	4a06      	ldr	r2, [pc, #24]	; (800abe0 <HAL_InitTick+0x5c>)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800abca:	2300      	movs	r3, #0
 800abcc:	e000      	b.n	800abd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800abce:	2301      	movs	r3, #1
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	20000000 	.word	0x20000000
 800abdc:	20000008 	.word	0x20000008
 800abe0:	20000004 	.word	0x20000004

0800abe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800abe4:	b480      	push	{r7}
 800abe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800abe8:	4b06      	ldr	r3, [pc, #24]	; (800ac04 <HAL_IncTick+0x20>)
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	461a      	mov	r2, r3
 800abee:	4b06      	ldr	r3, [pc, #24]	; (800ac08 <HAL_IncTick+0x24>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4413      	add	r3, r2
 800abf4:	4a04      	ldr	r2, [pc, #16]	; (800ac08 <HAL_IncTick+0x24>)
 800abf6:	6013      	str	r3, [r2, #0]
}
 800abf8:	bf00      	nop
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop
 800ac04:	20000008 	.word	0x20000008
 800ac08:	2002aaac 	.word	0x2002aaac

0800ac0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	af00      	add	r7, sp, #0
  return uwTick;
 800ac10:	4b03      	ldr	r3, [pc, #12]	; (800ac20 <HAL_GetTick+0x14>)
 800ac12:	681b      	ldr	r3, [r3, #0]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	2002aaac 	.word	0x2002aaac

0800ac24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ac2c:	f7ff ffee 	bl	800ac0c <HAL_GetTick>
 800ac30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac3c:	d005      	beq.n	800ac4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ac3e:	4b09      	ldr	r3, [pc, #36]	; (800ac64 <HAL_Delay+0x40>)
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	461a      	mov	r2, r3
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	4413      	add	r3, r2
 800ac48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ac4a:	bf00      	nop
 800ac4c:	f7ff ffde 	bl	800ac0c <HAL_GetTick>
 800ac50:	4602      	mov	r2, r0
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	1ad3      	subs	r3, r2, r3
 800ac56:	68fa      	ldr	r2, [r7, #12]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d8f7      	bhi.n	800ac4c <HAL_Delay+0x28>
  {
  }
}
 800ac5c:	bf00      	nop
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	20000008 	.word	0x20000008

0800ac68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f003 0307 	and.w	r3, r3, #7
 800ac76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ac78:	4b0b      	ldr	r3, [pc, #44]	; (800aca8 <__NVIC_SetPriorityGrouping+0x40>)
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ac84:	4013      	ands	r3, r2
 800ac86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800ac90:	4b06      	ldr	r3, [pc, #24]	; (800acac <__NVIC_SetPriorityGrouping+0x44>)
 800ac92:	4313      	orrs	r3, r2
 800ac94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ac96:	4a04      	ldr	r2, [pc, #16]	; (800aca8 <__NVIC_SetPriorityGrouping+0x40>)
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	60d3      	str	r3, [r2, #12]
}
 800ac9c:	bf00      	nop
 800ac9e:	3714      	adds	r7, #20
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr
 800aca8:	e000ed00 	.word	0xe000ed00
 800acac:	05fa0000 	.word	0x05fa0000

0800acb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800acb0:	b480      	push	{r7}
 800acb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800acb4:	4b04      	ldr	r3, [pc, #16]	; (800acc8 <__NVIC_GetPriorityGrouping+0x18>)
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	0a1b      	lsrs	r3, r3, #8
 800acba:	f003 0307 	and.w	r3, r3, #7
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr
 800acc8:	e000ed00 	.word	0xe000ed00

0800accc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	4603      	mov	r3, r0
 800acd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800acd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	db0b      	blt.n	800acf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800acde:	79fb      	ldrb	r3, [r7, #7]
 800ace0:	f003 021f 	and.w	r2, r3, #31
 800ace4:	4907      	ldr	r1, [pc, #28]	; (800ad04 <__NVIC_EnableIRQ+0x38>)
 800ace6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acea:	095b      	lsrs	r3, r3, #5
 800acec:	2001      	movs	r0, #1
 800acee:	fa00 f202 	lsl.w	r2, r0, r2
 800acf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800acf6:	bf00      	nop
 800acf8:	370c      	adds	r7, #12
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	e000e100 	.word	0xe000e100

0800ad08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	4603      	mov	r3, r0
 800ad10:	6039      	str	r1, [r7, #0]
 800ad12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	db0a      	blt.n	800ad32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	490c      	ldr	r1, [pc, #48]	; (800ad54 <__NVIC_SetPriority+0x4c>)
 800ad22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad26:	0112      	lsls	r2, r2, #4
 800ad28:	b2d2      	uxtb	r2, r2
 800ad2a:	440b      	add	r3, r1
 800ad2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ad30:	e00a      	b.n	800ad48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	b2da      	uxtb	r2, r3
 800ad36:	4908      	ldr	r1, [pc, #32]	; (800ad58 <__NVIC_SetPriority+0x50>)
 800ad38:	79fb      	ldrb	r3, [r7, #7]
 800ad3a:	f003 030f 	and.w	r3, r3, #15
 800ad3e:	3b04      	subs	r3, #4
 800ad40:	0112      	lsls	r2, r2, #4
 800ad42:	b2d2      	uxtb	r2, r2
 800ad44:	440b      	add	r3, r1
 800ad46:	761a      	strb	r2, [r3, #24]
}
 800ad48:	bf00      	nop
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr
 800ad54:	e000e100 	.word	0xe000e100
 800ad58:	e000ed00 	.word	0xe000ed00

0800ad5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b089      	sub	sp, #36	; 0x24
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f003 0307 	and.w	r3, r3, #7
 800ad6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	f1c3 0307 	rsb	r3, r3, #7
 800ad76:	2b04      	cmp	r3, #4
 800ad78:	bf28      	it	cs
 800ad7a:	2304      	movcs	r3, #4
 800ad7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ad7e:	69fb      	ldr	r3, [r7, #28]
 800ad80:	3304      	adds	r3, #4
 800ad82:	2b06      	cmp	r3, #6
 800ad84:	d902      	bls.n	800ad8c <NVIC_EncodePriority+0x30>
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	3b03      	subs	r3, #3
 800ad8a:	e000      	b.n	800ad8e <NVIC_EncodePriority+0x32>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ad90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	fa02 f303 	lsl.w	r3, r2, r3
 800ad9a:	43da      	mvns	r2, r3
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	401a      	ands	r2, r3
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ada4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	fa01 f303 	lsl.w	r3, r1, r3
 800adae:	43d9      	mvns	r1, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800adb4:	4313      	orrs	r3, r2
         );
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3724      	adds	r7, #36	; 0x24
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
	...

0800adc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	3b01      	subs	r3, #1
 800add0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800add4:	d301      	bcc.n	800adda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800add6:	2301      	movs	r3, #1
 800add8:	e00f      	b.n	800adfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800adda:	4a0a      	ldr	r2, [pc, #40]	; (800ae04 <SysTick_Config+0x40>)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	3b01      	subs	r3, #1
 800ade0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ade2:	210f      	movs	r1, #15
 800ade4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ade8:	f7ff ff8e 	bl	800ad08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800adec:	4b05      	ldr	r3, [pc, #20]	; (800ae04 <SysTick_Config+0x40>)
 800adee:	2200      	movs	r2, #0
 800adf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800adf2:	4b04      	ldr	r3, [pc, #16]	; (800ae04 <SysTick_Config+0x40>)
 800adf4:	2207      	movs	r2, #7
 800adf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	e000e010 	.word	0xe000e010

0800ae08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f7ff ff29 	bl	800ac68 <__NVIC_SetPriorityGrouping>
}
 800ae16:	bf00      	nop
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b086      	sub	sp, #24
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	4603      	mov	r3, r0
 800ae26:	60b9      	str	r1, [r7, #8]
 800ae28:	607a      	str	r2, [r7, #4]
 800ae2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ae30:	f7ff ff3e 	bl	800acb0 <__NVIC_GetPriorityGrouping>
 800ae34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	68b9      	ldr	r1, [r7, #8]
 800ae3a:	6978      	ldr	r0, [r7, #20]
 800ae3c:	f7ff ff8e 	bl	800ad5c <NVIC_EncodePriority>
 800ae40:	4602      	mov	r2, r0
 800ae42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae46:	4611      	mov	r1, r2
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7ff ff5d 	bl	800ad08 <__NVIC_SetPriority>
}
 800ae4e:	bf00      	nop
 800ae50:	3718      	adds	r7, #24
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b082      	sub	sp, #8
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ae60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7ff ff31 	bl	800accc <__NVIC_EnableIRQ>
}
 800ae6a:	bf00      	nop
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b082      	sub	sp, #8
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7ff ffa2 	bl	800adc4 <SysTick_Config>
 800ae80:	4603      	mov	r3, r0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3708      	adds	r7, #8
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
	...

0800ae8c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d101      	bne.n	800ae9e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e054      	b.n	800af48 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	7f5b      	ldrb	r3, [r3, #29]
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d105      	bne.n	800aeb4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f7fc ffd2 	bl	8007e58 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2202      	movs	r2, #2
 800aeb8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	791b      	ldrb	r3, [r3, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d10c      	bne.n	800aedc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a22      	ldr	r2, [pc, #136]	; (800af50 <HAL_CRC_Init+0xc4>)
 800aec8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	689a      	ldr	r2, [r3, #8]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f022 0218 	bic.w	r2, r2, #24
 800aed8:	609a      	str	r2, [r3, #8]
 800aeda:	e00c      	b.n	800aef6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6899      	ldr	r1, [r3, #8]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	461a      	mov	r2, r3
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 f834 	bl	800af54 <HAL_CRCEx_Polynomial_Set>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d001      	beq.n	800aef6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	e028      	b.n	800af48 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	795b      	ldrb	r3, [r3, #5]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d105      	bne.n	800af0a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af06:	611a      	str	r2, [r3, #16]
 800af08:	e004      	b.n	800af14 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	6912      	ldr	r2, [r2, #16]
 800af12:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	695a      	ldr	r2, [r3, #20]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	430a      	orrs	r2, r1
 800af28:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	699a      	ldr	r2, [r3, #24]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	430a      	orrs	r2, r1
 800af3e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	04c11db7 	.word	0x04c11db7

0800af54 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800af54:	b480      	push	{r7}
 800af56:	b087      	sub	sp, #28
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af60:	2300      	movs	r3, #0
 800af62:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800af64:	231f      	movs	r3, #31
 800af66:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800af68:	bf00      	nop
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	1e5a      	subs	r2, r3, #1
 800af6e:	613a      	str	r2, [r7, #16]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d009      	beq.n	800af88 <HAL_CRCEx_Polynomial_Set+0x34>
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	f003 031f 	and.w	r3, r3, #31
 800af7a:	68ba      	ldr	r2, [r7, #8]
 800af7c:	fa22 f303 	lsr.w	r3, r2, r3
 800af80:	f003 0301 	and.w	r3, r3, #1
 800af84:	2b00      	cmp	r3, #0
 800af86:	d0f0      	beq.n	800af6a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b18      	cmp	r3, #24
 800af8c:	d846      	bhi.n	800b01c <HAL_CRCEx_Polynomial_Set+0xc8>
 800af8e:	a201      	add	r2, pc, #4	; (adr r2, 800af94 <HAL_CRCEx_Polynomial_Set+0x40>)
 800af90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af94:	0800b023 	.word	0x0800b023
 800af98:	0800b01d 	.word	0x0800b01d
 800af9c:	0800b01d 	.word	0x0800b01d
 800afa0:	0800b01d 	.word	0x0800b01d
 800afa4:	0800b01d 	.word	0x0800b01d
 800afa8:	0800b01d 	.word	0x0800b01d
 800afac:	0800b01d 	.word	0x0800b01d
 800afb0:	0800b01d 	.word	0x0800b01d
 800afb4:	0800b011 	.word	0x0800b011
 800afb8:	0800b01d 	.word	0x0800b01d
 800afbc:	0800b01d 	.word	0x0800b01d
 800afc0:	0800b01d 	.word	0x0800b01d
 800afc4:	0800b01d 	.word	0x0800b01d
 800afc8:	0800b01d 	.word	0x0800b01d
 800afcc:	0800b01d 	.word	0x0800b01d
 800afd0:	0800b01d 	.word	0x0800b01d
 800afd4:	0800b005 	.word	0x0800b005
 800afd8:	0800b01d 	.word	0x0800b01d
 800afdc:	0800b01d 	.word	0x0800b01d
 800afe0:	0800b01d 	.word	0x0800b01d
 800afe4:	0800b01d 	.word	0x0800b01d
 800afe8:	0800b01d 	.word	0x0800b01d
 800afec:	0800b01d 	.word	0x0800b01d
 800aff0:	0800b01d 	.word	0x0800b01d
 800aff4:	0800aff9 	.word	0x0800aff9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	2b06      	cmp	r3, #6
 800affc:	d913      	bls.n	800b026 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b002:	e010      	b.n	800b026 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	2b07      	cmp	r3, #7
 800b008:	d90f      	bls.n	800b02a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800b00a:	2301      	movs	r3, #1
 800b00c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b00e:	e00c      	b.n	800b02a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	2b0f      	cmp	r3, #15
 800b014:	d90b      	bls.n	800b02e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800b016:	2301      	movs	r3, #1
 800b018:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b01a:	e008      	b.n	800b02e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800b01c:	2301      	movs	r3, #1
 800b01e:	75fb      	strb	r3, [r7, #23]
      break;
 800b020:	e006      	b.n	800b030 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800b022:	bf00      	nop
 800b024:	e004      	b.n	800b030 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800b026:	bf00      	nop
 800b028:	e002      	b.n	800b030 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800b02a:	bf00      	nop
 800b02c:	e000      	b.n	800b030 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800b02e:	bf00      	nop
  }
  if (status == HAL_OK)
 800b030:	7dfb      	ldrb	r3, [r7, #23]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d10d      	bne.n	800b052 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	68ba      	ldr	r2, [r7, #8]
 800b03c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	f023 0118 	bic.w	r1, r3, #24
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	430a      	orrs	r2, r1
 800b050:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800b052:	7dfb      	ldrb	r3, [r7, #23]
}
 800b054:	4618      	mov	r0, r3
 800b056:	371c      	adds	r7, #28
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d101      	bne.n	800b072 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800b06e:	2301      	movs	r3, #1
 800b070:	e0ac      	b.n	800b1cc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4618      	mov	r0, r3
 800b078:	f000 fac2 	bl	800b600 <DFSDM_GetChannelFromInstance>
 800b07c:	4602      	mov	r2, r0
 800b07e:	4b55      	ldr	r3, [pc, #340]	; (800b1d4 <HAL_DFSDM_ChannelInit+0x174>)
 800b080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d001      	beq.n	800b08c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	e09f      	b.n	800b1cc <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f7fc ff03 	bl	8007e98 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800b092:	4b51      	ldr	r3, [pc, #324]	; (800b1d8 <HAL_DFSDM_ChannelInit+0x178>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	3301      	adds	r3, #1
 800b098:	4a4f      	ldr	r2, [pc, #316]	; (800b1d8 <HAL_DFSDM_ChannelInit+0x178>)
 800b09a:	6013      	str	r3, [r2, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 800b09c:	4b4e      	ldr	r3, [pc, #312]	; (800b1d8 <HAL_DFSDM_ChannelInit+0x178>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d125      	bne.n	800b0f0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800b0a4:	4b4d      	ldr	r3, [pc, #308]	; (800b1dc <HAL_DFSDM_ChannelInit+0x17c>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a4c      	ldr	r2, [pc, #304]	; (800b1dc <HAL_DFSDM_ChannelInit+0x17c>)
 800b0aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b0ae:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800b0b0:	4b4a      	ldr	r3, [pc, #296]	; (800b1dc <HAL_DFSDM_ChannelInit+0x17c>)
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	4948      	ldr	r1, [pc, #288]	; (800b1dc <HAL_DFSDM_ChannelInit+0x17c>)
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	600b      	str	r3, [r1, #0]
    
    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800b0be:	4b47      	ldr	r3, [pc, #284]	; (800b1dc <HAL_DFSDM_ChannelInit+0x17c>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a46      	ldr	r2, [pc, #280]	; (800b1dc <HAL_DFSDM_ChannelInit+0x17c>)
 800b0c4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800b0c8:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	791b      	ldrb	r3, [r3, #4]
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d108      	bne.n	800b0e4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 800b0d2:	4b42      	ldr	r3, [pc, #264]	; (800b1dc <HAL_DFSDM_ChannelInit+0x17c>)
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	3b01      	subs	r3, #1
 800b0dc:	041b      	lsls	r3, r3, #16
 800b0de:	493f      	ldr	r1, [pc, #252]	; (800b1dc <HAL_DFSDM_ChannelInit+0x17c>)
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800b0e4:	4b3d      	ldr	r3, [pc, #244]	; (800b1dc <HAL_DFSDM_ChannelInit+0x17c>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a3c      	ldr	r2, [pc, #240]	; (800b1dc <HAL_DFSDM_ChannelInit+0x17c>)
 800b0ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b0ee:	6013      	str	r3, [r2, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800b0fe:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	6819      	ldr	r1, [r3, #0]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800b10e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800b114:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	430a      	orrs	r2, r1
 800b11c:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f022 020f 	bic.w	r2, r2, #15
 800b12c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	6819      	ldr	r1, [r3, #0]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800b13c:	431a      	orrs	r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	430a      	orrs	r2, r1
 800b144:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	689a      	ldr	r2, [r3, #8]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800b154:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	6899      	ldr	r1, [r3, #8]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b164:	3b01      	subs	r3, #1
 800b166:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800b168:	431a      	orrs	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	430a      	orrs	r2, r1
 800b170:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	685a      	ldr	r2, [r3, #4]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f002 0207 	and.w	r2, r2, #7
 800b180:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	6859      	ldr	r1, [r3, #4]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b192:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 800b194:	431a      	orrs	r2, r3
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	430a      	orrs	r2, r1
 800b19c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b1ac:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f000 fa20 	bl	800b600 <DFSDM_GetChannelFromInstance>
 800b1c0:	4601      	mov	r1, r0
 800b1c2:	4a04      	ldr	r2, [pc, #16]	; (800b1d4 <HAL_DFSDM_ChannelInit+0x174>)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  return HAL_OK;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3708      	adds	r7, #8
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	20004ad4 	.word	0x20004ad4
 800b1d8:	20004ad0 	.word	0x20004ad0
 800b1dc:	40017400 	.word	0x40017400

0800b1e0 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d101      	bne.n	800b1f2 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	e0c6      	b.n	800b380 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a64      	ldr	r2, [pc, #400]	; (800b388 <HAL_DFSDM_FilterInit+0x1a8>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d109      	bne.n	800b210 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 800b200:	2b01      	cmp	r3, #1
 800b202:	d003      	beq.n	800b20c <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d101      	bne.n	800b210 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 800b20c:	2301      	movs	r3, #1
 800b20e:	e0b7      	b.n	800b380 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2201      	movs	r2, #1
 800b21a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2201      	movs	r2, #1
 800b220:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 f8b3 	bl	800b394 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800b23c:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	7a1b      	ldrb	r3, [r3, #8]
 800b242:	2b01      	cmp	r3, #1
 800b244:	d108      	bne.n	800b258 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b254:	601a      	str	r2, [r3, #0]
 800b256:	e007      	b.n	800b268 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800b266:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	7a5b      	ldrb	r3, [r3, #9]
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d108      	bne.n	800b282 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800b27e:	601a      	str	r2, [r3, #0]
 800b280:	e007      	b.n	800b292 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800b290:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	6819      	ldr	r1, [r3, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	4b3b      	ldr	r3, [pc, #236]	; (800b38c <HAL_DFSDM_FilterInit+0x1ac>)
 800b29e:	400b      	ands	r3, r1
 800b2a0:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d108      	bne.n	800b2bc <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	6819      	ldr	r1, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	695a      	ldr	r2, [r3, #20]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	430a      	orrs	r2, r1
 800b2ba:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	7c1b      	ldrb	r3, [r3, #16]
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d108      	bne.n	800b2d6 <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f042 0210 	orr.w	r2, r2, #16
 800b2d2:	601a      	str	r2, [r3, #0]
 800b2d4:	e007      	b.n	800b2e6 <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f022 0210 	bic.w	r2, r2, #16
 800b2e4:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	7c5b      	ldrb	r3, [r3, #17]
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d108      	bne.n	800b300 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f042 0220 	orr.w	r2, r2, #32
 800b2fc:	601a      	str	r2, [r3, #0]
 800b2fe:	e007      	b.n	800b310 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f022 0220 	bic.w	r2, r2, #32
 800b30e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	6959      	ldr	r1, [r3, #20]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	4b1d      	ldr	r3, [pc, #116]	; (800b390 <HAL_DFSDM_FilterInit+0x1b0>)
 800b31c:	400b      	ands	r3, r1
 800b31e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	6959      	ldr	r1, [r3, #20]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a1b      	ldr	r3, [r3, #32]
 800b32e:	3b01      	subs	r3, #1
 800b330:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800b332:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b338:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 800b33a:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	430a      	orrs	r2, r1
 800b342:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	685a      	ldr	r2, [r3, #4]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	68da      	ldr	r2, [r3, #12]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	699a      	ldr	r2, [r3, #24]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	7c1a      	ldrb	r2, [r3, #16]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f042 0201 	orr.w	r2, r2, #1
 800b374:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2201      	movs	r2, #1
 800b37a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3708      	adds	r7, #8
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	40017500 	.word	0x40017500
 800b38c:	ffff80f7 	.word	0xffff80f7
 800b390:	1c00ff00 	.word	0x1c00ff00

0800b394 <HAL_DFSDM_FilterMspInit>:
  * @brief  Initializes the DFSDM filter MSP.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);
  
  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_FilterMspInit could be implemented in the user file.
   */
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b087      	sub	sp, #28
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d02c      	beq.n	800b41c <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 800b3c8:	2bff      	cmp	r3, #255	; 0xff
 800b3ca:	d027      	beq.n	800b41c <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	6819      	ldr	r1, [r3, #0]
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	4b16      	ldr	r3, [pc, #88]	; (800b430 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 800b3d8:	400b      	ands	r3, r1
 800b3da:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d10d      	bne.n	800b3fe <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	021b      	lsls	r3, r3, #8
 800b3ec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b3f0:	431a      	orrs	r2, r3
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b3fa:	601a      	str	r2, [r3, #0]
 800b3fc:	e00a      	b.n	800b414 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	6819      	ldr	r1, [r3, #0]
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	021b      	lsls	r3, r3, #8
 800b408:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	430a      	orrs	r2, r1
 800b412:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	631a      	str	r2, [r3, #48]	; 0x30
 800b41a:	e001      	b.n	800b420 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }  
  else
  {
    status = HAL_ERROR;
 800b41c:	2301      	movs	r3, #1
 800b41e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800b420:	7dfb      	ldrb	r3, [r7, #23]
}
 800b422:	4618      	mov	r0, r3
 800b424:	371c      	adds	r7, #28
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr
 800b42e:	bf00      	nop
 800b430:	f8fbffff 	.word	0xf8fbffff

0800b434 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b086      	sub	sp, #24
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b440:	2300      	movs	r3, #0
 800b442:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d002      	beq.n	800b450 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d102      	bne.n	800b456 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 800b450:	2301      	movs	r3, #1
 800b452:	75fb      	strb	r3, [r7, #23]
 800b454:	e066      	b.n	800b524 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b460:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b464:	d002      	beq.n	800b46c <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	75fb      	strb	r3, [r7, #23]
 800b46a:	e05b      	b.n	800b524 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b470:	2b00      	cmp	r3, #0
 800b472:	d10e      	bne.n	800b492 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d10a      	bne.n	800b492 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b480:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800b482:	2b00      	cmp	r3, #0
 800b484:	d105      	bne.n	800b492 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d002      	beq.n	800b492 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	75fb      	strb	r3, [r7, #23]
 800b490:	e048      	b.n	800b524 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b496:	2b00      	cmp	r3, #0
 800b498:	d10c      	bne.n	800b4b4 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d108      	bne.n	800b4b4 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4a6:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800b4a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4ac:	d102      	bne.n	800b4b4 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	75fb      	strb	r3, [r7, #23]
 800b4b2:	e037      	b.n	800b524 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d004      	beq.n	800b4c8 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800b4c4:	2b03      	cmp	r3, #3
 800b4c6:	d12b      	bne.n	800b520 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4cc:	4a18      	ldr	r2, [pc, #96]	; (800b530 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 800b4ce:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d4:	4a17      	ldr	r2, [pc, #92]	; (800b534 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800b4d6:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4dc:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 800b4de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4e2:	d101      	bne.n	800b4e8 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 800b4e4:	4a14      	ldr	r2, [pc, #80]	; (800b538 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 800b4e6:	e000      	b.n	800b4ea <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 800b4e8:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	331c      	adds	r3, #28
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f000 fa82 	bl	800ba08 <HAL_DMA_Start_IT>
 800b504:	4603      	mov	r3, r0
 800b506:	2b00      	cmp	r3, #0
 800b508:	d006      	beq.n	800b518 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	22ff      	movs	r2, #255	; 0xff
 800b50e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800b516:	e005      	b.n	800b524 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 800b518:	68f8      	ldr	r0, [r7, #12]
 800b51a:	f000 f8c5 	bl	800b6a8 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800b51e:	e001      	b.n	800b524 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b520:	2301      	movs	r3, #1
 800b522:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800b524:	7dfb      	ldrb	r3, [r7, #23]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3718      	adds	r7, #24
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	0800b5c1 	.word	0x0800b5c1
 800b534:	0800b5dd 	.word	0x0800b5dd
 800b538:	0800b5a5 	.word	0x0800b5a5

0800b53c <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b544:	2300      	movs	r3, #0
 800b546:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d007      	beq.n	800b562 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 800b558:	2b04      	cmp	r3, #4
 800b55a:	d002      	beq.n	800b562 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	73fb      	strb	r3, [r7, #15]
 800b560:	e011      	b.n	800b586 <HAL_DFSDM_FilterRegularStop_DMA+0x4a>
  }
  else
  {
    /* Stop current DMA transfer */
    if(HAL_DMA_Abort(hdfsdm_filter->hdmaReg) != HAL_OK)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b566:	4618      	mov	r0, r3
 800b568:	f000 faae 	bl	800bac8 <HAL_DMA_Abort>
 800b56c:	4603      	mov	r3, r0
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d006      	beq.n	800b580 <HAL_DFSDM_FilterRegularStop_DMA+0x44>
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	22ff      	movs	r2, #255	; 0xff
 800b576:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	73fb      	strb	r3, [r7, #15]
 800b57e:	e002      	b.n	800b586 <HAL_DFSDM_FilterRegularStop_DMA+0x4a>
    }
    else
    {
      /* Stop regular conversion */
      DFSDM_RegConvStop(hdfsdm_filter);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 f8e7 	bl	800b754 <DFSDM_RegConvStop>
    }
  }
  /* Return function status */
  return status;
 800b586:	7bfb      	ldrb	r3, [r7, #15]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3710      	adds	r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 800b598:	bf00      	nop
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b0:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f005 fbae 	bl	8010d14 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 800b5b8:	bf00      	nop
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5cc:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800b5ce:	68f8      	ldr	r0, [r7, #12]
 800b5d0:	f005 f9d0 	bl	8010974 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 800b5d4:	bf00      	nop
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5e8:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2203      	movs	r2, #3
 800b5ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f7ff ffcd 	bl	800b590 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800b5f6:	bf00      	nop
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
	...

0800b600 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  uint32_t channel = 0xFF;
 800b608:	23ff      	movs	r3, #255	; 0xff
 800b60a:	60fb      	str	r3, [r7, #12]
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	4a1e      	ldr	r2, [pc, #120]	; (800b688 <DFSDM_GetChannelFromInstance+0x88>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d102      	bne.n	800b61a <DFSDM_GetChannelFromInstance+0x1a>
  {
    channel = 0;
 800b614:	2300      	movs	r3, #0
 800b616:	60fb      	str	r3, [r7, #12]
 800b618:	e02f      	b.n	800b67a <DFSDM_GetChannelFromInstance+0x7a>
  }
  else if(Instance == DFSDM1_Channel1)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a1b      	ldr	r2, [pc, #108]	; (800b68c <DFSDM_GetChannelFromInstance+0x8c>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d102      	bne.n	800b628 <DFSDM_GetChannelFromInstance+0x28>
  {
    channel = 1;
 800b622:	2301      	movs	r3, #1
 800b624:	60fb      	str	r3, [r7, #12]
 800b626:	e028      	b.n	800b67a <DFSDM_GetChannelFromInstance+0x7a>
  }
  else if(Instance == DFSDM1_Channel2)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	4a19      	ldr	r2, [pc, #100]	; (800b690 <DFSDM_GetChannelFromInstance+0x90>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d102      	bne.n	800b636 <DFSDM_GetChannelFromInstance+0x36>
  {
    channel = 2;
 800b630:	2302      	movs	r3, #2
 800b632:	60fb      	str	r3, [r7, #12]
 800b634:	e021      	b.n	800b67a <DFSDM_GetChannelFromInstance+0x7a>
  }
  else if(Instance == DFSDM1_Channel3)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	4a16      	ldr	r2, [pc, #88]	; (800b694 <DFSDM_GetChannelFromInstance+0x94>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d102      	bne.n	800b644 <DFSDM_GetChannelFromInstance+0x44>
  {
    channel = 3;
 800b63e:	2303      	movs	r3, #3
 800b640:	60fb      	str	r3, [r7, #12]
 800b642:	e01a      	b.n	800b67a <DFSDM_GetChannelFromInstance+0x7a>
  }
  else if(Instance == DFSDM1_Channel4)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	4a14      	ldr	r2, [pc, #80]	; (800b698 <DFSDM_GetChannelFromInstance+0x98>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d102      	bne.n	800b652 <DFSDM_GetChannelFromInstance+0x52>
  {
    channel = 4;
 800b64c:	2304      	movs	r3, #4
 800b64e:	60fb      	str	r3, [r7, #12]
 800b650:	e013      	b.n	800b67a <DFSDM_GetChannelFromInstance+0x7a>
  }
  else if(Instance == DFSDM1_Channel5)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4a11      	ldr	r2, [pc, #68]	; (800b69c <DFSDM_GetChannelFromInstance+0x9c>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d102      	bne.n	800b660 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 5;
 800b65a:	2305      	movs	r3, #5
 800b65c:	60fb      	str	r3, [r7, #12]
 800b65e:	e00c      	b.n	800b67a <DFSDM_GetChannelFromInstance+0x7a>
  }
  else if(Instance == DFSDM1_Channel6)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	4a0f      	ldr	r2, [pc, #60]	; (800b6a0 <DFSDM_GetChannelFromInstance+0xa0>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d102      	bne.n	800b66e <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 6;
 800b668:	2306      	movs	r3, #6
 800b66a:	60fb      	str	r3, [r7, #12]
 800b66c:	e005      	b.n	800b67a <DFSDM_GetChannelFromInstance+0x7a>
  }
  else if(Instance == DFSDM1_Channel7)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a0c      	ldr	r2, [pc, #48]	; (800b6a4 <DFSDM_GetChannelFromInstance+0xa4>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d101      	bne.n	800b67a <DFSDM_GetChannelFromInstance+0x7a>
  {
    channel = 7;
 800b676:	2307      	movs	r3, #7
 800b678:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800b67a:	68fb      	ldr	r3, [r7, #12]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3714      	adds	r7, #20
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr
 800b688:	40017400 	.word	0x40017400
 800b68c:	40017420 	.word	0x40017420
 800b690:	40017440 	.word	0x40017440
 800b694:	40017460 	.word	0x40017460
 800b698:	40017480 	.word	0x40017480
 800b69c:	400174a0 	.word	0x400174a0
 800b6a0:	400174c0 	.word	0x400174c0
 800b6a4:	400174e0 	.word	0x400174e0

0800b6a8 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d108      	bne.n	800b6ca <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b6c6:	601a      	str	r2, [r3, #0]
 800b6c8:	e033      	b.n	800b732 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f022 0201 	bic.w	r2, r2, #1
 800b6d8:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800b6e8:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f042 0201 	orr.w	r2, r2, #1
 800b6f8:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b700:	2b03      	cmp	r3, #3
 800b702:	d116      	bne.n	800b732 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d107      	bne.n	800b71c <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f042 0202 	orr.w	r2, r2, #2
 800b71a:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 800b722:	2b01      	cmp	r3, #1
 800b724:	d102      	bne.n	800b72c <DFSDM_RegConvStart+0x84>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b72a:	e000      	b.n	800b72e <DFSDM_RegConvStart+0x86>
 800b72c:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d101      	bne.n	800b740 <DFSDM_RegConvStart+0x98>
 800b73c:	2202      	movs	r2, #2
 800b73e:	e000      	b.n	800b742 <DFSDM_RegConvStart+0x9a>
 800b740:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800b748:	bf00      	nop
 800b74a:	370c      	adds	r7, #12
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f022 0201 	bic.w	r2, r2, #1
 800b76a:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b770:	2b01      	cmp	r3, #1
 800b772:	d107      	bne.n	800b784 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800b782:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f042 0201 	orr.w	r2, r2, #1
 800b792:	601a      	str	r2, [r3, #0]
  
  /* If injected conversion was in progress, restart it */
  if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b79a:	2b04      	cmp	r3, #4
 800b79c:	d116      	bne.n	800b7cc <DFSDM_RegConvStop+0x78>
  {
    if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d107      	bne.n	800b7b6 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f042 0202 	orr.w	r2, r2, #2
 800b7b4:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                       hdfsdm_filter->InjectedChannelsNbr : 1;
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d102      	bne.n	800b7c6 <DFSDM_RegConvStop+0x72>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7c4:	e000      	b.n	800b7c8 <DFSDM_RegConvStop+0x74>
 800b7c6:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	6493      	str	r3, [r2, #72]	; 0x48
  }
  
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 800b7d2:	2b02      	cmp	r3, #2
 800b7d4:	d101      	bne.n	800b7da <DFSDM_RegConvStop+0x86>
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	e000      	b.n	800b7dc <DFSDM_RegConvStop+0x88>
 800b7da:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800b7e2:	bf00      	nop
 800b7e4:	370c      	adds	r7, #12
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
	...

0800b7f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b7fc:	f7ff fa06 	bl	800ac0c <HAL_GetTick>
 800b800:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d101      	bne.n	800b80c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	e099      	b.n	800b940 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2202      	movs	r2, #2
 800b818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f022 0201 	bic.w	r2, r2, #1
 800b82a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b82c:	e00f      	b.n	800b84e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b82e:	f7ff f9ed 	bl	800ac0c <HAL_GetTick>
 800b832:	4602      	mov	r2, r0
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	2b05      	cmp	r3, #5
 800b83a:	d908      	bls.n	800b84e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2220      	movs	r2, #32
 800b840:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2203      	movs	r2, #3
 800b846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b84a:	2303      	movs	r3, #3
 800b84c:	e078      	b.n	800b940 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f003 0301 	and.w	r3, r3, #1
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1e8      	bne.n	800b82e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b864:	697a      	ldr	r2, [r7, #20]
 800b866:	4b38      	ldr	r3, [pc, #224]	; (800b948 <HAL_DMA_Init+0x158>)
 800b868:	4013      	ands	r3, r2
 800b86a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	685a      	ldr	r2, [r3, #4]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b87a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	691b      	ldr	r3, [r3, #16]
 800b880:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b886:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	699b      	ldr	r3, [r3, #24]
 800b88c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b892:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6a1b      	ldr	r3, [r3, #32]
 800b898:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b89a:	697a      	ldr	r2, [r7, #20]
 800b89c:	4313      	orrs	r3, r2
 800b89e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a4:	2b04      	cmp	r3, #4
 800b8a6:	d107      	bne.n	800b8b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	697a      	ldr	r2, [r7, #20]
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	697a      	ldr	r2, [r7, #20]
 800b8be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	695b      	ldr	r3, [r3, #20]
 800b8c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	f023 0307 	bic.w	r3, r3, #7
 800b8ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d4:	697a      	ldr	r2, [r7, #20]
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8de:	2b04      	cmp	r3, #4
 800b8e0:	d117      	bne.n	800b912 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e6:	697a      	ldr	r2, [r7, #20]
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00e      	beq.n	800b912 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 fb45 	bl	800bf84 <DMA_CheckFifoParam>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d008      	beq.n	800b912 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2240      	movs	r2, #64	; 0x40
 800b904:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2201      	movs	r2, #1
 800b90a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b90e:	2301      	movs	r3, #1
 800b910:	e016      	b.n	800b940 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	697a      	ldr	r2, [r7, #20]
 800b918:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 fafc 	bl	800bf18 <DMA_CalcBaseAndBitshift>
 800b920:	4603      	mov	r3, r0
 800b922:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b928:	223f      	movs	r2, #63	; 0x3f
 800b92a:	409a      	lsls	r2, r3
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b93e:	2300      	movs	r3, #0
}
 800b940:	4618      	mov	r0, r3
 800b942:	3718      	adds	r7, #24
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	e010803f 	.word	0xe010803f

0800b94c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d101      	bne.n	800b95e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	e050      	b.n	800ba00 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b964:	b2db      	uxtb	r3, r3
 800b966:	2b02      	cmp	r3, #2
 800b968:	d101      	bne.n	800b96e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800b96a:	2302      	movs	r3, #2
 800b96c:	e048      	b.n	800ba00 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f022 0201 	bic.w	r2, r2, #1
 800b97c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	2200      	movs	r2, #0
 800b984:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2200      	movs	r2, #0
 800b98c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	2200      	movs	r2, #0
 800b994:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2200      	movs	r2, #0
 800b99c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2221      	movs	r2, #33	; 0x21
 800b9ac:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 fab2 	bl	800bf18 <DMA_CalcBaseAndBitshift>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9bc:	223f      	movs	r2, #63	; 0x3f
 800b9be:	409a      	lsls	r2, r3
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b086      	sub	sp, #24
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]
 800ba14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba16:	2300      	movs	r3, #0
 800ba18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d101      	bne.n	800ba2e <HAL_DMA_Start_IT+0x26>
 800ba2a:	2302      	movs	r3, #2
 800ba2c:	e048      	b.n	800bac0 <HAL_DMA_Start_IT+0xb8>
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2201      	movs	r2, #1
 800ba32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d137      	bne.n	800bab2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2202      	movs	r2, #2
 800ba46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	68b9      	ldr	r1, [r7, #8]
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f000 fa30 	bl	800bebc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba60:	223f      	movs	r2, #63	; 0x3f
 800ba62:	409a      	lsls	r2, r3
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f042 0216 	orr.w	r2, r2, #22
 800ba76:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	695a      	ldr	r2, [r3, #20]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ba86:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d007      	beq.n	800baa0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f042 0208 	orr.w	r2, r2, #8
 800ba9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f042 0201 	orr.w	r2, r2, #1
 800baae:	601a      	str	r2, [r3, #0]
 800bab0:	e005      	b.n	800babe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800baba:	2302      	movs	r3, #2
 800babc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800babe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3718      	adds	r7, #24
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bad4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800bad6:	f7ff f899 	bl	800ac0c <HAL_GetTick>
 800bada:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d008      	beq.n	800bafa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2280      	movs	r2, #128	; 0x80
 800baec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2200      	movs	r2, #0
 800baf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800baf6:	2301      	movs	r3, #1
 800baf8:	e052      	b.n	800bba0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f022 0216 	bic.w	r2, r2, #22
 800bb08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	695a      	ldr	r2, [r3, #20]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d103      	bne.n	800bb2a <HAL_DMA_Abort+0x62>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d007      	beq.n	800bb3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f022 0208 	bic.w	r2, r2, #8
 800bb38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f022 0201 	bic.w	r2, r2, #1
 800bb48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bb4a:	e013      	b.n	800bb74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bb4c:	f7ff f85e 	bl	800ac0c <HAL_GetTick>
 800bb50:	4602      	mov	r2, r0
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	1ad3      	subs	r3, r2, r3
 800bb56:	2b05      	cmp	r3, #5
 800bb58:	d90c      	bls.n	800bb74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2220      	movs	r2, #32
 800bb5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2203      	movs	r2, #3
 800bb6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800bb70:	2303      	movs	r3, #3
 800bb72:	e015      	b.n	800bba0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f003 0301 	and.w	r3, r3, #1
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d1e4      	bne.n	800bb4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb86:	223f      	movs	r2, #63	; 0x3f
 800bb88:	409a      	lsls	r2, r3
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3710      	adds	r7, #16
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b086      	sub	sp, #24
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800bbb4:	4b92      	ldr	r3, [pc, #584]	; (800be00 <HAL_DMA_IRQHandler+0x258>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a92      	ldr	r2, [pc, #584]	; (800be04 <HAL_DMA_IRQHandler+0x25c>)
 800bbba:	fba2 2303 	umull	r2, r3, r2, r3
 800bbbe:	0a9b      	lsrs	r3, r3, #10
 800bbc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbd2:	2208      	movs	r2, #8
 800bbd4:	409a      	lsls	r2, r3
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	4013      	ands	r3, r2
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d01a      	beq.n	800bc14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f003 0304 	and.w	r3, r3, #4
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d013      	beq.n	800bc14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f022 0204 	bic.w	r2, r2, #4
 800bbfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc00:	2208      	movs	r2, #8
 800bc02:	409a      	lsls	r2, r3
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc0c:	f043 0201 	orr.w	r2, r3, #1
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc18:	2201      	movs	r2, #1
 800bc1a:	409a      	lsls	r2, r3
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	4013      	ands	r3, r2
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d012      	beq.n	800bc4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	695b      	ldr	r3, [r3, #20]
 800bc2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00b      	beq.n	800bc4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc36:	2201      	movs	r2, #1
 800bc38:	409a      	lsls	r2, r3
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc42:	f043 0202 	orr.w	r2, r3, #2
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc4e:	2204      	movs	r2, #4
 800bc50:	409a      	lsls	r2, r3
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	4013      	ands	r3, r2
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d012      	beq.n	800bc80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f003 0302 	and.w	r3, r3, #2
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d00b      	beq.n	800bc80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc6c:	2204      	movs	r2, #4
 800bc6e:	409a      	lsls	r2, r3
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc78:	f043 0204 	orr.w	r2, r3, #4
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc84:	2210      	movs	r2, #16
 800bc86:	409a      	lsls	r2, r3
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	4013      	ands	r3, r2
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d043      	beq.n	800bd18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f003 0308 	and.w	r3, r3, #8
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d03c      	beq.n	800bd18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bca2:	2210      	movs	r2, #16
 800bca4:	409a      	lsls	r2, r3
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d018      	beq.n	800bcea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d108      	bne.n	800bcd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d024      	beq.n	800bd18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	4798      	blx	r3
 800bcd6:	e01f      	b.n	800bd18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d01b      	beq.n	800bd18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	4798      	blx	r3
 800bce8:	e016      	b.n	800bd18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d107      	bne.n	800bd08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f022 0208 	bic.w	r2, r2, #8
 800bd06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d003      	beq.n	800bd18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd1c:	2220      	movs	r2, #32
 800bd1e:	409a      	lsls	r2, r3
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	4013      	ands	r3, r2
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	f000 808e 	beq.w	800be46 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f003 0310 	and.w	r3, r3, #16
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	f000 8086 	beq.w	800be46 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd3e:	2220      	movs	r2, #32
 800bd40:	409a      	lsls	r2, r3
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	2b05      	cmp	r3, #5
 800bd50:	d136      	bne.n	800bdc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f022 0216 	bic.w	r2, r2, #22
 800bd60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	695a      	ldr	r2, [r3, #20]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d103      	bne.n	800bd82 <HAL_DMA_IRQHandler+0x1da>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d007      	beq.n	800bd92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f022 0208 	bic.w	r2, r2, #8
 800bd90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd96:	223f      	movs	r2, #63	; 0x3f
 800bd98:	409a      	lsls	r2, r3
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d07d      	beq.n	800beb2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	4798      	blx	r3
        }
        return;
 800bdbe:	e078      	b.n	800beb2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d01c      	beq.n	800be08 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d108      	bne.n	800bdee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d030      	beq.n	800be46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	4798      	blx	r3
 800bdec:	e02b      	b.n	800be46 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d027      	beq.n	800be46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	4798      	blx	r3
 800bdfe:	e022      	b.n	800be46 <HAL_DMA_IRQHandler+0x29e>
 800be00:	20000000 	.word	0x20000000
 800be04:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be12:	2b00      	cmp	r3, #0
 800be14:	d10f      	bne.n	800be36 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f022 0210 	bic.w	r2, r2, #16
 800be24:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2200      	movs	r2, #0
 800be2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2201      	movs	r2, #1
 800be32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d003      	beq.n	800be46 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d032      	beq.n	800beb4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be52:	f003 0301 	and.w	r3, r3, #1
 800be56:	2b00      	cmp	r3, #0
 800be58:	d022      	beq.n	800bea0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2205      	movs	r2, #5
 800be5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f022 0201 	bic.w	r2, r2, #1
 800be70:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	3301      	adds	r3, #1
 800be76:	60bb      	str	r3, [r7, #8]
 800be78:	697a      	ldr	r2, [r7, #20]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d307      	bcc.n	800be8e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f003 0301 	and.w	r3, r3, #1
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d1f2      	bne.n	800be72 <HAL_DMA_IRQHandler+0x2ca>
 800be8c:	e000      	b.n	800be90 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800be8e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2200      	movs	r2, #0
 800be94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2201      	movs	r2, #1
 800be9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d005      	beq.n	800beb4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	4798      	blx	r3
 800beb0:	e000      	b.n	800beb4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800beb2:	bf00      	nop
    }
  }
}
 800beb4:	3718      	adds	r7, #24
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop

0800bebc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b085      	sub	sp, #20
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	607a      	str	r2, [r7, #4]
 800bec8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bed8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	683a      	ldr	r2, [r7, #0]
 800bee0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	2b40      	cmp	r3, #64	; 0x40
 800bee8:	d108      	bne.n	800befc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	68ba      	ldr	r2, [r7, #8]
 800bef8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800befa:	e007      	b.n	800bf0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	60da      	str	r2, [r3, #12]
}
 800bf0c:	bf00      	nop
 800bf0e:	3714      	adds	r7, #20
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	3b10      	subs	r3, #16
 800bf28:	4a13      	ldr	r2, [pc, #76]	; (800bf78 <DMA_CalcBaseAndBitshift+0x60>)
 800bf2a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf2e:	091b      	lsrs	r3, r3, #4
 800bf30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bf32:	4a12      	ldr	r2, [pc, #72]	; (800bf7c <DMA_CalcBaseAndBitshift+0x64>)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	4413      	add	r3, r2
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2b03      	cmp	r3, #3
 800bf44:	d908      	bls.n	800bf58 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	4b0c      	ldr	r3, [pc, #48]	; (800bf80 <DMA_CalcBaseAndBitshift+0x68>)
 800bf4e:	4013      	ands	r3, r2
 800bf50:	1d1a      	adds	r2, r3, #4
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	659a      	str	r2, [r3, #88]	; 0x58
 800bf56:	e006      	b.n	800bf66 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	4b08      	ldr	r3, [pc, #32]	; (800bf80 <DMA_CalcBaseAndBitshift+0x68>)
 800bf60:	4013      	ands	r3, r2
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3714      	adds	r7, #20
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr
 800bf76:	bf00      	nop
 800bf78:	aaaaaaab 	.word	0xaaaaaaab
 800bf7c:	0802c9d0 	.word	0x0802c9d0
 800bf80:	fffffc00 	.word	0xfffffc00

0800bf84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	699b      	ldr	r3, [r3, #24]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d11f      	bne.n	800bfde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	2b03      	cmp	r3, #3
 800bfa2:	d855      	bhi.n	800c050 <DMA_CheckFifoParam+0xcc>
 800bfa4:	a201      	add	r2, pc, #4	; (adr r2, 800bfac <DMA_CheckFifoParam+0x28>)
 800bfa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfaa:	bf00      	nop
 800bfac:	0800bfbd 	.word	0x0800bfbd
 800bfb0:	0800bfcf 	.word	0x0800bfcf
 800bfb4:	0800bfbd 	.word	0x0800bfbd
 800bfb8:	0800c051 	.word	0x0800c051
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d045      	beq.n	800c054 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bfcc:	e042      	b.n	800c054 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bfd6:	d13f      	bne.n	800c058 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bfdc:	e03c      	b.n	800c058 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	699b      	ldr	r3, [r3, #24]
 800bfe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfe6:	d121      	bne.n	800c02c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	2b03      	cmp	r3, #3
 800bfec:	d836      	bhi.n	800c05c <DMA_CheckFifoParam+0xd8>
 800bfee:	a201      	add	r2, pc, #4	; (adr r2, 800bff4 <DMA_CheckFifoParam+0x70>)
 800bff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff4:	0800c005 	.word	0x0800c005
 800bff8:	0800c00b 	.word	0x0800c00b
 800bffc:	0800c005 	.word	0x0800c005
 800c000:	0800c01d 	.word	0x0800c01d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c004:	2301      	movs	r3, #1
 800c006:	73fb      	strb	r3, [r7, #15]
      break;
 800c008:	e02f      	b.n	800c06a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c012:	2b00      	cmp	r3, #0
 800c014:	d024      	beq.n	800c060 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800c016:	2301      	movs	r3, #1
 800c018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c01a:	e021      	b.n	800c060 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c020:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c024:	d11e      	bne.n	800c064 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800c026:	2301      	movs	r3, #1
 800c028:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c02a:	e01b      	b.n	800c064 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	2b02      	cmp	r3, #2
 800c030:	d902      	bls.n	800c038 <DMA_CheckFifoParam+0xb4>
 800c032:	2b03      	cmp	r3, #3
 800c034:	d003      	beq.n	800c03e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c036:	e018      	b.n	800c06a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800c038:	2301      	movs	r3, #1
 800c03a:	73fb      	strb	r3, [r7, #15]
      break;
 800c03c:	e015      	b.n	800c06a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c042:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00e      	beq.n	800c068 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800c04a:	2301      	movs	r3, #1
 800c04c:	73fb      	strb	r3, [r7, #15]
      break;
 800c04e:	e00b      	b.n	800c068 <DMA_CheckFifoParam+0xe4>
      break;
 800c050:	bf00      	nop
 800c052:	e00a      	b.n	800c06a <DMA_CheckFifoParam+0xe6>
      break;
 800c054:	bf00      	nop
 800c056:	e008      	b.n	800c06a <DMA_CheckFifoParam+0xe6>
      break;
 800c058:	bf00      	nop
 800c05a:	e006      	b.n	800c06a <DMA_CheckFifoParam+0xe6>
      break;
 800c05c:	bf00      	nop
 800c05e:	e004      	b.n	800c06a <DMA_CheckFifoParam+0xe6>
      break;
 800c060:	bf00      	nop
 800c062:	e002      	b.n	800c06a <DMA_CheckFifoParam+0xe6>
      break;   
 800c064:	bf00      	nop
 800c066:	e000      	b.n	800c06a <DMA_CheckFifoParam+0xe6>
      break;
 800c068:	bf00      	nop
    }
  } 
  
  return status; 
 800c06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3714      	adds	r7, #20
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c078:	b480      	push	{r7}
 800c07a:	b089      	sub	sp, #36	; 0x24
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800c082:	2300      	movs	r3, #0
 800c084:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800c086:	2300      	movs	r3, #0
 800c088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800c08a:	2300      	movs	r3, #0
 800c08c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800c08e:	2300      	movs	r3, #0
 800c090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800c092:	2300      	movs	r3, #0
 800c094:	61fb      	str	r3, [r7, #28]
 800c096:	e175      	b.n	800c384 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800c098:	2201      	movs	r2, #1
 800c09a:	69fb      	ldr	r3, [r7, #28]
 800c09c:	fa02 f303 	lsl.w	r3, r2, r3
 800c0a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	697a      	ldr	r2, [r7, #20]
 800c0a8:	4013      	ands	r3, r2
 800c0aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c0ac:	693a      	ldr	r2, [r7, #16]
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	f040 8164 	bne.w	800c37e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	2b02      	cmp	r3, #2
 800c0bc:	d003      	beq.n	800c0c6 <HAL_GPIO_Init+0x4e>
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	2b12      	cmp	r3, #18
 800c0c4:	d123      	bne.n	800c10e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800c0c6:	69fb      	ldr	r3, [r7, #28]
 800c0c8:	08da      	lsrs	r2, r3, #3
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	3208      	adds	r2, #8
 800c0ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	f003 0307 	and.w	r3, r3, #7
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	220f      	movs	r2, #15
 800c0de:	fa02 f303 	lsl.w	r3, r2, r3
 800c0e2:	43db      	mvns	r3, r3
 800c0e4:	69ba      	ldr	r2, [r7, #24]
 800c0e6:	4013      	ands	r3, r2
 800c0e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	691a      	ldr	r2, [r3, #16]
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	f003 0307 	and.w	r3, r3, #7
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c0fa:	69ba      	ldr	r2, [r7, #24]
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800c100:	69fb      	ldr	r3, [r7, #28]
 800c102:	08da      	lsrs	r2, r3, #3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	3208      	adds	r2, #8
 800c108:	69b9      	ldr	r1, [r7, #24]
 800c10a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	005b      	lsls	r3, r3, #1
 800c118:	2203      	movs	r2, #3
 800c11a:	fa02 f303 	lsl.w	r3, r2, r3
 800c11e:	43db      	mvns	r3, r3
 800c120:	69ba      	ldr	r2, [r7, #24]
 800c122:	4013      	ands	r3, r2
 800c124:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	f003 0203 	and.w	r2, r3, #3
 800c12e:	69fb      	ldr	r3, [r7, #28]
 800c130:	005b      	lsls	r3, r3, #1
 800c132:	fa02 f303 	lsl.w	r3, r2, r3
 800c136:	69ba      	ldr	r2, [r7, #24]
 800c138:	4313      	orrs	r3, r2
 800c13a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	69ba      	ldr	r2, [r7, #24]
 800c140:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	2b01      	cmp	r3, #1
 800c148:	d00b      	beq.n	800c162 <HAL_GPIO_Init+0xea>
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	2b02      	cmp	r3, #2
 800c150:	d007      	beq.n	800c162 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c156:	2b11      	cmp	r3, #17
 800c158:	d003      	beq.n	800c162 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	2b12      	cmp	r3, #18
 800c160:	d130      	bne.n	800c1c4 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c168:	69fb      	ldr	r3, [r7, #28]
 800c16a:	005b      	lsls	r3, r3, #1
 800c16c:	2203      	movs	r2, #3
 800c16e:	fa02 f303 	lsl.w	r3, r2, r3
 800c172:	43db      	mvns	r3, r3
 800c174:	69ba      	ldr	r2, [r7, #24]
 800c176:	4013      	ands	r3, r2
 800c178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	68da      	ldr	r2, [r3, #12]
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	005b      	lsls	r3, r3, #1
 800c182:	fa02 f303 	lsl.w	r3, r2, r3
 800c186:	69ba      	ldr	r2, [r7, #24]
 800c188:	4313      	orrs	r3, r2
 800c18a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	69ba      	ldr	r2, [r7, #24]
 800c190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c198:	2201      	movs	r2, #1
 800c19a:	69fb      	ldr	r3, [r7, #28]
 800c19c:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a0:	43db      	mvns	r3, r3
 800c1a2:	69ba      	ldr	r2, [r7, #24]
 800c1a4:	4013      	ands	r3, r2
 800c1a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	091b      	lsrs	r3, r3, #4
 800c1ae:	f003 0201 	and.w	r2, r3, #1
 800c1b2:	69fb      	ldr	r3, [r7, #28]
 800c1b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1b8:	69ba      	ldr	r2, [r7, #24]
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	69ba      	ldr	r2, [r7, #24]
 800c1c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	005b      	lsls	r3, r3, #1
 800c1ce:	2203      	movs	r2, #3
 800c1d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1d4:	43db      	mvns	r3, r3
 800c1d6:	69ba      	ldr	r2, [r7, #24]
 800c1d8:	4013      	ands	r3, r2
 800c1da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	689a      	ldr	r2, [r3, #8]
 800c1e0:	69fb      	ldr	r3, [r7, #28]
 800c1e2:	005b      	lsls	r3, r3, #1
 800c1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1e8:	69ba      	ldr	r2, [r7, #24]
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	69ba      	ldr	r2, [r7, #24]
 800c1f2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	f000 80be 	beq.w	800c37e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c202:	4b65      	ldr	r3, [pc, #404]	; (800c398 <HAL_GPIO_Init+0x320>)
 800c204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c206:	4a64      	ldr	r2, [pc, #400]	; (800c398 <HAL_GPIO_Init+0x320>)
 800c208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c20c:	6453      	str	r3, [r2, #68]	; 0x44
 800c20e:	4b62      	ldr	r3, [pc, #392]	; (800c398 <HAL_GPIO_Init+0x320>)
 800c210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c216:	60fb      	str	r3, [r7, #12]
 800c218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800c21a:	4a60      	ldr	r2, [pc, #384]	; (800c39c <HAL_GPIO_Init+0x324>)
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	089b      	lsrs	r3, r3, #2
 800c220:	3302      	adds	r3, #2
 800c222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c226:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	f003 0303 	and.w	r3, r3, #3
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	220f      	movs	r2, #15
 800c232:	fa02 f303 	lsl.w	r3, r2, r3
 800c236:	43db      	mvns	r3, r3
 800c238:	69ba      	ldr	r2, [r7, #24]
 800c23a:	4013      	ands	r3, r2
 800c23c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	4a57      	ldr	r2, [pc, #348]	; (800c3a0 <HAL_GPIO_Init+0x328>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d037      	beq.n	800c2b6 <HAL_GPIO_Init+0x23e>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	4a56      	ldr	r2, [pc, #344]	; (800c3a4 <HAL_GPIO_Init+0x32c>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d031      	beq.n	800c2b2 <HAL_GPIO_Init+0x23a>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	4a55      	ldr	r2, [pc, #340]	; (800c3a8 <HAL_GPIO_Init+0x330>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d02b      	beq.n	800c2ae <HAL_GPIO_Init+0x236>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	4a54      	ldr	r2, [pc, #336]	; (800c3ac <HAL_GPIO_Init+0x334>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d025      	beq.n	800c2aa <HAL_GPIO_Init+0x232>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	4a53      	ldr	r2, [pc, #332]	; (800c3b0 <HAL_GPIO_Init+0x338>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d01f      	beq.n	800c2a6 <HAL_GPIO_Init+0x22e>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	4a52      	ldr	r2, [pc, #328]	; (800c3b4 <HAL_GPIO_Init+0x33c>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d019      	beq.n	800c2a2 <HAL_GPIO_Init+0x22a>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	4a51      	ldr	r2, [pc, #324]	; (800c3b8 <HAL_GPIO_Init+0x340>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d013      	beq.n	800c29e <HAL_GPIO_Init+0x226>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	4a50      	ldr	r2, [pc, #320]	; (800c3bc <HAL_GPIO_Init+0x344>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d00d      	beq.n	800c29a <HAL_GPIO_Init+0x222>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4a4f      	ldr	r2, [pc, #316]	; (800c3c0 <HAL_GPIO_Init+0x348>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d007      	beq.n	800c296 <HAL_GPIO_Init+0x21e>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	4a4e      	ldr	r2, [pc, #312]	; (800c3c4 <HAL_GPIO_Init+0x34c>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d101      	bne.n	800c292 <HAL_GPIO_Init+0x21a>
 800c28e:	2309      	movs	r3, #9
 800c290:	e012      	b.n	800c2b8 <HAL_GPIO_Init+0x240>
 800c292:	230a      	movs	r3, #10
 800c294:	e010      	b.n	800c2b8 <HAL_GPIO_Init+0x240>
 800c296:	2308      	movs	r3, #8
 800c298:	e00e      	b.n	800c2b8 <HAL_GPIO_Init+0x240>
 800c29a:	2307      	movs	r3, #7
 800c29c:	e00c      	b.n	800c2b8 <HAL_GPIO_Init+0x240>
 800c29e:	2306      	movs	r3, #6
 800c2a0:	e00a      	b.n	800c2b8 <HAL_GPIO_Init+0x240>
 800c2a2:	2305      	movs	r3, #5
 800c2a4:	e008      	b.n	800c2b8 <HAL_GPIO_Init+0x240>
 800c2a6:	2304      	movs	r3, #4
 800c2a8:	e006      	b.n	800c2b8 <HAL_GPIO_Init+0x240>
 800c2aa:	2303      	movs	r3, #3
 800c2ac:	e004      	b.n	800c2b8 <HAL_GPIO_Init+0x240>
 800c2ae:	2302      	movs	r3, #2
 800c2b0:	e002      	b.n	800c2b8 <HAL_GPIO_Init+0x240>
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	e000      	b.n	800c2b8 <HAL_GPIO_Init+0x240>
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	69fa      	ldr	r2, [r7, #28]
 800c2ba:	f002 0203 	and.w	r2, r2, #3
 800c2be:	0092      	lsls	r2, r2, #2
 800c2c0:	4093      	lsls	r3, r2
 800c2c2:	69ba      	ldr	r2, [r7, #24]
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800c2c8:	4934      	ldr	r1, [pc, #208]	; (800c39c <HAL_GPIO_Init+0x324>)
 800c2ca:	69fb      	ldr	r3, [r7, #28]
 800c2cc:	089b      	lsrs	r3, r3, #2
 800c2ce:	3302      	adds	r3, #2
 800c2d0:	69ba      	ldr	r2, [r7, #24]
 800c2d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c2d6:	4b3c      	ldr	r3, [pc, #240]	; (800c3c8 <HAL_GPIO_Init+0x350>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	43db      	mvns	r3, r3
 800c2e0:	69ba      	ldr	r2, [r7, #24]
 800c2e2:	4013      	ands	r3, r2
 800c2e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d003      	beq.n	800c2fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c2f2:	69ba      	ldr	r2, [r7, #24]
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c2fa:	4a33      	ldr	r2, [pc, #204]	; (800c3c8 <HAL_GPIO_Init+0x350>)
 800c2fc:	69bb      	ldr	r3, [r7, #24]
 800c2fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c300:	4b31      	ldr	r3, [pc, #196]	; (800c3c8 <HAL_GPIO_Init+0x350>)
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	43db      	mvns	r3, r3
 800c30a:	69ba      	ldr	r2, [r7, #24]
 800c30c:	4013      	ands	r3, r2
 800c30e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d003      	beq.n	800c324 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c31c:	69ba      	ldr	r2, [r7, #24]
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	4313      	orrs	r3, r2
 800c322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c324:	4a28      	ldr	r2, [pc, #160]	; (800c3c8 <HAL_GPIO_Init+0x350>)
 800c326:	69bb      	ldr	r3, [r7, #24]
 800c328:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c32a:	4b27      	ldr	r3, [pc, #156]	; (800c3c8 <HAL_GPIO_Init+0x350>)
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	43db      	mvns	r3, r3
 800c334:	69ba      	ldr	r2, [r7, #24]
 800c336:	4013      	ands	r3, r2
 800c338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c342:	2b00      	cmp	r3, #0
 800c344:	d003      	beq.n	800c34e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c346:	69ba      	ldr	r2, [r7, #24]
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	4313      	orrs	r3, r2
 800c34c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c34e:	4a1e      	ldr	r2, [pc, #120]	; (800c3c8 <HAL_GPIO_Init+0x350>)
 800c350:	69bb      	ldr	r3, [r7, #24]
 800c352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c354:	4b1c      	ldr	r3, [pc, #112]	; (800c3c8 <HAL_GPIO_Init+0x350>)
 800c356:	68db      	ldr	r3, [r3, #12]
 800c358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	43db      	mvns	r3, r3
 800c35e:	69ba      	ldr	r2, [r7, #24]
 800c360:	4013      	ands	r3, r2
 800c362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d003      	beq.n	800c378 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c370:	69ba      	ldr	r2, [r7, #24]
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	4313      	orrs	r3, r2
 800c376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c378:	4a13      	ldr	r2, [pc, #76]	; (800c3c8 <HAL_GPIO_Init+0x350>)
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c37e:	69fb      	ldr	r3, [r7, #28]
 800c380:	3301      	adds	r3, #1
 800c382:	61fb      	str	r3, [r7, #28]
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	2b0f      	cmp	r3, #15
 800c388:	f67f ae86 	bls.w	800c098 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800c38c:	bf00      	nop
 800c38e:	3724      	adds	r7, #36	; 0x24
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr
 800c398:	40023800 	.word	0x40023800
 800c39c:	40013800 	.word	0x40013800
 800c3a0:	40020000 	.word	0x40020000
 800c3a4:	40020400 	.word	0x40020400
 800c3a8:	40020800 	.word	0x40020800
 800c3ac:	40020c00 	.word	0x40020c00
 800c3b0:	40021000 	.word	0x40021000
 800c3b4:	40021400 	.word	0x40021400
 800c3b8:	40021800 	.word	0x40021800
 800c3bc:	40021c00 	.word	0x40021c00
 800c3c0:	40022000 	.word	0x40022000
 800c3c4:	40022400 	.word	0x40022400
 800c3c8:	40013c00 	.word	0x40013c00

0800c3cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b087      	sub	sp, #28
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	617b      	str	r3, [r7, #20]
 800c3e6:	e0d9      	b.n	800c59c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c3f0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800c3f2:	683a      	ldr	r2, [r7, #0]
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	4013      	ands	r3, r2
 800c3f8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800c3fa:	68fa      	ldr	r2, [r7, #12]
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	f040 80c9 	bne.w	800c596 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800c404:	4a6a      	ldr	r2, [pc, #424]	; (800c5b0 <HAL_GPIO_DeInit+0x1e4>)
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	089b      	lsrs	r3, r3, #2
 800c40a:	3302      	adds	r3, #2
 800c40c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c410:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	f003 0303 	and.w	r3, r3, #3
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	220f      	movs	r2, #15
 800c41c:	fa02 f303 	lsl.w	r3, r2, r3
 800c420:	68ba      	ldr	r2, [r7, #8]
 800c422:	4013      	ands	r3, r2
 800c424:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	4a62      	ldr	r2, [pc, #392]	; (800c5b4 <HAL_GPIO_DeInit+0x1e8>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d037      	beq.n	800c49e <HAL_GPIO_DeInit+0xd2>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	4a61      	ldr	r2, [pc, #388]	; (800c5b8 <HAL_GPIO_DeInit+0x1ec>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d031      	beq.n	800c49a <HAL_GPIO_DeInit+0xce>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	4a60      	ldr	r2, [pc, #384]	; (800c5bc <HAL_GPIO_DeInit+0x1f0>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d02b      	beq.n	800c496 <HAL_GPIO_DeInit+0xca>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	4a5f      	ldr	r2, [pc, #380]	; (800c5c0 <HAL_GPIO_DeInit+0x1f4>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d025      	beq.n	800c492 <HAL_GPIO_DeInit+0xc6>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4a5e      	ldr	r2, [pc, #376]	; (800c5c4 <HAL_GPIO_DeInit+0x1f8>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d01f      	beq.n	800c48e <HAL_GPIO_DeInit+0xc2>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4a5d      	ldr	r2, [pc, #372]	; (800c5c8 <HAL_GPIO_DeInit+0x1fc>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d019      	beq.n	800c48a <HAL_GPIO_DeInit+0xbe>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	4a5c      	ldr	r2, [pc, #368]	; (800c5cc <HAL_GPIO_DeInit+0x200>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d013      	beq.n	800c486 <HAL_GPIO_DeInit+0xba>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	4a5b      	ldr	r2, [pc, #364]	; (800c5d0 <HAL_GPIO_DeInit+0x204>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d00d      	beq.n	800c482 <HAL_GPIO_DeInit+0xb6>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4a5a      	ldr	r2, [pc, #360]	; (800c5d4 <HAL_GPIO_DeInit+0x208>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d007      	beq.n	800c47e <HAL_GPIO_DeInit+0xb2>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4a59      	ldr	r2, [pc, #356]	; (800c5d8 <HAL_GPIO_DeInit+0x20c>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d101      	bne.n	800c47a <HAL_GPIO_DeInit+0xae>
 800c476:	2309      	movs	r3, #9
 800c478:	e012      	b.n	800c4a0 <HAL_GPIO_DeInit+0xd4>
 800c47a:	230a      	movs	r3, #10
 800c47c:	e010      	b.n	800c4a0 <HAL_GPIO_DeInit+0xd4>
 800c47e:	2308      	movs	r3, #8
 800c480:	e00e      	b.n	800c4a0 <HAL_GPIO_DeInit+0xd4>
 800c482:	2307      	movs	r3, #7
 800c484:	e00c      	b.n	800c4a0 <HAL_GPIO_DeInit+0xd4>
 800c486:	2306      	movs	r3, #6
 800c488:	e00a      	b.n	800c4a0 <HAL_GPIO_DeInit+0xd4>
 800c48a:	2305      	movs	r3, #5
 800c48c:	e008      	b.n	800c4a0 <HAL_GPIO_DeInit+0xd4>
 800c48e:	2304      	movs	r3, #4
 800c490:	e006      	b.n	800c4a0 <HAL_GPIO_DeInit+0xd4>
 800c492:	2303      	movs	r3, #3
 800c494:	e004      	b.n	800c4a0 <HAL_GPIO_DeInit+0xd4>
 800c496:	2302      	movs	r3, #2
 800c498:	e002      	b.n	800c4a0 <HAL_GPIO_DeInit+0xd4>
 800c49a:	2301      	movs	r3, #1
 800c49c:	e000      	b.n	800c4a0 <HAL_GPIO_DeInit+0xd4>
 800c49e:	2300      	movs	r3, #0
 800c4a0:	697a      	ldr	r2, [r7, #20]
 800c4a2:	f002 0203 	and.w	r2, r2, #3
 800c4a6:	0092      	lsls	r2, r2, #2
 800c4a8:	4093      	lsls	r3, r2
 800c4aa:	68ba      	ldr	r2, [r7, #8]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d132      	bne.n	800c516 <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	f003 0303 	and.w	r3, r3, #3
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	220f      	movs	r2, #15
 800c4ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c4be:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800c4c0:	4a3b      	ldr	r2, [pc, #236]	; (800c5b0 <HAL_GPIO_DeInit+0x1e4>)
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	089b      	lsrs	r3, r3, #2
 800c4c6:	3302      	adds	r3, #2
 800c4c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	43da      	mvns	r2, r3
 800c4d0:	4837      	ldr	r0, [pc, #220]	; (800c5b0 <HAL_GPIO_DeInit+0x1e4>)
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	089b      	lsrs	r3, r3, #2
 800c4d6:	400a      	ands	r2, r1
 800c4d8:	3302      	adds	r3, #2
 800c4da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800c4de:	4b3f      	ldr	r3, [pc, #252]	; (800c5dc <HAL_GPIO_DeInit+0x210>)
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	43db      	mvns	r3, r3
 800c4e6:	493d      	ldr	r1, [pc, #244]	; (800c5dc <HAL_GPIO_DeInit+0x210>)
 800c4e8:	4013      	ands	r3, r2
 800c4ea:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800c4ec:	4b3b      	ldr	r3, [pc, #236]	; (800c5dc <HAL_GPIO_DeInit+0x210>)
 800c4ee:	685a      	ldr	r2, [r3, #4]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	43db      	mvns	r3, r3
 800c4f4:	4939      	ldr	r1, [pc, #228]	; (800c5dc <HAL_GPIO_DeInit+0x210>)
 800c4f6:	4013      	ands	r3, r2
 800c4f8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800c4fa:	4b38      	ldr	r3, [pc, #224]	; (800c5dc <HAL_GPIO_DeInit+0x210>)
 800c4fc:	689a      	ldr	r2, [r3, #8]
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	43db      	mvns	r3, r3
 800c502:	4936      	ldr	r1, [pc, #216]	; (800c5dc <HAL_GPIO_DeInit+0x210>)
 800c504:	4013      	ands	r3, r2
 800c506:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800c508:	4b34      	ldr	r3, [pc, #208]	; (800c5dc <HAL_GPIO_DeInit+0x210>)
 800c50a:	68da      	ldr	r2, [r3, #12]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	43db      	mvns	r3, r3
 800c510:	4932      	ldr	r1, [pc, #200]	; (800c5dc <HAL_GPIO_DeInit+0x210>)
 800c512:	4013      	ands	r3, r2
 800c514:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	005b      	lsls	r3, r3, #1
 800c51e:	2103      	movs	r1, #3
 800c520:	fa01 f303 	lsl.w	r3, r1, r3
 800c524:	43db      	mvns	r3, r3
 800c526:	401a      	ands	r2, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	08da      	lsrs	r2, r3, #3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	3208      	adds	r2, #8
 800c534:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	f003 0307 	and.w	r3, r3, #7
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	220f      	movs	r2, #15
 800c542:	fa02 f303 	lsl.w	r3, r2, r3
 800c546:	43db      	mvns	r3, r3
 800c548:	697a      	ldr	r2, [r7, #20]
 800c54a:	08d2      	lsrs	r2, r2, #3
 800c54c:	4019      	ands	r1, r3
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	3208      	adds	r2, #8
 800c552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	689a      	ldr	r2, [r3, #8]
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	005b      	lsls	r3, r3, #1
 800c55e:	2103      	movs	r1, #3
 800c560:	fa01 f303 	lsl.w	r3, r1, r3
 800c564:	43db      	mvns	r3, r3
 800c566:	401a      	ands	r2, r3
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	685a      	ldr	r2, [r3, #4]
 800c570:	2101      	movs	r1, #1
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	fa01 f303 	lsl.w	r3, r1, r3
 800c578:	43db      	mvns	r3, r3
 800c57a:	401a      	ands	r2, r3
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	68da      	ldr	r2, [r3, #12]
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	005b      	lsls	r3, r3, #1
 800c588:	2103      	movs	r1, #3
 800c58a:	fa01 f303 	lsl.w	r3, r1, r3
 800c58e:	43db      	mvns	r3, r3
 800c590:	401a      	ands	r2, r3
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	3301      	adds	r3, #1
 800c59a:	617b      	str	r3, [r7, #20]
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	2b0f      	cmp	r3, #15
 800c5a0:	f67f af22 	bls.w	800c3e8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800c5a4:	bf00      	nop
 800c5a6:	371c      	adds	r7, #28
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr
 800c5b0:	40013800 	.word	0x40013800
 800c5b4:	40020000 	.word	0x40020000
 800c5b8:	40020400 	.word	0x40020400
 800c5bc:	40020800 	.word	0x40020800
 800c5c0:	40020c00 	.word	0x40020c00
 800c5c4:	40021000 	.word	0x40021000
 800c5c8:	40021400 	.word	0x40021400
 800c5cc:	40021800 	.word	0x40021800
 800c5d0:	40021c00 	.word	0x40021c00
 800c5d4:	40022000 	.word	0x40022000
 800c5d8:	40022400 	.word	0x40022400
 800c5dc:	40013c00 	.word	0x40013c00

0800c5e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	691a      	ldr	r2, [r3, #16]
 800c5f0:	887b      	ldrh	r3, [r7, #2]
 800c5f2:	4013      	ands	r3, r2
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d002      	beq.n	800c5fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	73fb      	strb	r3, [r7, #15]
 800c5fc:	e001      	b.n	800c602 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c5fe:	2300      	movs	r3, #0
 800c600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c602:	7bfb      	ldrb	r3, [r7, #15]
}
 800c604:	4618      	mov	r0, r3
 800c606:	3714      	adds	r7, #20
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	460b      	mov	r3, r1
 800c61a:	807b      	strh	r3, [r7, #2]
 800c61c:	4613      	mov	r3, r2
 800c61e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c620:	787b      	ldrb	r3, [r7, #1]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d003      	beq.n	800c62e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c626:	887a      	ldrh	r2, [r7, #2]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800c62c:	e003      	b.n	800c636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800c62e:	887b      	ldrh	r3, [r7, #2]
 800c630:	041a      	lsls	r2, r3, #16
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	619a      	str	r2, [r3, #24]
}
 800c636:	bf00      	nop
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr
	...

0800c644 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d101      	bne.n	800c656 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c652:	2301      	movs	r3, #1
 800c654:	e07f      	b.n	800c756 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d106      	bne.n	800c670 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2200      	movs	r2, #0
 800c666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f8a9 	bl	800c7c2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2224      	movs	r2, #36	; 0x24
 800c674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f022 0201 	bic.w	r2, r2, #1
 800c686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	685a      	ldr	r2, [r3, #4]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c694:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	689a      	ldr	r2, [r3, #8]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c6a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	68db      	ldr	r3, [r3, #12]
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d107      	bne.n	800c6be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	689a      	ldr	r2, [r3, #8]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c6ba:	609a      	str	r2, [r3, #8]
 800c6bc:	e006      	b.n	800c6cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	689a      	ldr	r2, [r3, #8]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800c6ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	2b02      	cmp	r3, #2
 800c6d2:	d104      	bne.n	800c6de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c6dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	6859      	ldr	r1, [r3, #4]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	4b1d      	ldr	r3, [pc, #116]	; (800c760 <HAL_I2C_Init+0x11c>)
 800c6ea:	430b      	orrs	r3, r1
 800c6ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	68da      	ldr	r2, [r3, #12]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c6fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	691a      	ldr	r2, [r3, #16]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	695b      	ldr	r3, [r3, #20]
 800c706:	ea42 0103 	orr.w	r1, r2, r3
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	699b      	ldr	r3, [r3, #24]
 800c70e:	021a      	lsls	r2, r3, #8
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	430a      	orrs	r2, r1
 800c716:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	69d9      	ldr	r1, [r3, #28]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6a1a      	ldr	r2, [r3, #32]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	430a      	orrs	r2, r1
 800c726:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f042 0201 	orr.w	r2, r2, #1
 800c736:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2220      	movs	r2, #32
 800c742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800c754:	2300      	movs	r3, #0
}
 800c756:	4618      	mov	r0, r3
 800c758:	3708      	adds	r7, #8
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	02008000 	.word	0x02008000

0800c764 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d101      	bne.n	800c776 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800c772:	2301      	movs	r3, #1
 800c774:	e021      	b.n	800c7ba <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2224      	movs	r2, #36	; 0x24
 800c77a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f022 0201 	bic.w	r2, r2, #1
 800c78c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f821 	bl	800c7d6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3708      	adds	r7, #8
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800c7c2:	b480      	push	{r7}
 800c7c4:	b083      	sub	sp, #12
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800c7ca:	bf00      	nop
 800c7cc:	370c      	adds	r7, #12
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr

0800c7d6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800c7d6:	b480      	push	{r7}
 800c7d8:	b083      	sub	sp, #12
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800c7de:	bf00      	nop
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr
	...

0800c7ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b088      	sub	sp, #32
 800c7f0:	af02      	add	r7, sp, #8
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	4608      	mov	r0, r1
 800c7f6:	4611      	mov	r1, r2
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	817b      	strh	r3, [r7, #10]
 800c7fe:	460b      	mov	r3, r1
 800c800:	813b      	strh	r3, [r7, #8]
 800c802:	4613      	mov	r3, r2
 800c804:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	2b20      	cmp	r3, #32
 800c810:	f040 80f9 	bne.w	800ca06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c814:	6a3b      	ldr	r3, [r7, #32]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d002      	beq.n	800c820 <HAL_I2C_Mem_Write+0x34>
 800c81a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d105      	bne.n	800c82c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c826:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c828:	2301      	movs	r3, #1
 800c82a:	e0ed      	b.n	800ca08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c832:	2b01      	cmp	r3, #1
 800c834:	d101      	bne.n	800c83a <HAL_I2C_Mem_Write+0x4e>
 800c836:	2302      	movs	r3, #2
 800c838:	e0e6      	b.n	800ca08 <HAL_I2C_Mem_Write+0x21c>
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2201      	movs	r2, #1
 800c83e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c842:	f7fe f9e3 	bl	800ac0c <HAL_GetTick>
 800c846:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	9300      	str	r3, [sp, #0]
 800c84c:	2319      	movs	r3, #25
 800c84e:	2201      	movs	r2, #1
 800c850:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c854:	68f8      	ldr	r0, [r7, #12]
 800c856:	f000 fad1 	bl	800cdfc <I2C_WaitOnFlagUntilTimeout>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d001      	beq.n	800c864 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800c860:	2301      	movs	r3, #1
 800c862:	e0d1      	b.n	800ca08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2221      	movs	r2, #33	; 0x21
 800c868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2240      	movs	r2, #64	; 0x40
 800c870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2200      	movs	r2, #0
 800c878:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	6a3a      	ldr	r2, [r7, #32]
 800c87e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c884:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2200      	movs	r2, #0
 800c88a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c88c:	88f8      	ldrh	r0, [r7, #6]
 800c88e:	893a      	ldrh	r2, [r7, #8]
 800c890:	8979      	ldrh	r1, [r7, #10]
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	9301      	str	r3, [sp, #4]
 800c896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c898:	9300      	str	r3, [sp, #0]
 800c89a:	4603      	mov	r3, r0
 800c89c:	68f8      	ldr	r0, [r7, #12]
 800c89e:	f000 f9e1 	bl	800cc64 <I2C_RequestMemoryWrite>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d005      	beq.n	800c8b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	e0a9      	b.n	800ca08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	2bff      	cmp	r3, #255	; 0xff
 800c8bc:	d90e      	bls.n	800c8dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	22ff      	movs	r2, #255	; 0xff
 800c8c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8c8:	b2da      	uxtb	r2, r3
 800c8ca:	8979      	ldrh	r1, [r7, #10]
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	9300      	str	r3, [sp, #0]
 800c8d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c8d4:	68f8      	ldr	r0, [r7, #12]
 800c8d6:	f000 fbb3 	bl	800d040 <I2C_TransferConfig>
 800c8da:	e00f      	b.n	800c8fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8e0:	b29a      	uxth	r2, r3
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8ea:	b2da      	uxtb	r2, r3
 800c8ec:	8979      	ldrh	r1, [r7, #10]
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	9300      	str	r3, [sp, #0]
 800c8f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c8f6:	68f8      	ldr	r0, [r7, #12]
 800c8f8:	f000 fba2 	bl	800d040 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c8fc:	697a      	ldr	r2, [r7, #20]
 800c8fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	f000 fabb 	bl	800ce7c <I2C_WaitOnTXISFlagUntilTimeout>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d001      	beq.n	800c910 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800c90c:	2301      	movs	r3, #1
 800c90e:	e07b      	b.n	800ca08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c914:	781a      	ldrb	r2, [r3, #0]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c920:	1c5a      	adds	r2, r3, #1
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	3b01      	subs	r3, #1
 800c92e:	b29a      	uxth	r2, r3
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c938:	3b01      	subs	r3, #1
 800c93a:	b29a      	uxth	r2, r3
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c944:	b29b      	uxth	r3, r3
 800c946:	2b00      	cmp	r3, #0
 800c948:	d034      	beq.n	800c9b4 <HAL_I2C_Mem_Write+0x1c8>
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d130      	bne.n	800c9b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	9300      	str	r3, [sp, #0]
 800c956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c958:	2200      	movs	r2, #0
 800c95a:	2180      	movs	r1, #128	; 0x80
 800c95c:	68f8      	ldr	r0, [r7, #12]
 800c95e:	f000 fa4d 	bl	800cdfc <I2C_WaitOnFlagUntilTimeout>
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	d001      	beq.n	800c96c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800c968:	2301      	movs	r3, #1
 800c96a:	e04d      	b.n	800ca08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c970:	b29b      	uxth	r3, r3
 800c972:	2bff      	cmp	r3, #255	; 0xff
 800c974:	d90e      	bls.n	800c994 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	22ff      	movs	r2, #255	; 0xff
 800c97a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c980:	b2da      	uxtb	r2, r3
 800c982:	8979      	ldrh	r1, [r7, #10]
 800c984:	2300      	movs	r3, #0
 800c986:	9300      	str	r3, [sp, #0]
 800c988:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f000 fb57 	bl	800d040 <I2C_TransferConfig>
 800c992:	e00f      	b.n	800c9b4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c998:	b29a      	uxth	r2, r3
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9a2:	b2da      	uxtb	r2, r3
 800c9a4:	8979      	ldrh	r1, [r7, #10]
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	9300      	str	r3, [sp, #0]
 800c9aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c9ae:	68f8      	ldr	r0, [r7, #12]
 800c9b0:	f000 fb46 	bl	800d040 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d19e      	bne.n	800c8fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c9be:	697a      	ldr	r2, [r7, #20]
 800c9c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f000 fa9a 	bl	800cefc <I2C_WaitOnSTOPFlagUntilTimeout>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d001      	beq.n	800c9d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e01a      	b.n	800ca08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	2220      	movs	r2, #32
 800c9d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	6859      	ldr	r1, [r3, #4]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	4b0a      	ldr	r3, [pc, #40]	; (800ca10 <HAL_I2C_Mem_Write+0x224>)
 800c9e6:	400b      	ands	r3, r1
 800c9e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2220      	movs	r2, #32
 800c9ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ca02:	2300      	movs	r3, #0
 800ca04:	e000      	b.n	800ca08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ca06:	2302      	movs	r3, #2
  }
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3718      	adds	r7, #24
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	fe00e800 	.word	0xfe00e800

0800ca14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b088      	sub	sp, #32
 800ca18:	af02      	add	r7, sp, #8
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	4608      	mov	r0, r1
 800ca1e:	4611      	mov	r1, r2
 800ca20:	461a      	mov	r2, r3
 800ca22:	4603      	mov	r3, r0
 800ca24:	817b      	strh	r3, [r7, #10]
 800ca26:	460b      	mov	r3, r1
 800ca28:	813b      	strh	r3, [r7, #8]
 800ca2a:	4613      	mov	r3, r2
 800ca2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	2b20      	cmp	r3, #32
 800ca38:	f040 80fd 	bne.w	800cc36 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca3c:	6a3b      	ldr	r3, [r7, #32]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d002      	beq.n	800ca48 <HAL_I2C_Mem_Read+0x34>
 800ca42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d105      	bne.n	800ca54 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ca50:	2301      	movs	r3, #1
 800ca52:	e0f1      	b.n	800cc38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	d101      	bne.n	800ca62 <HAL_I2C_Mem_Read+0x4e>
 800ca5e:	2302      	movs	r3, #2
 800ca60:	e0ea      	b.n	800cc38 <HAL_I2C_Mem_Read+0x224>
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2201      	movs	r2, #1
 800ca66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ca6a:	f7fe f8cf 	bl	800ac0c <HAL_GetTick>
 800ca6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	9300      	str	r3, [sp, #0]
 800ca74:	2319      	movs	r3, #25
 800ca76:	2201      	movs	r2, #1
 800ca78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ca7c:	68f8      	ldr	r0, [r7, #12]
 800ca7e:	f000 f9bd 	bl	800cdfc <I2C_WaitOnFlagUntilTimeout>
 800ca82:	4603      	mov	r3, r0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d001      	beq.n	800ca8c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e0d5      	b.n	800cc38 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2222      	movs	r2, #34	; 0x22
 800ca90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2240      	movs	r2, #64	; 0x40
 800ca98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	6a3a      	ldr	r2, [r7, #32]
 800caa6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800caac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2200      	movs	r2, #0
 800cab2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cab4:	88f8      	ldrh	r0, [r7, #6]
 800cab6:	893a      	ldrh	r2, [r7, #8]
 800cab8:	8979      	ldrh	r1, [r7, #10]
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	9301      	str	r3, [sp, #4]
 800cabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac0:	9300      	str	r3, [sp, #0]
 800cac2:	4603      	mov	r3, r0
 800cac4:	68f8      	ldr	r0, [r7, #12]
 800cac6:	f000 f921 	bl	800cd0c <I2C_RequestMemoryRead>
 800caca:	4603      	mov	r3, r0
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d005      	beq.n	800cadc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2200      	movs	r2, #0
 800cad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800cad8:	2301      	movs	r3, #1
 800cada:	e0ad      	b.n	800cc38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	2bff      	cmp	r3, #255	; 0xff
 800cae4:	d90e      	bls.n	800cb04 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	22ff      	movs	r2, #255	; 0xff
 800caea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800caf0:	b2da      	uxtb	r2, r3
 800caf2:	8979      	ldrh	r1, [r7, #10]
 800caf4:	4b52      	ldr	r3, [pc, #328]	; (800cc40 <HAL_I2C_Mem_Read+0x22c>)
 800caf6:	9300      	str	r3, [sp, #0]
 800caf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cafc:	68f8      	ldr	r0, [r7, #12]
 800cafe:	f000 fa9f 	bl	800d040 <I2C_TransferConfig>
 800cb02:	e00f      	b.n	800cb24 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb08:	b29a      	uxth	r2, r3
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb12:	b2da      	uxtb	r2, r3
 800cb14:	8979      	ldrh	r1, [r7, #10]
 800cb16:	4b4a      	ldr	r3, [pc, #296]	; (800cc40 <HAL_I2C_Mem_Read+0x22c>)
 800cb18:	9300      	str	r3, [sp, #0]
 800cb1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cb1e:	68f8      	ldr	r0, [r7, #12]
 800cb20:	f000 fa8e 	bl	800d040 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	9300      	str	r3, [sp, #0]
 800cb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	2104      	movs	r1, #4
 800cb2e:	68f8      	ldr	r0, [r7, #12]
 800cb30:	f000 f964 	bl	800cdfc <I2C_WaitOnFlagUntilTimeout>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d001      	beq.n	800cb3e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	e07c      	b.n	800cc38 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb48:	b2d2      	uxtb	r2, r2
 800cb4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb50:	1c5a      	adds	r2, r3, #1
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb5a:	3b01      	subs	r3, #1
 800cb5c:	b29a      	uxth	r2, r3
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	3b01      	subs	r3, #1
 800cb6a:	b29a      	uxth	r2, r3
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb74:	b29b      	uxth	r3, r3
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d034      	beq.n	800cbe4 <HAL_I2C_Mem_Read+0x1d0>
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d130      	bne.n	800cbe4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	9300      	str	r3, [sp, #0]
 800cb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb88:	2200      	movs	r2, #0
 800cb8a:	2180      	movs	r1, #128	; 0x80
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f000 f935 	bl	800cdfc <I2C_WaitOnFlagUntilTimeout>
 800cb92:	4603      	mov	r3, r0
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d001      	beq.n	800cb9c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800cb98:	2301      	movs	r3, #1
 800cb9a:	e04d      	b.n	800cc38 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	2bff      	cmp	r3, #255	; 0xff
 800cba4:	d90e      	bls.n	800cbc4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	22ff      	movs	r2, #255	; 0xff
 800cbaa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbb0:	b2da      	uxtb	r2, r3
 800cbb2:	8979      	ldrh	r1, [r7, #10]
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	9300      	str	r3, [sp, #0]
 800cbb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f000 fa3f 	bl	800d040 <I2C_TransferConfig>
 800cbc2:	e00f      	b.n	800cbe4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbc8:	b29a      	uxth	r2, r3
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbd2:	b2da      	uxtb	r2, r3
 800cbd4:	8979      	ldrh	r1, [r7, #10]
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	9300      	str	r3, [sp, #0]
 800cbda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cbde:	68f8      	ldr	r0, [r7, #12]
 800cbe0:	f000 fa2e 	bl	800d040 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d19a      	bne.n	800cb24 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cbee:	697a      	ldr	r2, [r7, #20]
 800cbf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	f000 f982 	bl	800cefc <I2C_WaitOnSTOPFlagUntilTimeout>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d001      	beq.n	800cc02 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e01a      	b.n	800cc38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	2220      	movs	r2, #32
 800cc08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	6859      	ldr	r1, [r3, #4]
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681a      	ldr	r2, [r3, #0]
 800cc14:	4b0b      	ldr	r3, [pc, #44]	; (800cc44 <HAL_I2C_Mem_Read+0x230>)
 800cc16:	400b      	ands	r3, r1
 800cc18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2220      	movs	r2, #32
 800cc1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	2200      	movs	r2, #0
 800cc26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	e000      	b.n	800cc38 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800cc36:	2302      	movs	r3, #2
  }
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3718      	adds	r7, #24
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	80002400 	.word	0x80002400
 800cc44:	fe00e800 	.word	0xfe00e800

0800cc48 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b083      	sub	sp, #12
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc56:	b2db      	uxtb	r3, r3
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	370c      	adds	r7, #12
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b086      	sub	sp, #24
 800cc68:	af02      	add	r7, sp, #8
 800cc6a:	60f8      	str	r0, [r7, #12]
 800cc6c:	4608      	mov	r0, r1
 800cc6e:	4611      	mov	r1, r2
 800cc70:	461a      	mov	r2, r3
 800cc72:	4603      	mov	r3, r0
 800cc74:	817b      	strh	r3, [r7, #10]
 800cc76:	460b      	mov	r3, r1
 800cc78:	813b      	strh	r3, [r7, #8]
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800cc7e:	88fb      	ldrh	r3, [r7, #6]
 800cc80:	b2da      	uxtb	r2, r3
 800cc82:	8979      	ldrh	r1, [r7, #10]
 800cc84:	4b20      	ldr	r3, [pc, #128]	; (800cd08 <I2C_RequestMemoryWrite+0xa4>)
 800cc86:	9300      	str	r3, [sp, #0]
 800cc88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f000 f9d7 	bl	800d040 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cc92:	69fa      	ldr	r2, [r7, #28]
 800cc94:	69b9      	ldr	r1, [r7, #24]
 800cc96:	68f8      	ldr	r0, [r7, #12]
 800cc98:	f000 f8f0 	bl	800ce7c <I2C_WaitOnTXISFlagUntilTimeout>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d001      	beq.n	800cca6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800cca2:	2301      	movs	r3, #1
 800cca4:	e02c      	b.n	800cd00 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cca6:	88fb      	ldrh	r3, [r7, #6]
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d105      	bne.n	800ccb8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ccac:	893b      	ldrh	r3, [r7, #8]
 800ccae:	b2da      	uxtb	r2, r3
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	629a      	str	r2, [r3, #40]	; 0x28
 800ccb6:	e015      	b.n	800cce4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ccb8:	893b      	ldrh	r3, [r7, #8]
 800ccba:	0a1b      	lsrs	r3, r3, #8
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	b2da      	uxtb	r2, r3
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ccc6:	69fa      	ldr	r2, [r7, #28]
 800ccc8:	69b9      	ldr	r1, [r7, #24]
 800ccca:	68f8      	ldr	r0, [r7, #12]
 800cccc:	f000 f8d6 	bl	800ce7c <I2C_WaitOnTXISFlagUntilTimeout>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d001      	beq.n	800ccda <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e012      	b.n	800cd00 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ccda:	893b      	ldrh	r3, [r7, #8]
 800ccdc:	b2da      	uxtb	r2, r3
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	9300      	str	r3, [sp, #0]
 800cce8:	69bb      	ldr	r3, [r7, #24]
 800ccea:	2200      	movs	r2, #0
 800ccec:	2180      	movs	r1, #128	; 0x80
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	f000 f884 	bl	800cdfc <I2C_WaitOnFlagUntilTimeout>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d001      	beq.n	800ccfe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e000      	b.n	800cd00 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ccfe:	2300      	movs	r3, #0
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3710      	adds	r7, #16
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	80002000 	.word	0x80002000

0800cd0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b086      	sub	sp, #24
 800cd10:	af02      	add	r7, sp, #8
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	4608      	mov	r0, r1
 800cd16:	4611      	mov	r1, r2
 800cd18:	461a      	mov	r2, r3
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	817b      	strh	r3, [r7, #10]
 800cd1e:	460b      	mov	r3, r1
 800cd20:	813b      	strh	r3, [r7, #8]
 800cd22:	4613      	mov	r3, r2
 800cd24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800cd26:	88fb      	ldrh	r3, [r7, #6]
 800cd28:	b2da      	uxtb	r2, r3
 800cd2a:	8979      	ldrh	r1, [r7, #10]
 800cd2c:	4b20      	ldr	r3, [pc, #128]	; (800cdb0 <I2C_RequestMemoryRead+0xa4>)
 800cd2e:	9300      	str	r3, [sp, #0]
 800cd30:	2300      	movs	r3, #0
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	f000 f984 	bl	800d040 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd38:	69fa      	ldr	r2, [r7, #28]
 800cd3a:	69b9      	ldr	r1, [r7, #24]
 800cd3c:	68f8      	ldr	r0, [r7, #12]
 800cd3e:	f000 f89d 	bl	800ce7c <I2C_WaitOnTXISFlagUntilTimeout>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d001      	beq.n	800cd4c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	e02c      	b.n	800cda6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cd4c:	88fb      	ldrh	r3, [r7, #6]
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	d105      	bne.n	800cd5e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cd52:	893b      	ldrh	r3, [r7, #8]
 800cd54:	b2da      	uxtb	r2, r3
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	629a      	str	r2, [r3, #40]	; 0x28
 800cd5c:	e015      	b.n	800cd8a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800cd5e:	893b      	ldrh	r3, [r7, #8]
 800cd60:	0a1b      	lsrs	r3, r3, #8
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	b2da      	uxtb	r2, r3
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd6c:	69fa      	ldr	r2, [r7, #28]
 800cd6e:	69b9      	ldr	r1, [r7, #24]
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f000 f883 	bl	800ce7c <I2C_WaitOnTXISFlagUntilTimeout>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d001      	beq.n	800cd80 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	e012      	b.n	800cda6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cd80:	893b      	ldrh	r3, [r7, #8]
 800cd82:	b2da      	uxtb	r2, r3
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	9300      	str	r3, [sp, #0]
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	2200      	movs	r2, #0
 800cd92:	2140      	movs	r1, #64	; 0x40
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f000 f831 	bl	800cdfc <I2C_WaitOnFlagUntilTimeout>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d001      	beq.n	800cda4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800cda0:	2301      	movs	r3, #1
 800cda2:	e000      	b.n	800cda6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3710      	adds	r7, #16
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	80002000 	.word	0x80002000

0800cdb4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b083      	sub	sp, #12
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	699b      	ldr	r3, [r3, #24]
 800cdc2:	f003 0302 	and.w	r3, r3, #2
 800cdc6:	2b02      	cmp	r3, #2
 800cdc8:	d103      	bne.n	800cdd2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	699b      	ldr	r3, [r3, #24]
 800cdd8:	f003 0301 	and.w	r3, r3, #1
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d007      	beq.n	800cdf0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	699a      	ldr	r2, [r3, #24]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f042 0201 	orr.w	r2, r2, #1
 800cdee:	619a      	str	r2, [r3, #24]
  }
}
 800cdf0:	bf00      	nop
 800cdf2:	370c      	adds	r7, #12
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr

0800cdfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	603b      	str	r3, [r7, #0]
 800ce08:	4613      	mov	r3, r2
 800ce0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ce0c:	e022      	b.n	800ce54 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce14:	d01e      	beq.n	800ce54 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce16:	f7fd fef9 	bl	800ac0c <HAL_GetTick>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	1ad3      	subs	r3, r2, r3
 800ce20:	683a      	ldr	r2, [r7, #0]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d302      	bcc.n	800ce2c <I2C_WaitOnFlagUntilTimeout+0x30>
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d113      	bne.n	800ce54 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce30:	f043 0220 	orr.w	r2, r3, #32
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2220      	movs	r2, #32
 800ce3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2200      	movs	r2, #0
 800ce44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ce50:	2301      	movs	r3, #1
 800ce52:	e00f      	b.n	800ce74 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	699a      	ldr	r2, [r3, #24]
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	4013      	ands	r3, r2
 800ce5e:	68ba      	ldr	r2, [r7, #8]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	bf0c      	ite	eq
 800ce64:	2301      	moveq	r3, #1
 800ce66:	2300      	movne	r3, #0
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	79fb      	ldrb	r3, [r7, #7]
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d0cd      	beq.n	800ce0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ce72:	2300      	movs	r3, #0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ce88:	e02c      	b.n	800cee4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	68b9      	ldr	r1, [r7, #8]
 800ce8e:	68f8      	ldr	r0, [r7, #12]
 800ce90:	f000 f870 	bl	800cf74 <I2C_IsAcknowledgeFailed>
 800ce94:	4603      	mov	r3, r0
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d001      	beq.n	800ce9e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	e02a      	b.n	800cef4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cea4:	d01e      	beq.n	800cee4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cea6:	f7fd feb1 	bl	800ac0c <HAL_GetTick>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	1ad3      	subs	r3, r2, r3
 800ceb0:	68ba      	ldr	r2, [r7, #8]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d302      	bcc.n	800cebc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d113      	bne.n	800cee4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cec0:	f043 0220 	orr.w	r2, r3, #32
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2220      	movs	r2, #32
 800cecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2200      	movs	r2, #0
 800ced4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2200      	movs	r2, #0
 800cedc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800cee0:	2301      	movs	r3, #1
 800cee2:	e007      	b.n	800cef4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	699b      	ldr	r3, [r3, #24]
 800ceea:	f003 0302 	and.w	r3, r3, #2
 800ceee:	2b02      	cmp	r3, #2
 800cef0:	d1cb      	bne.n	800ce8a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cef2:	2300      	movs	r3, #0
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3710      	adds	r7, #16
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cf08:	e028      	b.n	800cf5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	68b9      	ldr	r1, [r7, #8]
 800cf0e:	68f8      	ldr	r0, [r7, #12]
 800cf10:	f000 f830 	bl	800cf74 <I2C_IsAcknowledgeFailed>
 800cf14:	4603      	mov	r3, r0
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d001      	beq.n	800cf1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e026      	b.n	800cf6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf1e:	f7fd fe75 	bl	800ac0c <HAL_GetTick>
 800cf22:	4602      	mov	r2, r0
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	1ad3      	subs	r3, r2, r3
 800cf28:	68ba      	ldr	r2, [r7, #8]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d302      	bcc.n	800cf34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d113      	bne.n	800cf5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf38:	f043 0220 	orr.w	r2, r3, #32
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2220      	movs	r2, #32
 800cf44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2200      	movs	r2, #0
 800cf54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	e007      	b.n	800cf6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	699b      	ldr	r3, [r3, #24]
 800cf62:	f003 0320 	and.w	r3, r3, #32
 800cf66:	2b20      	cmp	r3, #32
 800cf68:	d1cf      	bne.n	800cf0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800cf6a:	2300      	movs	r3, #0
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3710      	adds	r7, #16
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	699b      	ldr	r3, [r3, #24]
 800cf86:	f003 0310 	and.w	r3, r3, #16
 800cf8a:	2b10      	cmp	r3, #16
 800cf8c:	d151      	bne.n	800d032 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cf8e:	e022      	b.n	800cfd6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf96:	d01e      	beq.n	800cfd6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf98:	f7fd fe38 	bl	800ac0c <HAL_GetTick>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	68ba      	ldr	r2, [r7, #8]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d302      	bcc.n	800cfae <I2C_IsAcknowledgeFailed+0x3a>
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d113      	bne.n	800cfd6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfb2:	f043 0220 	orr.w	r2, r3, #32
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2220      	movs	r2, #32
 800cfbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	e02e      	b.n	800d034 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	699b      	ldr	r3, [r3, #24]
 800cfdc:	f003 0320 	and.w	r3, r3, #32
 800cfe0:	2b20      	cmp	r3, #32
 800cfe2:	d1d5      	bne.n	800cf90 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	2210      	movs	r2, #16
 800cfea:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2220      	movs	r2, #32
 800cff2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f7ff fedd 	bl	800cdb4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	6859      	ldr	r1, [r3, #4]
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	4b0d      	ldr	r3, [pc, #52]	; (800d03c <I2C_IsAcknowledgeFailed+0xc8>)
 800d006:	400b      	ands	r3, r1
 800d008:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d00e:	f043 0204 	orr.w	r2, r3, #4
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2220      	movs	r2, #32
 800d01a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2200      	movs	r2, #0
 800d022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2200      	movs	r2, #0
 800d02a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800d02e:	2301      	movs	r3, #1
 800d030:	e000      	b.n	800d034 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800d032:	2300      	movs	r3, #0
}
 800d034:	4618      	mov	r0, r3
 800d036:	3710      	adds	r7, #16
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}
 800d03c:	fe00e800 	.word	0xfe00e800

0800d040 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800d040:	b480      	push	{r7}
 800d042:	b085      	sub	sp, #20
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	607b      	str	r3, [r7, #4]
 800d04a:	460b      	mov	r3, r1
 800d04c:	817b      	strh	r3, [r7, #10]
 800d04e:	4613      	mov	r3, r2
 800d050:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	685a      	ldr	r2, [r3, #4]
 800d058:	69bb      	ldr	r3, [r7, #24]
 800d05a:	0d5b      	lsrs	r3, r3, #21
 800d05c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d060:	4b0d      	ldr	r3, [pc, #52]	; (800d098 <I2C_TransferConfig+0x58>)
 800d062:	430b      	orrs	r3, r1
 800d064:	43db      	mvns	r3, r3
 800d066:	ea02 0103 	and.w	r1, r2, r3
 800d06a:	897b      	ldrh	r3, [r7, #10]
 800d06c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800d070:	7a7b      	ldrb	r3, [r7, #9]
 800d072:	041b      	lsls	r3, r3, #16
 800d074:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d078:	431a      	orrs	r2, r3
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	431a      	orrs	r2, r3
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	431a      	orrs	r2, r3
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	430a      	orrs	r2, r1
 800d088:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800d08a:	bf00      	nop
 800d08c:	3714      	adds	r7, #20
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr
 800d096:	bf00      	nop
 800d098:	03ff63ff 	.word	0x03ff63ff

0800d09c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b086      	sub	sp, #24
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d101      	bne.n	800d0b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	e25e      	b.n	800d570 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f003 0301 	and.w	r3, r3, #1
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	f000 8087 	beq.w	800d1ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d0c0:	4b96      	ldr	r3, [pc, #600]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d0c2:	689b      	ldr	r3, [r3, #8]
 800d0c4:	f003 030c 	and.w	r3, r3, #12
 800d0c8:	2b04      	cmp	r3, #4
 800d0ca:	d00c      	beq.n	800d0e6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d0cc:	4b93      	ldr	r3, [pc, #588]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	f003 030c 	and.w	r3, r3, #12
 800d0d4:	2b08      	cmp	r3, #8
 800d0d6:	d112      	bne.n	800d0fe <HAL_RCC_OscConfig+0x62>
 800d0d8:	4b90      	ldr	r3, [pc, #576]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d0e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d0e4:	d10b      	bne.n	800d0fe <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d0e6:	4b8d      	ldr	r3, [pc, #564]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d06c      	beq.n	800d1cc <HAL_RCC_OscConfig+0x130>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d168      	bne.n	800d1cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e238      	b.n	800d570 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d106:	d106      	bne.n	800d116 <HAL_RCC_OscConfig+0x7a>
 800d108:	4b84      	ldr	r3, [pc, #528]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4a83      	ldr	r2, [pc, #524]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d10e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d112:	6013      	str	r3, [r2, #0]
 800d114:	e02e      	b.n	800d174 <HAL_RCC_OscConfig+0xd8>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d10c      	bne.n	800d138 <HAL_RCC_OscConfig+0x9c>
 800d11e:	4b7f      	ldr	r3, [pc, #508]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4a7e      	ldr	r2, [pc, #504]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d128:	6013      	str	r3, [r2, #0]
 800d12a:	4b7c      	ldr	r3, [pc, #496]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	4a7b      	ldr	r2, [pc, #492]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d134:	6013      	str	r3, [r2, #0]
 800d136:	e01d      	b.n	800d174 <HAL_RCC_OscConfig+0xd8>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d140:	d10c      	bne.n	800d15c <HAL_RCC_OscConfig+0xc0>
 800d142:	4b76      	ldr	r3, [pc, #472]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a75      	ldr	r2, [pc, #468]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d14c:	6013      	str	r3, [r2, #0]
 800d14e:	4b73      	ldr	r3, [pc, #460]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4a72      	ldr	r2, [pc, #456]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d158:	6013      	str	r3, [r2, #0]
 800d15a:	e00b      	b.n	800d174 <HAL_RCC_OscConfig+0xd8>
 800d15c:	4b6f      	ldr	r3, [pc, #444]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4a6e      	ldr	r2, [pc, #440]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d166:	6013      	str	r3, [r2, #0]
 800d168:	4b6c      	ldr	r3, [pc, #432]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4a6b      	ldr	r2, [pc, #428]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d16e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d013      	beq.n	800d1a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d17c:	f7fd fd46 	bl	800ac0c <HAL_GetTick>
 800d180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d182:	e008      	b.n	800d196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d184:	f7fd fd42 	bl	800ac0c <HAL_GetTick>
 800d188:	4602      	mov	r2, r0
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	1ad3      	subs	r3, r2, r3
 800d18e:	2b64      	cmp	r3, #100	; 0x64
 800d190:	d901      	bls.n	800d196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d192:	2303      	movs	r3, #3
 800d194:	e1ec      	b.n	800d570 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d196:	4b61      	ldr	r3, [pc, #388]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d0f0      	beq.n	800d184 <HAL_RCC_OscConfig+0xe8>
 800d1a2:	e014      	b.n	800d1ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1a4:	f7fd fd32 	bl	800ac0c <HAL_GetTick>
 800d1a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d1aa:	e008      	b.n	800d1be <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d1ac:	f7fd fd2e 	bl	800ac0c <HAL_GetTick>
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	1ad3      	subs	r3, r2, r3
 800d1b6:	2b64      	cmp	r3, #100	; 0x64
 800d1b8:	d901      	bls.n	800d1be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d1ba:	2303      	movs	r3, #3
 800d1bc:	e1d8      	b.n	800d570 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d1be:	4b57      	ldr	r3, [pc, #348]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d1f0      	bne.n	800d1ac <HAL_RCC_OscConfig+0x110>
 800d1ca:	e000      	b.n	800d1ce <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d1cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f003 0302 	and.w	r3, r3, #2
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d069      	beq.n	800d2ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d1da:	4b50      	ldr	r3, [pc, #320]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d1dc:	689b      	ldr	r3, [r3, #8]
 800d1de:	f003 030c 	and.w	r3, r3, #12
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00b      	beq.n	800d1fe <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d1e6:	4b4d      	ldr	r3, [pc, #308]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	f003 030c 	and.w	r3, r3, #12
 800d1ee:	2b08      	cmp	r3, #8
 800d1f0:	d11c      	bne.n	800d22c <HAL_RCC_OscConfig+0x190>
 800d1f2:	4b4a      	ldr	r3, [pc, #296]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d116      	bne.n	800d22c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d1fe:	4b47      	ldr	r3, [pc, #284]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f003 0302 	and.w	r3, r3, #2
 800d206:	2b00      	cmp	r3, #0
 800d208:	d005      	beq.n	800d216 <HAL_RCC_OscConfig+0x17a>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	68db      	ldr	r3, [r3, #12]
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d001      	beq.n	800d216 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d212:	2301      	movs	r3, #1
 800d214:	e1ac      	b.n	800d570 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d216:	4b41      	ldr	r3, [pc, #260]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	691b      	ldr	r3, [r3, #16]
 800d222:	00db      	lsls	r3, r3, #3
 800d224:	493d      	ldr	r1, [pc, #244]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d226:	4313      	orrs	r3, r2
 800d228:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d22a:	e040      	b.n	800d2ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d023      	beq.n	800d27c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d234:	4b39      	ldr	r3, [pc, #228]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4a38      	ldr	r2, [pc, #224]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d23a:	f043 0301 	orr.w	r3, r3, #1
 800d23e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d240:	f7fd fce4 	bl	800ac0c <HAL_GetTick>
 800d244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d246:	e008      	b.n	800d25a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d248:	f7fd fce0 	bl	800ac0c <HAL_GetTick>
 800d24c:	4602      	mov	r2, r0
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	1ad3      	subs	r3, r2, r3
 800d252:	2b02      	cmp	r3, #2
 800d254:	d901      	bls.n	800d25a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800d256:	2303      	movs	r3, #3
 800d258:	e18a      	b.n	800d570 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d25a:	4b30      	ldr	r3, [pc, #192]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f003 0302 	and.w	r3, r3, #2
 800d262:	2b00      	cmp	r3, #0
 800d264:	d0f0      	beq.n	800d248 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d266:	4b2d      	ldr	r3, [pc, #180]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	691b      	ldr	r3, [r3, #16]
 800d272:	00db      	lsls	r3, r3, #3
 800d274:	4929      	ldr	r1, [pc, #164]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d276:	4313      	orrs	r3, r2
 800d278:	600b      	str	r3, [r1, #0]
 800d27a:	e018      	b.n	800d2ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d27c:	4b27      	ldr	r3, [pc, #156]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a26      	ldr	r2, [pc, #152]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d282:	f023 0301 	bic.w	r3, r3, #1
 800d286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d288:	f7fd fcc0 	bl	800ac0c <HAL_GetTick>
 800d28c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d28e:	e008      	b.n	800d2a2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d290:	f7fd fcbc 	bl	800ac0c <HAL_GetTick>
 800d294:	4602      	mov	r2, r0
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	1ad3      	subs	r3, r2, r3
 800d29a:	2b02      	cmp	r3, #2
 800d29c:	d901      	bls.n	800d2a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d29e:	2303      	movs	r3, #3
 800d2a0:	e166      	b.n	800d570 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d2a2:	4b1e      	ldr	r3, [pc, #120]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f003 0302 	and.w	r3, r3, #2
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d1f0      	bne.n	800d290 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f003 0308 	and.w	r3, r3, #8
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d038      	beq.n	800d32c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	695b      	ldr	r3, [r3, #20]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d019      	beq.n	800d2f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d2c2:	4b16      	ldr	r3, [pc, #88]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d2c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2c6:	4a15      	ldr	r2, [pc, #84]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d2c8:	f043 0301 	orr.w	r3, r3, #1
 800d2cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2ce:	f7fd fc9d 	bl	800ac0c <HAL_GetTick>
 800d2d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d2d4:	e008      	b.n	800d2e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d2d6:	f7fd fc99 	bl	800ac0c <HAL_GetTick>
 800d2da:	4602      	mov	r2, r0
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	1ad3      	subs	r3, r2, r3
 800d2e0:	2b02      	cmp	r3, #2
 800d2e2:	d901      	bls.n	800d2e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d2e4:	2303      	movs	r3, #3
 800d2e6:	e143      	b.n	800d570 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d2e8:	4b0c      	ldr	r3, [pc, #48]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d2ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2ec:	f003 0302 	and.w	r3, r3, #2
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d0f0      	beq.n	800d2d6 <HAL_RCC_OscConfig+0x23a>
 800d2f4:	e01a      	b.n	800d32c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d2f6:	4b09      	ldr	r3, [pc, #36]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d2f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2fa:	4a08      	ldr	r2, [pc, #32]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d2fc:	f023 0301 	bic.w	r3, r3, #1
 800d300:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d302:	f7fd fc83 	bl	800ac0c <HAL_GetTick>
 800d306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d308:	e00a      	b.n	800d320 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d30a:	f7fd fc7f 	bl	800ac0c <HAL_GetTick>
 800d30e:	4602      	mov	r2, r0
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	1ad3      	subs	r3, r2, r3
 800d314:	2b02      	cmp	r3, #2
 800d316:	d903      	bls.n	800d320 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d318:	2303      	movs	r3, #3
 800d31a:	e129      	b.n	800d570 <HAL_RCC_OscConfig+0x4d4>
 800d31c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d320:	4b95      	ldr	r3, [pc, #596]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d324:	f003 0302 	and.w	r3, r3, #2
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d1ee      	bne.n	800d30a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f003 0304 	and.w	r3, r3, #4
 800d334:	2b00      	cmp	r3, #0
 800d336:	f000 80a4 	beq.w	800d482 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d33a:	4b8f      	ldr	r3, [pc, #572]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d342:	2b00      	cmp	r3, #0
 800d344:	d10d      	bne.n	800d362 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800d346:	4b8c      	ldr	r3, [pc, #560]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d34a:	4a8b      	ldr	r2, [pc, #556]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d34c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d350:	6413      	str	r3, [r2, #64]	; 0x40
 800d352:	4b89      	ldr	r3, [pc, #548]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d35a:	60fb      	str	r3, [r7, #12]
 800d35c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800d35e:	2301      	movs	r3, #1
 800d360:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d362:	4b86      	ldr	r3, [pc, #536]	; (800d57c <HAL_RCC_OscConfig+0x4e0>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d118      	bne.n	800d3a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800d36e:	4b83      	ldr	r3, [pc, #524]	; (800d57c <HAL_RCC_OscConfig+0x4e0>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4a82      	ldr	r2, [pc, #520]	; (800d57c <HAL_RCC_OscConfig+0x4e0>)
 800d374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d37a:	f7fd fc47 	bl	800ac0c <HAL_GetTick>
 800d37e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d380:	e008      	b.n	800d394 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800d382:	f7fd fc43 	bl	800ac0c <HAL_GetTick>
 800d386:	4602      	mov	r2, r0
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	1ad3      	subs	r3, r2, r3
 800d38c:	2b64      	cmp	r3, #100	; 0x64
 800d38e:	d901      	bls.n	800d394 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800d390:	2303      	movs	r3, #3
 800d392:	e0ed      	b.n	800d570 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d394:	4b79      	ldr	r3, [pc, #484]	; (800d57c <HAL_RCC_OscConfig+0x4e0>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d0f0      	beq.n	800d382 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d106      	bne.n	800d3b6 <HAL_RCC_OscConfig+0x31a>
 800d3a8:	4b73      	ldr	r3, [pc, #460]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d3aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3ac:	4a72      	ldr	r2, [pc, #456]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d3ae:	f043 0301 	orr.w	r3, r3, #1
 800d3b2:	6713      	str	r3, [r2, #112]	; 0x70
 800d3b4:	e02d      	b.n	800d412 <HAL_RCC_OscConfig+0x376>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d10c      	bne.n	800d3d8 <HAL_RCC_OscConfig+0x33c>
 800d3be:	4b6e      	ldr	r3, [pc, #440]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d3c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3c2:	4a6d      	ldr	r2, [pc, #436]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d3c4:	f023 0301 	bic.w	r3, r3, #1
 800d3c8:	6713      	str	r3, [r2, #112]	; 0x70
 800d3ca:	4b6b      	ldr	r3, [pc, #428]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d3cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3ce:	4a6a      	ldr	r2, [pc, #424]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d3d0:	f023 0304 	bic.w	r3, r3, #4
 800d3d4:	6713      	str	r3, [r2, #112]	; 0x70
 800d3d6:	e01c      	b.n	800d412 <HAL_RCC_OscConfig+0x376>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	689b      	ldr	r3, [r3, #8]
 800d3dc:	2b05      	cmp	r3, #5
 800d3de:	d10c      	bne.n	800d3fa <HAL_RCC_OscConfig+0x35e>
 800d3e0:	4b65      	ldr	r3, [pc, #404]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d3e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3e4:	4a64      	ldr	r2, [pc, #400]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d3e6:	f043 0304 	orr.w	r3, r3, #4
 800d3ea:	6713      	str	r3, [r2, #112]	; 0x70
 800d3ec:	4b62      	ldr	r3, [pc, #392]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d3ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3f0:	4a61      	ldr	r2, [pc, #388]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d3f2:	f043 0301 	orr.w	r3, r3, #1
 800d3f6:	6713      	str	r3, [r2, #112]	; 0x70
 800d3f8:	e00b      	b.n	800d412 <HAL_RCC_OscConfig+0x376>
 800d3fa:	4b5f      	ldr	r3, [pc, #380]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3fe:	4a5e      	ldr	r2, [pc, #376]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d400:	f023 0301 	bic.w	r3, r3, #1
 800d404:	6713      	str	r3, [r2, #112]	; 0x70
 800d406:	4b5c      	ldr	r3, [pc, #368]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d40a:	4a5b      	ldr	r2, [pc, #364]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d40c:	f023 0304 	bic.w	r3, r3, #4
 800d410:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	689b      	ldr	r3, [r3, #8]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d015      	beq.n	800d446 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d41a:	f7fd fbf7 	bl	800ac0c <HAL_GetTick>
 800d41e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d420:	e00a      	b.n	800d438 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d422:	f7fd fbf3 	bl	800ac0c <HAL_GetTick>
 800d426:	4602      	mov	r2, r0
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	1ad3      	subs	r3, r2, r3
 800d42c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d430:	4293      	cmp	r3, r2
 800d432:	d901      	bls.n	800d438 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800d434:	2303      	movs	r3, #3
 800d436:	e09b      	b.n	800d570 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d438:	4b4f      	ldr	r3, [pc, #316]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d43a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d43c:	f003 0302 	and.w	r3, r3, #2
 800d440:	2b00      	cmp	r3, #0
 800d442:	d0ee      	beq.n	800d422 <HAL_RCC_OscConfig+0x386>
 800d444:	e014      	b.n	800d470 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d446:	f7fd fbe1 	bl	800ac0c <HAL_GetTick>
 800d44a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d44c:	e00a      	b.n	800d464 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d44e:	f7fd fbdd 	bl	800ac0c <HAL_GetTick>
 800d452:	4602      	mov	r2, r0
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	1ad3      	subs	r3, r2, r3
 800d458:	f241 3288 	movw	r2, #5000	; 0x1388
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d901      	bls.n	800d464 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800d460:	2303      	movs	r3, #3
 800d462:	e085      	b.n	800d570 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d464:	4b44      	ldr	r3, [pc, #272]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d468:	f003 0302 	and.w	r3, r3, #2
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d1ee      	bne.n	800d44e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d470:	7dfb      	ldrb	r3, [r7, #23]
 800d472:	2b01      	cmp	r3, #1
 800d474:	d105      	bne.n	800d482 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d476:	4b40      	ldr	r3, [pc, #256]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d47a:	4a3f      	ldr	r2, [pc, #252]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d47c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d480:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	699b      	ldr	r3, [r3, #24]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d071      	beq.n	800d56e <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d48a:	4b3b      	ldr	r3, [pc, #236]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	f003 030c 	and.w	r3, r3, #12
 800d492:	2b08      	cmp	r3, #8
 800d494:	d069      	beq.n	800d56a <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	699b      	ldr	r3, [r3, #24]
 800d49a:	2b02      	cmp	r3, #2
 800d49c:	d14b      	bne.n	800d536 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d49e:	4b36      	ldr	r3, [pc, #216]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4a35      	ldr	r2, [pc, #212]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d4a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d4a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4aa:	f7fd fbaf 	bl	800ac0c <HAL_GetTick>
 800d4ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d4b0:	e008      	b.n	800d4c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d4b2:	f7fd fbab 	bl	800ac0c <HAL_GetTick>
 800d4b6:	4602      	mov	r2, r0
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	1ad3      	subs	r3, r2, r3
 800d4bc:	2b02      	cmp	r3, #2
 800d4be:	d901      	bls.n	800d4c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800d4c0:	2303      	movs	r3, #3
 800d4c2:	e055      	b.n	800d570 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d4c4:	4b2c      	ldr	r3, [pc, #176]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d1f0      	bne.n	800d4b2 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	69da      	ldr	r2, [r3, #28]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6a1b      	ldr	r3, [r3, #32]
 800d4d8:	431a      	orrs	r2, r3
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4de:	019b      	lsls	r3, r3, #6
 800d4e0:	431a      	orrs	r2, r3
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4e6:	085b      	lsrs	r3, r3, #1
 800d4e8:	3b01      	subs	r3, #1
 800d4ea:	041b      	lsls	r3, r3, #16
 800d4ec:	431a      	orrs	r2, r3
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f2:	061b      	lsls	r3, r3, #24
 800d4f4:	431a      	orrs	r2, r3
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4fa:	071b      	lsls	r3, r3, #28
 800d4fc:	491e      	ldr	r1, [pc, #120]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d4fe:	4313      	orrs	r3, r2
 800d500:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d502:	4b1d      	ldr	r3, [pc, #116]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4a1c      	ldr	r2, [pc, #112]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d508:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d50c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d50e:	f7fd fb7d 	bl	800ac0c <HAL_GetTick>
 800d512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d514:	e008      	b.n	800d528 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d516:	f7fd fb79 	bl	800ac0c <HAL_GetTick>
 800d51a:	4602      	mov	r2, r0
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	1ad3      	subs	r3, r2, r3
 800d520:	2b02      	cmp	r3, #2
 800d522:	d901      	bls.n	800d528 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800d524:	2303      	movs	r3, #3
 800d526:	e023      	b.n	800d570 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d528:	4b13      	ldr	r3, [pc, #76]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d530:	2b00      	cmp	r3, #0
 800d532:	d0f0      	beq.n	800d516 <HAL_RCC_OscConfig+0x47a>
 800d534:	e01b      	b.n	800d56e <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d536:	4b10      	ldr	r3, [pc, #64]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4a0f      	ldr	r2, [pc, #60]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d53c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d542:	f7fd fb63 	bl	800ac0c <HAL_GetTick>
 800d546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d548:	e008      	b.n	800d55c <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d54a:	f7fd fb5f 	bl	800ac0c <HAL_GetTick>
 800d54e:	4602      	mov	r2, r0
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	1ad3      	subs	r3, r2, r3
 800d554:	2b02      	cmp	r3, #2
 800d556:	d901      	bls.n	800d55c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800d558:	2303      	movs	r3, #3
 800d55a:	e009      	b.n	800d570 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d55c:	4b06      	ldr	r3, [pc, #24]	; (800d578 <HAL_RCC_OscConfig+0x4dc>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d564:	2b00      	cmp	r3, #0
 800d566:	d1f0      	bne.n	800d54a <HAL_RCC_OscConfig+0x4ae>
 800d568:	e001      	b.n	800d56e <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800d56a:	2301      	movs	r3, #1
 800d56c:	e000      	b.n	800d570 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800d56e:	2300      	movs	r3, #0
}
 800d570:	4618      	mov	r0, r3
 800d572:	3718      	adds	r7, #24
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}
 800d578:	40023800 	.word	0x40023800
 800d57c:	40007000 	.word	0x40007000

0800d580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b084      	sub	sp, #16
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800d58a:	2300      	movs	r3, #0
 800d58c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d101      	bne.n	800d598 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d594:	2301      	movs	r3, #1
 800d596:	e0ce      	b.n	800d736 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d598:	4b69      	ldr	r3, [pc, #420]	; (800d740 <HAL_RCC_ClockConfig+0x1c0>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f003 030f 	and.w	r3, r3, #15
 800d5a0:	683a      	ldr	r2, [r7, #0]
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d910      	bls.n	800d5c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d5a6:	4b66      	ldr	r3, [pc, #408]	; (800d740 <HAL_RCC_ClockConfig+0x1c0>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f023 020f 	bic.w	r2, r3, #15
 800d5ae:	4964      	ldr	r1, [pc, #400]	; (800d740 <HAL_RCC_ClockConfig+0x1c0>)
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d5b6:	4b62      	ldr	r3, [pc, #392]	; (800d740 <HAL_RCC_ClockConfig+0x1c0>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f003 030f 	and.w	r3, r3, #15
 800d5be:	683a      	ldr	r2, [r7, #0]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d001      	beq.n	800d5c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	e0b6      	b.n	800d736 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f003 0302 	and.w	r3, r3, #2
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d020      	beq.n	800d616 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f003 0304 	and.w	r3, r3, #4
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d005      	beq.n	800d5ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d5e0:	4b58      	ldr	r3, [pc, #352]	; (800d744 <HAL_RCC_ClockConfig+0x1c4>)
 800d5e2:	689b      	ldr	r3, [r3, #8]
 800d5e4:	4a57      	ldr	r2, [pc, #348]	; (800d744 <HAL_RCC_ClockConfig+0x1c4>)
 800d5e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d5ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f003 0308 	and.w	r3, r3, #8
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d005      	beq.n	800d604 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d5f8:	4b52      	ldr	r3, [pc, #328]	; (800d744 <HAL_RCC_ClockConfig+0x1c4>)
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	4a51      	ldr	r2, [pc, #324]	; (800d744 <HAL_RCC_ClockConfig+0x1c4>)
 800d5fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d602:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d604:	4b4f      	ldr	r3, [pc, #316]	; (800d744 <HAL_RCC_ClockConfig+0x1c4>)
 800d606:	689b      	ldr	r3, [r3, #8]
 800d608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	689b      	ldr	r3, [r3, #8]
 800d610:	494c      	ldr	r1, [pc, #304]	; (800d744 <HAL_RCC_ClockConfig+0x1c4>)
 800d612:	4313      	orrs	r3, r2
 800d614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f003 0301 	and.w	r3, r3, #1
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d040      	beq.n	800d6a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	685b      	ldr	r3, [r3, #4]
 800d626:	2b01      	cmp	r3, #1
 800d628:	d107      	bne.n	800d63a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d62a:	4b46      	ldr	r3, [pc, #280]	; (800d744 <HAL_RCC_ClockConfig+0x1c4>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d632:	2b00      	cmp	r3, #0
 800d634:	d115      	bne.n	800d662 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d636:	2301      	movs	r3, #1
 800d638:	e07d      	b.n	800d736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	2b02      	cmp	r3, #2
 800d640:	d107      	bne.n	800d652 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d642:	4b40      	ldr	r3, [pc, #256]	; (800d744 <HAL_RCC_ClockConfig+0x1c4>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d109      	bne.n	800d662 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d64e:	2301      	movs	r3, #1
 800d650:	e071      	b.n	800d736 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d652:	4b3c      	ldr	r3, [pc, #240]	; (800d744 <HAL_RCC_ClockConfig+0x1c4>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f003 0302 	and.w	r3, r3, #2
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d101      	bne.n	800d662 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d65e:	2301      	movs	r3, #1
 800d660:	e069      	b.n	800d736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d662:	4b38      	ldr	r3, [pc, #224]	; (800d744 <HAL_RCC_ClockConfig+0x1c4>)
 800d664:	689b      	ldr	r3, [r3, #8]
 800d666:	f023 0203 	bic.w	r2, r3, #3
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	4935      	ldr	r1, [pc, #212]	; (800d744 <HAL_RCC_ClockConfig+0x1c4>)
 800d670:	4313      	orrs	r3, r2
 800d672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d674:	f7fd faca 	bl	800ac0c <HAL_GetTick>
 800d678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d67a:	e00a      	b.n	800d692 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d67c:	f7fd fac6 	bl	800ac0c <HAL_GetTick>
 800d680:	4602      	mov	r2, r0
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	1ad3      	subs	r3, r2, r3
 800d686:	f241 3288 	movw	r2, #5000	; 0x1388
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d901      	bls.n	800d692 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800d68e:	2303      	movs	r3, #3
 800d690:	e051      	b.n	800d736 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d692:	4b2c      	ldr	r3, [pc, #176]	; (800d744 <HAL_RCC_ClockConfig+0x1c4>)
 800d694:	689b      	ldr	r3, [r3, #8]
 800d696:	f003 020c 	and.w	r2, r3, #12
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d1eb      	bne.n	800d67c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d6a4:	4b26      	ldr	r3, [pc, #152]	; (800d740 <HAL_RCC_ClockConfig+0x1c0>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f003 030f 	and.w	r3, r3, #15
 800d6ac:	683a      	ldr	r2, [r7, #0]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d210      	bcs.n	800d6d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d6b2:	4b23      	ldr	r3, [pc, #140]	; (800d740 <HAL_RCC_ClockConfig+0x1c0>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f023 020f 	bic.w	r2, r3, #15
 800d6ba:	4921      	ldr	r1, [pc, #132]	; (800d740 <HAL_RCC_ClockConfig+0x1c0>)
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d6c2:	4b1f      	ldr	r3, [pc, #124]	; (800d740 <HAL_RCC_ClockConfig+0x1c0>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f003 030f 	and.w	r3, r3, #15
 800d6ca:	683a      	ldr	r2, [r7, #0]
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d001      	beq.n	800d6d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	e030      	b.n	800d736 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f003 0304 	and.w	r3, r3, #4
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d008      	beq.n	800d6f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d6e0:	4b18      	ldr	r3, [pc, #96]	; (800d744 <HAL_RCC_ClockConfig+0x1c4>)
 800d6e2:	689b      	ldr	r3, [r3, #8]
 800d6e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	4915      	ldr	r1, [pc, #84]	; (800d744 <HAL_RCC_ClockConfig+0x1c4>)
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f003 0308 	and.w	r3, r3, #8
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d009      	beq.n	800d712 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d6fe:	4b11      	ldr	r3, [pc, #68]	; (800d744 <HAL_RCC_ClockConfig+0x1c4>)
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	691b      	ldr	r3, [r3, #16]
 800d70a:	00db      	lsls	r3, r3, #3
 800d70c:	490d      	ldr	r1, [pc, #52]	; (800d744 <HAL_RCC_ClockConfig+0x1c4>)
 800d70e:	4313      	orrs	r3, r2
 800d710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d712:	f000 f81d 	bl	800d750 <HAL_RCC_GetSysClockFreq>
 800d716:	4601      	mov	r1, r0
 800d718:	4b0a      	ldr	r3, [pc, #40]	; (800d744 <HAL_RCC_ClockConfig+0x1c4>)
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	091b      	lsrs	r3, r3, #4
 800d71e:	f003 030f 	and.w	r3, r3, #15
 800d722:	4a09      	ldr	r2, [pc, #36]	; (800d748 <HAL_RCC_ClockConfig+0x1c8>)
 800d724:	5cd3      	ldrb	r3, [r2, r3]
 800d726:	fa21 f303 	lsr.w	r3, r1, r3
 800d72a:	4a08      	ldr	r2, [pc, #32]	; (800d74c <HAL_RCC_ClockConfig+0x1cc>)
 800d72c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800d72e:	2000      	movs	r0, #0
 800d730:	f7fd fa28 	bl	800ab84 <HAL_InitTick>

  return HAL_OK;
 800d734:	2300      	movs	r3, #0
}
 800d736:	4618      	mov	r0, r3
 800d738:	3710      	adds	r7, #16
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	40023c00 	.word	0x40023c00
 800d744:	40023800 	.word	0x40023800
 800d748:	08019560 	.word	0x08019560
 800d74c:	20000000 	.word	0x20000000

0800d750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d750:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d752:	b085      	sub	sp, #20
 800d754:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800d756:	2300      	movs	r3, #0
 800d758:	607b      	str	r3, [r7, #4]
 800d75a:	2300      	movs	r3, #0
 800d75c:	60fb      	str	r3, [r7, #12]
 800d75e:	2300      	movs	r3, #0
 800d760:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800d762:	2300      	movs	r3, #0
 800d764:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d766:	4b50      	ldr	r3, [pc, #320]	; (800d8a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800d768:	689b      	ldr	r3, [r3, #8]
 800d76a:	f003 030c 	and.w	r3, r3, #12
 800d76e:	2b04      	cmp	r3, #4
 800d770:	d007      	beq.n	800d782 <HAL_RCC_GetSysClockFreq+0x32>
 800d772:	2b08      	cmp	r3, #8
 800d774:	d008      	beq.n	800d788 <HAL_RCC_GetSysClockFreq+0x38>
 800d776:	2b00      	cmp	r3, #0
 800d778:	f040 808d 	bne.w	800d896 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d77c:	4b4b      	ldr	r3, [pc, #300]	; (800d8ac <HAL_RCC_GetSysClockFreq+0x15c>)
 800d77e:	60bb      	str	r3, [r7, #8]
       break;
 800d780:	e08c      	b.n	800d89c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d782:	4b4b      	ldr	r3, [pc, #300]	; (800d8b0 <HAL_RCC_GetSysClockFreq+0x160>)
 800d784:	60bb      	str	r3, [r7, #8]
      break;
 800d786:	e089      	b.n	800d89c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d788:	4b47      	ldr	r3, [pc, #284]	; (800d8a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d790:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800d792:	4b45      	ldr	r3, [pc, #276]	; (800d8a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d023      	beq.n	800d7e6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d79e:	4b42      	ldr	r3, [pc, #264]	; (800d8a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800d7a0:	685b      	ldr	r3, [r3, #4]
 800d7a2:	099b      	lsrs	r3, r3, #6
 800d7a4:	f04f 0400 	mov.w	r4, #0
 800d7a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d7ac:	f04f 0200 	mov.w	r2, #0
 800d7b0:	ea03 0501 	and.w	r5, r3, r1
 800d7b4:	ea04 0602 	and.w	r6, r4, r2
 800d7b8:	4a3d      	ldr	r2, [pc, #244]	; (800d8b0 <HAL_RCC_GetSysClockFreq+0x160>)
 800d7ba:	fb02 f106 	mul.w	r1, r2, r6
 800d7be:	2200      	movs	r2, #0
 800d7c0:	fb02 f205 	mul.w	r2, r2, r5
 800d7c4:	440a      	add	r2, r1
 800d7c6:	493a      	ldr	r1, [pc, #232]	; (800d8b0 <HAL_RCC_GetSysClockFreq+0x160>)
 800d7c8:	fba5 0101 	umull	r0, r1, r5, r1
 800d7cc:	1853      	adds	r3, r2, r1
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f04f 0400 	mov.w	r4, #0
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	4623      	mov	r3, r4
 800d7da:	f7f9 f9c1 	bl	8006b60 <__aeabi_uldivmod>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	460c      	mov	r4, r1
 800d7e2:	60fb      	str	r3, [r7, #12]
 800d7e4:	e049      	b.n	800d87a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d7e6:	4b30      	ldr	r3, [pc, #192]	; (800d8a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800d7e8:	685b      	ldr	r3, [r3, #4]
 800d7ea:	099b      	lsrs	r3, r3, #6
 800d7ec:	f04f 0400 	mov.w	r4, #0
 800d7f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d7f4:	f04f 0200 	mov.w	r2, #0
 800d7f8:	ea03 0501 	and.w	r5, r3, r1
 800d7fc:	ea04 0602 	and.w	r6, r4, r2
 800d800:	4629      	mov	r1, r5
 800d802:	4632      	mov	r2, r6
 800d804:	f04f 0300 	mov.w	r3, #0
 800d808:	f04f 0400 	mov.w	r4, #0
 800d80c:	0154      	lsls	r4, r2, #5
 800d80e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d812:	014b      	lsls	r3, r1, #5
 800d814:	4619      	mov	r1, r3
 800d816:	4622      	mov	r2, r4
 800d818:	1b49      	subs	r1, r1, r5
 800d81a:	eb62 0206 	sbc.w	r2, r2, r6
 800d81e:	f04f 0300 	mov.w	r3, #0
 800d822:	f04f 0400 	mov.w	r4, #0
 800d826:	0194      	lsls	r4, r2, #6
 800d828:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d82c:	018b      	lsls	r3, r1, #6
 800d82e:	1a5b      	subs	r3, r3, r1
 800d830:	eb64 0402 	sbc.w	r4, r4, r2
 800d834:	f04f 0100 	mov.w	r1, #0
 800d838:	f04f 0200 	mov.w	r2, #0
 800d83c:	00e2      	lsls	r2, r4, #3
 800d83e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d842:	00d9      	lsls	r1, r3, #3
 800d844:	460b      	mov	r3, r1
 800d846:	4614      	mov	r4, r2
 800d848:	195b      	adds	r3, r3, r5
 800d84a:	eb44 0406 	adc.w	r4, r4, r6
 800d84e:	f04f 0100 	mov.w	r1, #0
 800d852:	f04f 0200 	mov.w	r2, #0
 800d856:	02a2      	lsls	r2, r4, #10
 800d858:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800d85c:	0299      	lsls	r1, r3, #10
 800d85e:	460b      	mov	r3, r1
 800d860:	4614      	mov	r4, r2
 800d862:	4618      	mov	r0, r3
 800d864:	4621      	mov	r1, r4
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f04f 0400 	mov.w	r4, #0
 800d86c:	461a      	mov	r2, r3
 800d86e:	4623      	mov	r3, r4
 800d870:	f7f9 f976 	bl	8006b60 <__aeabi_uldivmod>
 800d874:	4603      	mov	r3, r0
 800d876:	460c      	mov	r4, r1
 800d878:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800d87a:	4b0b      	ldr	r3, [pc, #44]	; (800d8a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	0c1b      	lsrs	r3, r3, #16
 800d880:	f003 0303 	and.w	r3, r3, #3
 800d884:	3301      	adds	r3, #1
 800d886:	005b      	lsls	r3, r3, #1
 800d888:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800d88a:	68fa      	ldr	r2, [r7, #12]
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d892:	60bb      	str	r3, [r7, #8]
      break;
 800d894:	e002      	b.n	800d89c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d896:	4b05      	ldr	r3, [pc, #20]	; (800d8ac <HAL_RCC_GetSysClockFreq+0x15c>)
 800d898:	60bb      	str	r3, [r7, #8]
      break;
 800d89a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d89c:	68bb      	ldr	r3, [r7, #8]
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3714      	adds	r7, #20
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8a6:	bf00      	nop
 800d8a8:	40023800 	.word	0x40023800
 800d8ac:	00f42400 	.word	0x00f42400
 800d8b0:	017d7840 	.word	0x017d7840

0800d8b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d8b8:	4b03      	ldr	r3, [pc, #12]	; (800d8c8 <HAL_RCC_GetHCLKFreq+0x14>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c4:	4770      	bx	lr
 800d8c6:	bf00      	nop
 800d8c8:	20000000 	.word	0x20000000

0800d8cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d8d0:	f7ff fff0 	bl	800d8b4 <HAL_RCC_GetHCLKFreq>
 800d8d4:	4601      	mov	r1, r0
 800d8d6:	4b05      	ldr	r3, [pc, #20]	; (800d8ec <HAL_RCC_GetPCLK1Freq+0x20>)
 800d8d8:	689b      	ldr	r3, [r3, #8]
 800d8da:	0a9b      	lsrs	r3, r3, #10
 800d8dc:	f003 0307 	and.w	r3, r3, #7
 800d8e0:	4a03      	ldr	r2, [pc, #12]	; (800d8f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d8e2:	5cd3      	ldrb	r3, [r2, r3]
 800d8e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	bd80      	pop	{r7, pc}
 800d8ec:	40023800 	.word	0x40023800
 800d8f0:	08019570 	.word	0x08019570

0800d8f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d8f8:	f7ff ffdc 	bl	800d8b4 <HAL_RCC_GetHCLKFreq>
 800d8fc:	4601      	mov	r1, r0
 800d8fe:	4b05      	ldr	r3, [pc, #20]	; (800d914 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d900:	689b      	ldr	r3, [r3, #8]
 800d902:	0b5b      	lsrs	r3, r3, #13
 800d904:	f003 0307 	and.w	r3, r3, #7
 800d908:	4a03      	ldr	r2, [pc, #12]	; (800d918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d90a:	5cd3      	ldrb	r3, [r2, r3]
 800d90c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d910:	4618      	mov	r0, r3
 800d912:	bd80      	pop	{r7, pc}
 800d914:	40023800 	.word	0x40023800
 800d918:	08019570 	.word	0x08019570

0800d91c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b088      	sub	sp, #32
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d924:	2300      	movs	r3, #0
 800d926:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800d928:	2300      	movs	r3, #0
 800d92a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800d92c:	2300      	movs	r3, #0
 800d92e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800d930:	2300      	movs	r3, #0
 800d932:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800d934:	2300      	movs	r3, #0
 800d936:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f003 0301 	and.w	r3, r3, #1
 800d940:	2b00      	cmp	r3, #0
 800d942:	d012      	beq.n	800d96a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d944:	4b69      	ldr	r3, [pc, #420]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d946:	689b      	ldr	r3, [r3, #8]
 800d948:	4a68      	ldr	r2, [pc, #416]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d94a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d94e:	6093      	str	r3, [r2, #8]
 800d950:	4b66      	ldr	r3, [pc, #408]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d952:	689a      	ldr	r2, [r3, #8]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d958:	4964      	ldr	r1, [pc, #400]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d95a:	4313      	orrs	r3, r2
 800d95c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d962:	2b00      	cmp	r3, #0
 800d964:	d101      	bne.n	800d96a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800d966:	2301      	movs	r3, #1
 800d968:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d972:	2b00      	cmp	r3, #0
 800d974:	d017      	beq.n	800d9a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d976:	4b5d      	ldr	r3, [pc, #372]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d97c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d984:	4959      	ldr	r1, [pc, #356]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d986:	4313      	orrs	r3, r2
 800d988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d994:	d101      	bne.n	800d99a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800d996:	2301      	movs	r3, #1
 800d998:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d101      	bne.n	800d9a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d017      	beq.n	800d9e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d9b2:	4b4e      	ldr	r3, [pc, #312]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d9b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c0:	494a      	ldr	r1, [pc, #296]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d9d0:	d101      	bne.n	800d9d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d101      	bne.n	800d9e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d001      	beq.n	800d9f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f003 0320 	and.w	r3, r3, #32
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	f000 808b 	beq.w	800db16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800da00:	4b3a      	ldr	r3, [pc, #232]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800da02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da04:	4a39      	ldr	r2, [pc, #228]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800da06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da0a:	6413      	str	r3, [r2, #64]	; 0x40
 800da0c:	4b37      	ldr	r3, [pc, #220]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800da0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da14:	60bb      	str	r3, [r7, #8]
 800da16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800da18:	4b35      	ldr	r3, [pc, #212]	; (800daf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4a34      	ldr	r2, [pc, #208]	; (800daf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800da1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da24:	f7fd f8f2 	bl	800ac0c <HAL_GetTick>
 800da28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800da2a:	e008      	b.n	800da3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800da2c:	f7fd f8ee 	bl	800ac0c <HAL_GetTick>
 800da30:	4602      	mov	r2, r0
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	1ad3      	subs	r3, r2, r3
 800da36:	2b64      	cmp	r3, #100	; 0x64
 800da38:	d901      	bls.n	800da3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800da3a:	2303      	movs	r3, #3
 800da3c:	e38d      	b.n	800e15a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800da3e:	4b2c      	ldr	r3, [pc, #176]	; (800daf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da46:	2b00      	cmp	r3, #0
 800da48:	d0f0      	beq.n	800da2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800da4a:	4b28      	ldr	r3, [pc, #160]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800da4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d035      	beq.n	800dac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da62:	693a      	ldr	r2, [r7, #16]
 800da64:	429a      	cmp	r2, r3
 800da66:	d02e      	beq.n	800dac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800da68:	4b20      	ldr	r3, [pc, #128]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800da6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800da72:	4b1e      	ldr	r3, [pc, #120]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800da74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da76:	4a1d      	ldr	r2, [pc, #116]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800da78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800da7e:	4b1b      	ldr	r3, [pc, #108]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800da80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da82:	4a1a      	ldr	r2, [pc, #104]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800da84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800da88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800da8a:	4a18      	ldr	r2, [pc, #96]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800da90:	4b16      	ldr	r3, [pc, #88]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800da92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da94:	f003 0301 	and.w	r3, r3, #1
 800da98:	2b01      	cmp	r3, #1
 800da9a:	d114      	bne.n	800dac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da9c:	f7fd f8b6 	bl	800ac0c <HAL_GetTick>
 800daa0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800daa2:	e00a      	b.n	800daba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800daa4:	f7fd f8b2 	bl	800ac0c <HAL_GetTick>
 800daa8:	4602      	mov	r2, r0
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	1ad3      	subs	r3, r2, r3
 800daae:	f241 3288 	movw	r2, #5000	; 0x1388
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d901      	bls.n	800daba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800dab6:	2303      	movs	r3, #3
 800dab8:	e34f      	b.n	800e15a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800daba:	4b0c      	ldr	r3, [pc, #48]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dabc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dabe:	f003 0302 	and.w	r3, r3, #2
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d0ee      	beq.n	800daa4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dad2:	d111      	bne.n	800daf8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800dad4:	4b05      	ldr	r3, [pc, #20]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800dae0:	4b04      	ldr	r3, [pc, #16]	; (800daf4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800dae2:	400b      	ands	r3, r1
 800dae4:	4901      	ldr	r1, [pc, #4]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dae6:	4313      	orrs	r3, r2
 800dae8:	608b      	str	r3, [r1, #8]
 800daea:	e00b      	b.n	800db04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800daec:	40023800 	.word	0x40023800
 800daf0:	40007000 	.word	0x40007000
 800daf4:	0ffffcff 	.word	0x0ffffcff
 800daf8:	4bb3      	ldr	r3, [pc, #716]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dafa:	689b      	ldr	r3, [r3, #8]
 800dafc:	4ab2      	ldr	r2, [pc, #712]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dafe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800db02:	6093      	str	r3, [r2, #8]
 800db04:	4bb0      	ldr	r3, [pc, #704]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800db06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db10:	49ad      	ldr	r1, [pc, #692]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800db12:	4313      	orrs	r3, r2
 800db14:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f003 0310 	and.w	r3, r3, #16
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d010      	beq.n	800db44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800db22:	4ba9      	ldr	r3, [pc, #676]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800db24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db28:	4aa7      	ldr	r2, [pc, #668]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800db2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800db2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800db32:	4ba5      	ldr	r3, [pc, #660]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800db34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db3c:	49a2      	ldr	r1, [pc, #648]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800db3e:	4313      	orrs	r3, r2
 800db40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d00a      	beq.n	800db66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800db50:	4b9d      	ldr	r3, [pc, #628]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800db52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db5e:	499a      	ldr	r1, [pc, #616]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800db60:	4313      	orrs	r3, r2
 800db62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d00a      	beq.n	800db88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800db72:	4b95      	ldr	r3, [pc, #596]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800db74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db80:	4991      	ldr	r1, [pc, #580]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800db82:	4313      	orrs	r3, r2
 800db84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db90:	2b00      	cmp	r3, #0
 800db92:	d00a      	beq.n	800dbaa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800db94:	4b8c      	ldr	r3, [pc, #560]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800db96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dba2:	4989      	ldr	r1, [pc, #548]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dba4:	4313      	orrs	r3, r2
 800dba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d00a      	beq.n	800dbcc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800dbb6:	4b84      	ldr	r3, [pc, #528]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dbb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbc4:	4980      	ldr	r1, [pc, #512]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d00a      	beq.n	800dbee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dbd8:	4b7b      	ldr	r3, [pc, #492]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dbda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbde:	f023 0203 	bic.w	r2, r3, #3
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbe6:	4978      	ldr	r1, [pc, #480]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d00a      	beq.n	800dc10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800dbfa:	4b73      	ldr	r3, [pc, #460]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dbfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc00:	f023 020c 	bic.w	r2, r3, #12
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc08:	496f      	ldr	r1, [pc, #444]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00a      	beq.n	800dc32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800dc1c:	4b6a      	ldr	r3, [pc, #424]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dc1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc2a:	4967      	ldr	r1, [pc, #412]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d00a      	beq.n	800dc54 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800dc3e:	4b62      	ldr	r3, [pc, #392]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dc40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc44:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc4c:	495e      	ldr	r1, [pc, #376]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d00a      	beq.n	800dc76 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800dc60:	4b59      	ldr	r3, [pc, #356]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dc62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc6e:	4956      	ldr	r1, [pc, #344]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dc70:	4313      	orrs	r3, r2
 800dc72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d00a      	beq.n	800dc98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800dc82:	4b51      	ldr	r3, [pc, #324]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dc84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc90:	494d      	ldr	r1, [pc, #308]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dc92:	4313      	orrs	r3, r2
 800dc94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d00a      	beq.n	800dcba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800dca4:	4b48      	ldr	r3, [pc, #288]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcaa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcb2:	4945      	ldr	r1, [pc, #276]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dcb4:	4313      	orrs	r3, r2
 800dcb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d00a      	beq.n	800dcdc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800dcc6:	4b40      	ldr	r3, [pc, #256]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dcc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dccc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dcd4:	493c      	ldr	r1, [pc, #240]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d00a      	beq.n	800dcfe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800dce8:	4b37      	ldr	r3, [pc, #220]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dcea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcf6:	4934      	ldr	r1, [pc, #208]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dcf8:	4313      	orrs	r3, r2
 800dcfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d011      	beq.n	800dd2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800dd0a:	4b2f      	ldr	r3, [pc, #188]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dd0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd10:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd18:	492b      	ldr	r1, [pc, #172]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dd28:	d101      	bne.n	800dd2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f003 0308 	and.w	r3, r3, #8
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d001      	beq.n	800dd3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d00a      	beq.n	800dd60 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dd4a:	4b1f      	ldr	r3, [pc, #124]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dd4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd50:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd58:	491b      	ldr	r1, [pc, #108]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dd5a:	4313      	orrs	r3, r2
 800dd5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d00b      	beq.n	800dd84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800dd6c:	4b16      	ldr	r3, [pc, #88]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dd6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd7c:	4912      	ldr	r1, [pc, #72]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d00b      	beq.n	800dda8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800dd90:	4b0d      	ldr	r3, [pc, #52]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dd92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd96:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dda0:	4909      	ldr	r1, [pc, #36]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800dda2:	4313      	orrs	r3, r2
 800dda4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d00f      	beq.n	800ddd4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ddb4:	4b04      	ldr	r3, [pc, #16]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ddb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddc4:	e002      	b.n	800ddcc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800ddc6:	bf00      	nop
 800ddc8:	40023800 	.word	0x40023800
 800ddcc:	4985      	ldr	r1, [pc, #532]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ddce:	4313      	orrs	r3, r2
 800ddd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d00b      	beq.n	800ddf8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800dde0:	4b80      	ldr	r3, [pc, #512]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800dde2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dde6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddf0:	497c      	ldr	r1, [pc, #496]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	2b01      	cmp	r3, #1
 800ddfc:	d005      	beq.n	800de0a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de06:	f040 80d6 	bne.w	800dfb6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800de0a:	4b76      	ldr	r3, [pc, #472]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	4a75      	ldr	r2, [pc, #468]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800de10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800de14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de16:	f7fc fef9 	bl	800ac0c <HAL_GetTick>
 800de1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800de1c:	e008      	b.n	800de30 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800de1e:	f7fc fef5 	bl	800ac0c <HAL_GetTick>
 800de22:	4602      	mov	r2, r0
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	2b64      	cmp	r3, #100	; 0x64
 800de2a:	d901      	bls.n	800de30 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800de2c:	2303      	movs	r3, #3
 800de2e:	e194      	b.n	800e15a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800de30:	4b6c      	ldr	r3, [pc, #432]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d1f0      	bne.n	800de1e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f003 0301 	and.w	r3, r3, #1
 800de44:	2b00      	cmp	r3, #0
 800de46:	d021      	beq.n	800de8c <HAL_RCCEx_PeriphCLKConfig+0x570>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d11d      	bne.n	800de8c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800de50:	4b64      	ldr	r3, [pc, #400]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800de52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de56:	0c1b      	lsrs	r3, r3, #16
 800de58:	f003 0303 	and.w	r3, r3, #3
 800de5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800de5e:	4b61      	ldr	r3, [pc, #388]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800de60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de64:	0e1b      	lsrs	r3, r3, #24
 800de66:	f003 030f 	and.w	r3, r3, #15
 800de6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	685b      	ldr	r3, [r3, #4]
 800de70:	019a      	lsls	r2, r3, #6
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	041b      	lsls	r3, r3, #16
 800de76:	431a      	orrs	r2, r3
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	061b      	lsls	r3, r3, #24
 800de7c:	431a      	orrs	r2, r3
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	689b      	ldr	r3, [r3, #8]
 800de82:	071b      	lsls	r3, r3, #28
 800de84:	4957      	ldr	r1, [pc, #348]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800de86:	4313      	orrs	r3, r2
 800de88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800de94:	2b00      	cmp	r3, #0
 800de96:	d004      	beq.n	800dea2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dea0:	d00a      	beq.n	800deb8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d02e      	beq.n	800df0c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800deb6:	d129      	bne.n	800df0c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800deb8:	4b4a      	ldr	r3, [pc, #296]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800deba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800debe:	0c1b      	lsrs	r3, r3, #16
 800dec0:	f003 0303 	and.w	r3, r3, #3
 800dec4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800dec6:	4b47      	ldr	r3, [pc, #284]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800dec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800decc:	0f1b      	lsrs	r3, r3, #28
 800dece:	f003 0307 	and.w	r3, r3, #7
 800ded2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	019a      	lsls	r2, r3, #6
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	041b      	lsls	r3, r3, #16
 800dede:	431a      	orrs	r2, r3
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	68db      	ldr	r3, [r3, #12]
 800dee4:	061b      	lsls	r3, r3, #24
 800dee6:	431a      	orrs	r2, r3
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	071b      	lsls	r3, r3, #28
 800deec:	493d      	ldr	r1, [pc, #244]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800deee:	4313      	orrs	r3, r2
 800def0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800def4:	4b3b      	ldr	r3, [pc, #236]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800def6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800defa:	f023 021f 	bic.w	r2, r3, #31
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df02:	3b01      	subs	r3, #1
 800df04:	4937      	ldr	r1, [pc, #220]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800df06:	4313      	orrs	r3, r2
 800df08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800df14:	2b00      	cmp	r3, #0
 800df16:	d01d      	beq.n	800df54 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800df18:	4b32      	ldr	r3, [pc, #200]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800df1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df1e:	0e1b      	lsrs	r3, r3, #24
 800df20:	f003 030f 	and.w	r3, r3, #15
 800df24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800df26:	4b2f      	ldr	r3, [pc, #188]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800df28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df2c:	0f1b      	lsrs	r3, r3, #28
 800df2e:	f003 0307 	and.w	r3, r3, #7
 800df32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	685b      	ldr	r3, [r3, #4]
 800df38:	019a      	lsls	r2, r3, #6
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	691b      	ldr	r3, [r3, #16]
 800df3e:	041b      	lsls	r3, r3, #16
 800df40:	431a      	orrs	r2, r3
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	061b      	lsls	r3, r3, #24
 800df46:	431a      	orrs	r2, r3
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	071b      	lsls	r3, r3, #28
 800df4c:	4925      	ldr	r1, [pc, #148]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800df4e:	4313      	orrs	r3, r2
 800df50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d011      	beq.n	800df84 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	685b      	ldr	r3, [r3, #4]
 800df64:	019a      	lsls	r2, r3, #6
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	691b      	ldr	r3, [r3, #16]
 800df6a:	041b      	lsls	r3, r3, #16
 800df6c:	431a      	orrs	r2, r3
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	68db      	ldr	r3, [r3, #12]
 800df72:	061b      	lsls	r3, r3, #24
 800df74:	431a      	orrs	r2, r3
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	689b      	ldr	r3, [r3, #8]
 800df7a:	071b      	lsls	r3, r3, #28
 800df7c:	4919      	ldr	r1, [pc, #100]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800df7e:	4313      	orrs	r3, r2
 800df80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800df84:	4b17      	ldr	r3, [pc, #92]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4a16      	ldr	r2, [pc, #88]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800df8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800df8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df90:	f7fc fe3c 	bl	800ac0c <HAL_GetTick>
 800df94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800df96:	e008      	b.n	800dfaa <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800df98:	f7fc fe38 	bl	800ac0c <HAL_GetTick>
 800df9c:	4602      	mov	r2, r0
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	1ad3      	subs	r3, r2, r3
 800dfa2:	2b64      	cmp	r3, #100	; 0x64
 800dfa4:	d901      	bls.n	800dfaa <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800dfa6:	2303      	movs	r3, #3
 800dfa8:	e0d7      	b.n	800e15a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800dfaa:	4b0e      	ldr	r3, [pc, #56]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d0f0      	beq.n	800df98 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800dfb6:	69bb      	ldr	r3, [r7, #24]
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	f040 80cd 	bne.w	800e158 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800dfbe:	4b09      	ldr	r3, [pc, #36]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4a08      	ldr	r2, [pc, #32]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800dfc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dfc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dfca:	f7fc fe1f 	bl	800ac0c <HAL_GetTick>
 800dfce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800dfd0:	e00a      	b.n	800dfe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800dfd2:	f7fc fe1b 	bl	800ac0c <HAL_GetTick>
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	1ad3      	subs	r3, r2, r3
 800dfdc:	2b64      	cmp	r3, #100	; 0x64
 800dfde:	d903      	bls.n	800dfe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800dfe0:	2303      	movs	r3, #3
 800dfe2:	e0ba      	b.n	800e15a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800dfe4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800dfe8:	4b5e      	ldr	r3, [pc, #376]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dff4:	d0ed      	beq.n	800dfd2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d003      	beq.n	800e00a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e006:	2b00      	cmp	r3, #0
 800e008:	d009      	beq.n	800e01e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e012:	2b00      	cmp	r3, #0
 800e014:	d02e      	beq.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d12a      	bne.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e01e:	4b51      	ldr	r3, [pc, #324]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e024:	0c1b      	lsrs	r3, r3, #16
 800e026:	f003 0303 	and.w	r3, r3, #3
 800e02a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e02c:	4b4d      	ldr	r3, [pc, #308]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e02e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e032:	0f1b      	lsrs	r3, r3, #28
 800e034:	f003 0307 	and.w	r3, r3, #7
 800e038:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	695b      	ldr	r3, [r3, #20]
 800e03e:	019a      	lsls	r2, r3, #6
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	041b      	lsls	r3, r3, #16
 800e044:	431a      	orrs	r2, r3
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	699b      	ldr	r3, [r3, #24]
 800e04a:	061b      	lsls	r3, r3, #24
 800e04c:	431a      	orrs	r2, r3
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	071b      	lsls	r3, r3, #28
 800e052:	4944      	ldr	r1, [pc, #272]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e054:	4313      	orrs	r3, r2
 800e056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e05a:	4b42      	ldr	r3, [pc, #264]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e05c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e060:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e068:	3b01      	subs	r3, #1
 800e06a:	021b      	lsls	r3, r3, #8
 800e06c:	493d      	ldr	r1, [pc, #244]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e06e:	4313      	orrs	r3, r2
 800e070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d022      	beq.n	800e0c6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e084:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e088:	d11d      	bne.n	800e0c6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e08a:	4b36      	ldr	r3, [pc, #216]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e08c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e090:	0e1b      	lsrs	r3, r3, #24
 800e092:	f003 030f 	and.w	r3, r3, #15
 800e096:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e098:	4b32      	ldr	r3, [pc, #200]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e09a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e09e:	0f1b      	lsrs	r3, r3, #28
 800e0a0:	f003 0307 	and.w	r3, r3, #7
 800e0a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	695b      	ldr	r3, [r3, #20]
 800e0aa:	019a      	lsls	r2, r3, #6
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6a1b      	ldr	r3, [r3, #32]
 800e0b0:	041b      	lsls	r3, r3, #16
 800e0b2:	431a      	orrs	r2, r3
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	061b      	lsls	r3, r3, #24
 800e0b8:	431a      	orrs	r2, r3
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	071b      	lsls	r3, r3, #28
 800e0be:	4929      	ldr	r1, [pc, #164]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e0c0:	4313      	orrs	r3, r2
 800e0c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f003 0308 	and.w	r3, r3, #8
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d028      	beq.n	800e124 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e0d2:	4b24      	ldr	r3, [pc, #144]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e0d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0d8:	0e1b      	lsrs	r3, r3, #24
 800e0da:	f003 030f 	and.w	r3, r3, #15
 800e0de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e0e0:	4b20      	ldr	r3, [pc, #128]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0e6:	0c1b      	lsrs	r3, r3, #16
 800e0e8:	f003 0303 	and.w	r3, r3, #3
 800e0ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	695b      	ldr	r3, [r3, #20]
 800e0f2:	019a      	lsls	r2, r3, #6
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	041b      	lsls	r3, r3, #16
 800e0f8:	431a      	orrs	r2, r3
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	061b      	lsls	r3, r3, #24
 800e0fe:	431a      	orrs	r2, r3
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	69db      	ldr	r3, [r3, #28]
 800e104:	071b      	lsls	r3, r3, #28
 800e106:	4917      	ldr	r1, [pc, #92]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e108:	4313      	orrs	r3, r2
 800e10a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e10e:	4b15      	ldr	r3, [pc, #84]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e114:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e11c:	4911      	ldr	r1, [pc, #68]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e11e:	4313      	orrs	r3, r2
 800e120:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e124:	4b0f      	ldr	r3, [pc, #60]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4a0e      	ldr	r2, [pc, #56]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e12a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e12e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e130:	f7fc fd6c 	bl	800ac0c <HAL_GetTick>
 800e134:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e136:	e008      	b.n	800e14a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e138:	f7fc fd68 	bl	800ac0c <HAL_GetTick>
 800e13c:	4602      	mov	r2, r0
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	1ad3      	subs	r3, r2, r3
 800e142:	2b64      	cmp	r3, #100	; 0x64
 800e144:	d901      	bls.n	800e14a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e146:	2303      	movs	r3, #3
 800e148:	e007      	b.n	800e15a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e14a:	4b06      	ldr	r3, [pc, #24]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e156:	d1ef      	bne.n	800e138 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800e158:	2300      	movs	r3, #0
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3720      	adds	r7, #32
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	40023800 	.word	0x40023800

0800e168 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e168:	b480      	push	{r7}
 800e16a:	b085      	sub	sp, #20
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800e170:	2300      	movs	r3, #0
 800e172:	60fb      	str	r3, [r7, #12]

  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	4a8c      	ldr	r2, [pc, #560]	; (800e3a8 <HAL_RCCEx_GetPeriphCLKConfig+0x240>)
 800e178:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800e17a:	4b8c      	ldr	r3, [pc, #560]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e17c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e180:	099b      	lsrs	r3, r3, #6
 800e182:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e18a:	4b88      	ldr	r3, [pc, #544]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e18c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e190:	0c1b      	lsrs	r3, r3, #16
 800e192:	f003 0203 	and.w	r2, r3, #3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e19a:	4b84      	ldr	r3, [pc, #528]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e19c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1a0:	0e1b      	lsrs	r3, r3, #24
 800e1a2:	f003 020f 	and.w	r2, r3, #15
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e1aa:	4b80      	ldr	r3, [pc, #512]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e1ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1b0:	0f1b      	lsrs	r3, r3, #28
 800e1b2:	f003 0207 	and.w	r2, r3, #7
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800e1ba:	4b7c      	ldr	r3, [pc, #496]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e1bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1c0:	099b      	lsrs	r3, r3, #6
 800e1c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e1ca:	4b78      	ldr	r3, [pc, #480]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e1cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1d0:	0c1b      	lsrs	r3, r3, #16
 800e1d2:	f003 0203 	and.w	r2, r3, #3
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e1da:	4b74      	ldr	r3, [pc, #464]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e1dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1e0:	0e1b      	lsrs	r3, r3, #24
 800e1e2:	f003 020f 	and.w	r2, r3, #15
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e1ea:	4b70      	ldr	r3, [pc, #448]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e1ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1f0:	0f1b      	lsrs	r3, r3, #28
 800e1f2:	f003 0207 	and.w	r2, r3, #7
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800e1fa:	4b6c      	ldr	r3, [pc, #432]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e1fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e200:	f003 021f 	and.w	r2, r3, #31
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800e208:	4b68      	ldr	r3, [pc, #416]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e20a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e20e:	0a1b      	lsrs	r3, r3, #8
 800e210:	f003 021f 	and.w	r2, r3, #31
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800e218:	4b64      	ldr	r3, [pc, #400]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e21a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e21e:	0c1b      	lsrs	r3, r3, #16
 800e220:	f003 0203 	and.w	r2, r3, #3
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800e228:	4b60      	ldr	r3, [pc, #384]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e22a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e22e:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800e236:	4b5d      	ldr	r3, [pc, #372]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e23c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800e244:	4b59      	ldr	r3, [pc, #356]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e246:	689b      	ldr	r3, [r3, #8]
 800e248:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800e250:	4b56      	ldr	r3, [pc, #344]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e256:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800e25e:	4b53      	ldr	r3, [pc, #332]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e264:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800e26c:	4b4f      	ldr	r3, [pc, #316]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e26e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e272:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800e27a:	4b4c      	ldr	r3, [pc, #304]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e27c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e280:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800e288:	4b48      	ldr	r3, [pc, #288]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e28a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e28e:	f003 0203 	and.w	r2, r3, #3
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800e296:	4b45      	ldr	r3, [pc, #276]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e29c:	f003 020c 	and.w	r2, r3, #12
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800e2a4:	4b41      	ldr	r3, [pc, #260]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2aa:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800e2b2:	4b3e      	ldr	r3, [pc, #248]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e2b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2b8:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800e2c0:	4b3a      	ldr	r3, [pc, #232]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e2c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2c6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800e2ce:	4b37      	ldr	r3, [pc, #220]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e2d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2d4:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800e2dc:	4b33      	ldr	r3, [pc, #204]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e2de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2e2:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800e2ea:	4b30      	ldr	r3, [pc, #192]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e2ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2f0:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800e2f8:	4b2c      	ldr	r3, [pc, #176]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e2fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2fe:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800e306:	4b29      	ldr	r3, [pc, #164]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e30c:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800e314:	4b25      	ldr	r3, [pc, #148]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e31a:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800e322:	4b22      	ldr	r3, [pc, #136]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e328:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 800e332:	4b1e      	ldr	r3, [pc, #120]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e338:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 800e342:	4b1a      	ldr	r3, [pc, #104]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e348:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800e352:	4b16      	ldr	r3, [pc, #88]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e358:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800e362:	4b12      	ldr	r3, [pc, #72]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e364:	689b      	ldr	r3, [r3, #8]
 800e366:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e36a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800e36c:	4b0f      	ldr	r3, [pc, #60]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e36e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e370:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	431a      	orrs	r2, r3
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800e37c:	4b0b      	ldr	r3, [pc, #44]	; (800e3ac <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800e37e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e382:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e386:	2b00      	cmp	r3, #0
 800e388:	d103      	bne.n	800e392 <HAL_RCCEx_GetPeriphCLKConfig+0x22a>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2200      	movs	r2, #0
 800e38e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800e390:	e003      	b.n	800e39a <HAL_RCCEx_GetPeriphCLKConfig+0x232>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e398:	639a      	str	r2, [r3, #56]	; 0x38
}
 800e39a:	bf00      	nop
 800e39c:	3714      	adds	r7, #20
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr
 800e3a6:	bf00      	nop
 800e3a8:	1cfffff1 	.word	0x1cfffff1
 800e3ac:	40023800 	.word	0x40023800

0800e3b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b087      	sub	sp, #28
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e3ce:	f040 8099 	bne.w	800e504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
  {
    saiclocksource = RCC->DCKCFGR1;
 800e3d2:	4ba0      	ldr	r3, [pc, #640]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e3d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3d8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800e3e0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3e8:	d045      	beq.n	800e476 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800e3ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3ee:	d802      	bhi.n	800e3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d007      	beq.n	800e404 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800e3f4:	e087      	b.n	800e506 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
    switch (saiclocksource)
 800e3f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e3fa:	d074      	beq.n	800e4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 800e3fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e400:	d074      	beq.n	800e4ec <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800e402:	e080      	b.n	800e506 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800e404:	4b93      	ldr	r3, [pc, #588]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d108      	bne.n	800e422 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800e410:	4b90      	ldr	r3, [pc, #576]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e412:	685b      	ldr	r3, [r3, #4]
 800e414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e418:	4a8f      	ldr	r2, [pc, #572]	; (800e658 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800e41a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e41e:	613b      	str	r3, [r7, #16]
 800e420:	e007      	b.n	800e432 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800e422:	4b8c      	ldr	r3, [pc, #560]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e42a:	4a8c      	ldr	r2, [pc, #560]	; (800e65c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800e42c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e430:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800e432:	4b88      	ldr	r3, [pc, #544]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e438:	0e1b      	lsrs	r3, r3, #24
 800e43a:	f003 030f 	and.w	r3, r3, #15
 800e43e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800e440:	4b84      	ldr	r3, [pc, #528]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e446:	099b      	lsrs	r3, r3, #6
 800e448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e44c:	693a      	ldr	r2, [r7, #16]
 800e44e:	fb02 f203 	mul.w	r2, r2, r3
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	fbb2 f3f3 	udiv	r3, r2, r3
 800e458:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800e45a:	4b7e      	ldr	r3, [pc, #504]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e45c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e460:	0a1b      	lsrs	r3, r3, #8
 800e462:	f003 031f 	and.w	r3, r3, #31
 800e466:	3301      	adds	r3, #1
 800e468:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800e46a:	697a      	ldr	r2, [r7, #20]
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e472:	617b      	str	r3, [r7, #20]
        break;
 800e474:	e047      	b.n	800e506 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800e476:	4b77      	ldr	r3, [pc, #476]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d108      	bne.n	800e494 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800e482:	4b74      	ldr	r3, [pc, #464]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e48a:	4a73      	ldr	r2, [pc, #460]	; (800e658 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800e48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e490:	613b      	str	r3, [r7, #16]
 800e492:	e007      	b.n	800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800e494:	4b6f      	ldr	r3, [pc, #444]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e496:	685b      	ldr	r3, [r3, #4]
 800e498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e49c:	4a6f      	ldr	r2, [pc, #444]	; (800e65c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800e49e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4a2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800e4a4:	4b6b      	ldr	r3, [pc, #428]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e4a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4aa:	0e1b      	lsrs	r3, r3, #24
 800e4ac:	f003 030f 	and.w	r3, r3, #15
 800e4b0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800e4b2:	4b68      	ldr	r3, [pc, #416]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e4b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4b8:	099b      	lsrs	r3, r3, #6
 800e4ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4be:	693a      	ldr	r2, [r7, #16]
 800e4c0:	fb02 f203 	mul.w	r2, r2, r3
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4ca:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800e4cc:	4b61      	ldr	r3, [pc, #388]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e4ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4d2:	f003 031f 	and.w	r3, r3, #31
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800e4da:	697a      	ldr	r2, [r7, #20]
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4e2:	617b      	str	r3, [r7, #20]
        break;
 800e4e4:	e00f      	b.n	800e506 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
        frequency = EXTERNAL_CLOCK_VALUE;
 800e4e6:	4b5e      	ldr	r3, [pc, #376]	; (800e660 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800e4e8:	617b      	str	r3, [r7, #20]
        break;
 800e4ea:	e00c      	b.n	800e506 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800e4ec:	4b59      	ldr	r3, [pc, #356]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e4ee:	685b      	ldr	r3, [r3, #4]
 800e4f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d102      	bne.n	800e4fe <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
          frequency = HSI_VALUE;
 800e4f8:	4b57      	ldr	r3, [pc, #348]	; (800e658 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800e4fa:	617b      	str	r3, [r7, #20]
        break;
 800e4fc:	e003      	b.n	800e506 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
          frequency = HSE_VALUE;
 800e4fe:	4b57      	ldr	r3, [pc, #348]	; (800e65c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800e500:	617b      	str	r3, [r7, #20]
        break;
 800e502:	e000      	b.n	800e506 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      }
    }
  }
 800e504:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e50c:	f040 8099 	bne.w	800e642 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
  {
    saiclocksource = RCC->DCKCFGR1;
 800e510:	4b50      	ldr	r3, [pc, #320]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e516:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800e51e:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e526:	d045      	beq.n	800e5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 800e528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e52c:	d802      	bhi.n	800e534 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d007      	beq.n	800e542 <HAL_RCCEx_GetPeriphCLKFreq+0x192>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800e532:	e087      	b.n	800e644 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
    switch (saiclocksource)
 800e534:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e538:	d074      	beq.n	800e624 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800e53a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800e53e:	d074      	beq.n	800e62a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
        break;
 800e540:	e080      	b.n	800e644 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800e542:	4b44      	ldr	r3, [pc, #272]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d108      	bne.n	800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800e54e:	4b41      	ldr	r3, [pc, #260]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e550:	685b      	ldr	r3, [r3, #4]
 800e552:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e556:	4a40      	ldr	r2, [pc, #256]	; (800e658 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800e558:	fbb2 f3f3 	udiv	r3, r2, r3
 800e55c:	613b      	str	r3, [r7, #16]
 800e55e:	e007      	b.n	800e570 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800e560:	4b3c      	ldr	r3, [pc, #240]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e568:	4a3c      	ldr	r2, [pc, #240]	; (800e65c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800e56a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e56e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800e570:	4b38      	ldr	r3, [pc, #224]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e576:	0e1b      	lsrs	r3, r3, #24
 800e578:	f003 030f 	and.w	r3, r3, #15
 800e57c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800e57e:	4b35      	ldr	r3, [pc, #212]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e584:	099b      	lsrs	r3, r3, #6
 800e586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e58a:	693a      	ldr	r2, [r7, #16]
 800e58c:	fb02 f203 	mul.w	r2, r2, r3
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	fbb2 f3f3 	udiv	r3, r2, r3
 800e596:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800e598:	4b2e      	ldr	r3, [pc, #184]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e59a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e59e:	0a1b      	lsrs	r3, r3, #8
 800e5a0:	f003 031f 	and.w	r3, r3, #31
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800e5a8:	697a      	ldr	r2, [r7, #20]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5b0:	617b      	str	r3, [r7, #20]
        break;
 800e5b2:	e047      	b.n	800e644 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800e5b4:	4b27      	ldr	r3, [pc, #156]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e5b6:	685b      	ldr	r3, [r3, #4]
 800e5b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d108      	bne.n	800e5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800e5c0:	4b24      	ldr	r3, [pc, #144]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5c8:	4a23      	ldr	r2, [pc, #140]	; (800e658 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800e5ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5ce:	613b      	str	r3, [r7, #16]
 800e5d0:	e007      	b.n	800e5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800e5d2:	4b20      	ldr	r3, [pc, #128]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e5d4:	685b      	ldr	r3, [r3, #4]
 800e5d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5da:	4a20      	ldr	r2, [pc, #128]	; (800e65c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800e5dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5e0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800e5e2:	4b1c      	ldr	r3, [pc, #112]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e5e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5e8:	0e1b      	lsrs	r3, r3, #24
 800e5ea:	f003 030f 	and.w	r3, r3, #15
 800e5ee:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800e5f0:	4b18      	ldr	r3, [pc, #96]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e5f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5f6:	099b      	lsrs	r3, r3, #6
 800e5f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5fc:	693a      	ldr	r2, [r7, #16]
 800e5fe:	fb02 f203 	mul.w	r2, r2, r3
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	fbb2 f3f3 	udiv	r3, r2, r3
 800e608:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800e60a:	4b12      	ldr	r3, [pc, #72]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e60c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e610:	f003 031f 	and.w	r3, r3, #31
 800e614:	3301      	adds	r3, #1
 800e616:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800e618:	697a      	ldr	r2, [r7, #20]
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e620:	617b      	str	r3, [r7, #20]
        break;
 800e622:	e00f      	b.n	800e644 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        frequency = EXTERNAL_CLOCK_VALUE;
 800e624:	4b0e      	ldr	r3, [pc, #56]	; (800e660 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800e626:	617b      	str	r3, [r7, #20]
        break;
 800e628:	e00c      	b.n	800e644 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800e62a:	4b0a      	ldr	r3, [pc, #40]	; (800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e632:	2b00      	cmp	r3, #0
 800e634:	d102      	bne.n	800e63c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
          frequency = HSI_VALUE;
 800e636:	4b08      	ldr	r3, [pc, #32]	; (800e658 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800e638:	617b      	str	r3, [r7, #20]
        break;
 800e63a:	e003      	b.n	800e644 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
          frequency = HSE_VALUE;
 800e63c:	4b07      	ldr	r3, [pc, #28]	; (800e65c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800e63e:	617b      	str	r3, [r7, #20]
        break;
 800e640:	e000      	b.n	800e644 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
      }
    }
  }
 800e642:	bf00      	nop

  return frequency;
 800e644:	697b      	ldr	r3, [r7, #20]
}
 800e646:	4618      	mov	r0, r3
 800e648:	371c      	adds	r7, #28
 800e64a:	46bd      	mov	sp, r7
 800e64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e650:	4770      	bx	lr
 800e652:	bf00      	nop
 800e654:	40023800 	.word	0x40023800
 800e658:	00f42400 	.word	0x00f42400
 800e65c:	017d7840 	.word	0x017d7840
 800e660:	00bb8000 	.word	0x00bb8000

0800e664 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b088      	sub	sp, #32
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800e66c:	2300      	movs	r3, #0
 800e66e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800e670:	2300      	movs	r3, #0
 800e672:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800e674:	2300      	movs	r3, #0
 800e676:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d101      	bne.n	800e682 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800e67e:	2301      	movs	r3, #1
 800e680:	e149      	b.n	800e916 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e688:	b2db      	uxtb	r3, r3
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d106      	bne.n	800e69c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2200      	movs	r2, #0
 800e692:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f7f9 fcb6 	bl	8008008 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2202      	movs	r2, #2
 800e6a0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f000 fac9 	bl	800ec3c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	68db      	ldr	r3, [r3, #12]
 800e6ae:	2b01      	cmp	r3, #1
 800e6b0:	d007      	beq.n	800e6c2 <HAL_SAI_Init+0x5e>
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d302      	bcc.n	800e6bc <HAL_SAI_Init+0x58>
 800e6b6:	2b02      	cmp	r3, #2
 800e6b8:	d006      	beq.n	800e6c8 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800e6ba:	e008      	b.n	800e6ce <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	61fb      	str	r3, [r7, #28]
      break;
 800e6c0:	e005      	b.n	800e6ce <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800e6c2:	2310      	movs	r3, #16
 800e6c4:	61fb      	str	r3, [r7, #28]
      break;
 800e6c6:	e002      	b.n	800e6ce <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800e6c8:	2320      	movs	r3, #32
 800e6ca:	61fb      	str	r3, [r7, #28]
      break;
 800e6cc:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	689b      	ldr	r3, [r3, #8]
 800e6d2:	2b03      	cmp	r3, #3
 800e6d4:	d81d      	bhi.n	800e712 <HAL_SAI_Init+0xae>
 800e6d6:	a201      	add	r2, pc, #4	; (adr r2, 800e6dc <HAL_SAI_Init+0x78>)
 800e6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6dc:	0800e6ed 	.word	0x0800e6ed
 800e6e0:	0800e6f3 	.word	0x0800e6f3
 800e6e4:	0800e6fb 	.word	0x0800e6fb
 800e6e8:	0800e703 	.word	0x0800e703
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	617b      	str	r3, [r7, #20]
      }
      break;
 800e6f0:	e010      	b.n	800e714 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800e6f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6f6:	617b      	str	r3, [r7, #20]
      }
      break;
 800e6f8:	e00c      	b.n	800e714 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800e6fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e6fe:	617b      	str	r3, [r7, #20]
      }
      break;
 800e700:	e008      	b.n	800e714 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800e702:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e706:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800e708:	69fb      	ldr	r3, [r7, #28]
 800e70a:	f043 0301 	orr.w	r3, r3, #1
 800e70e:	61fb      	str	r3, [r7, #28]
      }
      break;
 800e710:	e000      	b.n	800e714 <HAL_SAI_Init+0xb0>
  default:
    break;
 800e712:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4a81      	ldr	r2, [pc, #516]	; (800e920 <HAL_SAI_Init+0x2bc>)
 800e71a:	4293      	cmp	r3, r2
 800e71c:	d004      	beq.n	800e728 <HAL_SAI_Init+0xc4>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	4a80      	ldr	r2, [pc, #512]	; (800e924 <HAL_SAI_Init+0x2c0>)
 800e724:	4293      	cmp	r3, r2
 800e726:	d103      	bne.n	800e730 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800e728:	4a7f      	ldr	r2, [pc, #508]	; (800e928 <HAL_SAI_Init+0x2c4>)
 800e72a:	69fb      	ldr	r3, [r7, #28]
 800e72c:	6013      	str	r3, [r2, #0]
 800e72e:	e002      	b.n	800e736 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800e730:	4a7e      	ldr	r2, [pc, #504]	; (800e92c <HAL_SAI_Init+0x2c8>)
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	69db      	ldr	r3, [r3, #28]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d043      	beq.n	800e7c6 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800e73e:	2300      	movs	r3, #0
 800e740:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	4a76      	ldr	r2, [pc, #472]	; (800e920 <HAL_SAI_Init+0x2bc>)
 800e748:	4293      	cmp	r3, r2
 800e74a:	d004      	beq.n	800e756 <HAL_SAI_Init+0xf2>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	4a74      	ldr	r2, [pc, #464]	; (800e924 <HAL_SAI_Init+0x2c0>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d104      	bne.n	800e760 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800e756:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800e75a:	f7ff fe29 	bl	800e3b0 <HAL_RCCEx_GetPeriphCLKFreq>
 800e75e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4a72      	ldr	r2, [pc, #456]	; (800e930 <HAL_SAI_Init+0x2cc>)
 800e766:	4293      	cmp	r3, r2
 800e768:	d004      	beq.n	800e774 <HAL_SAI_Init+0x110>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	4a71      	ldr	r2, [pc, #452]	; (800e934 <HAL_SAI_Init+0x2d0>)
 800e770:	4293      	cmp	r3, r2
 800e772:	d104      	bne.n	800e77e <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800e774:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e778:	f7ff fe1a 	bl	800e3b0 <HAL_RCCEx_GetPeriphCLKFreq>
 800e77c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800e77e:	693a      	ldr	r2, [r7, #16]
 800e780:	4613      	mov	r3, r2
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	4413      	add	r3, r2
 800e786:	005b      	lsls	r3, r3, #1
 800e788:	461a      	mov	r2, r3
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	69db      	ldr	r3, [r3, #28]
 800e78e:	025b      	lsls	r3, r3, #9
 800e790:	fbb2 f3f3 	udiv	r3, r2, r3
 800e794:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	4a67      	ldr	r2, [pc, #412]	; (800e938 <HAL_SAI_Init+0x2d4>)
 800e79a:	fba2 2303 	umull	r2, r3, r2, r3
 800e79e:	08da      	lsrs	r2, r3, #3
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 800e7a4:	68f9      	ldr	r1, [r7, #12]
 800e7a6:	4b64      	ldr	r3, [pc, #400]	; (800e938 <HAL_SAI_Init+0x2d4>)
 800e7a8:	fba3 2301 	umull	r2, r3, r3, r1
 800e7ac:	08da      	lsrs	r2, r3, #3
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	009b      	lsls	r3, r3, #2
 800e7b2:	4413      	add	r3, r2
 800e7b4:	005b      	lsls	r3, r3, #1
 800e7b6:	1aca      	subs	r2, r1, r3
 800e7b8:	2a08      	cmp	r2, #8
 800e7ba:	d904      	bls.n	800e7c6 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6a1b      	ldr	r3, [r3, #32]
 800e7c0:	1c5a      	adds	r2, r3, #1
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	685b      	ldr	r3, [r3, #4]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d003      	beq.n	800e7d6 <HAL_SAI_Init+0x172>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	2b02      	cmp	r3, #2
 800e7d4:	d109      	bne.n	800e7ea <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	d101      	bne.n	800e7e2 <HAL_SAI_Init+0x17e>
 800e7de:	2300      	movs	r3, #0
 800e7e0:	e001      	b.n	800e7e6 <HAL_SAI_Init+0x182>
 800e7e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e7e6:	61bb      	str	r3, [r7, #24]
 800e7e8:	e008      	b.n	800e7fc <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d102      	bne.n	800e7f8 <HAL_SAI_Init+0x194>
 800e7f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e7f6:	e000      	b.n	800e7fa <HAL_SAI_Init+0x196>
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	6819      	ldr	r1, [r3, #0]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	4b4d      	ldr	r3, [pc, #308]	; (800e93c <HAL_SAI_Init+0x2d8>)
 800e808:	400b      	ands	r3, r1
 800e80a:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	6819      	ldr	r1, [r3, #0]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	685a      	ldr	r2, [r3, #4]
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e81a:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e820:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e826:	431a      	orrs	r2, r3
 800e828:	69bb      	ldr	r3, [r7, #24]
 800e82a:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 800e834:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	691b      	ldr	r3, [r3, #16]
 800e83a:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e840:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6a1b      	ldr	r3, [r3, #32]
 800e846:	051b      	lsls	r3, r3, #20
 800e848:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	430a      	orrs	r2, r1
 800e850:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	6859      	ldr	r1, [r3, #4]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	4b38      	ldr	r3, [pc, #224]	; (800e940 <HAL_SAI_Init+0x2dc>)
 800e85e:	400b      	ands	r3, r1
 800e860:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	6859      	ldr	r1, [r3, #4]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	699a      	ldr	r2, [r3, #24]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e870:	431a      	orrs	r2, r3
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e876:	431a      	orrs	r2, r3
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	430a      	orrs	r2, r1
 800e87e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	6899      	ldr	r1, [r3, #8]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681a      	ldr	r2, [r3, #0]
 800e88a:	4b2e      	ldr	r3, [pc, #184]	; (800e944 <HAL_SAI_Init+0x2e0>)
 800e88c:	400b      	ands	r3, r1
 800e88e:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	6899      	ldr	r1, [r3, #8]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e89a:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800e8a0:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800e8a6:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 800e8ac:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8b2:	3b01      	subs	r3, #1
 800e8b4:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 800e8b6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	430a      	orrs	r2, r1
 800e8be:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	68d9      	ldr	r1, [r3, #12]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681a      	ldr	r2, [r3, #0]
 800e8ca:	f24f 0320 	movw	r3, #61472	; 0xf020
 800e8ce:	400b      	ands	r3, r1
 800e8d0:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	68d9      	ldr	r1, [r3, #12]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8e0:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e8e6:	041b      	lsls	r3, r3, #16
 800e8e8:	431a      	orrs	r2, r3
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8ee:	3b01      	subs	r3, #1
 800e8f0:	021b      	lsls	r3, r3, #8
 800e8f2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	430a      	orrs	r2, r1
 800e8fa:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2200      	movs	r2, #0
 800e900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2201      	movs	r2, #1
 800e908:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2200      	movs	r2, #0
 800e910:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e914:	2300      	movs	r3, #0
}
 800e916:	4618      	mov	r0, r3
 800e918:	3720      	adds	r7, #32
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	40015804 	.word	0x40015804
 800e924:	40015824 	.word	0x40015824
 800e928:	40015800 	.word	0x40015800
 800e92c:	40015c00 	.word	0x40015c00
 800e930:	40015c04 	.word	0x40015c04
 800e934:	40015c24 	.word	0x40015c24
 800e938:	cccccccd 	.word	0xcccccccd
 800e93c:	ff05c010 	.word	0xff05c010
 800e940:	ffff1ff0 	.word	0xffff1ff0
 800e944:	fff88000 	.word	0xfff88000

0800e948 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d101      	bne.n	800e95a <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800e956:	2301      	movs	r3, #1
 800e958:	e027      	b.n	800e9aa <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2202      	movs	r2, #2
 800e95e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	2200      	movs	r2, #0
 800e968:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e972:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f000 f961 	bl	800ec3c <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	685a      	ldr	r2, [r3, #4]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	f042 0208 	orr.w	r2, r2, #8
 800e988:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f7f9 fbb4 	bl	80080f8 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2200      	movs	r2, #0
 800e994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2200      	movs	r2, #0
 800e99c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e9a8:	2300      	movs	r3, #0
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3708      	adds	r7, #8
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}

0800e9b2 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800e9b2:	b580      	push	{r7, lr}
 800e9b4:	b084      	sub	sp, #16
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	d101      	bne.n	800e9cc <HAL_SAI_DMAStop+0x1a>
 800e9c8:	2302      	movs	r3, #2
 800e9ca:	e061      	b.n	800ea90 <HAL_SAI_DMAStop+0xde>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2201      	movs	r2, #1
 800e9d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	681a      	ldr	r2, [r3, #0]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e9e2:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d01c      	beq.n	800ea26 <HAL_SAI_DMAStop+0x74>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e9f2:	b2db      	uxtb	r3, r3
 800e9f4:	2b12      	cmp	r3, #18
 800e9f6:	d116      	bne.n	800ea26 <HAL_SAI_DMAStop+0x74>
  {
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7fd f863 	bl	800bac8 <HAL_DMA_Abort>
 800ea02:	4603      	mov	r3, r0
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d00e      	beq.n	800ea26 <HAL_SAI_DMAStop+0x74>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if(hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea0e:	2b80      	cmp	r3, #128	; 0x80
 800ea10:	d009      	beq.n	800ea26 <HAL_SAI_DMAStop+0x74>
      {
        status = HAL_ERROR;
 800ea12:	2301      	movs	r3, #1
 800ea14:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea1c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d01c      	beq.n	800ea68 <HAL_SAI_DMAStop+0xb6>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ea34:	b2db      	uxtb	r3, r3
 800ea36:	2b22      	cmp	r3, #34	; 0x22
 800ea38:	d116      	bne.n	800ea68 <HAL_SAI_DMAStop+0xb6>
  {
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f7fd f842 	bl	800bac8 <HAL_DMA_Abort>
 800ea44:	4603      	mov	r3, r0
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d00e      	beq.n	800ea68 <HAL_SAI_DMAStop+0xb6>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if(hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea50:	2b80      	cmp	r3, #128	; 0x80
 800ea52:	d009      	beq.n	800ea68 <HAL_SAI_DMAStop+0xb6>
      {
        status = HAL_ERROR;
 800ea54:	2301      	movs	r3, #1
 800ea56:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea5e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f000 f8e7 	bl	800ec3c <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	685a      	ldr	r2, [r3, #4]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f042 0208 	orr.w	r2, r2, #8
 800ea7c:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2201      	movs	r2, #1
 800ea82:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 800ea8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3710      	adds	r7, #16
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	60f8      	str	r0, [r7, #12]
 800eaa0:	60b9      	str	r1, [r7, #8]
 800eaa2:	4613      	mov	r3, r2
 800eaa4:	80fb      	strh	r3, [r7, #6]

  if((pData == NULL) || (Size == 0))
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d002      	beq.n	800eab2 <HAL_SAI_Receive_DMA+0x1a>
 800eaac:	88fb      	ldrh	r3, [r7, #6]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d101      	bne.n	800eab6 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800eab2:	2301      	movs	r3, #1
 800eab4:	e074      	b.n	800eba0 <HAL_SAI_Receive_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800eabc:	b2db      	uxtb	r3, r3
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d16d      	bne.n	800eb9e <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800eac8:	2b01      	cmp	r3, #1
 800eaca:	d101      	bne.n	800ead0 <HAL_SAI_Receive_DMA+0x38>
 800eacc:	2302      	movs	r3, #2
 800eace:	e067      	b.n	800eba0 <HAL_SAI_Receive_DMA+0x108>
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2201      	movs	r2, #1
 800ead4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	68ba      	ldr	r2, [r7, #8]
 800eadc:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	88fa      	ldrh	r2, [r7, #6]
 800eae2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	88fa      	ldrh	r2, [r7, #6]
 800eaea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2222      	movs	r2, #34	; 0x22
 800eafa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb02:	4a29      	ldr	r2, [pc, #164]	; (800eba8 <HAL_SAI_Receive_DMA+0x110>)
 800eb04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb0a:	4a28      	ldr	r2, [pc, #160]	; (800ebac <HAL_SAI_Receive_DMA+0x114>)
 800eb0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb12:	4a27      	ldr	r2, [pc, #156]	; (800ebb0 <HAL_SAI_Receive_DMA+0x118>)
 800eb14:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	331c      	adds	r3, #28
 800eb28:	4619      	mov	r1, r3
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb2e:	461a      	mov	r2, r3
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800eb36:	f7fc ff67 	bl	800ba08 <HAL_DMA_Start_IT>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d005      	beq.n	800eb4c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2200      	movs	r2, #0
 800eb44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800eb48:	2301      	movs	r3, #1
 800eb4a:	e029      	b.n	800eba0 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d107      	bne.n	800eb6a <HAL_SAI_Receive_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	681a      	ldr	r2, [r3, #0]
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800eb68:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800eb6a:	2100      	movs	r1, #0
 800eb6c:	68f8      	ldr	r0, [r7, #12]
 800eb6e:	f000 f82f 	bl	800ebd0 <SAI_InterruptFlag>
 800eb72:	4601      	mov	r1, r0
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	691a      	ldr	r2, [r3, #16]
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	430a      	orrs	r2, r1
 800eb80:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	681a      	ldr	r2, [r3, #0]
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800eb90:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	2200      	movs	r2, #0
 800eb96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	e000      	b.n	800eba0 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800eb9e:	2302      	movs	r3, #2
  }
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3710      	adds	r7, #16
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}
 800eba8:	0800ed0d 	.word	0x0800ed0d
 800ebac:	0800eca9 	.word	0x0800eca9
 800ebb0:	0800ed29 	.word	0x0800ed29

0800ebb4 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b083      	sub	sp, #12
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ebc2:	b2db      	uxtb	r3, r3
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	370c      	adds	r7, #12
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr

0800ebd0 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b085      	sub	sp, #20
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800ebda:	2301      	movs	r3, #1
 800ebdc:	60fb      	str	r3, [r7, #12]

  if(mode == SAI_MODE_IT)
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d103      	bne.n	800ebec <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f043 0308 	orr.w	r3, r3, #8
 800ebea:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebf0:	2b08      	cmp	r3, #8
 800ebf2:	d10b      	bne.n	800ec0c <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ebf8:	2b03      	cmp	r3, #3
 800ebfa:	d003      	beq.n	800ec04 <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	2b01      	cmp	r3, #1
 800ec02:	d103      	bne.n	800ec0c <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f043 0310 	orr.w	r3, r3, #16
 800ec0a:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	685b      	ldr	r3, [r3, #4]
 800ec10:	2b03      	cmp	r3, #3
 800ec12:	d003      	beq.n	800ec1c <SAI_InterruptFlag+0x4c>
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	2b02      	cmp	r3, #2
 800ec1a:	d104      	bne.n	800ec26 <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ec22:	60fb      	str	r3, [r7, #12]
 800ec24:	e003      	b.n	800ec2e <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f043 0304 	orr.w	r3, r3, #4
 800ec2c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3714      	adds	r7, #20
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr

0800ec3c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ec3c:	b490      	push	{r4, r7}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800ec44:	4b16      	ldr	r3, [pc, #88]	; (800eca0 <SAI_Disable+0x64>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4a16      	ldr	r2, [pc, #88]	; (800eca4 <SAI_Disable+0x68>)
 800ec4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ec4e:	0b1b      	lsrs	r3, r3, #12
 800ec50:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800ec52:	2300      	movs	r3, #0
 800ec54:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	681a      	ldr	r2, [r3, #0]
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ec64:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800ec66:	4623      	mov	r3, r4
 800ec68:	1e5c      	subs	r4, r3, #1
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d10a      	bne.n	800ec84 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800ec7e:	2303      	movs	r3, #3
 800ec80:	73fb      	strb	r3, [r7, #15]
      break;
 800ec82:	e006      	b.n	800ec92 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d1e9      	bne.n	800ec66 <SAI_Disable+0x2a>

  return status;
 800ec92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3710      	adds	r7, #16
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bc90      	pop	{r4, r7}
 800ec9c:	4770      	bx	lr
 800ec9e:	bf00      	nop
 800eca0:	20000000 	.word	0x20000000
 800eca4:	95cbec1b 	.word	0x95cbec1b

0800eca8 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecb4:	60fb      	str	r3, [r7, #12]

 if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d11c      	bne.n	800ecfe <SAI_DMARxCplt+0x56>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ecd2:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ecdc:	2100      	movs	r1, #0
 800ecde:	68f8      	ldr	r0, [r7, #12]
 800ece0:	f7ff ff76 	bl	800ebd0 <SAI_InterruptFlag>
 800ece4:	4603      	mov	r3, r0
 800ece6:	43d9      	mvns	r1, r3
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	691a      	ldr	r2, [r3, #16]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	400a      	ands	r2, r1
 800ecf4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2201      	movs	r2, #1
 800ecfa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800ecfe:	68f8      	ldr	r0, [r7, #12]
 800ed00:	f002 f9e2 	bl	80110c8 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ed04:	bf00      	nop
 800ed06:	3710      	adds	r7, #16
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b084      	sub	sp, #16
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed18:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800ed1a:	68f8      	ldr	r0, [r7, #12]
 800ed1c:	f002 f9ca 	bl	80110b4 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ed20:	bf00      	nop
 800ed22:	3710      	adds	r7, #16
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}

0800ed28 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b084      	sub	sp, #16
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed34:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	d004      	beq.n	800ed5a <SAI_DMAError+0x32>
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed56:	2b01      	cmp	r3, #1
 800ed58:	d112      	bne.n	800ed80 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	681a      	ldr	r2, [r3, #0]
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ed68:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800ed6a:	68f8      	ldr	r0, [r7, #12]
 800ed6c:	f7ff ff66 	bl	800ec3c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2201      	movs	r2, #1
 800ed74:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800ed80:	68f8      	ldr	r0, [r7, #12]
 800ed82:	f001 f949 	bl	8010018 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ed86:	bf00      	nop
 800ed88:	3710      	adds	r7, #16
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}

0800ed8e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800ed8e:	b580      	push	{r7, lr}
 800ed90:	b082      	sub	sp, #8
 800ed92:	af00      	add	r7, sp, #0
 800ed94:	6078      	str	r0, [r7, #4]
 800ed96:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d101      	bne.n	800eda2 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ed9e:	2301      	movs	r3, #1
 800eda0:	e025      	b.n	800edee <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d106      	bne.n	800edbc <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2200      	movs	r2, #0
 800edb2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f000 f81d 	bl	800edf6 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2202      	movs	r2, #2
 800edc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681a      	ldr	r2, [r3, #0]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	3304      	adds	r3, #4
 800edcc:	4619      	mov	r1, r3
 800edce:	4610      	mov	r0, r2
 800edd0:	f000 fd04 	bl	800f7dc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6818      	ldr	r0, [r3, #0]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	461a      	mov	r2, r3
 800edde:	6839      	ldr	r1, [r7, #0]
 800ede0:	f000 fd6e 	bl	800f8c0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2201      	movs	r2, #1
 800ede8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800edec:	2300      	movs	r3, #0
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3708      	adds	r7, #8
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}

0800edf6 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800edf6:	b480      	push	{r7}
 800edf8:	b083      	sub	sp, #12
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 800edfe:	bf00      	nop
 800ee00:	370c      	adds	r7, #12
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr

0800ee0a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ee0a:	b580      	push	{r7, lr}
 800ee0c:	b084      	sub	sp, #16
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	60f8      	str	r0, [r7, #12]
 800ee12:	60b9      	str	r1, [r7, #8]
 800ee14:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ee1c:	b2db      	uxtb	r3, r3
 800ee1e:	2b02      	cmp	r3, #2
 800ee20:	d101      	bne.n	800ee26 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800ee22:	2302      	movs	r3, #2
 800ee24:	e018      	b.n	800ee58 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2202      	movs	r2, #2
 800ee2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	687a      	ldr	r2, [r7, #4]
 800ee34:	68b9      	ldr	r1, [r7, #8]
 800ee36:	4618      	mov	r0, r3
 800ee38:	f000 fdc2 	bl	800f9c0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	2b02      	cmp	r3, #2
 800ee42:	d104      	bne.n	800ee4e <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	2205      	movs	r2, #5
 800ee48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800ee4c:	e003      	b.n	800ee56 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	2201      	movs	r2, #1
 800ee52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800ee56:	2300      	movs	r3, #0
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3710      	adds	r7, #16
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ee70:	b2db      	uxtb	r3, r3
 800ee72:	2b02      	cmp	r3, #2
 800ee74:	d101      	bne.n	800ee7a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800ee76:	2302      	movs	r3, #2
 800ee78:	e00e      	b.n	800ee98 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2202      	movs	r2, #2
 800ee7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	6839      	ldr	r1, [r7, #0]
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f000 fdba 	bl	800fa02 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2201      	movs	r2, #1
 800ee92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800ee96:	2300      	movs	r3, #0
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	3708      	adds	r7, #8
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}

0800eea0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d101      	bne.n	800eeb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eeae:	2301      	movs	r3, #1
 800eeb0:	e040      	b.n	800ef34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d106      	bne.n	800eec8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2200      	movs	r2, #0
 800eebe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f7f9 f84a 	bl	8007f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2224      	movs	r2, #36	; 0x24
 800eecc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	681a      	ldr	r2, [r3, #0]
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	f022 0201 	bic.w	r2, r2, #1
 800eedc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f000 f8be 	bl	800f060 <UART_SetConfig>
 800eee4:	4603      	mov	r3, r0
 800eee6:	2b01      	cmp	r3, #1
 800eee8:	d101      	bne.n	800eeee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800eeea:	2301      	movs	r3, #1
 800eeec:	e022      	b.n	800ef34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d002      	beq.n	800eefc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f000 fb56 	bl	800f5a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	685a      	ldr	r2, [r3, #4]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ef0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	689a      	ldr	r2, [r3, #8]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ef1a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	681a      	ldr	r2, [r3, #0]
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	f042 0201 	orr.w	r2, r2, #1
 800ef2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f000 fbdd 	bl	800f6ec <UART_CheckIdleState>
 800ef32:	4603      	mov	r3, r0
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	3708      	adds	r7, #8
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b08a      	sub	sp, #40	; 0x28
 800ef40:	af02      	add	r7, sp, #8
 800ef42:	60f8      	str	r0, [r7, #12]
 800ef44:	60b9      	str	r1, [r7, #8]
 800ef46:	603b      	str	r3, [r7, #0]
 800ef48:	4613      	mov	r3, r2
 800ef4a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef50:	2b20      	cmp	r3, #32
 800ef52:	d17f      	bne.n	800f054 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d002      	beq.n	800ef60 <HAL_UART_Transmit+0x24>
 800ef5a:	88fb      	ldrh	r3, [r7, #6]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d101      	bne.n	800ef64 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ef60:	2301      	movs	r3, #1
 800ef62:	e078      	b.n	800f056 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ef6a:	2b01      	cmp	r3, #1
 800ef6c:	d101      	bne.n	800ef72 <HAL_UART_Transmit+0x36>
 800ef6e:	2302      	movs	r3, #2
 800ef70:	e071      	b.n	800f056 <HAL_UART_Transmit+0x11a>
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	2201      	movs	r2, #1
 800ef76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2221      	movs	r2, #33	; 0x21
 800ef84:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800ef86:	f7fb fe41 	bl	800ac0c <HAL_GetTick>
 800ef8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	88fa      	ldrh	r2, [r7, #6]
 800ef90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	88fa      	ldrh	r2, [r7, #6]
 800ef98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	689b      	ldr	r3, [r3, #8]
 800efa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efa4:	d108      	bne.n	800efb8 <HAL_UART_Transmit+0x7c>
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	691b      	ldr	r3, [r3, #16]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d104      	bne.n	800efb8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800efae:	2300      	movs	r3, #0
 800efb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	61bb      	str	r3, [r7, #24]
 800efb6:	e003      	b.n	800efc0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800efbc:	2300      	movs	r3, #0
 800efbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800efc0:	e02c      	b.n	800f01c <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	9300      	str	r3, [sp, #0]
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	2200      	movs	r2, #0
 800efca:	2180      	movs	r1, #128	; 0x80
 800efcc:	68f8      	ldr	r0, [r7, #12]
 800efce:	f000 fbbc 	bl	800f74a <UART_WaitOnFlagUntilTimeout>
 800efd2:	4603      	mov	r3, r0
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d001      	beq.n	800efdc <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 800efd8:	2303      	movs	r3, #3
 800efda:	e03c      	b.n	800f056 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800efdc:	69fb      	ldr	r3, [r7, #28]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d10b      	bne.n	800effa <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800efe2:	69bb      	ldr	r3, [r7, #24]
 800efe4:	881b      	ldrh	r3, [r3, #0]
 800efe6:	461a      	mov	r2, r3
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eff0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800eff2:	69bb      	ldr	r3, [r7, #24]
 800eff4:	3302      	adds	r3, #2
 800eff6:	61bb      	str	r3, [r7, #24]
 800eff8:	e007      	b.n	800f00a <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800effa:	69fb      	ldr	r3, [r7, #28]
 800effc:	781a      	ldrb	r2, [r3, #0]
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f004:	69fb      	ldr	r3, [r7, #28]
 800f006:	3301      	adds	r3, #1
 800f008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f010:	b29b      	uxth	r3, r3
 800f012:	3b01      	subs	r3, #1
 800f014:	b29a      	uxth	r2, r3
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f022:	b29b      	uxth	r3, r3
 800f024:	2b00      	cmp	r3, #0
 800f026:	d1cc      	bne.n	800efc2 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	9300      	str	r3, [sp, #0]
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	2200      	movs	r2, #0
 800f030:	2140      	movs	r1, #64	; 0x40
 800f032:	68f8      	ldr	r0, [r7, #12]
 800f034:	f000 fb89 	bl	800f74a <UART_WaitOnFlagUntilTimeout>
 800f038:	4603      	mov	r3, r0
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d001      	beq.n	800f042 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 800f03e:	2303      	movs	r3, #3
 800f040:	e009      	b.n	800f056 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2220      	movs	r2, #32
 800f046:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2200      	movs	r2, #0
 800f04c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800f050:	2300      	movs	r3, #0
 800f052:	e000      	b.n	800f056 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800f054:	2302      	movs	r3, #2
  }
}
 800f056:	4618      	mov	r0, r3
 800f058:	3720      	adds	r7, #32
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
	...

0800f060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b088      	sub	sp, #32
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800f068:	2300      	movs	r3, #0
 800f06a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800f06c:	2300      	movs	r3, #0
 800f06e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	689a      	ldr	r2, [r3, #8]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	691b      	ldr	r3, [r3, #16]
 800f078:	431a      	orrs	r2, r3
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	695b      	ldr	r3, [r3, #20]
 800f07e:	431a      	orrs	r2, r3
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	69db      	ldr	r3, [r3, #28]
 800f084:	4313      	orrs	r3, r2
 800f086:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	681a      	ldr	r2, [r3, #0]
 800f08e:	4bb1      	ldr	r3, [pc, #708]	; (800f354 <UART_SetConfig+0x2f4>)
 800f090:	4013      	ands	r3, r2
 800f092:	687a      	ldr	r2, [r7, #4]
 800f094:	6812      	ldr	r2, [r2, #0]
 800f096:	6939      	ldr	r1, [r7, #16]
 800f098:	430b      	orrs	r3, r1
 800f09a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	68da      	ldr	r2, [r3, #12]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	430a      	orrs	r2, r1
 800f0b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	699b      	ldr	r3, [r3, #24]
 800f0b6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6a1b      	ldr	r3, [r3, #32]
 800f0bc:	693a      	ldr	r2, [r7, #16]
 800f0be:	4313      	orrs	r3, r2
 800f0c0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	689b      	ldr	r3, [r3, #8]
 800f0c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	693a      	ldr	r2, [r7, #16]
 800f0d2:	430a      	orrs	r2, r1
 800f0d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	4a9f      	ldr	r2, [pc, #636]	; (800f358 <UART_SetConfig+0x2f8>)
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	d121      	bne.n	800f124 <UART_SetConfig+0xc4>
 800f0e0:	4b9e      	ldr	r3, [pc, #632]	; (800f35c <UART_SetConfig+0x2fc>)
 800f0e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0e6:	f003 0303 	and.w	r3, r3, #3
 800f0ea:	2b03      	cmp	r3, #3
 800f0ec:	d816      	bhi.n	800f11c <UART_SetConfig+0xbc>
 800f0ee:	a201      	add	r2, pc, #4	; (adr r2, 800f0f4 <UART_SetConfig+0x94>)
 800f0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0f4:	0800f105 	.word	0x0800f105
 800f0f8:	0800f111 	.word	0x0800f111
 800f0fc:	0800f10b 	.word	0x0800f10b
 800f100:	0800f117 	.word	0x0800f117
 800f104:	2301      	movs	r3, #1
 800f106:	77fb      	strb	r3, [r7, #31]
 800f108:	e151      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f10a:	2302      	movs	r3, #2
 800f10c:	77fb      	strb	r3, [r7, #31]
 800f10e:	e14e      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f110:	2304      	movs	r3, #4
 800f112:	77fb      	strb	r3, [r7, #31]
 800f114:	e14b      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f116:	2308      	movs	r3, #8
 800f118:	77fb      	strb	r3, [r7, #31]
 800f11a:	e148      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f11c:	2310      	movs	r3, #16
 800f11e:	77fb      	strb	r3, [r7, #31]
 800f120:	bf00      	nop
 800f122:	e144      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	4a8d      	ldr	r2, [pc, #564]	; (800f360 <UART_SetConfig+0x300>)
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d134      	bne.n	800f198 <UART_SetConfig+0x138>
 800f12e:	4b8b      	ldr	r3, [pc, #556]	; (800f35c <UART_SetConfig+0x2fc>)
 800f130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f134:	f003 030c 	and.w	r3, r3, #12
 800f138:	2b0c      	cmp	r3, #12
 800f13a:	d829      	bhi.n	800f190 <UART_SetConfig+0x130>
 800f13c:	a201      	add	r2, pc, #4	; (adr r2, 800f144 <UART_SetConfig+0xe4>)
 800f13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f142:	bf00      	nop
 800f144:	0800f179 	.word	0x0800f179
 800f148:	0800f191 	.word	0x0800f191
 800f14c:	0800f191 	.word	0x0800f191
 800f150:	0800f191 	.word	0x0800f191
 800f154:	0800f185 	.word	0x0800f185
 800f158:	0800f191 	.word	0x0800f191
 800f15c:	0800f191 	.word	0x0800f191
 800f160:	0800f191 	.word	0x0800f191
 800f164:	0800f17f 	.word	0x0800f17f
 800f168:	0800f191 	.word	0x0800f191
 800f16c:	0800f191 	.word	0x0800f191
 800f170:	0800f191 	.word	0x0800f191
 800f174:	0800f18b 	.word	0x0800f18b
 800f178:	2300      	movs	r3, #0
 800f17a:	77fb      	strb	r3, [r7, #31]
 800f17c:	e117      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f17e:	2302      	movs	r3, #2
 800f180:	77fb      	strb	r3, [r7, #31]
 800f182:	e114      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f184:	2304      	movs	r3, #4
 800f186:	77fb      	strb	r3, [r7, #31]
 800f188:	e111      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f18a:	2308      	movs	r3, #8
 800f18c:	77fb      	strb	r3, [r7, #31]
 800f18e:	e10e      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f190:	2310      	movs	r3, #16
 800f192:	77fb      	strb	r3, [r7, #31]
 800f194:	bf00      	nop
 800f196:	e10a      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	4a71      	ldr	r2, [pc, #452]	; (800f364 <UART_SetConfig+0x304>)
 800f19e:	4293      	cmp	r3, r2
 800f1a0:	d120      	bne.n	800f1e4 <UART_SetConfig+0x184>
 800f1a2:	4b6e      	ldr	r3, [pc, #440]	; (800f35c <UART_SetConfig+0x2fc>)
 800f1a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f1ac:	2b10      	cmp	r3, #16
 800f1ae:	d00f      	beq.n	800f1d0 <UART_SetConfig+0x170>
 800f1b0:	2b10      	cmp	r3, #16
 800f1b2:	d802      	bhi.n	800f1ba <UART_SetConfig+0x15a>
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d005      	beq.n	800f1c4 <UART_SetConfig+0x164>
 800f1b8:	e010      	b.n	800f1dc <UART_SetConfig+0x17c>
 800f1ba:	2b20      	cmp	r3, #32
 800f1bc:	d005      	beq.n	800f1ca <UART_SetConfig+0x16a>
 800f1be:	2b30      	cmp	r3, #48	; 0x30
 800f1c0:	d009      	beq.n	800f1d6 <UART_SetConfig+0x176>
 800f1c2:	e00b      	b.n	800f1dc <UART_SetConfig+0x17c>
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	77fb      	strb	r3, [r7, #31]
 800f1c8:	e0f1      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f1ca:	2302      	movs	r3, #2
 800f1cc:	77fb      	strb	r3, [r7, #31]
 800f1ce:	e0ee      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f1d0:	2304      	movs	r3, #4
 800f1d2:	77fb      	strb	r3, [r7, #31]
 800f1d4:	e0eb      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f1d6:	2308      	movs	r3, #8
 800f1d8:	77fb      	strb	r3, [r7, #31]
 800f1da:	e0e8      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f1dc:	2310      	movs	r3, #16
 800f1de:	77fb      	strb	r3, [r7, #31]
 800f1e0:	bf00      	nop
 800f1e2:	e0e4      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	4a5f      	ldr	r2, [pc, #380]	; (800f368 <UART_SetConfig+0x308>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d120      	bne.n	800f230 <UART_SetConfig+0x1d0>
 800f1ee:	4b5b      	ldr	r3, [pc, #364]	; (800f35c <UART_SetConfig+0x2fc>)
 800f1f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f1f8:	2b40      	cmp	r3, #64	; 0x40
 800f1fa:	d00f      	beq.n	800f21c <UART_SetConfig+0x1bc>
 800f1fc:	2b40      	cmp	r3, #64	; 0x40
 800f1fe:	d802      	bhi.n	800f206 <UART_SetConfig+0x1a6>
 800f200:	2b00      	cmp	r3, #0
 800f202:	d005      	beq.n	800f210 <UART_SetConfig+0x1b0>
 800f204:	e010      	b.n	800f228 <UART_SetConfig+0x1c8>
 800f206:	2b80      	cmp	r3, #128	; 0x80
 800f208:	d005      	beq.n	800f216 <UART_SetConfig+0x1b6>
 800f20a:	2bc0      	cmp	r3, #192	; 0xc0
 800f20c:	d009      	beq.n	800f222 <UART_SetConfig+0x1c2>
 800f20e:	e00b      	b.n	800f228 <UART_SetConfig+0x1c8>
 800f210:	2300      	movs	r3, #0
 800f212:	77fb      	strb	r3, [r7, #31]
 800f214:	e0cb      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f216:	2302      	movs	r3, #2
 800f218:	77fb      	strb	r3, [r7, #31]
 800f21a:	e0c8      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f21c:	2304      	movs	r3, #4
 800f21e:	77fb      	strb	r3, [r7, #31]
 800f220:	e0c5      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f222:	2308      	movs	r3, #8
 800f224:	77fb      	strb	r3, [r7, #31]
 800f226:	e0c2      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f228:	2310      	movs	r3, #16
 800f22a:	77fb      	strb	r3, [r7, #31]
 800f22c:	bf00      	nop
 800f22e:	e0be      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4a4d      	ldr	r2, [pc, #308]	; (800f36c <UART_SetConfig+0x30c>)
 800f236:	4293      	cmp	r3, r2
 800f238:	d124      	bne.n	800f284 <UART_SetConfig+0x224>
 800f23a:	4b48      	ldr	r3, [pc, #288]	; (800f35c <UART_SetConfig+0x2fc>)
 800f23c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f248:	d012      	beq.n	800f270 <UART_SetConfig+0x210>
 800f24a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f24e:	d802      	bhi.n	800f256 <UART_SetConfig+0x1f6>
 800f250:	2b00      	cmp	r3, #0
 800f252:	d007      	beq.n	800f264 <UART_SetConfig+0x204>
 800f254:	e012      	b.n	800f27c <UART_SetConfig+0x21c>
 800f256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f25a:	d006      	beq.n	800f26a <UART_SetConfig+0x20a>
 800f25c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f260:	d009      	beq.n	800f276 <UART_SetConfig+0x216>
 800f262:	e00b      	b.n	800f27c <UART_SetConfig+0x21c>
 800f264:	2300      	movs	r3, #0
 800f266:	77fb      	strb	r3, [r7, #31]
 800f268:	e0a1      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f26a:	2302      	movs	r3, #2
 800f26c:	77fb      	strb	r3, [r7, #31]
 800f26e:	e09e      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f270:	2304      	movs	r3, #4
 800f272:	77fb      	strb	r3, [r7, #31]
 800f274:	e09b      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f276:	2308      	movs	r3, #8
 800f278:	77fb      	strb	r3, [r7, #31]
 800f27a:	e098      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f27c:	2310      	movs	r3, #16
 800f27e:	77fb      	strb	r3, [r7, #31]
 800f280:	bf00      	nop
 800f282:	e094      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	4a39      	ldr	r2, [pc, #228]	; (800f370 <UART_SetConfig+0x310>)
 800f28a:	4293      	cmp	r3, r2
 800f28c:	d124      	bne.n	800f2d8 <UART_SetConfig+0x278>
 800f28e:	4b33      	ldr	r3, [pc, #204]	; (800f35c <UART_SetConfig+0x2fc>)
 800f290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f294:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f29c:	d012      	beq.n	800f2c4 <UART_SetConfig+0x264>
 800f29e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f2a2:	d802      	bhi.n	800f2aa <UART_SetConfig+0x24a>
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d007      	beq.n	800f2b8 <UART_SetConfig+0x258>
 800f2a8:	e012      	b.n	800f2d0 <UART_SetConfig+0x270>
 800f2aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f2ae:	d006      	beq.n	800f2be <UART_SetConfig+0x25e>
 800f2b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f2b4:	d009      	beq.n	800f2ca <UART_SetConfig+0x26a>
 800f2b6:	e00b      	b.n	800f2d0 <UART_SetConfig+0x270>
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	77fb      	strb	r3, [r7, #31]
 800f2bc:	e077      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f2be:	2302      	movs	r3, #2
 800f2c0:	77fb      	strb	r3, [r7, #31]
 800f2c2:	e074      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f2c4:	2304      	movs	r3, #4
 800f2c6:	77fb      	strb	r3, [r7, #31]
 800f2c8:	e071      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f2ca:	2308      	movs	r3, #8
 800f2cc:	77fb      	strb	r3, [r7, #31]
 800f2ce:	e06e      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f2d0:	2310      	movs	r3, #16
 800f2d2:	77fb      	strb	r3, [r7, #31]
 800f2d4:	bf00      	nop
 800f2d6:	e06a      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4a25      	ldr	r2, [pc, #148]	; (800f374 <UART_SetConfig+0x314>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d124      	bne.n	800f32c <UART_SetConfig+0x2cc>
 800f2e2:	4b1e      	ldr	r3, [pc, #120]	; (800f35c <UART_SetConfig+0x2fc>)
 800f2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2e8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800f2ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2f0:	d012      	beq.n	800f318 <UART_SetConfig+0x2b8>
 800f2f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2f6:	d802      	bhi.n	800f2fe <UART_SetConfig+0x29e>
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d007      	beq.n	800f30c <UART_SetConfig+0x2ac>
 800f2fc:	e012      	b.n	800f324 <UART_SetConfig+0x2c4>
 800f2fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f302:	d006      	beq.n	800f312 <UART_SetConfig+0x2b2>
 800f304:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f308:	d009      	beq.n	800f31e <UART_SetConfig+0x2be>
 800f30a:	e00b      	b.n	800f324 <UART_SetConfig+0x2c4>
 800f30c:	2300      	movs	r3, #0
 800f30e:	77fb      	strb	r3, [r7, #31]
 800f310:	e04d      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f312:	2302      	movs	r3, #2
 800f314:	77fb      	strb	r3, [r7, #31]
 800f316:	e04a      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f318:	2304      	movs	r3, #4
 800f31a:	77fb      	strb	r3, [r7, #31]
 800f31c:	e047      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f31e:	2308      	movs	r3, #8
 800f320:	77fb      	strb	r3, [r7, #31]
 800f322:	e044      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f324:	2310      	movs	r3, #16
 800f326:	77fb      	strb	r3, [r7, #31]
 800f328:	bf00      	nop
 800f32a:	e040      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	4a11      	ldr	r2, [pc, #68]	; (800f378 <UART_SetConfig+0x318>)
 800f332:	4293      	cmp	r3, r2
 800f334:	d139      	bne.n	800f3aa <UART_SetConfig+0x34a>
 800f336:	4b09      	ldr	r3, [pc, #36]	; (800f35c <UART_SetConfig+0x2fc>)
 800f338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f33c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f340:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f344:	d027      	beq.n	800f396 <UART_SetConfig+0x336>
 800f346:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f34a:	d817      	bhi.n	800f37c <UART_SetConfig+0x31c>
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d01c      	beq.n	800f38a <UART_SetConfig+0x32a>
 800f350:	e027      	b.n	800f3a2 <UART_SetConfig+0x342>
 800f352:	bf00      	nop
 800f354:	efff69f3 	.word	0xefff69f3
 800f358:	40011000 	.word	0x40011000
 800f35c:	40023800 	.word	0x40023800
 800f360:	40004400 	.word	0x40004400
 800f364:	40004800 	.word	0x40004800
 800f368:	40004c00 	.word	0x40004c00
 800f36c:	40005000 	.word	0x40005000
 800f370:	40011400 	.word	0x40011400
 800f374:	40007800 	.word	0x40007800
 800f378:	40007c00 	.word	0x40007c00
 800f37c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f380:	d006      	beq.n	800f390 <UART_SetConfig+0x330>
 800f382:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f386:	d009      	beq.n	800f39c <UART_SetConfig+0x33c>
 800f388:	e00b      	b.n	800f3a2 <UART_SetConfig+0x342>
 800f38a:	2300      	movs	r3, #0
 800f38c:	77fb      	strb	r3, [r7, #31]
 800f38e:	e00e      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f390:	2302      	movs	r3, #2
 800f392:	77fb      	strb	r3, [r7, #31]
 800f394:	e00b      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f396:	2304      	movs	r3, #4
 800f398:	77fb      	strb	r3, [r7, #31]
 800f39a:	e008      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f39c:	2308      	movs	r3, #8
 800f39e:	77fb      	strb	r3, [r7, #31]
 800f3a0:	e005      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f3a2:	2310      	movs	r3, #16
 800f3a4:	77fb      	strb	r3, [r7, #31]
 800f3a6:	bf00      	nop
 800f3a8:	e001      	b.n	800f3ae <UART_SetConfig+0x34e>
 800f3aa:	2310      	movs	r3, #16
 800f3ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	69db      	ldr	r3, [r3, #28]
 800f3b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3b6:	d17c      	bne.n	800f4b2 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800f3b8:	7ffb      	ldrb	r3, [r7, #31]
 800f3ba:	2b08      	cmp	r3, #8
 800f3bc:	d859      	bhi.n	800f472 <UART_SetConfig+0x412>
 800f3be:	a201      	add	r2, pc, #4	; (adr r2, 800f3c4 <UART_SetConfig+0x364>)
 800f3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3c4:	0800f3e9 	.word	0x0800f3e9
 800f3c8:	0800f407 	.word	0x0800f407
 800f3cc:	0800f425 	.word	0x0800f425
 800f3d0:	0800f473 	.word	0x0800f473
 800f3d4:	0800f43d 	.word	0x0800f43d
 800f3d8:	0800f473 	.word	0x0800f473
 800f3dc:	0800f473 	.word	0x0800f473
 800f3e0:	0800f473 	.word	0x0800f473
 800f3e4:	0800f45b 	.word	0x0800f45b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800f3e8:	f7fe fa70 	bl	800d8cc <HAL_RCC_GetPCLK1Freq>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	005a      	lsls	r2, r3, #1
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	685b      	ldr	r3, [r3, #4]
 800f3f4:	085b      	lsrs	r3, r3, #1
 800f3f6:	441a      	add	r2, r3
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f400:	b29b      	uxth	r3, r3
 800f402:	61bb      	str	r3, [r7, #24]
        break;
 800f404:	e038      	b.n	800f478 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800f406:	f7fe fa75 	bl	800d8f4 <HAL_RCC_GetPCLK2Freq>
 800f40a:	4603      	mov	r3, r0
 800f40c:	005a      	lsls	r2, r3, #1
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	085b      	lsrs	r3, r3, #1
 800f414:	441a      	add	r2, r3
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f41e:	b29b      	uxth	r3, r3
 800f420:	61bb      	str	r3, [r7, #24]
        break;
 800f422:	e029      	b.n	800f478 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	085a      	lsrs	r2, r3, #1
 800f42a:	4b5d      	ldr	r3, [pc, #372]	; (800f5a0 <UART_SetConfig+0x540>)
 800f42c:	4413      	add	r3, r2
 800f42e:	687a      	ldr	r2, [r7, #4]
 800f430:	6852      	ldr	r2, [r2, #4]
 800f432:	fbb3 f3f2 	udiv	r3, r3, r2
 800f436:	b29b      	uxth	r3, r3
 800f438:	61bb      	str	r3, [r7, #24]
        break;
 800f43a:	e01d      	b.n	800f478 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800f43c:	f7fe f988 	bl	800d750 <HAL_RCC_GetSysClockFreq>
 800f440:	4603      	mov	r3, r0
 800f442:	005a      	lsls	r2, r3, #1
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	685b      	ldr	r3, [r3, #4]
 800f448:	085b      	lsrs	r3, r3, #1
 800f44a:	441a      	add	r2, r3
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	fbb2 f3f3 	udiv	r3, r2, r3
 800f454:	b29b      	uxth	r3, r3
 800f456:	61bb      	str	r3, [r7, #24]
        break;
 800f458:	e00e      	b.n	800f478 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	685b      	ldr	r3, [r3, #4]
 800f45e:	085b      	lsrs	r3, r3, #1
 800f460:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	685b      	ldr	r3, [r3, #4]
 800f468:	fbb2 f3f3 	udiv	r3, r2, r3
 800f46c:	b29b      	uxth	r3, r3
 800f46e:	61bb      	str	r3, [r7, #24]
        break;
 800f470:	e002      	b.n	800f478 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800f472:	2301      	movs	r3, #1
 800f474:	75fb      	strb	r3, [r7, #23]
        break;
 800f476:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f478:	69bb      	ldr	r3, [r7, #24]
 800f47a:	2b0f      	cmp	r3, #15
 800f47c:	d916      	bls.n	800f4ac <UART_SetConfig+0x44c>
 800f47e:	69bb      	ldr	r3, [r7, #24]
 800f480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f484:	d212      	bcs.n	800f4ac <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f486:	69bb      	ldr	r3, [r7, #24]
 800f488:	b29b      	uxth	r3, r3
 800f48a:	f023 030f 	bic.w	r3, r3, #15
 800f48e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f490:	69bb      	ldr	r3, [r7, #24]
 800f492:	085b      	lsrs	r3, r3, #1
 800f494:	b29b      	uxth	r3, r3
 800f496:	f003 0307 	and.w	r3, r3, #7
 800f49a:	b29a      	uxth	r2, r3
 800f49c:	89fb      	ldrh	r3, [r7, #14]
 800f49e:	4313      	orrs	r3, r2
 800f4a0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	89fa      	ldrh	r2, [r7, #14]
 800f4a8:	60da      	str	r2, [r3, #12]
 800f4aa:	e06e      	b.n	800f58a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	75fb      	strb	r3, [r7, #23]
 800f4b0:	e06b      	b.n	800f58a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800f4b2:	7ffb      	ldrb	r3, [r7, #31]
 800f4b4:	2b08      	cmp	r3, #8
 800f4b6:	d857      	bhi.n	800f568 <UART_SetConfig+0x508>
 800f4b8:	a201      	add	r2, pc, #4	; (adr r2, 800f4c0 <UART_SetConfig+0x460>)
 800f4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4be:	bf00      	nop
 800f4c0:	0800f4e5 	.word	0x0800f4e5
 800f4c4:	0800f501 	.word	0x0800f501
 800f4c8:	0800f51d 	.word	0x0800f51d
 800f4cc:	0800f569 	.word	0x0800f569
 800f4d0:	0800f535 	.word	0x0800f535
 800f4d4:	0800f569 	.word	0x0800f569
 800f4d8:	0800f569 	.word	0x0800f569
 800f4dc:	0800f569 	.word	0x0800f569
 800f4e0:	0800f551 	.word	0x0800f551
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800f4e4:	f7fe f9f2 	bl	800d8cc <HAL_RCC_GetPCLK1Freq>
 800f4e8:	4602      	mov	r2, r0
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	685b      	ldr	r3, [r3, #4]
 800f4ee:	085b      	lsrs	r3, r3, #1
 800f4f0:	441a      	add	r2, r3
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	685b      	ldr	r3, [r3, #4]
 800f4f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4fa:	b29b      	uxth	r3, r3
 800f4fc:	61bb      	str	r3, [r7, #24]
        break;
 800f4fe:	e036      	b.n	800f56e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800f500:	f7fe f9f8 	bl	800d8f4 <HAL_RCC_GetPCLK2Freq>
 800f504:	4602      	mov	r2, r0
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	085b      	lsrs	r3, r3, #1
 800f50c:	441a      	add	r2, r3
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	685b      	ldr	r3, [r3, #4]
 800f512:	fbb2 f3f3 	udiv	r3, r2, r3
 800f516:	b29b      	uxth	r3, r3
 800f518:	61bb      	str	r3, [r7, #24]
        break;
 800f51a:	e028      	b.n	800f56e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	685b      	ldr	r3, [r3, #4]
 800f520:	085a      	lsrs	r2, r3, #1
 800f522:	4b20      	ldr	r3, [pc, #128]	; (800f5a4 <UART_SetConfig+0x544>)
 800f524:	4413      	add	r3, r2
 800f526:	687a      	ldr	r2, [r7, #4]
 800f528:	6852      	ldr	r2, [r2, #4]
 800f52a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f52e:	b29b      	uxth	r3, r3
 800f530:	61bb      	str	r3, [r7, #24]
        break;
 800f532:	e01c      	b.n	800f56e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800f534:	f7fe f90c 	bl	800d750 <HAL_RCC_GetSysClockFreq>
 800f538:	4602      	mov	r2, r0
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	085b      	lsrs	r3, r3, #1
 800f540:	441a      	add	r2, r3
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	685b      	ldr	r3, [r3, #4]
 800f546:	fbb2 f3f3 	udiv	r3, r2, r3
 800f54a:	b29b      	uxth	r3, r3
 800f54c:	61bb      	str	r3, [r7, #24]
        break;
 800f54e:	e00e      	b.n	800f56e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	085b      	lsrs	r3, r3, #1
 800f556:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	685b      	ldr	r3, [r3, #4]
 800f55e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f562:	b29b      	uxth	r3, r3
 800f564:	61bb      	str	r3, [r7, #24]
        break;
 800f566:	e002      	b.n	800f56e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800f568:	2301      	movs	r3, #1
 800f56a:	75fb      	strb	r3, [r7, #23]
        break;
 800f56c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f56e:	69bb      	ldr	r3, [r7, #24]
 800f570:	2b0f      	cmp	r3, #15
 800f572:	d908      	bls.n	800f586 <UART_SetConfig+0x526>
 800f574:	69bb      	ldr	r3, [r7, #24]
 800f576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f57a:	d204      	bcs.n	800f586 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	69ba      	ldr	r2, [r7, #24]
 800f582:	60da      	str	r2, [r3, #12]
 800f584:	e001      	b.n	800f58a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800f586:	2301      	movs	r3, #1
 800f588:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	2200      	movs	r2, #0
 800f58e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2200      	movs	r2, #0
 800f594:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800f596:	7dfb      	ldrb	r3, [r7, #23]
}
 800f598:	4618      	mov	r0, r3
 800f59a:	3720      	adds	r7, #32
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	01e84800 	.word	0x01e84800
 800f5a4:	00f42400 	.word	0x00f42400

0800f5a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	b083      	sub	sp, #12
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b4:	f003 0301 	and.w	r3, r3, #1
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d00a      	beq.n	800f5d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	430a      	orrs	r2, r1
 800f5d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5d6:	f003 0302 	and.w	r3, r3, #2
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d00a      	beq.n	800f5f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	430a      	orrs	r2, r1
 800f5f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5f8:	f003 0304 	and.w	r3, r3, #4
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d00a      	beq.n	800f616 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	685b      	ldr	r3, [r3, #4]
 800f606:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	430a      	orrs	r2, r1
 800f614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f61a:	f003 0308 	and.w	r3, r3, #8
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d00a      	beq.n	800f638 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	430a      	orrs	r2, r1
 800f636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f63c:	f003 0310 	and.w	r3, r3, #16
 800f640:	2b00      	cmp	r3, #0
 800f642:	d00a      	beq.n	800f65a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	689b      	ldr	r3, [r3, #8]
 800f64a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	430a      	orrs	r2, r1
 800f658:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f65e:	f003 0320 	and.w	r3, r3, #32
 800f662:	2b00      	cmp	r3, #0
 800f664:	d00a      	beq.n	800f67c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	689b      	ldr	r3, [r3, #8]
 800f66c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	430a      	orrs	r2, r1
 800f67a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f684:	2b00      	cmp	r3, #0
 800f686:	d01a      	beq.n	800f6be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	685b      	ldr	r3, [r3, #4]
 800f68e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	430a      	orrs	r2, r1
 800f69c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f6a6:	d10a      	bne.n	800f6be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	685b      	ldr	r3, [r3, #4]
 800f6ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	430a      	orrs	r2, r1
 800f6bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d00a      	beq.n	800f6e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	430a      	orrs	r2, r1
 800f6de:	605a      	str	r2, [r3, #4]
  }
}
 800f6e0:	bf00      	nop
 800f6e2:	370c      	adds	r7, #12
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr

0800f6ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b086      	sub	sp, #24
 800f6f0:	af02      	add	r7, sp, #8
 800f6f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800f6fa:	f7fb fa87 	bl	800ac0c <HAL_GetTick>
 800f6fe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	f003 0308 	and.w	r3, r3, #8
 800f70a:	2b08      	cmp	r3, #8
 800f70c:	d10e      	bne.n	800f72c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f70e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f712:	9300      	str	r3, [sp, #0]
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	2200      	movs	r2, #0
 800f718:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f000 f814 	bl	800f74a <UART_WaitOnFlagUntilTimeout>
 800f722:	4603      	mov	r3, r0
 800f724:	2b00      	cmp	r3, #0
 800f726:	d001      	beq.n	800f72c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f728:	2303      	movs	r3, #3
 800f72a:	e00a      	b.n	800f742 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2220      	movs	r2, #32
 800f730:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2220      	movs	r2, #32
 800f736:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2200      	movs	r2, #0
 800f73c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800f740:	2300      	movs	r3, #0
}
 800f742:	4618      	mov	r0, r3
 800f744:	3710      	adds	r7, #16
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}

0800f74a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800f74a:	b580      	push	{r7, lr}
 800f74c:	b084      	sub	sp, #16
 800f74e:	af00      	add	r7, sp, #0
 800f750:	60f8      	str	r0, [r7, #12]
 800f752:	60b9      	str	r1, [r7, #8]
 800f754:	603b      	str	r3, [r7, #0]
 800f756:	4613      	mov	r3, r2
 800f758:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f75a:	e02a      	b.n	800f7b2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f75c:	69bb      	ldr	r3, [r7, #24]
 800f75e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f762:	d026      	beq.n	800f7b2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f764:	f7fb fa52 	bl	800ac0c <HAL_GetTick>
 800f768:	4602      	mov	r2, r0
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	1ad3      	subs	r3, r2, r3
 800f76e:	69ba      	ldr	r2, [r7, #24]
 800f770:	429a      	cmp	r2, r3
 800f772:	d302      	bcc.n	800f77a <UART_WaitOnFlagUntilTimeout+0x30>
 800f774:	69bb      	ldr	r3, [r7, #24]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d11b      	bne.n	800f7b2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	681a      	ldr	r2, [r3, #0]
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f788:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	689a      	ldr	r2, [r3, #8]
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	f022 0201 	bic.w	r2, r2, #1
 800f798:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	2220      	movs	r2, #32
 800f79e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	2220      	movs	r2, #32
 800f7a4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800f7ae:	2303      	movs	r3, #3
 800f7b0:	e00f      	b.n	800f7d2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	69da      	ldr	r2, [r3, #28]
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	4013      	ands	r3, r2
 800f7bc:	68ba      	ldr	r2, [r7, #8]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	bf0c      	ite	eq
 800f7c2:	2301      	moveq	r3, #1
 800f7c4:	2300      	movne	r3, #0
 800f7c6:	b2db      	uxtb	r3, r3
 800f7c8:	461a      	mov	r2, r3
 800f7ca:	79fb      	ldrb	r3, [r7, #7]
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d0c5      	beq.n	800f75c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f7d0:	2300      	movs	r3, #0
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3710      	adds	r7, #16
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}
	...

0800f7dc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800f7dc:	b480      	push	{r7}
 800f7de:	b085      	sub	sp, #20
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	2b01      	cmp	r3, #1
 800f7f4:	d027      	beq.n	800f846 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800f7fc:	68fa      	ldr	r2, [r7, #12]
 800f7fe:	4b2f      	ldr	r3, [pc, #188]	; (800f8bc <FMC_SDRAM_Init+0xe0>)
 800f800:	4013      	ands	r3, r2
 800f802:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f80c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800f812:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800f818:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800f81e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800f824:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800f82a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800f830:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800f836:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f838:	68fa      	ldr	r2, [r7, #12]
 800f83a:	4313      	orrs	r3, r2
 800f83c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	68fa      	ldr	r2, [r7, #12]
 800f842:	601a      	str	r2, [r3, #0]
 800f844:	e032      	b.n	800f8ac <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f852:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800f85c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800f862:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800f864:	68fa      	ldr	r2, [r7, #12]
 800f866:	4313      	orrs	r3, r2
 800f868:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	685b      	ldr	r3, [r3, #4]
 800f86e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800f870:	68ba      	ldr	r2, [r7, #8]
 800f872:	4b12      	ldr	r3, [pc, #72]	; (800f8bc <FMC_SDRAM_Init+0xe0>)
 800f874:	4013      	ands	r3, r2
 800f876:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f880:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800f886:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800f88c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800f892:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800f898:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f89a:	68ba      	ldr	r2, [r7, #8]
 800f89c:	4313      	orrs	r3, r2
 800f89e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	68fa      	ldr	r2, [r7, #12]
 800f8a4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	68ba      	ldr	r2, [r7, #8]
 800f8aa:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800f8ac:	2300      	movs	r3, #0
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3714      	adds	r7, #20
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b8:	4770      	bx	lr
 800f8ba:	bf00      	nop
 800f8bc:	ffff8000 	.word	0xffff8000

0800f8c0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b087      	sub	sp, #28
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	60f8      	str	r0, [r7, #12]
 800f8c8:	60b9      	str	r1, [r7, #8]
 800f8ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2b01      	cmp	r3, #1
 800f8d8:	d02e      	beq.n	800f938 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	689b      	ldr	r3, [r3, #8]
 800f8de:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f8e6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	685b      	ldr	r3, [r3, #4]
 800f8f2:	3b01      	subs	r3, #1
 800f8f4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f8f6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	689b      	ldr	r3, [r3, #8]
 800f8fc:	3b01      	subs	r3, #1
 800f8fe:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800f900:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	68db      	ldr	r3, [r3, #12]
 800f906:	3b01      	subs	r3, #1
 800f908:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800f90a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	691b      	ldr	r3, [r3, #16]
 800f910:	3b01      	subs	r3, #1
 800f912:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800f914:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	695b      	ldr	r3, [r3, #20]
 800f91a:	3b01      	subs	r3, #1
 800f91c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800f91e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	699b      	ldr	r3, [r3, #24]
 800f924:	3b01      	subs	r3, #1
 800f926:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f928:	4313      	orrs	r3, r2
 800f92a:	697a      	ldr	r2, [r7, #20]
 800f92c:	4313      	orrs	r3, r2
 800f92e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	697a      	ldr	r2, [r7, #20]
 800f934:	609a      	str	r2, [r3, #8]
 800f936:	e039      	b.n	800f9ac <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	689b      	ldr	r3, [r3, #8]
 800f93c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800f93e:	697a      	ldr	r2, [r7, #20]
 800f940:	4b1e      	ldr	r3, [pc, #120]	; (800f9bc <FMC_SDRAM_Timing_Init+0xfc>)
 800f942:	4013      	ands	r3, r2
 800f944:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	68db      	ldr	r3, [r3, #12]
 800f94a:	3b01      	subs	r3, #1
 800f94c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	695b      	ldr	r3, [r3, #20]
 800f952:	3b01      	subs	r3, #1
 800f954:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800f956:	4313      	orrs	r3, r2
 800f958:	697a      	ldr	r2, [r7, #20]
 800f95a:	4313      	orrs	r3, r2
 800f95c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	68db      	ldr	r3, [r3, #12]
 800f962:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f96a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	3b01      	subs	r3, #1
 800f978:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f97a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	689b      	ldr	r3, [r3, #8]
 800f980:	3b01      	subs	r3, #1
 800f982:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800f984:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	691b      	ldr	r3, [r3, #16]
 800f98a:	3b01      	subs	r3, #1
 800f98c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800f98e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800f990:	68bb      	ldr	r3, [r7, #8]
 800f992:	699b      	ldr	r3, [r3, #24]
 800f994:	3b01      	subs	r3, #1
 800f996:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f998:	4313      	orrs	r3, r2
 800f99a:	693a      	ldr	r2, [r7, #16]
 800f99c:	4313      	orrs	r3, r2
 800f99e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	697a      	ldr	r2, [r7, #20]
 800f9a4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	693a      	ldr	r2, [r7, #16]
 800f9aa:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800f9ac:	2300      	movs	r3, #0
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	371c      	adds	r7, #28
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b8:	4770      	bx	lr
 800f9ba:	bf00      	nop
 800f9bc:	ff0f0fff 	.word	0xff0f0fff

0800f9c0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b087      	sub	sp, #28
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	60f8      	str	r0, [r7, #12]
 800f9c8:	60b9      	str	r1, [r7, #8]
 800f9ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800f9d8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	689b      	ldr	r3, [r3, #8]
 800f9de:	3b01      	subs	r3, #1
 800f9e0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800f9e2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	68db      	ldr	r3, [r3, #12]
 800f9e8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800f9ea:	4313      	orrs	r3, r2
 800f9ec:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800f9ee:	697a      	ldr	r2, [r7, #20]
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800f9f4:	2300      	movs	r3, #0
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	371c      	adds	r7, #28
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa00:	4770      	bx	lr

0800fa02 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800fa02:	b480      	push	{r7}
 800fa04:	b083      	sub	sp, #12
 800fa06:	af00      	add	r7, sp, #0
 800fa08:	6078      	str	r0, [r7, #4]
 800fa0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	695a      	ldr	r2, [r3, #20]
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	005b      	lsls	r3, r3, #1
 800fa14:	431a      	orrs	r2, r3
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800fa1a:	2300      	movs	r3, #0
}
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	370c      	adds	r7, #12
 800fa20:	46bd      	mov	sp, r7
 800fa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa26:	4770      	bx	lr

0800fa28 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b088      	sub	sp, #32
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	4603      	mov	r3, r0
 800fa30:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 800fa32:	4b12      	ldr	r3, [pc, #72]	; (800fa7c <BSP_LED_Init+0x54>)
 800fa34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa36:	4a11      	ldr	r2, [pc, #68]	; (800fa7c <BSP_LED_Init+0x54>)
 800fa38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fa3c:	6313      	str	r3, [r2, #48]	; 0x30
 800fa3e:	4b0f      	ldr	r3, [pc, #60]	; (800fa7c <BSP_LED_Init+0x54>)
 800fa40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fa46:	60bb      	str	r3, [r7, #8]
 800fa48:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 800fa4a:	79fb      	ldrb	r3, [r7, #7]
 800fa4c:	4a0c      	ldr	r2, [pc, #48]	; (800fa80 <BSP_LED_Init+0x58>)
 800fa4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa52:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800fa54:	2301      	movs	r3, #1
 800fa56:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 800fa58:	2301      	movs	r3, #1
 800fa5a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800fa5c:	2303      	movs	r3, #3
 800fa5e:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 800fa60:	79fb      	ldrb	r3, [r7, #7]
 800fa62:	4a08      	ldr	r2, [pc, #32]	; (800fa84 <BSP_LED_Init+0x5c>)
 800fa64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa68:	f107 020c 	add.w	r2, r7, #12
 800fa6c:	4611      	mov	r1, r2
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7fc fb02 	bl	800c078 <HAL_GPIO_Init>

}
 800fa74:	bf00      	nop
 800fa76:	3720      	adds	r7, #32
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}
 800fa7c:	40023800 	.word	0x40023800
 800fa80:	2000000c 	.word	0x2000000c
 800fa84:	20000014 	.word	0x20000014

0800fa88 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	4603      	mov	r3, r0
 800fa90:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800fa92:	79fb      	ldrb	r3, [r7, #7]
 800fa94:	4a07      	ldr	r2, [pc, #28]	; (800fab4 <BSP_LED_On+0x2c>)
 800fa96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fa9a:	79fb      	ldrb	r3, [r7, #7]
 800fa9c:	4a06      	ldr	r2, [pc, #24]	; (800fab8 <BSP_LED_On+0x30>)
 800fa9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	2201      	movs	r2, #1
 800faa6:	4619      	mov	r1, r3
 800faa8:	f7fc fdb2 	bl	800c610 <HAL_GPIO_WritePin>
}
 800faac:	bf00      	nop
 800faae:	3708      	adds	r7, #8
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}
 800fab4:	20000014 	.word	0x20000014
 800fab8:	2000000c 	.word	0x2000000c

0800fabc <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b082      	sub	sp, #8
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	4603      	mov	r3, r0
 800fac4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800fac6:	79fb      	ldrb	r3, [r7, #7]
 800fac8:	4a07      	ldr	r2, [pc, #28]	; (800fae8 <BSP_LED_Off+0x2c>)
 800faca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800face:	79fb      	ldrb	r3, [r7, #7]
 800fad0:	4a06      	ldr	r2, [pc, #24]	; (800faec <BSP_LED_Off+0x30>)
 800fad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	2200      	movs	r2, #0
 800fada:	4619      	mov	r1, r3
 800fadc:	f7fc fd98 	bl	800c610 <HAL_GPIO_WritePin>
}
 800fae0:	bf00      	nop
 800fae2:	3708      	adds	r7, #8
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	20000014 	.word	0x20000014
 800faec:	2000000c 	.word	0x2000000c

0800faf0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b088      	sub	sp, #32
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	4603      	mov	r3, r0
 800faf8:	460a      	mov	r2, r1
 800fafa:	71fb      	strb	r3, [r7, #7]
 800fafc:	4613      	mov	r3, r2
 800fafe:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable the BUTTON clock */
  BUTTON_GPIO_CLK_ENABLE();
 800fb00:	4b22      	ldr	r3, [pc, #136]	; (800fb8c <BSP_PB_Init+0x9c>)
 800fb02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb04:	4a21      	ldr	r2, [pc, #132]	; (800fb8c <BSP_PB_Init+0x9c>)
 800fb06:	f043 0301 	orr.w	r3, r3, #1
 800fb0a:	6313      	str	r3, [r2, #48]	; 0x30
 800fb0c:	4b1f      	ldr	r3, [pc, #124]	; (800fb8c <BSP_PB_Init+0x9c>)
 800fb0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb10:	f003 0301 	and.w	r3, r3, #1
 800fb14:	60bb      	str	r3, [r7, #8]
 800fb16:	68bb      	ldr	r3, [r7, #8]

  if(Button_Mode == BUTTON_MODE_GPIO)
 800fb18:	79bb      	ldrb	r3, [r7, #6]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d111      	bne.n	800fb42 <BSP_PB_Init+0x52>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800fb1e:	2301      	movs	r3, #1
 800fb20:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800fb22:	2300      	movs	r3, #0
 800fb24:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800fb26:	2300      	movs	r3, #0
 800fb28:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800fb2a:	2302      	movs	r3, #2
 800fb2c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800fb2e:	79fb      	ldrb	r3, [r7, #7]
 800fb30:	4a17      	ldr	r2, [pc, #92]	; (800fb90 <BSP_PB_Init+0xa0>)
 800fb32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb36:	f107 020c 	add.w	r2, r7, #12
 800fb3a:	4611      	mov	r1, r2
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7fc fa9b 	bl	800c078 <HAL_GPIO_Init>
  }

  if(Button_Mode == BUTTON_MODE_EXTI)
 800fb42:	79bb      	ldrb	r3, [r7, #6]
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d11d      	bne.n	800fb84 <BSP_PB_Init+0x94>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800fb48:	2301      	movs	r3, #1
 800fb4a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800fb50:	2302      	movs	r3, #2
 800fb52:	61bb      	str	r3, [r7, #24]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800fb54:	4b0f      	ldr	r3, [pc, #60]	; (800fb94 <BSP_PB_Init+0xa4>)
 800fb56:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800fb58:	79fb      	ldrb	r3, [r7, #7]
 800fb5a:	4a0d      	ldr	r2, [pc, #52]	; (800fb90 <BSP_PB_Init+0xa0>)
 800fb5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb60:	f107 020c 	add.w	r2, r7, #12
 800fb64:	4611      	mov	r1, r2
 800fb66:	4618      	mov	r0, r3
 800fb68:	f7fc fa86 	bl	800c078 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800fb6c:	2306      	movs	r3, #6
 800fb6e:	b25b      	sxtb	r3, r3
 800fb70:	2200      	movs	r2, #0
 800fb72:	210f      	movs	r1, #15
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7fb f952 	bl	800ae1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800fb7a:	2306      	movs	r3, #6
 800fb7c:	b25b      	sxtb	r3, r3
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7fb f969 	bl	800ae56 <HAL_NVIC_EnableIRQ>
  }
}
 800fb84:	bf00      	nop
 800fb86:	3720      	adds	r7, #32
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}
 800fb8c:	40023800 	.word	0x40023800
 800fb90:	2000001c 	.word	0x2000001c
 800fb94:	10110000 	.word	0x10110000

0800fb98 <BSP_PB_GetState>:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	4603      	mov	r3, r0
 800fba0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800fba2:	79fb      	ldrb	r3, [r7, #7]
 800fba4:	4a06      	ldr	r2, [pc, #24]	; (800fbc0 <BSP_PB_GetState+0x28>)
 800fba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbaa:	2201      	movs	r2, #1
 800fbac:	4611      	mov	r1, r2
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7fc fd16 	bl	800c5e0 <HAL_GPIO_ReadPin>
 800fbb4:	4603      	mov	r3, r0
}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	3708      	adds	r7, #8
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}
 800fbbe:	bf00      	nop
 800fbc0:	2000001c 	.word	0x2000001c

0800fbc4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b08c      	sub	sp, #48	; 0x30
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	4a58      	ldr	r2, [pc, #352]	; (800fd30 <I2Cx_MspInit+0x16c>)
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d15b      	bne.n	800fc8c <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 800fbd4:	4b57      	ldr	r3, [pc, #348]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fbd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbd8:	4a56      	ldr	r2, [pc, #344]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fbda:	f043 0308 	orr.w	r3, r3, #8
 800fbde:	6313      	str	r3, [r2, #48]	; 0x30
 800fbe0:	4b54      	ldr	r3, [pc, #336]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fbe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbe4:	f003 0308 	and.w	r3, r3, #8
 800fbe8:	61bb      	str	r3, [r7, #24]
 800fbea:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 800fbec:	4b51      	ldr	r3, [pc, #324]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fbee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbf0:	4a50      	ldr	r2, [pc, #320]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fbf2:	f043 0302 	orr.w	r3, r3, #2
 800fbf6:	6313      	str	r3, [r2, #48]	; 0x30
 800fbf8:	4b4e      	ldr	r3, [pc, #312]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fbfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbfc:	f003 0302 	and.w	r3, r3, #2
 800fc00:	617b      	str	r3, [r7, #20]
 800fc02:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800fc04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fc08:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800fc0a:	2312      	movs	r3, #18
 800fc0c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800fc12:	2302      	movs	r3, #2
 800fc14:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 800fc16:	2304      	movs	r3, #4
 800fc18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 800fc1a:	f107 031c 	add.w	r3, r7, #28
 800fc1e:	4619      	mov	r1, r3
 800fc20:	4845      	ldr	r0, [pc, #276]	; (800fd38 <I2Cx_MspInit+0x174>)
 800fc22:	f7fc fa29 	bl	800c078 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800fc26:	2380      	movs	r3, #128	; 0x80
 800fc28:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 800fc2a:	230b      	movs	r3, #11
 800fc2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 800fc2e:	f107 031c 	add.w	r3, r7, #28
 800fc32:	4619      	mov	r1, r3
 800fc34:	4841      	ldr	r0, [pc, #260]	; (800fd3c <I2Cx_MspInit+0x178>)
 800fc36:	f7fc fa1f 	bl	800c078 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800fc3a:	4b3e      	ldr	r3, [pc, #248]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc3e:	4a3d      	ldr	r2, [pc, #244]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fc40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fc44:	6413      	str	r3, [r2, #64]	; 0x40
 800fc46:	4b3b      	ldr	r3, [pc, #236]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fc48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fc4e:	613b      	str	r3, [r7, #16]
 800fc50:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800fc52:	4b38      	ldr	r3, [pc, #224]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fc54:	6a1b      	ldr	r3, [r3, #32]
 800fc56:	4a37      	ldr	r2, [pc, #220]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fc58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fc5c:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800fc5e:	4b35      	ldr	r3, [pc, #212]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fc60:	6a1b      	ldr	r3, [r3, #32]
 800fc62:	4a34      	ldr	r2, [pc, #208]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fc64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fc68:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	210f      	movs	r1, #15
 800fc6e:	205f      	movs	r0, #95	; 0x5f
 800fc70:	f7fb f8d5 	bl	800ae1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800fc74:	205f      	movs	r0, #95	; 0x5f
 800fc76:	f7fb f8ee 	bl	800ae56 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	210f      	movs	r1, #15
 800fc7e:	2060      	movs	r0, #96	; 0x60
 800fc80:	f7fb f8cd 	bl	800ae1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 800fc84:	2060      	movs	r0, #96	; 0x60
 800fc86:	f7fb f8e6 	bl	800ae56 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800fc8a:	e04d      	b.n	800fd28 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800fc8c:	4b29      	ldr	r3, [pc, #164]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc90:	4a28      	ldr	r2, [pc, #160]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fc92:	f043 0302 	orr.w	r3, r3, #2
 800fc96:	6313      	str	r3, [r2, #48]	; 0x30
 800fc98:	4b26      	ldr	r3, [pc, #152]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fc9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc9c:	f003 0302 	and.w	r3, r3, #2
 800fca0:	60fb      	str	r3, [r7, #12]
 800fca2:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800fca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fca8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800fcaa:	2312      	movs	r3, #18
 800fcac:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800fcb2:	2302      	movs	r3, #2
 800fcb4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800fcb6:	2304      	movs	r3, #4
 800fcb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800fcba:	f107 031c 	add.w	r3, r7, #28
 800fcbe:	4619      	mov	r1, r3
 800fcc0:	481e      	ldr	r0, [pc, #120]	; (800fd3c <I2Cx_MspInit+0x178>)
 800fcc2:	f7fc f9d9 	bl	800c078 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800fcc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fcca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800fccc:	f107 031c 	add.w	r3, r7, #28
 800fcd0:	4619      	mov	r1, r3
 800fcd2:	481a      	ldr	r0, [pc, #104]	; (800fd3c <I2Cx_MspInit+0x178>)
 800fcd4:	f7fc f9d0 	bl	800c078 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800fcd8:	4b16      	ldr	r3, [pc, #88]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fcda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcdc:	4a15      	ldr	r2, [pc, #84]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fcde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fce2:	6413      	str	r3, [r2, #64]	; 0x40
 800fce4:	4b13      	ldr	r3, [pc, #76]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fcec:	60bb      	str	r3, [r7, #8]
 800fcee:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800fcf0:	4b10      	ldr	r3, [pc, #64]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fcf2:	6a1b      	ldr	r3, [r3, #32]
 800fcf4:	4a0f      	ldr	r2, [pc, #60]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fcf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fcfa:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800fcfc:	4b0d      	ldr	r3, [pc, #52]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fcfe:	6a1b      	ldr	r3, [r3, #32]
 800fd00:	4a0c      	ldr	r2, [pc, #48]	; (800fd34 <I2Cx_MspInit+0x170>)
 800fd02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fd06:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800fd08:	2200      	movs	r2, #0
 800fd0a:	210f      	movs	r1, #15
 800fd0c:	201f      	movs	r0, #31
 800fd0e:	f7fb f886 	bl	800ae1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800fd12:	201f      	movs	r0, #31
 800fd14:	f7fb f89f 	bl	800ae56 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800fd18:	2200      	movs	r2, #0
 800fd1a:	210f      	movs	r1, #15
 800fd1c:	2020      	movs	r0, #32
 800fd1e:	f7fb f87e 	bl	800ae1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800fd22:	2020      	movs	r0, #32
 800fd24:	f7fb f897 	bl	800ae56 <HAL_NVIC_EnableIRQ>
}
 800fd28:	bf00      	nop
 800fd2a:	3730      	adds	r7, #48	; 0x30
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	20004af4 	.word	0x20004af4
 800fd34:	40023800 	.word	0x40023800
 800fd38:	40020c00 	.word	0x40020c00
 800fd3c:	40020400 	.word	0x40020400

0800fd40 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f7fc ff7d 	bl	800cc48 <HAL_I2C_GetState>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d125      	bne.n	800fda0 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	4a14      	ldr	r2, [pc, #80]	; (800fda8 <I2Cx_Init+0x68>)
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	d103      	bne.n	800fd64 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	4a13      	ldr	r2, [pc, #76]	; (800fdac <I2Cx_Init+0x6c>)
 800fd60:	601a      	str	r2, [r3, #0]
 800fd62:	e002      	b.n	800fd6a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	4a12      	ldr	r2, [pc, #72]	; (800fdb0 <I2Cx_Init+0x70>)
 800fd68:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	4a11      	ldr	r2, [pc, #68]	; (800fdb4 <I2Cx_Init+0x74>)
 800fd6e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2200      	movs	r2, #0
 800fd74:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2201      	movs	r2, #1
 800fd7a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2200      	movs	r2, #0
 800fd80:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2200      	movs	r2, #0
 800fd86:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2200      	movs	r2, #0
 800fd92:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f7ff ff15 	bl	800fbc4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f7fc fc52 	bl	800c644 <HAL_I2C_Init>
  }
}
 800fda0:	bf00      	nop
 800fda2:	3708      	adds	r7, #8
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	20004af4 	.word	0x20004af4
 800fdac:	40006000 	.word	0x40006000
 800fdb0:	40005400 	.word	0x40005400
 800fdb4:	40912732 	.word	0x40912732

0800fdb8 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b08a      	sub	sp, #40	; 0x28
 800fdbc:	af04      	add	r7, sp, #16
 800fdbe:	60f8      	str	r0, [r7, #12]
 800fdc0:	4608      	mov	r0, r1
 800fdc2:	4611      	mov	r1, r2
 800fdc4:	461a      	mov	r2, r3
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	72fb      	strb	r3, [r7, #11]
 800fdca:	460b      	mov	r3, r1
 800fdcc:	813b      	strh	r3, [r7, #8]
 800fdce:	4613      	mov	r3, r2
 800fdd0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800fdd6:	7afb      	ldrb	r3, [r7, #11]
 800fdd8:	b299      	uxth	r1, r3
 800fdda:	88f8      	ldrh	r0, [r7, #6]
 800fddc:	893a      	ldrh	r2, [r7, #8]
 800fdde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fde2:	9302      	str	r3, [sp, #8]
 800fde4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fde6:	9301      	str	r3, [sp, #4]
 800fde8:	6a3b      	ldr	r3, [r7, #32]
 800fdea:	9300      	str	r3, [sp, #0]
 800fdec:	4603      	mov	r3, r0
 800fdee:	68f8      	ldr	r0, [r7, #12]
 800fdf0:	f7fc fe10 	bl	800ca14 <HAL_I2C_Mem_Read>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800fdf8:	7dfb      	ldrb	r3, [r7, #23]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d004      	beq.n	800fe08 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800fdfe:	7afb      	ldrb	r3, [r7, #11]
 800fe00:	4619      	mov	r1, r3
 800fe02:	68f8      	ldr	r0, [r7, #12]
 800fe04:	f000 f832 	bl	800fe6c <I2Cx_Error>
  }
  return status;
 800fe08:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3718      	adds	r7, #24
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}

0800fe12 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800fe12:	b580      	push	{r7, lr}
 800fe14:	b08a      	sub	sp, #40	; 0x28
 800fe16:	af04      	add	r7, sp, #16
 800fe18:	60f8      	str	r0, [r7, #12]
 800fe1a:	4608      	mov	r0, r1
 800fe1c:	4611      	mov	r1, r2
 800fe1e:	461a      	mov	r2, r3
 800fe20:	4603      	mov	r3, r0
 800fe22:	72fb      	strb	r3, [r7, #11]
 800fe24:	460b      	mov	r3, r1
 800fe26:	813b      	strh	r3, [r7, #8]
 800fe28:	4613      	mov	r3, r2
 800fe2a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800fe30:	7afb      	ldrb	r3, [r7, #11]
 800fe32:	b299      	uxth	r1, r3
 800fe34:	88f8      	ldrh	r0, [r7, #6]
 800fe36:	893a      	ldrh	r2, [r7, #8]
 800fe38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fe3c:	9302      	str	r3, [sp, #8]
 800fe3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe40:	9301      	str	r3, [sp, #4]
 800fe42:	6a3b      	ldr	r3, [r7, #32]
 800fe44:	9300      	str	r3, [sp, #0]
 800fe46:	4603      	mov	r3, r0
 800fe48:	68f8      	ldr	r0, [r7, #12]
 800fe4a:	f7fc fccf 	bl	800c7ec <HAL_I2C_Mem_Write>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800fe52:	7dfb      	ldrb	r3, [r7, #23]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d004      	beq.n	800fe62 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800fe58:	7afb      	ldrb	r3, [r7, #11]
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	68f8      	ldr	r0, [r7, #12]
 800fe5e:	f000 f805 	bl	800fe6c <I2Cx_Error>
  }
  return status;
 800fe62:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3718      	adds	r7, #24
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}

0800fe6c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b082      	sub	sp, #8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
 800fe74:	460b      	mov	r3, r1
 800fe76:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f7fc fc73 	bl	800c764 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f7ff ff5e 	bl	800fd40 <I2Cx_Init>
}
 800fe84:	bf00      	nop
 800fe86:	3708      	adds	r7, #8
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}

0800fe8c <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800fe90:	4802      	ldr	r0, [pc, #8]	; (800fe9c <AUDIO_IO_Init+0x10>)
 800fe92:	f7ff ff55 	bl	800fd40 <I2Cx_Init>
}
 800fe96:	bf00      	nop
 800fe98:	bd80      	pop	{r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	20004af4 	.word	0x20004af4

0800fea0 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
 800fea0:	b480      	push	{r7}
 800fea2:	af00      	add	r7, sp, #0

}
 800fea4:	bf00      	nop
 800fea6:	46bd      	mov	sp, r7
 800fea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feac:	4770      	bx	lr
	...

0800feb0 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b086      	sub	sp, #24
 800feb4:	af02      	add	r7, sp, #8
 800feb6:	4603      	mov	r3, r0
 800feb8:	71fb      	strb	r3, [r7, #7]
 800feba:	460b      	mov	r3, r1
 800febc:	80bb      	strh	r3, [r7, #4]
 800febe:	4613      	mov	r3, r2
 800fec0:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 800fec2:	887b      	ldrh	r3, [r7, #2]
 800fec4:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800fec6:	89fb      	ldrh	r3, [r7, #14]
 800fec8:	0a1b      	lsrs	r3, r3, #8
 800feca:	b29b      	uxth	r3, r3
 800fecc:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800fece:	89fb      	ldrh	r3, [r7, #14]
 800fed0:	021b      	lsls	r3, r3, #8
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	b21a      	sxth	r2, r3
 800fed6:	887b      	ldrh	r3, [r7, #2]
 800fed8:	b21b      	sxth	r3, r3
 800feda:	4313      	orrs	r3, r2
 800fedc:	b21b      	sxth	r3, r3
 800fede:	b29b      	uxth	r3, r3
 800fee0:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800fee2:	88ba      	ldrh	r2, [r7, #4]
 800fee4:	79f9      	ldrb	r1, [r7, #7]
 800fee6:	2302      	movs	r3, #2
 800fee8:	9301      	str	r3, [sp, #4]
 800feea:	1cbb      	adds	r3, r7, #2
 800feec:	9300      	str	r3, [sp, #0]
 800feee:	2302      	movs	r3, #2
 800fef0:	4803      	ldr	r0, [pc, #12]	; (800ff00 <AUDIO_IO_Write+0x50>)
 800fef2:	f7ff ff8e 	bl	800fe12 <I2Cx_WriteMultiple>
}
 800fef6:	bf00      	nop
 800fef8:	3710      	adds	r7, #16
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}
 800fefe:	bf00      	nop
 800ff00:	20004af4 	.word	0x20004af4

0800ff04 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b086      	sub	sp, #24
 800ff08:	af02      	add	r7, sp, #8
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	460a      	mov	r2, r1
 800ff0e:	71fb      	strb	r3, [r7, #7]
 800ff10:	4613      	mov	r3, r2
 800ff12:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 800ff14:	2300      	movs	r3, #0
 800ff16:	81bb      	strh	r3, [r7, #12]
 800ff18:	2300      	movs	r3, #0
 800ff1a:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 800ff1c:	88ba      	ldrh	r2, [r7, #4]
 800ff1e:	79f9      	ldrb	r1, [r7, #7]
 800ff20:	2302      	movs	r3, #2
 800ff22:	9301      	str	r3, [sp, #4]
 800ff24:	f107 030c 	add.w	r3, r7, #12
 800ff28:	9300      	str	r3, [sp, #0]
 800ff2a:	2302      	movs	r3, #2
 800ff2c:	480a      	ldr	r0, [pc, #40]	; (800ff58 <AUDIO_IO_Read+0x54>)
 800ff2e:	f7ff ff43 	bl	800fdb8 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 800ff32:	89bb      	ldrh	r3, [r7, #12]
 800ff34:	0a1b      	lsrs	r3, r3, #8
 800ff36:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 800ff38:	89bb      	ldrh	r3, [r7, #12]
 800ff3a:	021b      	lsls	r3, r3, #8
 800ff3c:	b29b      	uxth	r3, r3
 800ff3e:	b21a      	sxth	r2, r3
 800ff40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ff44:	4313      	orrs	r3, r2
 800ff46:	b21b      	sxth	r3, r3
 800ff48:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 800ff4a:	89fb      	ldrh	r3, [r7, #14]
 800ff4c:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 800ff4e:	89bb      	ldrh	r3, [r7, #12]
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3710      	adds	r7, #16
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}
 800ff58:	20004af4 	.word	0x20004af4

0800ff5c <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b082      	sub	sp, #8
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f7fa fe5d 	bl	800ac24 <HAL_Delay>
}
 800ff6a:	bf00      	nop
 800ff6c:	3708      	adds	r7, #8
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}
	...

0800ff74 <BSP_AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{ 
 800ff74:	b590      	push	{r4, r7, lr}
 800ff76:	b085      	sub	sp, #20
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	603a      	str	r2, [r7, #0]
 800ff7e:	80fb      	strh	r3, [r7, #6]
 800ff80:	460b      	mov	r3, r1
 800ff82:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_ERROR;
 800ff84:	2301      	movs	r3, #1
 800ff86:	73fb      	strb	r3, [r7, #15]
  uint32_t deviceid = 0x00;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	60bb      	str	r3, [r7, #8]

  /* Disable SAI */
  SAIx_Out_DeInit();
 800ff8c:	f000 fa66 	bl	801045c <SAIx_Out_DeInit>

  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 800ff90:	2200      	movs	r2, #0
 800ff92:	6839      	ldr	r1, [r7, #0]
 800ff94:	481c      	ldr	r0, [pc, #112]	; (8010008 <BSP_AUDIO_OUT_Init+0x94>)
 800ff96:	f000 f9af 	bl	80102f8 <BSP_AUDIO_OUT_ClockConfig>
 
  /* SAI data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800ff9a:	4b1b      	ldr	r3, [pc, #108]	; (8010008 <BSP_AUDIO_OUT_Init+0x94>)
 800ff9c:	4a1b      	ldr	r2, [pc, #108]	; (801000c <BSP_AUDIO_OUT_Init+0x98>)
 800ff9e:	601a      	str	r2, [r3, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 800ffa0:	4819      	ldr	r0, [pc, #100]	; (8010008 <BSP_AUDIO_OUT_Init+0x94>)
 800ffa2:	f7fe fe07 	bl	800ebb4 <HAL_SAI_GetState>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d103      	bne.n	800ffb4 <BSP_AUDIO_OUT_Init+0x40>
  {
    /* Init the SAI MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 800ffac:	2100      	movs	r1, #0
 800ffae:	4816      	ldr	r0, [pc, #88]	; (8010008 <BSP_AUDIO_OUT_Init+0x94>)
 800ffb0:	f000 f84e 	bl	8010050 <BSP_AUDIO_OUT_MspInit>
  }
  SAIx_Out_Init(AudioFreq);
 800ffb4:	6838      	ldr	r0, [r7, #0]
 800ffb6:	f000 f9e3 	bl	8010380 <SAIx_Out_Init>

  /* wm8994 codec initialization */
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800ffba:	4b15      	ldr	r3, [pc, #84]	; (8010010 <BSP_AUDIO_OUT_Init+0x9c>)
 800ffbc:	689b      	ldr	r3, [r3, #8]
 800ffbe:	2034      	movs	r0, #52	; 0x34
 800ffc0:	4798      	blx	r3
 800ffc2:	60b8      	str	r0, [r7, #8]
  
  if((deviceid) == WM8994_ID)
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	f648 1294 	movw	r2, #35220	; 0x8994
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d109      	bne.n	800ffe2 <BSP_AUDIO_OUT_Init+0x6e>
  {  
    /* Reset the Codec Registers */
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800ffce:	4b10      	ldr	r3, [pc, #64]	; (8010010 <BSP_AUDIO_OUT_Init+0x9c>)
 800ffd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffd2:	2034      	movs	r0, #52	; 0x34
 800ffd4:	4798      	blx	r3
    /* Initialize the audio driver structure */
    audio_drv = &wm8994_drv; 
 800ffd6:	4b0f      	ldr	r3, [pc, #60]	; (8010014 <BSP_AUDIO_OUT_Init+0xa0>)
 800ffd8:	4a0d      	ldr	r2, [pc, #52]	; (8010010 <BSP_AUDIO_OUT_Init+0x9c>)
 800ffda:	601a      	str	r2, [r3, #0]
    ret = AUDIO_OK;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	73fb      	strb	r3, [r7, #15]
 800ffe0:	e001      	b.n	800ffe6 <BSP_AUDIO_OUT_Init+0x72>
  }
  else
  {
    ret = AUDIO_ERROR;
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 800ffe6:	7bfb      	ldrb	r3, [r7, #15]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d107      	bne.n	800fffc <BSP_AUDIO_OUT_Init+0x88>
  {
    /* Initialize the codec internal registers */
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800ffec:	4b09      	ldr	r3, [pc, #36]	; (8010014 <BSP_AUDIO_OUT_Init+0xa0>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	681c      	ldr	r4, [r3, #0]
 800fff2:	797a      	ldrb	r2, [r7, #5]
 800fff4:	88f9      	ldrh	r1, [r7, #6]
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	2034      	movs	r0, #52	; 0x34
 800fffa:	47a0      	blx	r4
  }
 
  return ret;
 800fffc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3714      	adds	r7, #20
 8010002:	46bd      	mov	sp, r7
 8010004:	bd90      	pop	{r4, r7, pc}
 8010006:	bf00      	nop
 8010008:	2002abe8 	.word	0x2002abe8
 801000c:	40015804 	.word	0x40015804
 8010010:	20000024 	.word	0x20000024
 8010014:	2002ad28 	.word	0x2002ad28

08010018 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	4a05      	ldr	r2, [pc, #20]	; (801003c <HAL_SAI_ErrorCallback+0x24>)
 8010026:	4293      	cmp	r3, r2
 8010028:	d102      	bne.n	8010030 <HAL_SAI_ErrorCallback+0x18>
  {
  BSP_AUDIO_OUT_Error_CallBack();
 801002a:	f000 f809 	bl	8010040 <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack();
  }
}
 801002e:	e001      	b.n	8010034 <HAL_SAI_ErrorCallback+0x1c>
    BSP_AUDIO_IN_Error_CallBack();
 8010030:	f7f7 f98c 	bl	800734c <BSP_AUDIO_IN_Error_CallBack>
}
 8010034:	bf00      	nop
 8010036:	3708      	adds	r7, #8
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}
 801003c:	40015804 	.word	0x40015804

08010040 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8010040:	b480      	push	{r7}
 8010042:	af00      	add	r7, sp, #0
}
 8010044:	bf00      	nop
 8010046:	46bd      	mov	sp, r7
 8010048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004c:	4770      	bx	lr
	...

08010050 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8010050:	b580      	push	{r7, lr}
 8010052:	b08c      	sub	sp, #48	; 0x30
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  
  
  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 801005a:	4b48      	ldr	r3, [pc, #288]	; (801017c <BSP_AUDIO_OUT_MspInit+0x12c>)
 801005c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801005e:	4a47      	ldr	r2, [pc, #284]	; (801017c <BSP_AUDIO_OUT_MspInit+0x12c>)
 8010060:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010064:	6453      	str	r3, [r2, #68]	; 0x44
 8010066:	4b45      	ldr	r3, [pc, #276]	; (801017c <BSP_AUDIO_OUT_MspInit+0x12c>)
 8010068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801006a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801006e:	61bb      	str	r3, [r7, #24]
 8010070:	69bb      	ldr	r3, [r7, #24]
  
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8010072:	4b42      	ldr	r3, [pc, #264]	; (801017c <BSP_AUDIO_OUT_MspInit+0x12c>)
 8010074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010076:	4a41      	ldr	r2, [pc, #260]	; (801017c <BSP_AUDIO_OUT_MspInit+0x12c>)
 8010078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801007c:	6313      	str	r3, [r2, #48]	; 0x30
 801007e:	4b3f      	ldr	r3, [pc, #252]	; (801017c <BSP_AUDIO_OUT_MspInit+0x12c>)
 8010080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010086:	617b      	str	r3, [r7, #20]
 8010088:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 801008a:	4b3c      	ldr	r3, [pc, #240]	; (801017c <BSP_AUDIO_OUT_MspInit+0x12c>)
 801008c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801008e:	4a3b      	ldr	r2, [pc, #236]	; (801017c <BSP_AUDIO_OUT_MspInit+0x12c>)
 8010090:	f043 0310 	orr.w	r3, r3, #16
 8010094:	6313      	str	r3, [r2, #48]	; 0x30
 8010096:	4b39      	ldr	r3, [pc, #228]	; (801017c <BSP_AUDIO_OUT_MspInit+0x12c>)
 8010098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801009a:	f003 0310 	and.w	r3, r3, #16
 801009e:	613b      	str	r3, [r7, #16]
 80100a0:	693b      	ldr	r3, [r7, #16]
  
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 80100a2:	2370      	movs	r3, #112	; 0x70
 80100a4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80100a6:	2302      	movs	r3, #2
 80100a8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80100aa:	2300      	movs	r3, #0
 80100ac:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80100ae:	2303      	movs	r3, #3
 80100b0:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 80100b2:	2306      	movs	r3, #6
 80100b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 80100b6:	f107 031c 	add.w	r3, r7, #28
 80100ba:	4619      	mov	r1, r3
 80100bc:	4830      	ldr	r0, [pc, #192]	; (8010180 <BSP_AUDIO_OUT_MspInit+0x130>)
 80100be:	f7fb ffdb 	bl	800c078 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80100c2:	2380      	movs	r3, #128	; 0x80
 80100c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80100c6:	f107 031c 	add.w	r3, r7, #28
 80100ca:	4619      	mov	r1, r3
 80100cc:	482d      	ldr	r0, [pc, #180]	; (8010184 <BSP_AUDIO_OUT_MspInit+0x134>)
 80100ce:	f7fb ffd3 	bl	800c078 <HAL_GPIO_Init>
  
  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 80100d2:	4b2a      	ldr	r3, [pc, #168]	; (801017c <BSP_AUDIO_OUT_MspInit+0x12c>)
 80100d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100d6:	4a29      	ldr	r2, [pc, #164]	; (801017c <BSP_AUDIO_OUT_MspInit+0x12c>)
 80100d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80100dc:	6313      	str	r3, [r2, #48]	; 0x30
 80100de:	4b27      	ldr	r3, [pc, #156]	; (801017c <BSP_AUDIO_OUT_MspInit+0x12c>)
 80100e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80100e6:	60fb      	str	r3, [r7, #12]
 80100e8:	68fb      	ldr	r3, [r7, #12]
  
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	4a26      	ldr	r2, [pc, #152]	; (8010188 <BSP_AUDIO_OUT_MspInit+0x138>)
 80100f0:	4293      	cmp	r3, r2
 80100f2:	d137      	bne.n	8010164 <BSP_AUDIO_OUT_MspInit+0x114>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 80100f4:	4b25      	ldr	r3, [pc, #148]	; (801018c <BSP_AUDIO_OUT_MspInit+0x13c>)
 80100f6:	2200      	movs	r2, #0
 80100f8:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80100fa:	4b24      	ldr	r3, [pc, #144]	; (801018c <BSP_AUDIO_OUT_MspInit+0x13c>)
 80100fc:	2240      	movs	r2, #64	; 0x40
 80100fe:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8010100:	4b22      	ldr	r3, [pc, #136]	; (801018c <BSP_AUDIO_OUT_MspInit+0x13c>)
 8010102:	2200      	movs	r2, #0
 8010104:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8010106:	4b21      	ldr	r3, [pc, #132]	; (801018c <BSP_AUDIO_OUT_MspInit+0x13c>)
 8010108:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801010c:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 801010e:	4b1f      	ldr	r3, [pc, #124]	; (801018c <BSP_AUDIO_OUT_MspInit+0x13c>)
 8010110:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010114:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8010116:	4b1d      	ldr	r3, [pc, #116]	; (801018c <BSP_AUDIO_OUT_MspInit+0x13c>)
 8010118:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801011c:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 801011e:	4b1b      	ldr	r3, [pc, #108]	; (801018c <BSP_AUDIO_OUT_MspInit+0x13c>)
 8010120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010124:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8010126:	4b19      	ldr	r3, [pc, #100]	; (801018c <BSP_AUDIO_OUT_MspInit+0x13c>)
 8010128:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801012c:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 801012e:	4b17      	ldr	r3, [pc, #92]	; (801018c <BSP_AUDIO_OUT_MspInit+0x13c>)
 8010130:	2204      	movs	r2, #4
 8010132:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8010134:	4b15      	ldr	r3, [pc, #84]	; (801018c <BSP_AUDIO_OUT_MspInit+0x13c>)
 8010136:	2203      	movs	r2, #3
 8010138:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 801013a:	4b14      	ldr	r3, [pc, #80]	; (801018c <BSP_AUDIO_OUT_MspInit+0x13c>)
 801013c:	2200      	movs	r2, #0
 801013e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8010140:	4b12      	ldr	r3, [pc, #72]	; (801018c <BSP_AUDIO_OUT_MspInit+0x13c>)
 8010142:	2200      	movs	r2, #0
 8010144:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8010146:	4b11      	ldr	r3, [pc, #68]	; (801018c <BSP_AUDIO_OUT_MspInit+0x13c>)
 8010148:	4a11      	ldr	r2, [pc, #68]	; (8010190 <BSP_AUDIO_OUT_MspInit+0x140>)
 801014a:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	4a0f      	ldr	r2, [pc, #60]	; (801018c <BSP_AUDIO_OUT_MspInit+0x13c>)
 8010150:	66da      	str	r2, [r3, #108]	; 0x6c
 8010152:	4a0e      	ldr	r2, [pc, #56]	; (801018c <BSP_AUDIO_OUT_MspInit+0x13c>)
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8010158:	480c      	ldr	r0, [pc, #48]	; (801018c <BSP_AUDIO_OUT_MspInit+0x13c>)
 801015a:	f7fb fbf7 	bl	800b94c <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);
 801015e:	480b      	ldr	r0, [pc, #44]	; (801018c <BSP_AUDIO_OUT_MspInit+0x13c>)
 8010160:	f7fb fb46 	bl	800b7f0 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8010164:	2200      	movs	r2, #0
 8010166:	210e      	movs	r1, #14
 8010168:	2039      	movs	r0, #57	; 0x39
 801016a:	f7fa fe58 	bl	800ae1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 801016e:	2039      	movs	r0, #57	; 0x39
 8010170:	f7fa fe71 	bl	800ae56 <HAL_NVIC_EnableIRQ>
}
 8010174:	bf00      	nop
 8010176:	3730      	adds	r7, #48	; 0x30
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}
 801017c:	40023800 	.word	0x40023800
 8010180:	40021000 	.word	0x40021000
 8010184:	40021800 	.word	0x40021800
 8010188:	40015804 	.word	0x40015804
 801018c:	20004b80 	.word	0x20004b80
 8010190:	40026428 	.word	0x40026428

08010194 <SAI_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params  
  * @retval None
  */
static void SAI_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b08c      	sub	sp, #48	; 0x30
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 801019e:	4b50      	ldr	r3, [pc, #320]	; (80102e0 <SAI_AUDIO_IN_MspInit+0x14c>)
 80101a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101a2:	4a4f      	ldr	r2, [pc, #316]	; (80102e0 <SAI_AUDIO_IN_MspInit+0x14c>)
 80101a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80101a8:	6453      	str	r3, [r2, #68]	; 0x44
 80101aa:	4b4d      	ldr	r3, [pc, #308]	; (80102e0 <SAI_AUDIO_IN_MspInit+0x14c>)
 80101ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80101b2:	61bb      	str	r3, [r7, #24]
 80101b4:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 80101b6:	4b4a      	ldr	r3, [pc, #296]	; (80102e0 <SAI_AUDIO_IN_MspInit+0x14c>)
 80101b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ba:	4a49      	ldr	r2, [pc, #292]	; (80102e0 <SAI_AUDIO_IN_MspInit+0x14c>)
 80101bc:	f043 0310 	orr.w	r3, r3, #16
 80101c0:	6313      	str	r3, [r2, #48]	; 0x30
 80101c2:	4b47      	ldr	r3, [pc, #284]	; (80102e0 <SAI_AUDIO_IN_MspInit+0x14c>)
 80101c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101c6:	f003 0310 	and.w	r3, r3, #16
 80101ca:	617b      	str	r3, [r7, #20]
 80101cc:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 80101ce:	2308      	movs	r3, #8
 80101d0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80101d2:	2302      	movs	r3, #2
 80101d4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80101d6:	2300      	movs	r3, #0
 80101d8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80101da:	2302      	movs	r3, #2
 80101dc:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 80101de:	2306      	movs	r3, #6
 80101e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80101e2:	f107 031c 	add.w	r3, r7, #28
 80101e6:	4619      	mov	r1, r3
 80101e8:	483e      	ldr	r0, [pc, #248]	; (80102e4 <SAI_AUDIO_IN_MspInit+0x150>)
 80101ea:	f7fb ff45 	bl	800c078 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 80101ee:	4b3c      	ldr	r3, [pc, #240]	; (80102e0 <SAI_AUDIO_IN_MspInit+0x14c>)
 80101f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101f2:	4a3b      	ldr	r2, [pc, #236]	; (80102e0 <SAI_AUDIO_IN_MspInit+0x14c>)
 80101f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80101f8:	6313      	str	r3, [r2, #48]	; 0x30
 80101fa:	4b39      	ldr	r3, [pc, #228]	; (80102e0 <SAI_AUDIO_IN_MspInit+0x14c>)
 80101fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010202:	613b      	str	r3, [r7, #16]
 8010204:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8010206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801020a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 801020c:	2300      	movs	r3, #0
 801020e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8010210:	2300      	movs	r3, #0
 8010212:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8010214:	2302      	movs	r3, #2
 8010216:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8010218:	f107 031c 	add.w	r3, r7, #28
 801021c:	4619      	mov	r1, r3
 801021e:	4832      	ldr	r0, [pc, #200]	; (80102e8 <SAI_AUDIO_IN_MspInit+0x154>)
 8010220:	f7fb ff2a 	bl	800c078 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8010224:	4b2e      	ldr	r3, [pc, #184]	; (80102e0 <SAI_AUDIO_IN_MspInit+0x14c>)
 8010226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010228:	4a2d      	ldr	r2, [pc, #180]	; (80102e0 <SAI_AUDIO_IN_MspInit+0x14c>)
 801022a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801022e:	6313      	str	r3, [r2, #48]	; 0x30
 8010230:	4b2b      	ldr	r3, [pc, #172]	; (80102e0 <SAI_AUDIO_IN_MspInit+0x14c>)
 8010232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010238:	60fb      	str	r3, [r7, #12]
 801023a:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4a2a      	ldr	r2, [pc, #168]	; (80102ec <SAI_AUDIO_IN_MspInit+0x158>)
 8010242:	4293      	cmp	r3, r2
 8010244:	d138      	bne.n	80102b8 <SAI_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8010246:	4b2a      	ldr	r3, [pc, #168]	; (80102f0 <SAI_AUDIO_IN_MspInit+0x15c>)
 8010248:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801024c:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 801024e:	4b28      	ldr	r3, [pc, #160]	; (80102f0 <SAI_AUDIO_IN_MspInit+0x15c>)
 8010250:	2200      	movs	r2, #0
 8010252:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8010254:	4b26      	ldr	r3, [pc, #152]	; (80102f0 <SAI_AUDIO_IN_MspInit+0x15c>)
 8010256:	2200      	movs	r2, #0
 8010258:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 801025a:	4b25      	ldr	r3, [pc, #148]	; (80102f0 <SAI_AUDIO_IN_MspInit+0x15c>)
 801025c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010260:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8010262:	4b23      	ldr	r3, [pc, #140]	; (80102f0 <SAI_AUDIO_IN_MspInit+0x15c>)
 8010264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010268:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 801026a:	4b21      	ldr	r3, [pc, #132]	; (80102f0 <SAI_AUDIO_IN_MspInit+0x15c>)
 801026c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010270:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8010272:	4b1f      	ldr	r3, [pc, #124]	; (80102f0 <SAI_AUDIO_IN_MspInit+0x15c>)
 8010274:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010278:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 801027a:	4b1d      	ldr	r3, [pc, #116]	; (80102f0 <SAI_AUDIO_IN_MspInit+0x15c>)
 801027c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010280:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8010282:	4b1b      	ldr	r3, [pc, #108]	; (80102f0 <SAI_AUDIO_IN_MspInit+0x15c>)
 8010284:	2200      	movs	r2, #0
 8010286:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8010288:	4b19      	ldr	r3, [pc, #100]	; (80102f0 <SAI_AUDIO_IN_MspInit+0x15c>)
 801028a:	2203      	movs	r2, #3
 801028c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 801028e:	4b18      	ldr	r3, [pc, #96]	; (80102f0 <SAI_AUDIO_IN_MspInit+0x15c>)
 8010290:	2200      	movs	r2, #0
 8010292:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8010294:	4b16      	ldr	r3, [pc, #88]	; (80102f0 <SAI_AUDIO_IN_MspInit+0x15c>)
 8010296:	2200      	movs	r2, #0
 8010298:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 801029a:	4b15      	ldr	r3, [pc, #84]	; (80102f0 <SAI_AUDIO_IN_MspInit+0x15c>)
 801029c:	4a15      	ldr	r2, [pc, #84]	; (80102f4 <SAI_AUDIO_IN_MspInit+0x160>)
 801029e:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	4a13      	ldr	r2, [pc, #76]	; (80102f0 <SAI_AUDIO_IN_MspInit+0x15c>)
 80102a4:	671a      	str	r2, [r3, #112]	; 0x70
 80102a6:	4a12      	ldr	r2, [pc, #72]	; (80102f0 <SAI_AUDIO_IN_MspInit+0x15c>)
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 80102ac:	4810      	ldr	r0, [pc, #64]	; (80102f0 <SAI_AUDIO_IN_MspInit+0x15c>)
 80102ae:	f7fb fb4d 	bl	800b94c <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 80102b2:	480f      	ldr	r0, [pc, #60]	; (80102f0 <SAI_AUDIO_IN_MspInit+0x15c>)
 80102b4:	f7fb fa9c 	bl	800b7f0 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80102b8:	2200      	movs	r2, #0
 80102ba:	210f      	movs	r1, #15
 80102bc:	203c      	movs	r0, #60	; 0x3c
 80102be:	f7fa fdae 	bl	800ae1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 80102c2:	203c      	movs	r0, #60	; 0x3c
 80102c4:	f7fa fdc7 	bl	800ae56 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80102c8:	2200      	movs	r2, #0
 80102ca:	210f      	movs	r1, #15
 80102cc:	2028      	movs	r0, #40	; 0x28
 80102ce:	f7fa fda6 	bl	800ae1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 80102d2:	2028      	movs	r0, #40	; 0x28
 80102d4:	f7fa fdbf 	bl	800ae56 <HAL_NVIC_EnableIRQ>
}
 80102d8:	bf00      	nop
 80102da:	3730      	adds	r7, #48	; 0x30
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	40023800 	.word	0x40023800
 80102e4:	40021000 	.word	0x40021000
 80102e8:	40022400 	.word	0x40022400
 80102ec:	40015824 	.word	0x40015824
 80102f0:	20004be0 	.word	0x20004be0
 80102f4:	40026470 	.word	0x40026470

080102f8 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b0a8      	sub	sp, #160	; 0xa0
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	60f8      	str	r0, [r7, #12]
 8010300:	60b9      	str	r1, [r7, #8]
 8010302:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8010304:	f107 0310 	add.w	r3, r7, #16
 8010308:	4618      	mov	r0, r3
 801030a:	f7fd ff2d 	bl	800e168 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	f642 3211 	movw	r2, #11025	; 0x2b11
 8010314:	4293      	cmp	r3, r2
 8010316:	d009      	beq.n	801032c <BSP_AUDIO_OUT_ClockConfig+0x34>
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	f245 6222 	movw	r2, #22050	; 0x5622
 801031e:	4293      	cmp	r3, r2
 8010320:	d004      	beq.n	801032c <BSP_AUDIO_OUT_ClockConfig+0x34>
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	f64a 4244 	movw	r2, #44100	; 0xac44
 8010328:	4293      	cmp	r3, r2
 801032a:	d112      	bne.n	8010352 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLSAI prescalers */
    /* PLLSAI_VCO: VCO_429M 
    SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 214.5/19 = 11.289 Mhz */ 
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 801032c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010330:	613b      	str	r3, [r7, #16]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8010332:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010336:	64fb      	str	r3, [r7, #76]	; 0x4c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8010338:	f240 13ad 	movw	r3, #429	; 0x1ad
 801033c:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 801033e:	2302      	movs	r3, #2
 8010340:	61fb      	str	r3, [r7, #28]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8010342:	2313      	movs	r3, #19
 8010344:	637b      	str	r3, [r7, #52]	; 0x34
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8010346:	f107 0310 	add.w	r3, r7, #16
 801034a:	4618      	mov	r0, r3
 801034c:	f7fd fae6 	bl	800d91c <HAL_RCCEx_PeriphCLKConfig>
 8010350:	e011      	b.n	8010376 <BSP_AUDIO_OUT_ClockConfig+0x7e>
  {
    /* SAI clock config 
    PLLSAI_VCO: VCO_344M 
    SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 344/7 = 49.142 Mhz 
    SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 49.142/1 = 49.142 Mhz */  
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8010352:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010356:	613b      	str	r3, [r7, #16]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8010358:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801035c:	64fb      	str	r3, [r7, #76]	; 0x4c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344; 
 801035e:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8010362:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
 8010364:	2307      	movs	r3, #7
 8010366:	61fb      	str	r3, [r7, #28]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
 8010368:	2301      	movs	r3, #1
 801036a:	637b      	str	r3, [r7, #52]	; 0x34
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 801036c:	f107 0310 	add.w	r3, r7, #16
 8010370:	4618      	mov	r0, r3
 8010372:	f7fd fad3 	bl	800d91c <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8010376:	bf00      	nop
 8010378:	37a0      	adds	r7, #160	; 0xa0
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
	...

08010380 <SAIx_Out_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123 
  *         and user can update this configuration using 
  * @retval None
  */
static void SAIx_Out_Init(uint32_t AudioFreq)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b082      	sub	sp, #8
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8010388:	4b32      	ldr	r3, [pc, #200]	; (8010454 <SAIx_Out_Init+0xd4>)
 801038a:	4a33      	ldr	r2, [pc, #204]	; (8010458 <SAIx_Out_Init+0xd8>)
 801038c:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 801038e:	4b31      	ldr	r3, [pc, #196]	; (8010454 <SAIx_Out_Init+0xd4>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	681a      	ldr	r2, [r3, #0]
 8010394:	4b2f      	ldr	r3, [pc, #188]	; (8010454 <SAIx_Out_Init+0xd4>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801039c:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x 
  LSBFirst: Disabled 
  DataSize: 16 */
  haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 801039e:	4b2d      	ldr	r3, [pc, #180]	; (8010454 <SAIx_Out_Init+0xd4>)
 80103a0:	2200      	movs	r2, #0
 80103a2:	625a      	str	r2, [r3, #36]	; 0x24
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80103a4:	4a2b      	ldr	r2, [pc, #172]	; (8010454 <SAIx_Out_Init+0xd4>)
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 80103aa:	4b2a      	ldr	r3, [pc, #168]	; (8010454 <SAIx_Out_Init+0xd4>)
 80103ac:	2200      	movs	r2, #0
 80103ae:	605a      	str	r2, [r3, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80103b0:	4b28      	ldr	r3, [pc, #160]	; (8010454 <SAIx_Out_Init+0xd4>)
 80103b2:	2200      	movs	r2, #0
 80103b4:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80103b6:	4b27      	ldr	r3, [pc, #156]	; (8010454 <SAIx_Out_Init+0xd4>)
 80103b8:	2200      	movs	r2, #0
 80103ba:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 80103bc:	4b25      	ldr	r3, [pc, #148]	; (8010454 <SAIx_Out_Init+0xd4>)
 80103be:	2280      	movs	r2, #128	; 0x80
 80103c0:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80103c2:	4b24      	ldr	r3, [pc, #144]	; (8010454 <SAIx_Out_Init+0xd4>)
 80103c4:	2200      	movs	r2, #0
 80103c6:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80103c8:	4b22      	ldr	r3, [pc, #136]	; (8010454 <SAIx_Out_Init+0xd4>)
 80103ca:	2201      	movs	r2, #1
 80103cc:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80103ce:	4b21      	ldr	r3, [pc, #132]	; (8010454 <SAIx_Out_Init+0xd4>)
 80103d0:	2200      	movs	r2, #0
 80103d2:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80103d4:	4b1f      	ldr	r3, [pc, #124]	; (8010454 <SAIx_Out_Init+0xd4>)
 80103d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80103da:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80103dc:	4b1d      	ldr	r3, [pc, #116]	; (8010454 <SAIx_Out_Init+0xd4>)
 80103de:	2201      	movs	r2, #1
 80103e0:	619a      	str	r2, [r3, #24]
  haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 80103e2:	4b1c      	ldr	r3, [pc, #112]	; (8010454 <SAIx_Out_Init+0xd4>)
 80103e4:	2200      	movs	r2, #0
 80103e6:	60da      	str	r2, [r3, #12]
  haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 80103e8:	4b1a      	ldr	r3, [pc, #104]	; (8010454 <SAIx_Out_Init+0xd4>)
 80103ea:	2200      	movs	r2, #0
 80103ec:	629a      	str	r2, [r3, #40]	; 0x28
  haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 80103ee:	4b19      	ldr	r3, [pc, #100]	; (8010454 <SAIx_Out_Init+0xd4>)
 80103f0:	2200      	movs	r2, #0
 80103f2:	62da      	str	r2, [r3, #44]	; 0x2c
  haudio_out_sai.Init.Mckdiv         = 0;
 80103f4:	4b17      	ldr	r3, [pc, #92]	; (8010454 <SAIx_Out_Init+0xd4>)
 80103f6:	2200      	movs	r2, #0
 80103f8:	621a      	str	r2, [r3, #32]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */ 
  haudio_out_sai.FrameInit.FrameLength = 128; 
 80103fa:	4b16      	ldr	r3, [pc, #88]	; (8010454 <SAIx_Out_Init+0xd4>)
 80103fc:	2280      	movs	r2, #128	; 0x80
 80103fe:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 64;
 8010400:	4b14      	ldr	r3, [pc, #80]	; (8010454 <SAIx_Out_Init+0xd4>)
 8010402:	2240      	movs	r2, #64	; 0x40
 8010404:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8010406:	4b13      	ldr	r3, [pc, #76]	; (8010454 <SAIx_Out_Init+0xd4>)
 8010408:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801040c:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 801040e:	4b11      	ldr	r3, [pc, #68]	; (8010454 <SAIx_Out_Init+0xd4>)
 8010410:	2200      	movs	r2, #0
 8010412:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8010414:	4b0f      	ldr	r3, [pc, #60]	; (8010454 <SAIx_Out_Init+0xd4>)
 8010416:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801041a:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot 
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 801041c:	4b0d      	ldr	r3, [pc, #52]	; (8010454 <SAIx_Out_Init+0xd4>)
 801041e:	2200      	movs	r2, #0
 8010420:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8010422:	4b0c      	ldr	r3, [pc, #48]	; (8010454 <SAIx_Out_Init+0xd4>)
 8010424:	2200      	movs	r2, #0
 8010426:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4; 
 8010428:	4b0a      	ldr	r3, [pc, #40]	; (8010454 <SAIx_Out_Init+0xd4>)
 801042a:	2204      	movs	r2, #4
 801042c:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 801042e:	4b09      	ldr	r3, [pc, #36]	; (8010454 <SAIx_Out_Init+0xd4>)
 8010430:	220f      	movs	r2, #15
 8010432:	661a      	str	r2, [r3, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8010434:	4807      	ldr	r0, [pc, #28]	; (8010454 <SAIx_Out_Init+0xd4>)
 8010436:	f7fe f915 	bl	800e664 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 801043a:	4b06      	ldr	r3, [pc, #24]	; (8010454 <SAIx_Out_Init+0xd4>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	681a      	ldr	r2, [r3, #0]
 8010440:	4b04      	ldr	r3, [pc, #16]	; (8010454 <SAIx_Out_Init+0xd4>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8010448:	601a      	str	r2, [r3, #0]
}
 801044a:	bf00      	nop
 801044c:	3708      	adds	r7, #8
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}
 8010452:	bf00      	nop
 8010454:	2002abe8 	.word	0x2002abe8
 8010458:	40015804 	.word	0x40015804

0801045c <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	af00      	add	r7, sp, #0
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8010460:	4b07      	ldr	r3, [pc, #28]	; (8010480 <SAIx_Out_DeInit+0x24>)
 8010462:	4a08      	ldr	r2, [pc, #32]	; (8010484 <SAIx_Out_DeInit+0x28>)
 8010464:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8010466:	4b06      	ldr	r3, [pc, #24]	; (8010480 <SAIx_Out_DeInit+0x24>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	681a      	ldr	r2, [r3, #0]
 801046c:	4b04      	ldr	r3, [pc, #16]	; (8010480 <SAIx_Out_DeInit+0x24>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010474:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 8010476:	4802      	ldr	r0, [pc, #8]	; (8010480 <SAIx_Out_DeInit+0x24>)
 8010478:	f7fe fa66 	bl	800e948 <HAL_SAI_DeInit>
}
 801047c:	bf00      	nop
 801047e:	bd80      	pop	{r7, pc}
 8010480:	2002abe8 	.word	0x2002abe8
 8010484:	40015804 	.word	0x40015804

08010488 <SAIx_In_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123 
  *         and user can update this configuration using 
  * @retval None
  */
static void SAIx_In_Init(uint32_t AudioFreq)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b082      	sub	sp, #8
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
  /* Initialize SAI1 block A in MASTER TX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8010490:	4b62      	ldr	r3, [pc, #392]	; (801061c <SAIx_In_Init+0x194>)
 8010492:	4a63      	ldr	r2, [pc, #396]	; (8010620 <SAIx_In_Init+0x198>)
 8010494:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8010496:	4b61      	ldr	r3, [pc, #388]	; (801061c <SAIx_In_Init+0x194>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	681a      	ldr	r2, [r3, #0]
 801049c:	4b5f      	ldr	r3, [pc, #380]	; (801061c <SAIx_In_Init+0x194>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80104a4:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 80104a6:	4b5d      	ldr	r3, [pc, #372]	; (801061c <SAIx_In_Init+0x194>)
 80104a8:	2200      	movs	r2, #0
 80104aa:	625a      	str	r2, [r3, #36]	; 0x24
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80104ac:	4a5b      	ldr	r2, [pc, #364]	; (801061c <SAIx_In_Init+0x194>)
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode      = SAI_MODEMASTER_RX;
 80104b2:	4b5a      	ldr	r3, [pc, #360]	; (801061c <SAIx_In_Init+0x194>)
 80104b4:	2201      	movs	r2, #1
 80104b6:	605a      	str	r2, [r3, #4]
  haudio_out_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 80104b8:	4b58      	ldr	r3, [pc, #352]	; (801061c <SAIx_In_Init+0x194>)
 80104ba:	2200      	movs	r2, #0
 80104bc:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 80104be:	4b57      	ldr	r3, [pc, #348]	; (801061c <SAIx_In_Init+0x194>)
 80104c0:	2200      	movs	r2, #0
 80104c2:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize       = SAI_DATASIZE_16;
 80104c4:	4b55      	ldr	r3, [pc, #340]	; (801061c <SAIx_In_Init+0x194>)
 80104c6:	2280      	movs	r2, #128	; 0x80
 80104c8:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 80104ca:	4b54      	ldr	r3, [pc, #336]	; (801061c <SAIx_In_Init+0x194>)
 80104cc:	2200      	movs	r2, #0
 80104ce:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 80104d0:	4b52      	ldr	r3, [pc, #328]	; (801061c <SAIx_In_Init+0x194>)
 80104d2:	2200      	movs	r2, #0
 80104d4:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro        = SAI_ASYNCHRONOUS;
 80104d6:	4b51      	ldr	r3, [pc, #324]	; (801061c <SAIx_In_Init+0x194>)
 80104d8:	2200      	movs	r2, #0
 80104da:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 80104dc:	4b4f      	ldr	r3, [pc, #316]	; (801061c <SAIx_In_Init+0x194>)
 80104de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80104e2:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 80104e4:	4b4d      	ldr	r3, [pc, #308]	; (801061c <SAIx_In_Init+0x194>)
 80104e6:	2201      	movs	r2, #1
 80104e8:	619a      	str	r2, [r3, #24]
  haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 80104ea:	4b4c      	ldr	r3, [pc, #304]	; (801061c <SAIx_In_Init+0x194>)
 80104ec:	2200      	movs	r2, #0
 80104ee:	60da      	str	r2, [r3, #12]
  haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 80104f0:	4b4a      	ldr	r3, [pc, #296]	; (801061c <SAIx_In_Init+0x194>)
 80104f2:	2200      	movs	r2, #0
 80104f4:	629a      	str	r2, [r3, #40]	; 0x28
  haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 80104f6:	4b49      	ldr	r3, [pc, #292]	; (801061c <SAIx_In_Init+0x194>)
 80104f8:	2200      	movs	r2, #0
 80104fa:	62da      	str	r2, [r3, #44]	; 0x2c
  haudio_out_sai.Init.Mckdiv         = 0;  
 80104fc:	4b47      	ldr	r3, [pc, #284]	; (801061c <SAIx_In_Init+0x194>)
 80104fe:	2200      	movs	r2, #0
 8010500:	621a      	str	r2, [r3, #32]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength       = 64;
 8010502:	4b46      	ldr	r3, [pc, #280]	; (801061c <SAIx_In_Init+0x194>)
 8010504:	2240      	movs	r2, #64	; 0x40
 8010506:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8010508:	4b44      	ldr	r3, [pc, #272]	; (801061c <SAIx_In_Init+0x194>)
 801050a:	2220      	movs	r2, #32
 801050c:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 801050e:	4b43      	ldr	r3, [pc, #268]	; (801061c <SAIx_In_Init+0x194>)
 8010510:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010514:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8010516:	4b41      	ldr	r3, [pc, #260]	; (801061c <SAIx_In_Init+0x194>)
 8010518:	2200      	movs	r2, #0
 801051a:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 801051c:	4b3f      	ldr	r3, [pc, #252]	; (801061c <SAIx_In_Init+0x194>)
 801051e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8010522:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8010524:	4b3d      	ldr	r3, [pc, #244]	; (801061c <SAIx_In_Init+0x194>)
 8010526:	2200      	movs	r2, #0
 8010528:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 801052a:	4b3c      	ldr	r3, [pc, #240]	; (801061c <SAIx_In_Init+0x194>)
 801052c:	2200      	movs	r2, #0
 801052e:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber     = 4;
 8010530:	4b3a      	ldr	r3, [pc, #232]	; (801061c <SAIx_In_Init+0x194>)
 8010532:	2204      	movs	r2, #4
 8010534:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_02;
 8010536:	4b39      	ldr	r3, [pc, #228]	; (801061c <SAIx_In_Init+0x194>)
 8010538:	2205      	movs	r2, #5
 801053a:	661a      	str	r2, [r3, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 801053c:	4837      	ldr	r0, [pc, #220]	; (801061c <SAIx_In_Init+0x194>)
 801053e:	f7fe f891 	bl	800e664 <HAL_SAI_Init>

  /* Initialize SAI1 block B in SLAVE RX synchronous from SAI1 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8010542:	4b38      	ldr	r3, [pc, #224]	; (8010624 <SAIx_In_Init+0x19c>)
 8010544:	4a38      	ldr	r2, [pc, #224]	; (8010628 <SAIx_In_Init+0x1a0>)
 8010546:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8010548:	4b36      	ldr	r3, [pc, #216]	; (8010624 <SAIx_In_Init+0x19c>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	681a      	ldr	r2, [r3, #0]
 801054e:	4b35      	ldr	r3, [pc, #212]	; (8010624 <SAIx_In_Init+0x19c>)
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010556:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8010558:	4b32      	ldr	r3, [pc, #200]	; (8010624 <SAIx_In_Init+0x19c>)
 801055a:	2200      	movs	r2, #0
 801055c:	625a      	str	r2, [r3, #36]	; 0x24
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 801055e:	4a31      	ldr	r2, [pc, #196]	; (8010624 <SAIx_In_Init+0x19c>)
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode      = SAI_MODESLAVE_RX;
 8010564:	4b2f      	ldr	r3, [pc, #188]	; (8010624 <SAIx_In_Init+0x19c>)
 8010566:	2203      	movs	r2, #3
 8010568:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 801056a:	4b2e      	ldr	r3, [pc, #184]	; (8010624 <SAIx_In_Init+0x19c>)
 801056c:	2200      	movs	r2, #0
 801056e:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 8010570:	4b2c      	ldr	r3, [pc, #176]	; (8010624 <SAIx_In_Init+0x19c>)
 8010572:	2200      	movs	r2, #0
 8010574:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_in_sai.Init.DataSize       = SAI_DATASIZE_16;
 8010576:	4b2b      	ldr	r3, [pc, #172]	; (8010624 <SAIx_In_Init+0x19c>)
 8010578:	2280      	movs	r2, #128	; 0x80
 801057a:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_in_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 801057c:	4b29      	ldr	r3, [pc, #164]	; (8010624 <SAIx_In_Init+0x19c>)
 801057e:	2200      	movs	r2, #0
 8010580:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_RISINGEDGE;
 8010582:	4b28      	ldr	r3, [pc, #160]	; (8010624 <SAIx_In_Init+0x19c>)
 8010584:	2201      	movs	r2, #1
 8010586:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_in_sai.Init.Synchro        = SAI_SYNCHRONOUS;
 8010588:	4b26      	ldr	r3, [pc, #152]	; (8010624 <SAIx_In_Init+0x19c>)
 801058a:	2201      	movs	r2, #1
 801058c:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_DISABLE;
 801058e:	4b25      	ldr	r3, [pc, #148]	; (8010624 <SAIx_In_Init+0x19c>)
 8010590:	2200      	movs	r2, #0
 8010592:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8010594:	4b23      	ldr	r3, [pc, #140]	; (8010624 <SAIx_In_Init+0x19c>)
 8010596:	2201      	movs	r2, #1
 8010598:	619a      	str	r2, [r3, #24]
  haudio_in_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 801059a:	4b22      	ldr	r3, [pc, #136]	; (8010624 <SAIx_In_Init+0x19c>)
 801059c:	2200      	movs	r2, #0
 801059e:	60da      	str	r2, [r3, #12]
  haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 80105a0:	4b20      	ldr	r3, [pc, #128]	; (8010624 <SAIx_In_Init+0x19c>)
 80105a2:	2200      	movs	r2, #0
 80105a4:	629a      	str	r2, [r3, #40]	; 0x28
  haudio_in_sai.Init.TriState       = SAI_OUTPUT_RELEASED;
 80105a6:	4b1f      	ldr	r3, [pc, #124]	; (8010624 <SAIx_In_Init+0x19c>)
 80105a8:	2210      	movs	r2, #16
 80105aa:	62da      	str	r2, [r3, #44]	; 0x2c
  haudio_in_sai.Init.Mckdiv         = 0;
 80105ac:	4b1d      	ldr	r3, [pc, #116]	; (8010624 <SAIx_In_Init+0x19c>)
 80105ae:	2200      	movs	r2, #0
 80105b0:	621a      	str	r2, [r3, #32]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength       = 64;
 80105b2:	4b1c      	ldr	r3, [pc, #112]	; (8010624 <SAIx_In_Init+0x19c>)
 80105b4:	2240      	movs	r2, #64	; 0x40
 80105b6:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 80105b8:	4b1a      	ldr	r3, [pc, #104]	; (8010624 <SAIx_In_Init+0x19c>)
 80105ba:	2220      	movs	r2, #32
 80105bc:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80105be:	4b19      	ldr	r3, [pc, #100]	; (8010624 <SAIx_In_Init+0x19c>)
 80105c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80105c4:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80105c6:	4b17      	ldr	r3, [pc, #92]	; (8010624 <SAIx_In_Init+0x19c>)
 80105c8:	2200      	movs	r2, #0
 80105ca:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80105cc:	4b15      	ldr	r3, [pc, #84]	; (8010624 <SAIx_In_Init+0x19c>)
 80105ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80105d2:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 80105d4:	4b13      	ldr	r3, [pc, #76]	; (8010624 <SAIx_In_Init+0x19c>)
 80105d6:	2200      	movs	r2, #0
 80105d8:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 80105da:	4b12      	ldr	r3, [pc, #72]	; (8010624 <SAIx_In_Init+0x19c>)
 80105dc:	2200      	movs	r2, #0
 80105de:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber     = 4;
 80105e0:	4b10      	ldr	r3, [pc, #64]	; (8010624 <SAIx_In_Init+0x19c>)
 80105e2:	2204      	movs	r2, #4
 80105e4:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_02;
 80105e6:	4b0f      	ldr	r3, [pc, #60]	; (8010624 <SAIx_In_Init+0x19c>)
 80105e8:	2205      	movs	r2, #5
 80105ea:	661a      	str	r2, [r3, #96]	; 0x60

  HAL_SAI_Init(&haudio_in_sai);
 80105ec:	480d      	ldr	r0, [pc, #52]	; (8010624 <SAIx_In_Init+0x19c>)
 80105ee:	f7fe f839 	bl	800e664 <HAL_SAI_Init>

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 80105f2:	4b0c      	ldr	r3, [pc, #48]	; (8010624 <SAIx_In_Init+0x19c>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	681a      	ldr	r2, [r3, #0]
 80105f8:	4b0a      	ldr	r3, [pc, #40]	; (8010624 <SAIx_In_Init+0x19c>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8010600:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8010602:	4b06      	ldr	r3, [pc, #24]	; (801061c <SAIx_In_Init+0x194>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	4b04      	ldr	r3, [pc, #16]	; (801061c <SAIx_In_Init+0x194>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8010610:	601a      	str	r2, [r3, #0]
}
 8010612:	bf00      	nop
 8010614:	3708      	adds	r7, #8
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}
 801061a:	bf00      	nop
 801061c:	2002abe8 	.word	0x2002abe8
 8010620:	40015804 	.word	0x40015804
 8010624:	2002ab04 	.word	0x2002ab04
 8010628:	40015824 	.word	0x40015824

0801062c <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8010630:	4b0a      	ldr	r3, [pc, #40]	; (801065c <SAIx_In_DeInit+0x30>)
 8010632:	4a0b      	ldr	r2, [pc, #44]	; (8010660 <SAIx_In_DeInit+0x34>)
 8010634:	601a      	str	r2, [r3, #0]
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8010636:	4b0b      	ldr	r3, [pc, #44]	; (8010664 <SAIx_In_DeInit+0x38>)
 8010638:	4a0b      	ldr	r2, [pc, #44]	; (8010668 <SAIx_In_DeInit+0x3c>)
 801063a:	601a      	str	r2, [r3, #0]
  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 801063c:	4b07      	ldr	r3, [pc, #28]	; (801065c <SAIx_In_DeInit+0x30>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	681a      	ldr	r2, [r3, #0]
 8010642:	4b06      	ldr	r3, [pc, #24]	; (801065c <SAIx_In_DeInit+0x30>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801064a:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 801064c:	4803      	ldr	r0, [pc, #12]	; (801065c <SAIx_In_DeInit+0x30>)
 801064e:	f7fe f97b 	bl	800e948 <HAL_SAI_DeInit>
  HAL_SAI_DeInit(&haudio_out_sai);
 8010652:	4804      	ldr	r0, [pc, #16]	; (8010664 <SAIx_In_DeInit+0x38>)
 8010654:	f7fe f978 	bl	800e948 <HAL_SAI_DeInit>
}
 8010658:	bf00      	nop
 801065a:	bd80      	pop	{r7, pc}
 801065c:	2002ab04 	.word	0x2002ab04
 8010660:	40015824 	.word	0x40015824
 8010664:	2002abe8 	.word	0x2002abe8
 8010668:	40015804 	.word	0x40015804

0801066c <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured for the DFSDM peripheral.
  * @param  ChnlNbr: Audio frequency to be configured for the DFSDM peripheral.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{ 
 801066c:	b580      	push	{r7, lr}
 801066e:	b084      	sub	sp, #16
 8010670:	af00      	add	r7, sp, #0
 8010672:	60f8      	str	r0, [r7, #12]
 8010674:	60b9      	str	r1, [r7, #8]
 8010676:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MIC, AudioFreq, BitRes, ChnlNbr);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	68ba      	ldr	r2, [r7, #8]
 801067c:	68f9      	ldr	r1, [r7, #12]
 801067e:	2000      	movs	r0, #0
 8010680:	f000 f806 	bl	8010690 <BSP_AUDIO_IN_InitEx>
 8010684:	4603      	mov	r3, r0
}
 8010686:	4618      	mov	r0, r3
 8010688:	3710      	adds	r7, #16
 801068a:	46bd      	mov	sp, r7
 801068c:	bd80      	pop	{r7, pc}
	...

08010690 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio bit resolution to be configured..
  * @param  ChnlNbr: Number of channel to be configured.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{ 
 8010690:	b590      	push	{r4, r7, lr}
 8010692:	b087      	sub	sp, #28
 8010694:	af00      	add	r7, sp, #0
 8010696:	60b9      	str	r1, [r7, #8]
 8010698:	607a      	str	r2, [r7, #4]
 801069a:	603b      	str	r3, [r7, #0]
 801069c:	4603      	mov	r3, r0
 801069e:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 80106a0:	2301      	movs	r3, #1
 80106a2:	75fb      	strb	r3, [r7, #23]
  AudioIn_Device = InputDevice;
 80106a4:	4a2a      	ldr	r2, [pc, #168]	; (8010750 <BSP_AUDIO_IN_InitEx+0xc0>)
 80106a6:	89fb      	ldrh	r3, [r7, #14]
 80106a8:	8013      	strh	r3, [r2, #0]
  
  if(InputDevice == INPUT_DEVICE_DIGITAL_MIC)
 80106aa:	89fb      	ldrh	r3, [r7, #14]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d110      	bne.n	80106d2 <BSP_AUDIO_IN_InitEx+0x42>
  {
    AudioIn_ChannelNumber = ChnlNbr;
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	b2da      	uxtb	r2, r3
 80106b4:	4b27      	ldr	r3, [pc, #156]	; (8010754 <BSP_AUDIO_IN_InitEx+0xc4>)
 80106b6:	701a      	strb	r2, [r3, #0]
    /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
    BSP_AUDIO_IN_ClockConfig(&hAudioInTopLeftFilter, AudioFreq, NULL);
 80106b8:	2200      	movs	r2, #0
 80106ba:	68b9      	ldr	r1, [r7, #8]
 80106bc:	4826      	ldr	r0, [pc, #152]	; (8010758 <BSP_AUDIO_IN_InitEx+0xc8>)
 80106be:	f000 fd23 	bl	8011108 <BSP_AUDIO_IN_ClockConfig>
    
    /* Init the SAI MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_IN_MspInit();
 80106c2:	f000 fd0b 	bl	80110dc <BSP_AUDIO_IN_MspInit>
    
    /* Initializes DFSDM peripheral */
    DFSDMx_Init(AudioFreq);
 80106c6:	68b8      	ldr	r0, [r7, #8]
 80106c8:	f000 fd6e 	bl	80111a8 <DFSDMx_Init>
    ret = AUDIO_OK;
 80106cc:	2300      	movs	r3, #0
 80106ce:	75fb      	strb	r3, [r7, #23]
 80106d0:	e038      	b.n	8010744 <BSP_AUDIO_IN_InitEx+0xb4>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 80106d2:	f7ff ffab 	bl	801062c <SAIx_In_DeInit>
    
    /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL);
 80106d6:	2200      	movs	r2, #0
 80106d8:	68b9      	ldr	r1, [r7, #8]
 80106da:	4820      	ldr	r0, [pc, #128]	; (801075c <BSP_AUDIO_IN_InitEx+0xcc>)
 80106dc:	f7ff fe0c 	bl	80102f8 <BSP_AUDIO_OUT_ClockConfig>
    
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80106e0:	4b1e      	ldr	r3, [pc, #120]	; (801075c <BSP_AUDIO_IN_InitEx+0xcc>)
 80106e2:	4a1f      	ldr	r2, [pc, #124]	; (8010760 <BSP_AUDIO_IN_InitEx+0xd0>)
 80106e4:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 80106e6:	481d      	ldr	r0, [pc, #116]	; (801075c <BSP_AUDIO_IN_InitEx+0xcc>)
 80106e8:	f7fe fa64 	bl	800ebb4 <HAL_SAI_GetState>
 80106ec:	4603      	mov	r3, r0
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d105      	bne.n	80106fe <BSP_AUDIO_IN_InitEx+0x6e>
    {    
    BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);
 80106f2:	2100      	movs	r1, #0
 80106f4:	4819      	ldr	r0, [pc, #100]	; (801075c <BSP_AUDIO_IN_InitEx+0xcc>)
 80106f6:	f7ff fcab 	bl	8010050 <BSP_AUDIO_OUT_MspInit>
    BSP_AUDIO_IN_MspInit();
 80106fa:	f000 fcef 	bl	80110dc <BSP_AUDIO_IN_MspInit>
    }

    SAIx_In_Init(AudioFreq);
 80106fe:	68b8      	ldr	r0, [r7, #8]
 8010700:	f7ff fec2 	bl	8010488 <SAIx_In_Init>
    
    if((wm8994_drv.ReadID(AUDIO_I2C_ADDRESS)) == WM8994_ID)
 8010704:	4b17      	ldr	r3, [pc, #92]	; (8010764 <BSP_AUDIO_IN_InitEx+0xd4>)
 8010706:	689b      	ldr	r3, [r3, #8]
 8010708:	2034      	movs	r0, #52	; 0x34
 801070a:	4798      	blx	r3
 801070c:	4602      	mov	r2, r0
 801070e:	f648 1394 	movw	r3, #35220	; 0x8994
 8010712:	429a      	cmp	r2, r3
 8010714:	d109      	bne.n	801072a <BSP_AUDIO_IN_InitEx+0x9a>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8010716:	4b13      	ldr	r3, [pc, #76]	; (8010764 <BSP_AUDIO_IN_InitEx+0xd4>)
 8010718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801071a:	2034      	movs	r0, #52	; 0x34
 801071c:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 801071e:	4b12      	ldr	r3, [pc, #72]	; (8010768 <BSP_AUDIO_IN_InitEx+0xd8>)
 8010720:	4a10      	ldr	r2, [pc, #64]	; (8010764 <BSP_AUDIO_IN_InitEx+0xd4>)
 8010722:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8010724:	2300      	movs	r3, #0
 8010726:	75fb      	strb	r3, [r7, #23]
 8010728:	e001      	b.n	801072e <BSP_AUDIO_IN_InitEx+0x9e>
    }
    else
    {
      ret = AUDIO_ERROR;
 801072a:	2301      	movs	r3, #1
 801072c:	75fb      	strb	r3, [r7, #23]
    }
    
    if(ret == AUDIO_OK)
 801072e:	7dfb      	ldrb	r3, [r7, #23]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d107      	bne.n	8010744 <BSP_AUDIO_IN_InitEx+0xb4>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8010734:	4b0c      	ldr	r3, [pc, #48]	; (8010768 <BSP_AUDIO_IN_InitEx+0xd8>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	681c      	ldr	r4, [r3, #0]
 801073a:	89f9      	ldrh	r1, [r7, #14]
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	2264      	movs	r2, #100	; 0x64
 8010740:	2034      	movs	r0, #52	; 0x34
 8010742:	47a0      	blx	r4
    }    
  }
  
  /* Return AUDIO_OK when all operations are correctly done */
  return ret;
 8010744:	7dfb      	ldrb	r3, [r7, #23]
}
 8010746:	4618      	mov	r0, r3
 8010748:	371c      	adds	r7, #28
 801074a:	46bd      	mov	sp, r7
 801074c:	bd90      	pop	{r4, r7, pc}
 801074e:	bf00      	nop
 8010750:	20004b54 	.word	0x20004b54
 8010754:	20000020 	.word	0x20000020
 8010758:	2002ac6c 	.word	0x2002ac6c
 801075c:	2002ab04 	.word	0x2002ab04
 8010760:	40015824 	.word	0x40015824
 8010764:	20000024 	.word	0x20000024
 8010768:	2002ad28 	.word	0x2002ad28

0801076c <BSP_AUDIO_IN_AllocScratch>:
  * @brief  Allocate channel buffer scratch 
  * @param  pScratch : pointer to scratch tables.
  * @param  size of scratch buffer
  */
uint8_t BSP_AUDIO_IN_AllocScratch (int32_t *pScratch, uint32_t size)
{ 
 801076c:	b480      	push	{r7}
 801076e:	b085      	sub	sp, #20
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
 8010774:	6039      	str	r1, [r7, #0]
  uint32_t idx;
  
  ScratchSize = (size / AudioIn_ChannelNumber);
 8010776:	4b14      	ldr	r3, [pc, #80]	; (80107c8 <BSP_AUDIO_IN_AllocScratch+0x5c>)
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	461a      	mov	r2, r3
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010782:	461a      	mov	r2, r3
 8010784:	4b11      	ldr	r3, [pc, #68]	; (80107cc <BSP_AUDIO_IN_AllocScratch+0x60>)
 8010786:	601a      	str	r2, [r3, #0]
  
  /* copy scratch pointers */
  for (idx = 0; idx < AudioIn_ChannelNumber; idx++)
 8010788:	2300      	movs	r3, #0
 801078a:	60fb      	str	r3, [r7, #12]
 801078c:	e00f      	b.n	80107ae <BSP_AUDIO_IN_AllocScratch+0x42>
  {
    pScratchBuff[idx] = (int32_t *)(pScratch + (idx * ScratchSize));
 801078e:	4b0f      	ldr	r3, [pc, #60]	; (80107cc <BSP_AUDIO_IN_AllocScratch+0x60>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	461a      	mov	r2, r3
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	fb03 f302 	mul.w	r3, r3, r2
 801079a:	009b      	lsls	r3, r3, #2
 801079c:	687a      	ldr	r2, [r7, #4]
 801079e:	441a      	add	r2, r3
 80107a0:	490b      	ldr	r1, [pc, #44]	; (80107d0 <BSP_AUDIO_IN_AllocScratch+0x64>)
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (idx = 0; idx < AudioIn_ChannelNumber; idx++)
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	3301      	adds	r3, #1
 80107ac:	60fb      	str	r3, [r7, #12]
 80107ae:	4b06      	ldr	r3, [pc, #24]	; (80107c8 <BSP_AUDIO_IN_AllocScratch+0x5c>)
 80107b0:	781b      	ldrb	r3, [r3, #0]
 80107b2:	461a      	mov	r2, r3
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	4293      	cmp	r3, r2
 80107b8:	d3e9      	bcc.n	801078e <BSP_AUDIO_IN_AllocScratch+0x22>
  }
  /* Return AUDIO_OK */
  return AUDIO_OK;
 80107ba:	2300      	movs	r3, #0
}
 80107bc:	4618      	mov	r0, r3
 80107be:	3714      	adds	r7, #20
 80107c0:	46bd      	mov	sp, r7
 80107c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c6:	4770      	bx	lr
 80107c8:	20000020 	.word	0x20000020
 80107cc:	20004b50 	.word	0x20004b50
 80107d0:	20004b40 	.word	0x20004b40

080107d4 <BSP_AUDIO_IN_Record>:
  * @param  pbuf: Main buffer pointer for the recorded data storing  
  * @param  size: Current size of the recorded buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{  
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b082      	sub	sp, #8
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	6039      	str	r1, [r7, #0]
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 80107de:	4b2c      	ldr	r3, [pc, #176]	; (8010890 <BSP_AUDIO_IN_Record+0xbc>)
 80107e0:	881b      	ldrh	r3, [r3, #0]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d143      	bne.n	801086e <BSP_AUDIO_IN_Record+0x9a>
  {
    hAudioIn.pRecBuf = pbuf;
 80107e6:	4a2b      	ldr	r2, [pc, #172]	; (8010894 <BSP_AUDIO_IN_Record+0xc0>)
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6013      	str	r3, [r2, #0]
    hAudioIn.RecSize = size;
 80107ec:	4a29      	ldr	r2, [pc, #164]	; (8010894 <BSP_AUDIO_IN_Record+0xc0>)
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	6053      	str	r3, [r2, #4]
    /* Reset Application Buffer Trigger */
    AppBuffTrigger = 0;
 80107f2:	4b29      	ldr	r3, [pc, #164]	; (8010898 <BSP_AUDIO_IN_Record+0xc4>)
 80107f4:	2200      	movs	r2, #0
 80107f6:	601a      	str	r2, [r3, #0]
    AppBuffHalf = 0;
 80107f8:	4b28      	ldr	r3, [pc, #160]	; (801089c <BSP_AUDIO_IN_Record+0xc8>)
 80107fa:	2200      	movs	r2, #0
 80107fc:	601a      	str	r2, [r3, #0]
    
    if(AudioIn_ChannelNumber > 2)
 80107fe:	4b28      	ldr	r3, [pc, #160]	; (80108a0 <BSP_AUDIO_IN_Record+0xcc>)
 8010800:	781b      	ldrb	r3, [r3, #0]
 8010802:	2b02      	cmp	r3, #2
 8010804:	d919      	bls.n	801083a <BSP_AUDIO_IN_Record+0x66>
    {
      /* Call the Media layer start function for buttom right channel */
      if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInButtomRightFilter, pScratchBuff[2], ScratchSize))
 8010806:	4b27      	ldr	r3, [pc, #156]	; (80108a4 <BSP_AUDIO_IN_Record+0xd0>)
 8010808:	6899      	ldr	r1, [r3, #8]
 801080a:	4b27      	ldr	r3, [pc, #156]	; (80108a8 <BSP_AUDIO_IN_Record+0xd4>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	461a      	mov	r2, r3
 8010810:	4826      	ldr	r0, [pc, #152]	; (80108ac <BSP_AUDIO_IN_Record+0xd8>)
 8010812:	f7fa fe0f 	bl	800b434 <HAL_DFSDM_FilterRegularStart_DMA>
 8010816:	4603      	mov	r3, r0
 8010818:	2b00      	cmp	r3, #0
 801081a:	d001      	beq.n	8010820 <BSP_AUDIO_IN_Record+0x4c>
      {
        return AUDIO_ERROR;
 801081c:	2301      	movs	r3, #1
 801081e:	e033      	b.n	8010888 <BSP_AUDIO_IN_Record+0xb4>
      } 
      
      /* Call the Media layer start function for buttom left channel */
      if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInButtomLeftFilter, pScratchBuff[3], ScratchSize))
 8010820:	4b20      	ldr	r3, [pc, #128]	; (80108a4 <BSP_AUDIO_IN_Record+0xd0>)
 8010822:	68d9      	ldr	r1, [r3, #12]
 8010824:	4b20      	ldr	r3, [pc, #128]	; (80108a8 <BSP_AUDIO_IN_Record+0xd4>)
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	461a      	mov	r2, r3
 801082a:	4821      	ldr	r0, [pc, #132]	; (80108b0 <BSP_AUDIO_IN_Record+0xdc>)
 801082c:	f7fa fe02 	bl	800b434 <HAL_DFSDM_FilterRegularStart_DMA>
 8010830:	4603      	mov	r3, r0
 8010832:	2b00      	cmp	r3, #0
 8010834:	d001      	beq.n	801083a <BSP_AUDIO_IN_Record+0x66>
      {
        return AUDIO_ERROR;
 8010836:	2301      	movs	r3, #1
 8010838:	e026      	b.n	8010888 <BSP_AUDIO_IN_Record+0xb4>
      }
    }

    /* Call the Media layer start function for top right channel */
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInTopRightFilter, pScratchBuff[0], ScratchSize))
 801083a:	4b1a      	ldr	r3, [pc, #104]	; (80108a4 <BSP_AUDIO_IN_Record+0xd0>)
 801083c:	6819      	ldr	r1, [r3, #0]
 801083e:	4b1a      	ldr	r3, [pc, #104]	; (80108a8 <BSP_AUDIO_IN_Record+0xd4>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	461a      	mov	r2, r3
 8010844:	481b      	ldr	r0, [pc, #108]	; (80108b4 <BSP_AUDIO_IN_Record+0xe0>)
 8010846:	f7fa fdf5 	bl	800b434 <HAL_DFSDM_FilterRegularStart_DMA>
 801084a:	4603      	mov	r3, r0
 801084c:	2b00      	cmp	r3, #0
 801084e:	d001      	beq.n	8010854 <BSP_AUDIO_IN_Record+0x80>
    {
      return AUDIO_ERROR;
 8010850:	2301      	movs	r3, #1
 8010852:	e019      	b.n	8010888 <BSP_AUDIO_IN_Record+0xb4>
    }
    
    /* Call the Media layer start function for top left channel */
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInTopLeftFilter, pScratchBuff[1], ScratchSize))
 8010854:	4b13      	ldr	r3, [pc, #76]	; (80108a4 <BSP_AUDIO_IN_Record+0xd0>)
 8010856:	6859      	ldr	r1, [r3, #4]
 8010858:	4b13      	ldr	r3, [pc, #76]	; (80108a8 <BSP_AUDIO_IN_Record+0xd4>)
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	461a      	mov	r2, r3
 801085e:	4816      	ldr	r0, [pc, #88]	; (80108b8 <BSP_AUDIO_IN_Record+0xe4>)
 8010860:	f7fa fde8 	bl	800b434 <HAL_DFSDM_FilterRegularStart_DMA>
 8010864:	4603      	mov	r3, r0
 8010866:	2b00      	cmp	r3, #0
 8010868:	d00d      	beq.n	8010886 <BSP_AUDIO_IN_Record+0xb2>
    {
      return AUDIO_ERROR;
 801086a:	2301      	movs	r3, #1
 801086c:	e00c      	b.n	8010888 <BSP_AUDIO_IN_Record+0xb4>
    }
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_OK !=HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size))
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	b29b      	uxth	r3, r3
 8010872:	461a      	mov	r2, r3
 8010874:	6879      	ldr	r1, [r7, #4]
 8010876:	4811      	ldr	r0, [pc, #68]	; (80108bc <BSP_AUDIO_IN_Record+0xe8>)
 8010878:	f7fe f90e 	bl	800ea98 <HAL_SAI_Receive_DMA>
 801087c:	4603      	mov	r3, r0
 801087e:	2b00      	cmp	r3, #0
 8010880:	d001      	beq.n	8010886 <BSP_AUDIO_IN_Record+0xb2>
    {
      return AUDIO_ERROR;
 8010882:	2301      	movs	r3, #1
 8010884:	e000      	b.n	8010888 <BSP_AUDIO_IN_Record+0xb4>
    }
  }
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK;  
 8010886:	2300      	movs	r3, #0
}
 8010888:	4618      	mov	r0, r3
 801088a:	3708      	adds	r7, #8
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}
 8010890:	20004b54 	.word	0x20004b54
 8010894:	2002acc0 	.word	0x2002acc0
 8010898:	20004b78 	.word	0x20004b78
 801089c:	20004b7c 	.word	0x20004b7c
 80108a0:	20000020 	.word	0x20000020
 80108a4:	20004b40 	.word	0x20004b40
 80108a8:	20004b50 	.word	0x20004b50
 80108ac:	2002aab0 	.word	0x2002aab0
 80108b0:	2002adfc 	.word	0x2002adfc
 80108b4:	2002ae88 	.word	0x2002ae88
 80108b8:	2002ac6c 	.word	0x2002ac6c
 80108bc:	2002ab04 	.word	0x2002ab04

080108c0 <BSP_AUDIO_IN_Stop>:
/**
  * @brief  Stop audio recording.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(void)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	af00      	add	r7, sp, #0
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 80108c4:	4b21      	ldr	r3, [pc, #132]	; (801094c <BSP_AUDIO_IN_Stop+0x8c>)
 80108c6:	881b      	ldrh	r3, [r3, #0]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d129      	bne.n	8010920 <BSP_AUDIO_IN_Stop+0x60>
  { 
    AppBuffTrigger = 0;
 80108cc:	4b20      	ldr	r3, [pc, #128]	; (8010950 <BSP_AUDIO_IN_Stop+0x90>)
 80108ce:	2200      	movs	r2, #0
 80108d0:	601a      	str	r2, [r3, #0]
    AppBuffHalf    = 0;
 80108d2:	4b20      	ldr	r3, [pc, #128]	; (8010954 <BSP_AUDIO_IN_Stop+0x94>)
 80108d4:	2200      	movs	r2, #0
 80108d6:	601a      	str	r2, [r3, #0]
    
    if(AudioIn_ChannelNumber > 2)
 80108d8:	4b1f      	ldr	r3, [pc, #124]	; (8010958 <BSP_AUDIO_IN_Stop+0x98>)
 80108da:	781b      	ldrb	r3, [r3, #0]
 80108dc:	2b02      	cmp	r3, #2
 80108de:	d90f      	bls.n	8010900 <BSP_AUDIO_IN_Stop+0x40>
    {    
      /* Call the Media layer stop function for buttom right channel */
      if(HAL_OK != HAL_DFSDM_FilterRegularStop_DMA(&hAudioInButtomRightFilter))
 80108e0:	481e      	ldr	r0, [pc, #120]	; (801095c <BSP_AUDIO_IN_Stop+0x9c>)
 80108e2:	f7fa fe2b 	bl	800b53c <HAL_DFSDM_FilterRegularStop_DMA>
 80108e6:	4603      	mov	r3, r0
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d001      	beq.n	80108f0 <BSP_AUDIO_IN_Stop+0x30>
      {
        return AUDIO_ERROR;
 80108ec:	2301      	movs	r3, #1
 80108ee:	e02b      	b.n	8010948 <BSP_AUDIO_IN_Stop+0x88>
      }
      
      /* Call the Media layer stop function for buttom left channel */
      if(HAL_OK != HAL_DFSDM_FilterRegularStop_DMA(&hAudioInButtomLeftFilter))
 80108f0:	481b      	ldr	r0, [pc, #108]	; (8010960 <BSP_AUDIO_IN_Stop+0xa0>)
 80108f2:	f7fa fe23 	bl	800b53c <HAL_DFSDM_FilterRegularStop_DMA>
 80108f6:	4603      	mov	r3, r0
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d001      	beq.n	8010900 <BSP_AUDIO_IN_Stop+0x40>
      {
        return AUDIO_ERROR;
 80108fc:	2301      	movs	r3, #1
 80108fe:	e023      	b.n	8010948 <BSP_AUDIO_IN_Stop+0x88>
      }
    }
    
    /* Call the Media layer stop function for top right channel */
    if(HAL_OK != HAL_DFSDM_FilterRegularStop_DMA(&hAudioInTopRightFilter))
 8010900:	4818      	ldr	r0, [pc, #96]	; (8010964 <BSP_AUDIO_IN_Stop+0xa4>)
 8010902:	f7fa fe1b 	bl	800b53c <HAL_DFSDM_FilterRegularStop_DMA>
 8010906:	4603      	mov	r3, r0
 8010908:	2b00      	cmp	r3, #0
 801090a:	d001      	beq.n	8010910 <BSP_AUDIO_IN_Stop+0x50>
    {
      return AUDIO_ERROR;
 801090c:	2301      	movs	r3, #1
 801090e:	e01b      	b.n	8010948 <BSP_AUDIO_IN_Stop+0x88>
    }
    
    /* Call the Media layer stop function for top left channel */
    if(HAL_OK != HAL_DFSDM_FilterRegularStop_DMA(&hAudioInTopLeftFilter))
 8010910:	4815      	ldr	r0, [pc, #84]	; (8010968 <BSP_AUDIO_IN_Stop+0xa8>)
 8010912:	f7fa fe13 	bl	800b53c <HAL_DFSDM_FilterRegularStop_DMA>
 8010916:	4603      	mov	r3, r0
 8010918:	2b00      	cmp	r3, #0
 801091a:	d014      	beq.n	8010946 <BSP_AUDIO_IN_Stop+0x86>
    {
      return AUDIO_ERROR;
 801091c:	2301      	movs	r3, #1
 801091e:	e013      	b.n	8010948 <BSP_AUDIO_IN_Stop+0x88>
    }
  }
  else
  {
    /* Call the Media layer stop function */
    HAL_SAI_DMAStop(&haudio_in_sai);
 8010920:	4812      	ldr	r0, [pc, #72]	; (801096c <BSP_AUDIO_IN_Stop+0xac>)
 8010922:	f7fe f846 	bl	800e9b2 <HAL_SAI_DMAStop>
    
    /* Call Audio Codec Stop function */
    if(audio_drv->Stop(AUDIO_I2C_ADDRESS, CODEC_PDWN_HW) != 0)
 8010926:	4b12      	ldr	r3, [pc, #72]	; (8010970 <BSP_AUDIO_IN_Stop+0xb0>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	699b      	ldr	r3, [r3, #24]
 801092c:	2101      	movs	r1, #1
 801092e:	2034      	movs	r0, #52	; 0x34
 8010930:	4798      	blx	r3
 8010932:	4603      	mov	r3, r0
 8010934:	2b00      	cmp	r3, #0
 8010936:	d001      	beq.n	801093c <BSP_AUDIO_IN_Stop+0x7c>
    {
      return AUDIO_ERROR;
 8010938:	2301      	movs	r3, #1
 801093a:	e005      	b.n	8010948 <BSP_AUDIO_IN_Stop+0x88>
    }
    else
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 801093c:	2001      	movs	r0, #1
 801093e:	f7fa f971 	bl	800ac24 <HAL_Delay>
      
      /* Return AUDIO_OK when all operations are correctly done */
      return AUDIO_OK;
 8010942:	2300      	movs	r3, #0
 8010944:	e000      	b.n	8010948 <BSP_AUDIO_IN_Stop+0x88>
    }  
  }
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK;
 8010946:	2300      	movs	r3, #0
}
 8010948:	4618      	mov	r0, r3
 801094a:	bd80      	pop	{r7, pc}
 801094c:	20004b54 	.word	0x20004b54
 8010950:	20004b78 	.word	0x20004b78
 8010954:	20004b7c 	.word	0x20004b7c
 8010958:	20000020 	.word	0x20000020
 801095c:	2002aab0 	.word	0x2002aab0
 8010960:	2002adfc 	.word	0x2002adfc
 8010964:	2002ae88 	.word	0x2002ae88
 8010968:	2002ac6c 	.word	0x2002ac6c
 801096c:	2002ab04 	.word	0x2002ab04
 8010970:	2002ad28 	.word	0x2002ad28

08010974 <HAL_DFSDM_FilterRegConvCpltCallback>:
            using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter : DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b084      	sub	sp, #16
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
  uint32_t index = 0;
 801097c:	2300      	movs	r3, #0
 801097e:	60fb      	str	r3, [r7, #12]
  
  if(hdfsdm_filter == &hAudioInTopLeftFilter)
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	4a9a      	ldr	r2, [pc, #616]	; (8010bec <HAL_DFSDM_FilterRegConvCpltCallback+0x278>)
 8010984:	4293      	cmp	r3, r2
 8010986:	d103      	bne.n	8010990 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>
  {
    DmaTopLeftRecCplt = 1;
 8010988:	4b99      	ldr	r3, [pc, #612]	; (8010bf0 <HAL_DFSDM_FilterRegConvCpltCallback+0x27c>)
 801098a:	2201      	movs	r2, #1
 801098c:	601a      	str	r2, [r3, #0]
 801098e:	e012      	b.n	80109b6 <HAL_DFSDM_FilterRegConvCpltCallback+0x42>
  }
  else if(hdfsdm_filter == &hAudioInTopRightFilter)
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	4a98      	ldr	r2, [pc, #608]	; (8010bf4 <HAL_DFSDM_FilterRegConvCpltCallback+0x280>)
 8010994:	4293      	cmp	r3, r2
 8010996:	d103      	bne.n	80109a0 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>
  {
    DmaTopRightRecCplt = 1;
 8010998:	4b97      	ldr	r3, [pc, #604]	; (8010bf8 <HAL_DFSDM_FilterRegConvCpltCallback+0x284>)
 801099a:	2201      	movs	r2, #1
 801099c:	601a      	str	r2, [r3, #0]
 801099e:	e00a      	b.n	80109b6 <HAL_DFSDM_FilterRegConvCpltCallback+0x42>
  }
  else if(hdfsdm_filter == &hAudioInButtomLeftFilter)
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	4a96      	ldr	r2, [pc, #600]	; (8010bfc <HAL_DFSDM_FilterRegConvCpltCallback+0x288>)
 80109a4:	4293      	cmp	r3, r2
 80109a6:	d103      	bne.n	80109b0 <HAL_DFSDM_FilterRegConvCpltCallback+0x3c>
  {
    DmaButtomLeftRecCplt = 1;
 80109a8:	4b95      	ldr	r3, [pc, #596]	; (8010c00 <HAL_DFSDM_FilterRegConvCpltCallback+0x28c>)
 80109aa:	2201      	movs	r2, #1
 80109ac:	601a      	str	r2, [r3, #0]
 80109ae:	e002      	b.n	80109b6 <HAL_DFSDM_FilterRegConvCpltCallback+0x42>
  }
  else
  {
    DmaButtomRightRecCplt = 1;
 80109b0:	4b94      	ldr	r3, [pc, #592]	; (8010c04 <HAL_DFSDM_FilterRegConvCpltCallback+0x290>)
 80109b2:	2201      	movs	r2, #1
 80109b4:	601a      	str	r2, [r3, #0]
  }
  
  if(AudioIn_ChannelNumber > 2)
 80109b6:	4b94      	ldr	r3, [pc, #592]	; (8010c08 <HAL_DFSDM_FilterRegConvCpltCallback+0x294>)
 80109b8:	781b      	ldrb	r3, [r3, #0]
 80109ba:	2b02      	cmp	r3, #2
 80109bc:	f240 80e3 	bls.w	8010b86 <HAL_DFSDM_FilterRegConvCpltCallback+0x212>
  {
    if((DmaTopLeftRecCplt == 1) && (DmaTopRightRecCplt == 1) && (DmaButtomLeftRecCplt == 1) && (DmaButtomRightRecCplt == 1))
 80109c0:	4b8b      	ldr	r3, [pc, #556]	; (8010bf0 <HAL_DFSDM_FilterRegConvCpltCallback+0x27c>)
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	2b01      	cmp	r3, #1
 80109c6:	f040 8173 	bne.w	8010cb0 <HAL_DFSDM_FilterRegConvCpltCallback+0x33c>
 80109ca:	4b8b      	ldr	r3, [pc, #556]	; (8010bf8 <HAL_DFSDM_FilterRegConvCpltCallback+0x284>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	2b01      	cmp	r3, #1
 80109d0:	f040 816e 	bne.w	8010cb0 <HAL_DFSDM_FilterRegConvCpltCallback+0x33c>
 80109d4:	4b8a      	ldr	r3, [pc, #552]	; (8010c00 <HAL_DFSDM_FilterRegConvCpltCallback+0x28c>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	2b01      	cmp	r3, #1
 80109da:	f040 8169 	bne.w	8010cb0 <HAL_DFSDM_FilterRegConvCpltCallback+0x33c>
 80109de:	4b89      	ldr	r3, [pc, #548]	; (8010c04 <HAL_DFSDM_FilterRegConvCpltCallback+0x290>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	2b01      	cmp	r3, #1
 80109e4:	f040 8164 	bne.w	8010cb0 <HAL_DFSDM_FilterRegConvCpltCallback+0x33c>
    {
      for(index = (ScratchSize/2) ; index < ScratchSize; index++)
 80109e8:	4b88      	ldr	r3, [pc, #544]	; (8010c0c <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	da00      	bge.n	80109f2 <HAL_DFSDM_FilterRegConvCpltCallback+0x7e>
 80109f0:	3301      	adds	r3, #1
 80109f2:	105b      	asrs	r3, r3, #1
 80109f4:	60fb      	str	r3, [r7, #12]
 80109f6:	e0b2      	b.n	8010b5e <HAL_DFSDM_FilterRegConvCpltCallback+0x1ea>
      {
        hAudioIn.pRecBuf[AppBuffTrigger]     = (uint16_t)(SaturaLH((pScratchBuff[1][index] >> 8), -32760, 32760));
 80109f8:	4b85      	ldr	r3, [pc, #532]	; (8010c10 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 80109fa:	685a      	ldr	r2, [r3, #4]
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	009b      	lsls	r3, r3, #2
 8010a00:	4413      	add	r3, r2
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	121b      	asrs	r3, r3, #8
 8010a06:	4a83      	ldr	r2, [pc, #524]	; (8010c14 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a0>)
 8010a08:	4293      	cmp	r3, r2
 8010a0a:	db16      	blt.n	8010a3a <HAL_DFSDM_FilterRegConvCpltCallback+0xc6>
 8010a0c:	4b80      	ldr	r3, [pc, #512]	; (8010c10 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8010a0e:	685a      	ldr	r2, [r3, #4]
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	009b      	lsls	r3, r3, #2
 8010a14:	4413      	add	r3, r2
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	121b      	asrs	r3, r3, #8
 8010a1a:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8010a1e:	4293      	cmp	r3, r2
 8010a20:	dc08      	bgt.n	8010a34 <HAL_DFSDM_FilterRegConvCpltCallback+0xc0>
 8010a22:	4b7b      	ldr	r3, [pc, #492]	; (8010c10 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8010a24:	685a      	ldr	r2, [r3, #4]
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	009b      	lsls	r3, r3, #2
 8010a2a:	4413      	add	r3, r2
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	121b      	asrs	r3, r3, #8
 8010a30:	b29b      	uxth	r3, r3
 8010a32:	e004      	b.n	8010a3e <HAL_DFSDM_FilterRegConvCpltCallback+0xca>
 8010a34:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8010a38:	e001      	b.n	8010a3e <HAL_DFSDM_FilterRegConvCpltCallback+0xca>
 8010a3a:	f248 0308 	movw	r3, #32776	; 0x8008
 8010a3e:	4a76      	ldr	r2, [pc, #472]	; (8010c18 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a4>)
 8010a40:	6811      	ldr	r1, [r2, #0]
 8010a42:	4a76      	ldr	r2, [pc, #472]	; (8010c1c <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 8010a44:	6812      	ldr	r2, [r2, #0]
 8010a46:	0052      	lsls	r2, r2, #1
 8010a48:	440a      	add	r2, r1
 8010a4a:	8013      	strh	r3, [r2, #0]
        hAudioIn.pRecBuf[AppBuffTrigger + 1] = (uint16_t)(SaturaLH((pScratchBuff[0][index] >> 8), -32760, 32760));       
 8010a4c:	4b70      	ldr	r3, [pc, #448]	; (8010c10 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8010a4e:	681a      	ldr	r2, [r3, #0]
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	009b      	lsls	r3, r3, #2
 8010a54:	4413      	add	r3, r2
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	121b      	asrs	r3, r3, #8
 8010a5a:	4a6e      	ldr	r2, [pc, #440]	; (8010c14 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a0>)
 8010a5c:	4293      	cmp	r3, r2
 8010a5e:	db16      	blt.n	8010a8e <HAL_DFSDM_FilterRegConvCpltCallback+0x11a>
 8010a60:	4b6b      	ldr	r3, [pc, #428]	; (8010c10 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8010a62:	681a      	ldr	r2, [r3, #0]
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	009b      	lsls	r3, r3, #2
 8010a68:	4413      	add	r3, r2
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	121b      	asrs	r3, r3, #8
 8010a6e:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8010a72:	4293      	cmp	r3, r2
 8010a74:	dc08      	bgt.n	8010a88 <HAL_DFSDM_FilterRegConvCpltCallback+0x114>
 8010a76:	4b66      	ldr	r3, [pc, #408]	; (8010c10 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8010a78:	681a      	ldr	r2, [r3, #0]
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	009b      	lsls	r3, r3, #2
 8010a7e:	4413      	add	r3, r2
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	121b      	asrs	r3, r3, #8
 8010a84:	b29b      	uxth	r3, r3
 8010a86:	e004      	b.n	8010a92 <HAL_DFSDM_FilterRegConvCpltCallback+0x11e>
 8010a88:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8010a8c:	e001      	b.n	8010a92 <HAL_DFSDM_FilterRegConvCpltCallback+0x11e>
 8010a8e:	f248 0308 	movw	r3, #32776	; 0x8008
 8010a92:	4a61      	ldr	r2, [pc, #388]	; (8010c18 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a4>)
 8010a94:	6811      	ldr	r1, [r2, #0]
 8010a96:	4a61      	ldr	r2, [pc, #388]	; (8010c1c <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 8010a98:	6812      	ldr	r2, [r2, #0]
 8010a9a:	3201      	adds	r2, #1
 8010a9c:	0052      	lsls	r2, r2, #1
 8010a9e:	440a      	add	r2, r1
 8010aa0:	8013      	strh	r3, [r2, #0]
        hAudioIn.pRecBuf[AppBuffTrigger + 2] = (uint16_t)(SaturaLH((pScratchBuff[3][index] >> 8), -32760, 32760));
 8010aa2:	4b5b      	ldr	r3, [pc, #364]	; (8010c10 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8010aa4:	68da      	ldr	r2, [r3, #12]
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	009b      	lsls	r3, r3, #2
 8010aaa:	4413      	add	r3, r2
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	121b      	asrs	r3, r3, #8
 8010ab0:	4a58      	ldr	r2, [pc, #352]	; (8010c14 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a0>)
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	db16      	blt.n	8010ae4 <HAL_DFSDM_FilterRegConvCpltCallback+0x170>
 8010ab6:	4b56      	ldr	r3, [pc, #344]	; (8010c10 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8010ab8:	68da      	ldr	r2, [r3, #12]
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	009b      	lsls	r3, r3, #2
 8010abe:	4413      	add	r3, r2
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	121b      	asrs	r3, r3, #8
 8010ac4:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8010ac8:	4293      	cmp	r3, r2
 8010aca:	dc08      	bgt.n	8010ade <HAL_DFSDM_FilterRegConvCpltCallback+0x16a>
 8010acc:	4b50      	ldr	r3, [pc, #320]	; (8010c10 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8010ace:	68da      	ldr	r2, [r3, #12]
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	009b      	lsls	r3, r3, #2
 8010ad4:	4413      	add	r3, r2
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	121b      	asrs	r3, r3, #8
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	e004      	b.n	8010ae8 <HAL_DFSDM_FilterRegConvCpltCallback+0x174>
 8010ade:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8010ae2:	e001      	b.n	8010ae8 <HAL_DFSDM_FilterRegConvCpltCallback+0x174>
 8010ae4:	f248 0308 	movw	r3, #32776	; 0x8008
 8010ae8:	4a4b      	ldr	r2, [pc, #300]	; (8010c18 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a4>)
 8010aea:	6811      	ldr	r1, [r2, #0]
 8010aec:	4a4b      	ldr	r2, [pc, #300]	; (8010c1c <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 8010aee:	6812      	ldr	r2, [r2, #0]
 8010af0:	3202      	adds	r2, #2
 8010af2:	0052      	lsls	r2, r2, #1
 8010af4:	440a      	add	r2, r1
 8010af6:	8013      	strh	r3, [r2, #0]
        hAudioIn.pRecBuf[AppBuffTrigger + 3] = (uint16_t)(SaturaLH((pScratchBuff[2][index] >> 8), -32760, 32760));      
 8010af8:	4b45      	ldr	r3, [pc, #276]	; (8010c10 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8010afa:	689a      	ldr	r2, [r3, #8]
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	009b      	lsls	r3, r3, #2
 8010b00:	4413      	add	r3, r2
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	121b      	asrs	r3, r3, #8
 8010b06:	4a43      	ldr	r2, [pc, #268]	; (8010c14 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a0>)
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	db16      	blt.n	8010b3a <HAL_DFSDM_FilterRegConvCpltCallback+0x1c6>
 8010b0c:	4b40      	ldr	r3, [pc, #256]	; (8010c10 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8010b0e:	689a      	ldr	r2, [r3, #8]
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	009b      	lsls	r3, r3, #2
 8010b14:	4413      	add	r3, r2
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	121b      	asrs	r3, r3, #8
 8010b1a:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8010b1e:	4293      	cmp	r3, r2
 8010b20:	dc08      	bgt.n	8010b34 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c0>
 8010b22:	4b3b      	ldr	r3, [pc, #236]	; (8010c10 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8010b24:	689a      	ldr	r2, [r3, #8]
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	009b      	lsls	r3, r3, #2
 8010b2a:	4413      	add	r3, r2
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	121b      	asrs	r3, r3, #8
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	e004      	b.n	8010b3e <HAL_DFSDM_FilterRegConvCpltCallback+0x1ca>
 8010b34:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8010b38:	e001      	b.n	8010b3e <HAL_DFSDM_FilterRegConvCpltCallback+0x1ca>
 8010b3a:	f248 0308 	movw	r3, #32776	; 0x8008
 8010b3e:	4a36      	ldr	r2, [pc, #216]	; (8010c18 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a4>)
 8010b40:	6811      	ldr	r1, [r2, #0]
 8010b42:	4a36      	ldr	r2, [pc, #216]	; (8010c1c <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 8010b44:	6812      	ldr	r2, [r2, #0]
 8010b46:	3203      	adds	r2, #3
 8010b48:	0052      	lsls	r2, r2, #1
 8010b4a:	440a      	add	r2, r1
 8010b4c:	8013      	strh	r3, [r2, #0]
        AppBuffTrigger +=4;
 8010b4e:	4b33      	ldr	r3, [pc, #204]	; (8010c1c <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	3304      	adds	r3, #4
 8010b54:	4a31      	ldr	r2, [pc, #196]	; (8010c1c <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 8010b56:	6013      	str	r3, [r2, #0]
      for(index = (ScratchSize/2) ; index < ScratchSize; index++)
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	3301      	adds	r3, #1
 8010b5c:	60fb      	str	r3, [r7, #12]
 8010b5e:	4b2b      	ldr	r3, [pc, #172]	; (8010c0c <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	461a      	mov	r2, r3
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	4293      	cmp	r3, r2
 8010b68:	f4ff af46 	bcc.w	80109f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x84>
      }
      DmaTopLeftRecCplt  = 0;
 8010b6c:	4b20      	ldr	r3, [pc, #128]	; (8010bf0 <HAL_DFSDM_FilterRegConvCpltCallback+0x27c>)
 8010b6e:	2200      	movs	r2, #0
 8010b70:	601a      	str	r2, [r3, #0]
      DmaTopRightRecCplt = 0;
 8010b72:	4b21      	ldr	r3, [pc, #132]	; (8010bf8 <HAL_DFSDM_FilterRegConvCpltCallback+0x284>)
 8010b74:	2200      	movs	r2, #0
 8010b76:	601a      	str	r2, [r3, #0]
      DmaButtomLeftRecCplt  = 0;
 8010b78:	4b21      	ldr	r3, [pc, #132]	; (8010c00 <HAL_DFSDM_FilterRegConvCpltCallback+0x28c>)
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	601a      	str	r2, [r3, #0]
      DmaButtomRightRecCplt = 0;     
 8010b7e:	4b21      	ldr	r3, [pc, #132]	; (8010c04 <HAL_DFSDM_FilterRegConvCpltCallback+0x290>)
 8010b80:	2200      	movs	r2, #0
 8010b82:	601a      	str	r2, [r3, #0]
 8010b84:	e094      	b.n	8010cb0 <HAL_DFSDM_FilterRegConvCpltCallback+0x33c>
    }
  }
  else
  {
    if((DmaTopLeftRecCplt == 1) && (DmaTopRightRecCplt == 1))
 8010b86:	4b1a      	ldr	r3, [pc, #104]	; (8010bf0 <HAL_DFSDM_FilterRegConvCpltCallback+0x27c>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	2b01      	cmp	r3, #1
 8010b8c:	f040 8090 	bne.w	8010cb0 <HAL_DFSDM_FilterRegConvCpltCallback+0x33c>
 8010b90:	4b19      	ldr	r3, [pc, #100]	; (8010bf8 <HAL_DFSDM_FilterRegConvCpltCallback+0x284>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	2b01      	cmp	r3, #1
 8010b96:	f040 808b 	bne.w	8010cb0 <HAL_DFSDM_FilterRegConvCpltCallback+0x33c>
    {    
      for(index = (ScratchSize/2) ; index < ScratchSize; index++)
 8010b9a:	4b1c      	ldr	r3, [pc, #112]	; (8010c0c <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	da00      	bge.n	8010ba4 <HAL_DFSDM_FilterRegConvCpltCallback+0x230>
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	105b      	asrs	r3, r3, #1
 8010ba6:	60fb      	str	r3, [r7, #12]
 8010ba8:	e076      	b.n	8010c98 <HAL_DFSDM_FilterRegConvCpltCallback+0x324>
      {
        hAudioIn.pRecBuf[AppBuffTrigger]     = (uint16_t)(SaturaLH((pScratchBuff[1][index] >> 8), -32760, 32760));
 8010baa:	4b19      	ldr	r3, [pc, #100]	; (8010c10 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8010bac:	685a      	ldr	r2, [r3, #4]
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	009b      	lsls	r3, r3, #2
 8010bb2:	4413      	add	r3, r2
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	121b      	asrs	r3, r3, #8
 8010bb8:	4a16      	ldr	r2, [pc, #88]	; (8010c14 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a0>)
 8010bba:	4293      	cmp	r3, r2
 8010bbc:	db30      	blt.n	8010c20 <HAL_DFSDM_FilterRegConvCpltCallback+0x2ac>
 8010bbe:	4b14      	ldr	r3, [pc, #80]	; (8010c10 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8010bc0:	685a      	ldr	r2, [r3, #4]
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	009b      	lsls	r3, r3, #2
 8010bc6:	4413      	add	r3, r2
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	121b      	asrs	r3, r3, #8
 8010bcc:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8010bd0:	4293      	cmp	r3, r2
 8010bd2:	dc08      	bgt.n	8010be6 <HAL_DFSDM_FilterRegConvCpltCallback+0x272>
 8010bd4:	4b0e      	ldr	r3, [pc, #56]	; (8010c10 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 8010bd6:	685a      	ldr	r2, [r3, #4]
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	009b      	lsls	r3, r3, #2
 8010bdc:	4413      	add	r3, r2
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	121b      	asrs	r3, r3, #8
 8010be2:	b29b      	uxth	r3, r3
 8010be4:	e01e      	b.n	8010c24 <HAL_DFSDM_FilterRegConvCpltCallback+0x2b0>
 8010be6:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8010bea:	e01b      	b.n	8010c24 <HAL_DFSDM_FilterRegConvCpltCallback+0x2b0>
 8010bec:	2002ac6c 	.word	0x2002ac6c
 8010bf0:	20004b5c 	.word	0x20004b5c
 8010bf4:	2002ae88 	.word	0x2002ae88
 8010bf8:	20004b64 	.word	0x20004b64
 8010bfc:	2002adfc 	.word	0x2002adfc
 8010c00:	20004b6c 	.word	0x20004b6c
 8010c04:	20004b74 	.word	0x20004b74
 8010c08:	20000020 	.word	0x20000020
 8010c0c:	20004b50 	.word	0x20004b50
 8010c10:	20004b40 	.word	0x20004b40
 8010c14:	ffff8008 	.word	0xffff8008
 8010c18:	2002acc0 	.word	0x2002acc0
 8010c1c:	20004b78 	.word	0x20004b78
 8010c20:	f248 0308 	movw	r3, #32776	; 0x8008
 8010c24:	4a33      	ldr	r2, [pc, #204]	; (8010cf4 <HAL_DFSDM_FilterRegConvCpltCallback+0x380>)
 8010c26:	6811      	ldr	r1, [r2, #0]
 8010c28:	4a33      	ldr	r2, [pc, #204]	; (8010cf8 <HAL_DFSDM_FilterRegConvCpltCallback+0x384>)
 8010c2a:	6812      	ldr	r2, [r2, #0]
 8010c2c:	0052      	lsls	r2, r2, #1
 8010c2e:	440a      	add	r2, r1
 8010c30:	8013      	strh	r3, [r2, #0]
        hAudioIn.pRecBuf[AppBuffTrigger + 1] = (uint16_t)(SaturaLH((pScratchBuff[0][index] >> 8), -32760, 32760));
 8010c32:	4b32      	ldr	r3, [pc, #200]	; (8010cfc <HAL_DFSDM_FilterRegConvCpltCallback+0x388>)
 8010c34:	681a      	ldr	r2, [r3, #0]
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	009b      	lsls	r3, r3, #2
 8010c3a:	4413      	add	r3, r2
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	121b      	asrs	r3, r3, #8
 8010c40:	4a2f      	ldr	r2, [pc, #188]	; (8010d00 <HAL_DFSDM_FilterRegConvCpltCallback+0x38c>)
 8010c42:	4293      	cmp	r3, r2
 8010c44:	db16      	blt.n	8010c74 <HAL_DFSDM_FilterRegConvCpltCallback+0x300>
 8010c46:	4b2d      	ldr	r3, [pc, #180]	; (8010cfc <HAL_DFSDM_FilterRegConvCpltCallback+0x388>)
 8010c48:	681a      	ldr	r2, [r3, #0]
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	009b      	lsls	r3, r3, #2
 8010c4e:	4413      	add	r3, r2
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	121b      	asrs	r3, r3, #8
 8010c54:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8010c58:	4293      	cmp	r3, r2
 8010c5a:	dc08      	bgt.n	8010c6e <HAL_DFSDM_FilterRegConvCpltCallback+0x2fa>
 8010c5c:	4b27      	ldr	r3, [pc, #156]	; (8010cfc <HAL_DFSDM_FilterRegConvCpltCallback+0x388>)
 8010c5e:	681a      	ldr	r2, [r3, #0]
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	009b      	lsls	r3, r3, #2
 8010c64:	4413      	add	r3, r2
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	121b      	asrs	r3, r3, #8
 8010c6a:	b29b      	uxth	r3, r3
 8010c6c:	e004      	b.n	8010c78 <HAL_DFSDM_FilterRegConvCpltCallback+0x304>
 8010c6e:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8010c72:	e001      	b.n	8010c78 <HAL_DFSDM_FilterRegConvCpltCallback+0x304>
 8010c74:	f248 0308 	movw	r3, #32776	; 0x8008
 8010c78:	4a1e      	ldr	r2, [pc, #120]	; (8010cf4 <HAL_DFSDM_FilterRegConvCpltCallback+0x380>)
 8010c7a:	6811      	ldr	r1, [r2, #0]
 8010c7c:	4a1e      	ldr	r2, [pc, #120]	; (8010cf8 <HAL_DFSDM_FilterRegConvCpltCallback+0x384>)
 8010c7e:	6812      	ldr	r2, [r2, #0]
 8010c80:	3201      	adds	r2, #1
 8010c82:	0052      	lsls	r2, r2, #1
 8010c84:	440a      	add	r2, r1
 8010c86:	8013      	strh	r3, [r2, #0]
        AppBuffTrigger +=2;
 8010c88:	4b1b      	ldr	r3, [pc, #108]	; (8010cf8 <HAL_DFSDM_FilterRegConvCpltCallback+0x384>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	3302      	adds	r3, #2
 8010c8e:	4a1a      	ldr	r2, [pc, #104]	; (8010cf8 <HAL_DFSDM_FilterRegConvCpltCallback+0x384>)
 8010c90:	6013      	str	r3, [r2, #0]
      for(index = (ScratchSize/2) ; index < ScratchSize; index++)
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	3301      	adds	r3, #1
 8010c96:	60fb      	str	r3, [r7, #12]
 8010c98:	4b1a      	ldr	r3, [pc, #104]	; (8010d04 <HAL_DFSDM_FilterRegConvCpltCallback+0x390>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	461a      	mov	r2, r3
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	4293      	cmp	r3, r2
 8010ca2:	d382      	bcc.n	8010baa <HAL_DFSDM_FilterRegConvCpltCallback+0x236>
      }
      DmaTopLeftRecCplt  = 0;
 8010ca4:	4b18      	ldr	r3, [pc, #96]	; (8010d08 <HAL_DFSDM_FilterRegConvCpltCallback+0x394>)
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	601a      	str	r2, [r3, #0]
      DmaTopRightRecCplt = 0;  
 8010caa:	4b18      	ldr	r3, [pc, #96]	; (8010d0c <HAL_DFSDM_FilterRegConvCpltCallback+0x398>)
 8010cac:	2200      	movs	r2, #0
 8010cae:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* Call Half Transfer Complete callback */
  if((AppBuffTrigger == hAudioIn.RecSize/2) && (AppBuffHalf == 0))
 8010cb0:	4b10      	ldr	r3, [pc, #64]	; (8010cf4 <HAL_DFSDM_FilterRegConvCpltCallback+0x380>)
 8010cb2:	685b      	ldr	r3, [r3, #4]
 8010cb4:	085a      	lsrs	r2, r3, #1
 8010cb6:	4b10      	ldr	r3, [pc, #64]	; (8010cf8 <HAL_DFSDM_FilterRegConvCpltCallback+0x384>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d108      	bne.n	8010cd0 <HAL_DFSDM_FilterRegConvCpltCallback+0x35c>
 8010cbe:	4b14      	ldr	r3, [pc, #80]	; (8010d10 <HAL_DFSDM_FilterRegConvCpltCallback+0x39c>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d104      	bne.n	8010cd0 <HAL_DFSDM_FilterRegConvCpltCallback+0x35c>
  {
    AppBuffHalf = 1;  
 8010cc6:	4b12      	ldr	r3, [pc, #72]	; (8010d10 <HAL_DFSDM_FilterRegConvCpltCallback+0x39c>)
 8010cc8:	2201      	movs	r2, #1
 8010cca:	601a      	str	r2, [r3, #0]
    BSP_AUDIO_IN_HalfTransfer_CallBack();
 8010ccc:	f7f6 fb32 	bl	8007334 <BSP_AUDIO_IN_HalfTransfer_CallBack>
  }
  /* Call Transfer Complete callback */
  if(AppBuffTrigger == hAudioIn.RecSize)
 8010cd0:	4b08      	ldr	r3, [pc, #32]	; (8010cf4 <HAL_DFSDM_FilterRegConvCpltCallback+0x380>)
 8010cd2:	685a      	ldr	r2, [r3, #4]
 8010cd4:	4b08      	ldr	r3, [pc, #32]	; (8010cf8 <HAL_DFSDM_FilterRegConvCpltCallback+0x384>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d107      	bne.n	8010cec <HAL_DFSDM_FilterRegConvCpltCallback+0x378>
  {
    /* Reset Application Buffer Trigger */
    AppBuffTrigger = 0;
 8010cdc:	4b06      	ldr	r3, [pc, #24]	; (8010cf8 <HAL_DFSDM_FilterRegConvCpltCallback+0x384>)
 8010cde:	2200      	movs	r2, #0
 8010ce0:	601a      	str	r2, [r3, #0]
    AppBuffHalf = 0; 
 8010ce2:	4b0b      	ldr	r3, [pc, #44]	; (8010d10 <HAL_DFSDM_FilterRegConvCpltCallback+0x39c>)
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	601a      	str	r2, [r3, #0]
    /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
    BSP_AUDIO_IN_TransferComplete_CallBack();
 8010ce8:	f7f6 fb18 	bl	800731c <BSP_AUDIO_IN_TransferComplete_CallBack>
  }  
}
 8010cec:	bf00      	nop
 8010cee:	3710      	adds	r7, #16
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}
 8010cf4:	2002acc0 	.word	0x2002acc0
 8010cf8:	20004b78 	.word	0x20004b78
 8010cfc:	20004b40 	.word	0x20004b40
 8010d00:	ffff8008 	.word	0xffff8008
 8010d04:	20004b50 	.word	0x20004b50
 8010d08:	20004b5c 	.word	0x20004b5c
 8010d0c:	20004b64 	.word	0x20004b64
 8010d10:	20004b7c 	.word	0x20004b7c

08010d14 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback. 
  * @param  hdfsdm_filter : DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b084      	sub	sp, #16
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
  uint32_t index = 0;
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	60fb      	str	r3, [r7, #12]
  
  if(hdfsdm_filter == &hAudioInTopLeftFilter)
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	4a97      	ldr	r2, [pc, #604]	; (8010f80 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8010d24:	4293      	cmp	r3, r2
 8010d26:	d103      	bne.n	8010d30 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>
  {
    DmaTopLeftRecHalfCplt = 1;
 8010d28:	4b96      	ldr	r3, [pc, #600]	; (8010f84 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x270>)
 8010d2a:	2201      	movs	r2, #1
 8010d2c:	601a      	str	r2, [r3, #0]
 8010d2e:	e012      	b.n	8010d56 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x42>
  }
  else if(hdfsdm_filter == &hAudioInTopRightFilter)
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	4a95      	ldr	r2, [pc, #596]	; (8010f88 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x274>)
 8010d34:	4293      	cmp	r3, r2
 8010d36:	d103      	bne.n	8010d40 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>
  {
    DmaTopRightRecHalfCplt = 1;
 8010d38:	4b94      	ldr	r3, [pc, #592]	; (8010f8c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x278>)
 8010d3a:	2201      	movs	r2, #1
 8010d3c:	601a      	str	r2, [r3, #0]
 8010d3e:	e00a      	b.n	8010d56 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x42>
  }
  else if(hdfsdm_filter == &hAudioInButtomLeftFilter)
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	4a93      	ldr	r2, [pc, #588]	; (8010f90 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x27c>)
 8010d44:	4293      	cmp	r3, r2
 8010d46:	d103      	bne.n	8010d50 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x3c>
  {
    DmaButtomLeftRecHalfCplt = 1;
 8010d48:	4b92      	ldr	r3, [pc, #584]	; (8010f94 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x280>)
 8010d4a:	2201      	movs	r2, #1
 8010d4c:	601a      	str	r2, [r3, #0]
 8010d4e:	e002      	b.n	8010d56 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x42>
  }
  else
  {
    DmaButtomRightRecHalfCplt = 1;
 8010d50:	4b91      	ldr	r3, [pc, #580]	; (8010f98 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x284>)
 8010d52:	2201      	movs	r2, #1
 8010d54:	601a      	str	r2, [r3, #0]
  }
  
  if(AudioIn_ChannelNumber > 2)
 8010d56:	4b91      	ldr	r3, [pc, #580]	; (8010f9c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x288>)
 8010d58:	781b      	ldrb	r3, [r3, #0]
 8010d5a:	2b02      	cmp	r3, #2
 8010d5c:	f240 80e2 	bls.w	8010f24 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x210>
  {
    if((DmaTopLeftRecHalfCplt == 1) && (DmaTopRightRecHalfCplt == 1) && (DmaButtomLeftRecHalfCplt == 1) && (DmaButtomRightRecHalfCplt == 1))
 8010d60:	4b88      	ldr	r3, [pc, #544]	; (8010f84 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x270>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	2b01      	cmp	r3, #1
 8010d66:	f040 8172 	bne.w	801104e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x33a>
 8010d6a:	4b88      	ldr	r3, [pc, #544]	; (8010f8c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x278>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	2b01      	cmp	r3, #1
 8010d70:	f040 816d 	bne.w	801104e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x33a>
 8010d74:	4b87      	ldr	r3, [pc, #540]	; (8010f94 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x280>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	2b01      	cmp	r3, #1
 8010d7a:	f040 8168 	bne.w	801104e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x33a>
 8010d7e:	4b86      	ldr	r3, [pc, #536]	; (8010f98 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x284>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	2b01      	cmp	r3, #1
 8010d84:	f040 8163 	bne.w	801104e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x33a>
    {
      for(index = 0 ; index < ScratchSize/2; index++)
 8010d88:	2300      	movs	r3, #0
 8010d8a:	60fb      	str	r3, [r7, #12]
 8010d8c:	e0b2      	b.n	8010ef4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1e0>
      {
        hAudioIn.pRecBuf[AppBuffTrigger]     = (uint16_t)(SaturaLH((pScratchBuff[1][index] >> 8), -32760, 32760));
 8010d8e:	4b84      	ldr	r3, [pc, #528]	; (8010fa0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 8010d90:	685a      	ldr	r2, [r3, #4]
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	009b      	lsls	r3, r3, #2
 8010d96:	4413      	add	r3, r2
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	121b      	asrs	r3, r3, #8
 8010d9c:	4a81      	ldr	r2, [pc, #516]	; (8010fa4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x290>)
 8010d9e:	4293      	cmp	r3, r2
 8010da0:	db16      	blt.n	8010dd0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xbc>
 8010da2:	4b7f      	ldr	r3, [pc, #508]	; (8010fa0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 8010da4:	685a      	ldr	r2, [r3, #4]
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	009b      	lsls	r3, r3, #2
 8010daa:	4413      	add	r3, r2
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	121b      	asrs	r3, r3, #8
 8010db0:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8010db4:	4293      	cmp	r3, r2
 8010db6:	dc08      	bgt.n	8010dca <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb6>
 8010db8:	4b79      	ldr	r3, [pc, #484]	; (8010fa0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 8010dba:	685a      	ldr	r2, [r3, #4]
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	009b      	lsls	r3, r3, #2
 8010dc0:	4413      	add	r3, r2
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	121b      	asrs	r3, r3, #8
 8010dc6:	b29b      	uxth	r3, r3
 8010dc8:	e004      	b.n	8010dd4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xc0>
 8010dca:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8010dce:	e001      	b.n	8010dd4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xc0>
 8010dd0:	f248 0308 	movw	r3, #32776	; 0x8008
 8010dd4:	4a74      	ldr	r2, [pc, #464]	; (8010fa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x294>)
 8010dd6:	6811      	ldr	r1, [r2, #0]
 8010dd8:	4a74      	ldr	r2, [pc, #464]	; (8010fac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x298>)
 8010dda:	6812      	ldr	r2, [r2, #0]
 8010ddc:	0052      	lsls	r2, r2, #1
 8010dde:	440a      	add	r2, r1
 8010de0:	8013      	strh	r3, [r2, #0]
        hAudioIn.pRecBuf[AppBuffTrigger + 1] = (uint16_t)(SaturaLH((pScratchBuff[0][index] >> 8), -32760, 32760)); 
 8010de2:	4b6f      	ldr	r3, [pc, #444]	; (8010fa0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 8010de4:	681a      	ldr	r2, [r3, #0]
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	009b      	lsls	r3, r3, #2
 8010dea:	4413      	add	r3, r2
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	121b      	asrs	r3, r3, #8
 8010df0:	4a6c      	ldr	r2, [pc, #432]	; (8010fa4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x290>)
 8010df2:	4293      	cmp	r3, r2
 8010df4:	db16      	blt.n	8010e24 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x110>
 8010df6:	4b6a      	ldr	r3, [pc, #424]	; (8010fa0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	009b      	lsls	r3, r3, #2
 8010dfe:	4413      	add	r3, r2
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	121b      	asrs	r3, r3, #8
 8010e04:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	dc08      	bgt.n	8010e1e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x10a>
 8010e0c:	4b64      	ldr	r3, [pc, #400]	; (8010fa0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 8010e0e:	681a      	ldr	r2, [r3, #0]
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	009b      	lsls	r3, r3, #2
 8010e14:	4413      	add	r3, r2
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	121b      	asrs	r3, r3, #8
 8010e1a:	b29b      	uxth	r3, r3
 8010e1c:	e004      	b.n	8010e28 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x114>
 8010e1e:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8010e22:	e001      	b.n	8010e28 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x114>
 8010e24:	f248 0308 	movw	r3, #32776	; 0x8008
 8010e28:	4a5f      	ldr	r2, [pc, #380]	; (8010fa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x294>)
 8010e2a:	6811      	ldr	r1, [r2, #0]
 8010e2c:	4a5f      	ldr	r2, [pc, #380]	; (8010fac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x298>)
 8010e2e:	6812      	ldr	r2, [r2, #0]
 8010e30:	3201      	adds	r2, #1
 8010e32:	0052      	lsls	r2, r2, #1
 8010e34:	440a      	add	r2, r1
 8010e36:	8013      	strh	r3, [r2, #0]
        hAudioIn.pRecBuf[AppBuffTrigger + 2] = (uint16_t)(SaturaLH((pScratchBuff[3][index] >> 8), -32760, 32760));
 8010e38:	4b59      	ldr	r3, [pc, #356]	; (8010fa0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 8010e3a:	68da      	ldr	r2, [r3, #12]
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	009b      	lsls	r3, r3, #2
 8010e40:	4413      	add	r3, r2
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	121b      	asrs	r3, r3, #8
 8010e46:	4a57      	ldr	r2, [pc, #348]	; (8010fa4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x290>)
 8010e48:	4293      	cmp	r3, r2
 8010e4a:	db16      	blt.n	8010e7a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x166>
 8010e4c:	4b54      	ldr	r3, [pc, #336]	; (8010fa0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 8010e4e:	68da      	ldr	r2, [r3, #12]
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	009b      	lsls	r3, r3, #2
 8010e54:	4413      	add	r3, r2
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	121b      	asrs	r3, r3, #8
 8010e5a:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8010e5e:	4293      	cmp	r3, r2
 8010e60:	dc08      	bgt.n	8010e74 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x160>
 8010e62:	4b4f      	ldr	r3, [pc, #316]	; (8010fa0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 8010e64:	68da      	ldr	r2, [r3, #12]
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	009b      	lsls	r3, r3, #2
 8010e6a:	4413      	add	r3, r2
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	121b      	asrs	r3, r3, #8
 8010e70:	b29b      	uxth	r3, r3
 8010e72:	e004      	b.n	8010e7e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x16a>
 8010e74:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8010e78:	e001      	b.n	8010e7e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x16a>
 8010e7a:	f248 0308 	movw	r3, #32776	; 0x8008
 8010e7e:	4a4a      	ldr	r2, [pc, #296]	; (8010fa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x294>)
 8010e80:	6811      	ldr	r1, [r2, #0]
 8010e82:	4a4a      	ldr	r2, [pc, #296]	; (8010fac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x298>)
 8010e84:	6812      	ldr	r2, [r2, #0]
 8010e86:	3202      	adds	r2, #2
 8010e88:	0052      	lsls	r2, r2, #1
 8010e8a:	440a      	add	r2, r1
 8010e8c:	8013      	strh	r3, [r2, #0]
        hAudioIn.pRecBuf[AppBuffTrigger + 3] = (uint16_t)(SaturaLH((pScratchBuff[2][index] >> 8), -32760, 32760));      
 8010e8e:	4b44      	ldr	r3, [pc, #272]	; (8010fa0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 8010e90:	689a      	ldr	r2, [r3, #8]
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	009b      	lsls	r3, r3, #2
 8010e96:	4413      	add	r3, r2
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	121b      	asrs	r3, r3, #8
 8010e9c:	4a41      	ldr	r2, [pc, #260]	; (8010fa4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x290>)
 8010e9e:	4293      	cmp	r3, r2
 8010ea0:	db16      	blt.n	8010ed0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1bc>
 8010ea2:	4b3f      	ldr	r3, [pc, #252]	; (8010fa0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 8010ea4:	689a      	ldr	r2, [r3, #8]
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	009b      	lsls	r3, r3, #2
 8010eaa:	4413      	add	r3, r2
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	121b      	asrs	r3, r3, #8
 8010eb0:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8010eb4:	4293      	cmp	r3, r2
 8010eb6:	dc08      	bgt.n	8010eca <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b6>
 8010eb8:	4b39      	ldr	r3, [pc, #228]	; (8010fa0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 8010eba:	689a      	ldr	r2, [r3, #8]
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	009b      	lsls	r3, r3, #2
 8010ec0:	4413      	add	r3, r2
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	121b      	asrs	r3, r3, #8
 8010ec6:	b29b      	uxth	r3, r3
 8010ec8:	e004      	b.n	8010ed4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c0>
 8010eca:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8010ece:	e001      	b.n	8010ed4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c0>
 8010ed0:	f248 0308 	movw	r3, #32776	; 0x8008
 8010ed4:	4a34      	ldr	r2, [pc, #208]	; (8010fa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x294>)
 8010ed6:	6811      	ldr	r1, [r2, #0]
 8010ed8:	4a34      	ldr	r2, [pc, #208]	; (8010fac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x298>)
 8010eda:	6812      	ldr	r2, [r2, #0]
 8010edc:	3203      	adds	r2, #3
 8010ede:	0052      	lsls	r2, r2, #1
 8010ee0:	440a      	add	r2, r1
 8010ee2:	8013      	strh	r3, [r2, #0]
        AppBuffTrigger +=4;
 8010ee4:	4b31      	ldr	r3, [pc, #196]	; (8010fac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x298>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	3304      	adds	r3, #4
 8010eea:	4a30      	ldr	r2, [pc, #192]	; (8010fac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x298>)
 8010eec:	6013      	str	r3, [r2, #0]
      for(index = 0 ; index < ScratchSize/2; index++)
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	3301      	adds	r3, #1
 8010ef2:	60fb      	str	r3, [r7, #12]
 8010ef4:	4b2e      	ldr	r3, [pc, #184]	; (8010fb0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x29c>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	da00      	bge.n	8010efe <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ea>
 8010efc:	3301      	adds	r3, #1
 8010efe:	105b      	asrs	r3, r3, #1
 8010f00:	461a      	mov	r2, r3
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	4293      	cmp	r3, r2
 8010f06:	f4ff af42 	bcc.w	8010d8e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x7a>
      }
      DmaTopLeftRecHalfCplt  = 0;
 8010f0a:	4b1e      	ldr	r3, [pc, #120]	; (8010f84 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x270>)
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	601a      	str	r2, [r3, #0]
      DmaTopRightRecHalfCplt = 0;
 8010f10:	4b1e      	ldr	r3, [pc, #120]	; (8010f8c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x278>)
 8010f12:	2200      	movs	r2, #0
 8010f14:	601a      	str	r2, [r3, #0]
      DmaButtomLeftRecHalfCplt  = 0;
 8010f16:	4b1f      	ldr	r3, [pc, #124]	; (8010f94 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x280>)
 8010f18:	2200      	movs	r2, #0
 8010f1a:	601a      	str	r2, [r3, #0]
      DmaButtomRightRecHalfCplt = 0;     
 8010f1c:	4b1e      	ldr	r3, [pc, #120]	; (8010f98 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x284>)
 8010f1e:	2200      	movs	r2, #0
 8010f20:	601a      	str	r2, [r3, #0]
 8010f22:	e094      	b.n	801104e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x33a>
    }
  }
  else
  {
    if((DmaTopLeftRecHalfCplt == 1) && (DmaTopRightRecHalfCplt == 1))
 8010f24:	4b17      	ldr	r3, [pc, #92]	; (8010f84 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x270>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	f040 8090 	bne.w	801104e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x33a>
 8010f2e:	4b17      	ldr	r3, [pc, #92]	; (8010f8c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x278>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	2b01      	cmp	r3, #1
 8010f34:	f040 808b 	bne.w	801104e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x33a>
    {    
      for(index = 0 ; index < ScratchSize/2; index++)
 8010f38:	2300      	movs	r3, #0
 8010f3a:	60fb      	str	r3, [r7, #12]
 8010f3c:	e076      	b.n	801102c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x318>
      {
        hAudioIn.pRecBuf[AppBuffTrigger]     = (uint16_t)(SaturaLH((pScratchBuff[1][index] >> 8), -32760, 32760));
 8010f3e:	4b18      	ldr	r3, [pc, #96]	; (8010fa0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 8010f40:	685a      	ldr	r2, [r3, #4]
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	009b      	lsls	r3, r3, #2
 8010f46:	4413      	add	r3, r2
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	121b      	asrs	r3, r3, #8
 8010f4c:	4a15      	ldr	r2, [pc, #84]	; (8010fa4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x290>)
 8010f4e:	4293      	cmp	r3, r2
 8010f50:	db30      	blt.n	8010fb4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a0>
 8010f52:	4b13      	ldr	r3, [pc, #76]	; (8010fa0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 8010f54:	685a      	ldr	r2, [r3, #4]
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	009b      	lsls	r3, r3, #2
 8010f5a:	4413      	add	r3, r2
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	121b      	asrs	r3, r3, #8
 8010f60:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8010f64:	4293      	cmp	r3, r2
 8010f66:	dc08      	bgt.n	8010f7a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x266>
 8010f68:	4b0d      	ldr	r3, [pc, #52]	; (8010fa0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 8010f6a:	685a      	ldr	r2, [r3, #4]
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	009b      	lsls	r3, r3, #2
 8010f70:	4413      	add	r3, r2
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	121b      	asrs	r3, r3, #8
 8010f76:	b29b      	uxth	r3, r3
 8010f78:	e01e      	b.n	8010fb8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a4>
 8010f7a:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8010f7e:	e01b      	b.n	8010fb8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a4>
 8010f80:	2002ac6c 	.word	0x2002ac6c
 8010f84:	20004b58 	.word	0x20004b58
 8010f88:	2002ae88 	.word	0x2002ae88
 8010f8c:	20004b60 	.word	0x20004b60
 8010f90:	2002adfc 	.word	0x2002adfc
 8010f94:	20004b68 	.word	0x20004b68
 8010f98:	20004b70 	.word	0x20004b70
 8010f9c:	20000020 	.word	0x20000020
 8010fa0:	20004b40 	.word	0x20004b40
 8010fa4:	ffff8008 	.word	0xffff8008
 8010fa8:	2002acc0 	.word	0x2002acc0
 8010fac:	20004b78 	.word	0x20004b78
 8010fb0:	20004b50 	.word	0x20004b50
 8010fb4:	f248 0308 	movw	r3, #32776	; 0x8008
 8010fb8:	4a36      	ldr	r2, [pc, #216]	; (8011094 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x380>)
 8010fba:	6811      	ldr	r1, [r2, #0]
 8010fbc:	4a36      	ldr	r2, [pc, #216]	; (8011098 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x384>)
 8010fbe:	6812      	ldr	r2, [r2, #0]
 8010fc0:	0052      	lsls	r2, r2, #1
 8010fc2:	440a      	add	r2, r1
 8010fc4:	8013      	strh	r3, [r2, #0]
        hAudioIn.pRecBuf[AppBuffTrigger + 1] = (uint16_t)(SaturaLH((pScratchBuff[0][index] >> 8), -32760, 32760));
 8010fc6:	4b35      	ldr	r3, [pc, #212]	; (801109c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x388>)
 8010fc8:	681a      	ldr	r2, [r3, #0]
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	009b      	lsls	r3, r3, #2
 8010fce:	4413      	add	r3, r2
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	121b      	asrs	r3, r3, #8
 8010fd4:	4a32      	ldr	r2, [pc, #200]	; (80110a0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x38c>)
 8010fd6:	4293      	cmp	r3, r2
 8010fd8:	db16      	blt.n	8011008 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2f4>
 8010fda:	4b30      	ldr	r3, [pc, #192]	; (801109c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x388>)
 8010fdc:	681a      	ldr	r2, [r3, #0]
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	009b      	lsls	r3, r3, #2
 8010fe2:	4413      	add	r3, r2
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	121b      	asrs	r3, r3, #8
 8010fe8:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8010fec:	4293      	cmp	r3, r2
 8010fee:	dc08      	bgt.n	8011002 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2ee>
 8010ff0:	4b2a      	ldr	r3, [pc, #168]	; (801109c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x388>)
 8010ff2:	681a      	ldr	r2, [r3, #0]
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	009b      	lsls	r3, r3, #2
 8010ff8:	4413      	add	r3, r2
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	121b      	asrs	r3, r3, #8
 8010ffe:	b29b      	uxth	r3, r3
 8011000:	e004      	b.n	801100c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2f8>
 8011002:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8011006:	e001      	b.n	801100c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2f8>
 8011008:	f248 0308 	movw	r3, #32776	; 0x8008
 801100c:	4a21      	ldr	r2, [pc, #132]	; (8011094 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x380>)
 801100e:	6811      	ldr	r1, [r2, #0]
 8011010:	4a21      	ldr	r2, [pc, #132]	; (8011098 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x384>)
 8011012:	6812      	ldr	r2, [r2, #0]
 8011014:	3201      	adds	r2, #1
 8011016:	0052      	lsls	r2, r2, #1
 8011018:	440a      	add	r2, r1
 801101a:	8013      	strh	r3, [r2, #0]
        AppBuffTrigger +=2;
 801101c:	4b1e      	ldr	r3, [pc, #120]	; (8011098 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x384>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	3302      	adds	r3, #2
 8011022:	4a1d      	ldr	r2, [pc, #116]	; (8011098 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x384>)
 8011024:	6013      	str	r3, [r2, #0]
      for(index = 0 ; index < ScratchSize/2; index++)
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	3301      	adds	r3, #1
 801102a:	60fb      	str	r3, [r7, #12]
 801102c:	4b1d      	ldr	r3, [pc, #116]	; (80110a4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x390>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	2b00      	cmp	r3, #0
 8011032:	da00      	bge.n	8011036 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x322>
 8011034:	3301      	adds	r3, #1
 8011036:	105b      	asrs	r3, r3, #1
 8011038:	461a      	mov	r2, r3
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	4293      	cmp	r3, r2
 801103e:	f4ff af7e 	bcc.w	8010f3e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x22a>
      }
      DmaTopLeftRecHalfCplt  = 0;
 8011042:	4b19      	ldr	r3, [pc, #100]	; (80110a8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x394>)
 8011044:	2200      	movs	r2, #0
 8011046:	601a      	str	r2, [r3, #0]
      DmaTopRightRecHalfCplt = 0;  
 8011048:	4b18      	ldr	r3, [pc, #96]	; (80110ac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x398>)
 801104a:	2200      	movs	r2, #0
 801104c:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* Call Half Transfer Complete callback */
  if((AppBuffTrigger == hAudioIn.RecSize/2) && (AppBuffHalf == 0))
 801104e:	4b11      	ldr	r3, [pc, #68]	; (8011094 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x380>)
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	085a      	lsrs	r2, r3, #1
 8011054:	4b10      	ldr	r3, [pc, #64]	; (8011098 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x384>)
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	429a      	cmp	r2, r3
 801105a:	d108      	bne.n	801106e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x35a>
 801105c:	4b14      	ldr	r3, [pc, #80]	; (80110b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x39c>)
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d104      	bne.n	801106e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x35a>
  { 
    AppBuffHalf = 1;  
 8011064:	4b12      	ldr	r3, [pc, #72]	; (80110b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x39c>)
 8011066:	2201      	movs	r2, #1
 8011068:	601a      	str	r2, [r3, #0]
    BSP_AUDIO_IN_HalfTransfer_CallBack();
 801106a:	f7f6 f963 	bl	8007334 <BSP_AUDIO_IN_HalfTransfer_CallBack>
  }
  /* Call Transfer Complete callback */
  if(AppBuffTrigger == hAudioIn.RecSize)
 801106e:	4b09      	ldr	r3, [pc, #36]	; (8011094 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x380>)
 8011070:	685a      	ldr	r2, [r3, #4]
 8011072:	4b09      	ldr	r3, [pc, #36]	; (8011098 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x384>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	429a      	cmp	r2, r3
 8011078:	d107      	bne.n	801108a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x376>
  {
    /* Reset Application Buffer Trigger */
    AppBuffTrigger = 0;
 801107a:	4b07      	ldr	r3, [pc, #28]	; (8011098 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x384>)
 801107c:	2200      	movs	r2, #0
 801107e:	601a      	str	r2, [r3, #0]
    AppBuffHalf = 0;
 8011080:	4b0b      	ldr	r3, [pc, #44]	; (80110b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x39c>)
 8011082:	2200      	movs	r2, #0
 8011084:	601a      	str	r2, [r3, #0]
    /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
    BSP_AUDIO_IN_TransferComplete_CallBack();
 8011086:	f7f6 f949 	bl	800731c <BSP_AUDIO_IN_TransferComplete_CallBack>
  }  
}
 801108a:	bf00      	nop
 801108c:	3710      	adds	r7, #16
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}
 8011092:	bf00      	nop
 8011094:	2002acc0 	.word	0x2002acc0
 8011098:	20004b78 	.word	0x20004b78
 801109c:	20004b40 	.word	0x20004b40
 80110a0:	ffff8008 	.word	0xffff8008
 80110a4:	20004b50 	.word	0x20004b50
 80110a8:	20004b58 	.word	0x20004b58
 80110ac:	20004b60 	.word	0x20004b60
 80110b0:	20004b7c 	.word	0x20004b7c

080110b4 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai : SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b082      	sub	sp, #8
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32769i_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80110bc:	f7f6 f93a 	bl	8007334 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80110c0:	bf00      	nop
 80110c2:	3708      	adds	r7, #8
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}

080110c8 <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai : SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b082      	sub	sp, #8
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80110d0:	f7f6 f924 	bl	800731c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80110d4:	bf00      	nop
 80110d6:	3708      	adds	r7, #8
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}

080110dc <BSP_AUDIO_IN_MspInit>:
/**
  * @brief  Initialize BSP_AUDIO_IN MSP.
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(void)
{ 
 80110dc:	b580      	push	{r7, lr}
 80110de:	af00      	add	r7, sp, #0
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 80110e0:	4b07      	ldr	r3, [pc, #28]	; (8011100 <BSP_AUDIO_IN_MspInit+0x24>)
 80110e2:	881b      	ldrh	r3, [r3, #0]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d104      	bne.n	80110f2 <BSP_AUDIO_IN_MspInit+0x16>
  {  
  /* MSP channels initialization */
  DFSDMx_ChannelMspInit();  
 80110e8:	f000 fd4e 	bl	8011b88 <DFSDMx_ChannelMspInit>
  /* MSP filters initialization */
  DFSDMx_FilterMspInit();
 80110ec:	f000 fda8 	bl	8011c40 <DFSDMx_FilterMspInit>
  }
  else
  {
   SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL); 
  }
}
 80110f0:	e003      	b.n	80110fa <BSP_AUDIO_IN_MspInit+0x1e>
   SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL); 
 80110f2:	2100      	movs	r1, #0
 80110f4:	4803      	ldr	r0, [pc, #12]	; (8011104 <BSP_AUDIO_IN_MspInit+0x28>)
 80110f6:	f7ff f84d 	bl	8010194 <SAI_AUDIO_IN_MspInit>
}
 80110fa:	bf00      	nop
 80110fc:	bd80      	pop	{r7, pc}
 80110fe:	bf00      	nop
 8011100:	20004b54 	.word	0x20004b54
 8011104:	2002ab04 	.word	0x2002ab04

08011108 <BSP_AUDIO_IN_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_IN_ClockConfig(DFSDM_Filter_HandleTypeDef *hdfsdm_filter, uint32_t AudioFreq, void *Params)
{ 
 8011108:	b580      	push	{r7, lr}
 801110a:	b0a8      	sub	sp, #160	; 0xa0
 801110c:	af00      	add	r7, sp, #0
 801110e:	60f8      	str	r0, [r7, #12]
 8011110:	60b9      	str	r1, [r7, #8]
 8011112:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8011114:	f107 0310 	add.w	r3, r7, #16
 8011118:	4618      	mov	r0, r3
 801111a:	f7fd f825 	bl	800e168 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	f642 3211 	movw	r2, #11025	; 0x2b11
 8011124:	4293      	cmp	r3, r2
 8011126:	d009      	beq.n	801113c <BSP_AUDIO_IN_ClockConfig+0x34>
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	f245 6222 	movw	r2, #22050	; 0x5622
 801112e:	4293      	cmp	r3, r2
 8011130:	d004      	beq.n	801113c <BSP_AUDIO_IN_ClockConfig+0x34>
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	f64a 4244 	movw	r2, #44100	; 0xac44
 8011138:	4293      	cmp	r3, r2
 801113a:	d112      	bne.n	8011162 <BSP_AUDIO_IN_ClockConfig+0x5a>
  {
    /* Configure PLLSAI prescalers */
    /* PLLI2S_VCO: VCO_429M 
    SAI_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */ 
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 801113c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011140:	613b      	str	r3, [r7, #16]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8011142:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011146:	653b      	str	r3, [r7, #80]	; 0x50
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8011148:	f240 13ad 	movw	r3, #429	; 0x1ad
 801114c:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 801114e:	2302      	movs	r3, #2
 8011150:	61fb      	str	r3, [r7, #28]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8011152:	2313      	movs	r3, #19
 8011154:	637b      	str	r3, [r7, #52]	; 0x34
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8011156:	f107 0310 	add.w	r3, r7, #16
 801115a:	4618      	mov	r0, r3
 801115c:	f7fc fbde 	bl	800d91c <HAL_RCCEx_PeriphCLKConfig>
 8011160:	e011      	b.n	8011186 <BSP_AUDIO_IN_ClockConfig+0x7e>
  {
    /* SAI clock config 
    PLLI2S_VCO: VCO_344M 
    SAI_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz 
    SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */  
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8011162:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011166:	613b      	str	r3, [r7, #16]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8011168:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801116c:	653b      	str	r3, [r7, #80]	; 0x50
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344; 
 801116e:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8011172:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
 8011174:	2307      	movs	r3, #7
 8011176:	61fb      	str	r3, [r7, #28]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;   
 8011178:	2301      	movs	r3, #1
 801117a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 801117c:	f107 0310 	add.w	r3, r7, #16
 8011180:	4618      	mov	r0, r3
 8011182:	f7fc fbcb 	bl	800d91c <HAL_RCCEx_PeriphCLKConfig>
  }
  
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1_AUDIO;
 8011186:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801118a:	613b      	str	r3, [r7, #16]
  rcc_ex_clk_init_struct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 801118c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8011190:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct); 
 8011194:	f107 0310 	add.w	r3, r7, #16
 8011198:	4618      	mov	r0, r3
 801119a:	f7fc fbbf 	bl	800d91c <HAL_RCCEx_PeriphCLKConfig>
}
 801119e:	bf00      	nop
 80111a0:	37a0      	adds	r7, #160	; 0xa0
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
	...

080111a8 <DFSDMx_Init>:
  *           1MHZ < CLK(micro) < 3.2MHZ (TYP 2.4MHZ for MP34DT01TR)
  *         - Oversampling = CLK(input DFSDM)/(Clock_Divider * AudioFreq)  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
static uint8_t DFSDMx_Init(uint32_t AudioFreq)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b082      	sub	sp, #8
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
  /****************************************************************************/ 
  /********************** Channels configuration  *****************************/
  /****************************************************************************/ 
  /* CHANNEL 1 configuration */
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInTopLeftChannel);  
 80111b0:	4ba6      	ldr	r3, [pc, #664]	; (801144c <DFSDMx_Init+0x2a4>)
 80111b2:	2200      	movs	r2, #0
 80111b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hAudioInTopLeftChannel.Instance                      = DFSDM1_Channel1;  
 80111b8:	4ba4      	ldr	r3, [pc, #656]	; (801144c <DFSDMx_Init+0x2a4>)
 80111ba:	4aa5      	ldr	r2, [pc, #660]	; (8011450 <DFSDMx_Init+0x2a8>)
 80111bc:	601a      	str	r2, [r3, #0]
  hAudioInTopLeftChannel.Init.OutputClock.Activation   = ENABLE;
 80111be:	4ba3      	ldr	r3, [pc, #652]	; (801144c <DFSDMx_Init+0x2a4>)
 80111c0:	2201      	movs	r2, #1
 80111c2:	711a      	strb	r2, [r3, #4]
  hAudioInTopLeftChannel.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80111c4:	4ba1      	ldr	r3, [pc, #644]	; (801144c <DFSDMx_Init+0x2a4>)
 80111c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80111ca:	609a      	str	r2, [r3, #8]
  /* Set the DFSDM clock OUT audio frequency configuration */
  hAudioInTopLeftChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80111d2:	d022      	beq.n	801121a <DFSDMx_Init+0x72>
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f642 3211 	movw	r2, #11025	; 0x2b11
 80111da:	4293      	cmp	r3, r2
 80111dc:	d01b      	beq.n	8011216 <DFSDMx_Init+0x6e>
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80111e4:	d015      	beq.n	8011212 <DFSDMx_Init+0x6a>
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	f245 6222 	movw	r2, #22050	; 0x5622
 80111ec:	4293      	cmp	r3, r2
 80111ee:	d00e      	beq.n	801120e <DFSDMx_Init+0x66>
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80111f6:	d008      	beq.n	801120a <DFSDMx_Init+0x62>
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f64a 4244 	movw	r2, #44100	; 0xac44
 80111fe:	4293      	cmp	r3, r2
 8011200:	d101      	bne.n	8011206 <DFSDMx_Init+0x5e>
 8011202:	2304      	movs	r3, #4
 8011204:	e00a      	b.n	801121c <DFSDMx_Init+0x74>
 8011206:	2319      	movs	r3, #25
 8011208:	e008      	b.n	801121c <DFSDMx_Init+0x74>
 801120a:	2318      	movs	r3, #24
 801120c:	e006      	b.n	801121c <DFSDMx_Init+0x74>
 801120e:	2304      	movs	r3, #4
 8011210:	e004      	b.n	801121c <DFSDMx_Init+0x74>
 8011212:	2318      	movs	r3, #24
 8011214:	e002      	b.n	801121c <DFSDMx_Init+0x74>
 8011216:	2304      	movs	r3, #4
 8011218:	e000      	b.n	801121c <DFSDMx_Init+0x74>
 801121a:	2318      	movs	r3, #24
 801121c:	4a8b      	ldr	r2, [pc, #556]	; (801144c <DFSDMx_Init+0x2a4>)
 801121e:	60d3      	str	r3, [r2, #12]
  hAudioInTopLeftChannel.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8011220:	4b8a      	ldr	r3, [pc, #552]	; (801144c <DFSDMx_Init+0x2a4>)
 8011222:	2200      	movs	r2, #0
 8011224:	611a      	str	r2, [r3, #16]
  hAudioInTopLeftChannel.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 8011226:	4b89      	ldr	r3, [pc, #548]	; (801144c <DFSDMx_Init+0x2a4>)
 8011228:	2200      	movs	r2, #0
 801122a:	615a      	str	r2, [r3, #20]
  hAudioInTopLeftChannel.Init.Input.Pins               = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 801122c:	4b87      	ldr	r3, [pc, #540]	; (801144c <DFSDMx_Init+0x2a4>)
 801122e:	2200      	movs	r2, #0
 8011230:	619a      	str	r2, [r3, #24]
  /* Request to sample stable data for LEFT micro on Rising edge */
  hAudioInTopLeftChannel.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_RISING;
 8011232:	4b86      	ldr	r3, [pc, #536]	; (801144c <DFSDMx_Init+0x2a4>)
 8011234:	2200      	movs	r2, #0
 8011236:	61da      	str	r2, [r3, #28]
  hAudioInTopLeftChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8011238:	4b84      	ldr	r3, [pc, #528]	; (801144c <DFSDMx_Init+0x2a4>)
 801123a:	2204      	movs	r2, #4
 801123c:	621a      	str	r2, [r3, #32]
  hAudioInTopLeftChannel.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 801123e:	4b83      	ldr	r3, [pc, #524]	; (801144c <DFSDMx_Init+0x2a4>)
 8011240:	2200      	movs	r2, #0
 8011242:	625a      	str	r2, [r3, #36]	; 0x24
  hAudioInTopLeftChannel.Init.Awd.Oversampling         = 10;
 8011244:	4b81      	ldr	r3, [pc, #516]	; (801144c <DFSDMx_Init+0x2a4>)
 8011246:	220a      	movs	r2, #10
 8011248:	629a      	str	r2, [r3, #40]	; 0x28
  hAudioInTopLeftChannel.Init.Offset                   = 0;
 801124a:	4b80      	ldr	r3, [pc, #512]	; (801144c <DFSDMx_Init+0x2a4>)
 801124c:	2200      	movs	r2, #0
 801124e:	62da      	str	r2, [r3, #44]	; 0x2c
  hAudioInTopLeftChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8011256:	d029      	beq.n	80112ac <DFSDMx_Init+0x104>
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f642 3211 	movw	r2, #11025	; 0x2b11
 801125e:	4293      	cmp	r3, r2
 8011260:	d022      	beq.n	80112a8 <DFSDMx_Init+0x100>
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8011268:	d01c      	beq.n	80112a4 <DFSDMx_Init+0xfc>
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	f245 6222 	movw	r2, #22050	; 0x5622
 8011270:	4293      	cmp	r3, r2
 8011272:	d015      	beq.n	80112a0 <DFSDMx_Init+0xf8>
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 801127a:	d00f      	beq.n	801129c <DFSDMx_Init+0xf4>
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8011282:	4293      	cmp	r3, r2
 8011284:	d008      	beq.n	8011298 <DFSDMx_Init+0xf0>
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f64b 3280 	movw	r2, #48000	; 0xbb80
 801128c:	4293      	cmp	r3, r2
 801128e:	d101      	bne.n	8011294 <DFSDMx_Init+0xec>
 8011290:	2300      	movs	r3, #0
 8011292:	e00c      	b.n	80112ae <DFSDMx_Init+0x106>
 8011294:	2304      	movs	r3, #4
 8011296:	e00a      	b.n	80112ae <DFSDMx_Init+0x106>
 8011298:	2300      	movs	r3, #0
 801129a:	e008      	b.n	80112ae <DFSDMx_Init+0x106>
 801129c:	2307      	movs	r3, #7
 801129e:	e006      	b.n	80112ae <DFSDMx_Init+0x106>
 80112a0:	2304      	movs	r3, #4
 80112a2:	e004      	b.n	80112ae <DFSDMx_Init+0x106>
 80112a4:	2303      	movs	r3, #3
 80112a6:	e002      	b.n	80112ae <DFSDMx_Init+0x106>
 80112a8:	2308      	movs	r3, #8
 80112aa:	e000      	b.n	80112ae <DFSDMx_Init+0x106>
 80112ac:	2308      	movs	r3, #8
 80112ae:	4a67      	ldr	r2, [pc, #412]	; (801144c <DFSDMx_Init+0x2a4>)
 80112b0:	6313      	str	r3, [r2, #48]	; 0x30
  if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInTopLeftChannel))
 80112b2:	4866      	ldr	r0, [pc, #408]	; (801144c <DFSDMx_Init+0x2a4>)
 80112b4:	f7f9 fed4 	bl	800b060 <HAL_DFSDM_ChannelInit>
 80112b8:	4603      	mov	r3, r0
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d002      	beq.n	80112c4 <DFSDMx_Init+0x11c>
  {
    return AUDIO_ERROR;
 80112be:	2301      	movs	r3, #1
 80112c0:	f000 bc54 	b.w	8011b6c <DFSDMx_Init+0x9c4>
  }
  
  /* CHANNEL 0 configuration */
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInTopRightChannel);  
 80112c4:	4b63      	ldr	r3, [pc, #396]	; (8011454 <DFSDMx_Init+0x2ac>)
 80112c6:	2200      	movs	r2, #0
 80112c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hAudioInTopRightChannel.Instance                      = DFSDM1_Channel0;  
 80112cc:	4b61      	ldr	r3, [pc, #388]	; (8011454 <DFSDMx_Init+0x2ac>)
 80112ce:	4a62      	ldr	r2, [pc, #392]	; (8011458 <DFSDMx_Init+0x2b0>)
 80112d0:	601a      	str	r2, [r3, #0]
  hAudioInTopRightChannel.Init.OutputClock.Activation   = ENABLE;
 80112d2:	4b60      	ldr	r3, [pc, #384]	; (8011454 <DFSDMx_Init+0x2ac>)
 80112d4:	2201      	movs	r2, #1
 80112d6:	711a      	strb	r2, [r3, #4]
  hAudioInTopRightChannel.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80112d8:	4b5e      	ldr	r3, [pc, #376]	; (8011454 <DFSDMx_Init+0x2ac>)
 80112da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80112de:	609a      	str	r2, [r3, #8]
  /* Set the DFSDM clock OUT audio frequency configuration */
  hAudioInTopRightChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80112e6:	d022      	beq.n	801132e <DFSDMx_Init+0x186>
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f642 3211 	movw	r2, #11025	; 0x2b11
 80112ee:	4293      	cmp	r3, r2
 80112f0:	d01b      	beq.n	801132a <DFSDMx_Init+0x182>
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80112f8:	d015      	beq.n	8011326 <DFSDMx_Init+0x17e>
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	f245 6222 	movw	r2, #22050	; 0x5622
 8011300:	4293      	cmp	r3, r2
 8011302:	d00e      	beq.n	8011322 <DFSDMx_Init+0x17a>
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 801130a:	d008      	beq.n	801131e <DFSDMx_Init+0x176>
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8011312:	4293      	cmp	r3, r2
 8011314:	d101      	bne.n	801131a <DFSDMx_Init+0x172>
 8011316:	2304      	movs	r3, #4
 8011318:	e00a      	b.n	8011330 <DFSDMx_Init+0x188>
 801131a:	2319      	movs	r3, #25
 801131c:	e008      	b.n	8011330 <DFSDMx_Init+0x188>
 801131e:	2318      	movs	r3, #24
 8011320:	e006      	b.n	8011330 <DFSDMx_Init+0x188>
 8011322:	2304      	movs	r3, #4
 8011324:	e004      	b.n	8011330 <DFSDMx_Init+0x188>
 8011326:	2318      	movs	r3, #24
 8011328:	e002      	b.n	8011330 <DFSDMx_Init+0x188>
 801132a:	2304      	movs	r3, #4
 801132c:	e000      	b.n	8011330 <DFSDMx_Init+0x188>
 801132e:	2318      	movs	r3, #24
 8011330:	4a48      	ldr	r2, [pc, #288]	; (8011454 <DFSDMx_Init+0x2ac>)
 8011332:	60d3      	str	r3, [r2, #12]
  hAudioInTopRightChannel.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8011334:	4b47      	ldr	r3, [pc, #284]	; (8011454 <DFSDMx_Init+0x2ac>)
 8011336:	2200      	movs	r2, #0
 8011338:	611a      	str	r2, [r3, #16]
  hAudioInTopRightChannel.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 801133a:	4b46      	ldr	r3, [pc, #280]	; (8011454 <DFSDMx_Init+0x2ac>)
 801133c:	2200      	movs	r2, #0
 801133e:	615a      	str	r2, [r3, #20]
  hAudioInTopRightChannel.Init.Input.Pins               = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8011340:	4b44      	ldr	r3, [pc, #272]	; (8011454 <DFSDMx_Init+0x2ac>)
 8011342:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011346:	619a      	str	r2, [r3, #24]
  /* Request to sample stable data for RIGHT micro on Falling edge */
  hAudioInTopRightChannel.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_FALLING;
 8011348:	4b42      	ldr	r3, [pc, #264]	; (8011454 <DFSDMx_Init+0x2ac>)
 801134a:	2201      	movs	r2, #1
 801134c:	61da      	str	r2, [r3, #28]
  hAudioInTopRightChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 801134e:	4b41      	ldr	r3, [pc, #260]	; (8011454 <DFSDMx_Init+0x2ac>)
 8011350:	2204      	movs	r2, #4
 8011352:	621a      	str	r2, [r3, #32]
  hAudioInTopRightChannel.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 8011354:	4b3f      	ldr	r3, [pc, #252]	; (8011454 <DFSDMx_Init+0x2ac>)
 8011356:	2200      	movs	r2, #0
 8011358:	625a      	str	r2, [r3, #36]	; 0x24
  hAudioInTopRightChannel.Init.Awd.Oversampling         = 10;
 801135a:	4b3e      	ldr	r3, [pc, #248]	; (8011454 <DFSDMx_Init+0x2ac>)
 801135c:	220a      	movs	r2, #10
 801135e:	629a      	str	r2, [r3, #40]	; 0x28
  hAudioInTopRightChannel.Init.Offset                   = 0;
 8011360:	4b3c      	ldr	r3, [pc, #240]	; (8011454 <DFSDMx_Init+0x2ac>)
 8011362:	2200      	movs	r2, #0
 8011364:	62da      	str	r2, [r3, #44]	; 0x2c
  hAudioInTopRightChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 801136c:	d029      	beq.n	80113c2 <DFSDMx_Init+0x21a>
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	f642 3211 	movw	r2, #11025	; 0x2b11
 8011374:	4293      	cmp	r3, r2
 8011376:	d022      	beq.n	80113be <DFSDMx_Init+0x216>
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 801137e:	d01c      	beq.n	80113ba <DFSDMx_Init+0x212>
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f245 6222 	movw	r2, #22050	; 0x5622
 8011386:	4293      	cmp	r3, r2
 8011388:	d015      	beq.n	80113b6 <DFSDMx_Init+0x20e>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8011390:	d00f      	beq.n	80113b2 <DFSDMx_Init+0x20a>
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	f64a 4244 	movw	r2, #44100	; 0xac44
 8011398:	4293      	cmp	r3, r2
 801139a:	d008      	beq.n	80113ae <DFSDMx_Init+0x206>
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80113a2:	4293      	cmp	r3, r2
 80113a4:	d101      	bne.n	80113aa <DFSDMx_Init+0x202>
 80113a6:	2300      	movs	r3, #0
 80113a8:	e00c      	b.n	80113c4 <DFSDMx_Init+0x21c>
 80113aa:	2304      	movs	r3, #4
 80113ac:	e00a      	b.n	80113c4 <DFSDMx_Init+0x21c>
 80113ae:	2300      	movs	r3, #0
 80113b0:	e008      	b.n	80113c4 <DFSDMx_Init+0x21c>
 80113b2:	2307      	movs	r3, #7
 80113b4:	e006      	b.n	80113c4 <DFSDMx_Init+0x21c>
 80113b6:	2304      	movs	r3, #4
 80113b8:	e004      	b.n	80113c4 <DFSDMx_Init+0x21c>
 80113ba:	2303      	movs	r3, #3
 80113bc:	e002      	b.n	80113c4 <DFSDMx_Init+0x21c>
 80113be:	2308      	movs	r3, #8
 80113c0:	e000      	b.n	80113c4 <DFSDMx_Init+0x21c>
 80113c2:	2308      	movs	r3, #8
 80113c4:	4a23      	ldr	r2, [pc, #140]	; (8011454 <DFSDMx_Init+0x2ac>)
 80113c6:	6313      	str	r3, [r2, #48]	; 0x30
  if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInTopRightChannel))
 80113c8:	4822      	ldr	r0, [pc, #136]	; (8011454 <DFSDMx_Init+0x2ac>)
 80113ca:	f7f9 fe49 	bl	800b060 <HAL_DFSDM_ChannelInit>
 80113ce:	4603      	mov	r3, r0
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d001      	beq.n	80113d8 <DFSDMx_Init+0x230>
  {
    return AUDIO_ERROR;
 80113d4:	2301      	movs	r3, #1
 80113d6:	e3c9      	b.n	8011b6c <DFSDMx_Init+0x9c4>
  }
  
  if(AudioIn_ChannelNumber > 2)
 80113d8:	4b20      	ldr	r3, [pc, #128]	; (801145c <DFSDMx_Init+0x2b4>)
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	2b02      	cmp	r3, #2
 80113de:	f240 8121 	bls.w	8011624 <DFSDMx_Init+0x47c>
  {  
    /* CHANNEL 5 configuration */
    __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInButtomLeftChannel);  
 80113e2:	4b1f      	ldr	r3, [pc, #124]	; (8011460 <DFSDMx_Init+0x2b8>)
 80113e4:	2200      	movs	r2, #0
 80113e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hAudioInButtomLeftChannel.Instance                      = DFSDM1_Channel5;  
 80113ea:	4b1d      	ldr	r3, [pc, #116]	; (8011460 <DFSDMx_Init+0x2b8>)
 80113ec:	4a1d      	ldr	r2, [pc, #116]	; (8011464 <DFSDMx_Init+0x2bc>)
 80113ee:	601a      	str	r2, [r3, #0]
    hAudioInButtomLeftChannel.Init.OutputClock.Activation   = ENABLE;
 80113f0:	4b1b      	ldr	r3, [pc, #108]	; (8011460 <DFSDMx_Init+0x2b8>)
 80113f2:	2201      	movs	r2, #1
 80113f4:	711a      	strb	r2, [r3, #4]
    hAudioInButtomLeftChannel.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80113f6:	4b1a      	ldr	r3, [pc, #104]	; (8011460 <DFSDMx_Init+0x2b8>)
 80113f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80113fc:	609a      	str	r2, [r3, #8]
    /* Set the DFSDM clock OUT audio frequency configuration */
    hAudioInButtomLeftChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8011404:	d030      	beq.n	8011468 <DFSDMx_Init+0x2c0>
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f642 3211 	movw	r2, #11025	; 0x2b11
 801140c:	4293      	cmp	r3, r2
 801140e:	d01b      	beq.n	8011448 <DFSDMx_Init+0x2a0>
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8011416:	d015      	beq.n	8011444 <DFSDMx_Init+0x29c>
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f245 6222 	movw	r2, #22050	; 0x5622
 801141e:	4293      	cmp	r3, r2
 8011420:	d00e      	beq.n	8011440 <DFSDMx_Init+0x298>
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8011428:	d008      	beq.n	801143c <DFSDMx_Init+0x294>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8011430:	4293      	cmp	r3, r2
 8011432:	d101      	bne.n	8011438 <DFSDMx_Init+0x290>
 8011434:	2304      	movs	r3, #4
 8011436:	e018      	b.n	801146a <DFSDMx_Init+0x2c2>
 8011438:	2319      	movs	r3, #25
 801143a:	e016      	b.n	801146a <DFSDMx_Init+0x2c2>
 801143c:	2318      	movs	r3, #24
 801143e:	e014      	b.n	801146a <DFSDMx_Init+0x2c2>
 8011440:	2304      	movs	r3, #4
 8011442:	e012      	b.n	801146a <DFSDMx_Init+0x2c2>
 8011444:	2318      	movs	r3, #24
 8011446:	e010      	b.n	801146a <DFSDMx_Init+0x2c2>
 8011448:	2304      	movs	r3, #4
 801144a:	e00e      	b.n	801146a <DFSDMx_Init+0x2c2>
 801144c:	2002ad8c 	.word	0x2002ad8c
 8011450:	40017420 	.word	0x40017420
 8011454:	2002adc4 	.word	0x2002adc4
 8011458:	40017400 	.word	0x40017400
 801145c:	20000020 	.word	0x20000020
 8011460:	2002aedc 	.word	0x2002aedc
 8011464:	400174a0 	.word	0x400174a0
 8011468:	2318      	movs	r3, #24
 801146a:	4a99      	ldr	r2, [pc, #612]	; (80116d0 <DFSDMx_Init+0x528>)
 801146c:	60d3      	str	r3, [r2, #12]
    hAudioInButtomLeftChannel.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 801146e:	4b98      	ldr	r3, [pc, #608]	; (80116d0 <DFSDMx_Init+0x528>)
 8011470:	2200      	movs	r2, #0
 8011472:	611a      	str	r2, [r3, #16]
    hAudioInButtomLeftChannel.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 8011474:	4b96      	ldr	r3, [pc, #600]	; (80116d0 <DFSDMx_Init+0x528>)
 8011476:	2200      	movs	r2, #0
 8011478:	615a      	str	r2, [r3, #20]
    hAudioInButtomLeftChannel.Init.Input.Pins               = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 801147a:	4b95      	ldr	r3, [pc, #596]	; (80116d0 <DFSDMx_Init+0x528>)
 801147c:	2200      	movs	r2, #0
 801147e:	619a      	str	r2, [r3, #24]
    /* Request to sample stable data for LEFT micro on Rising edge */
    hAudioInButtomLeftChannel.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_RISING;
 8011480:	4b93      	ldr	r3, [pc, #588]	; (80116d0 <DFSDMx_Init+0x528>)
 8011482:	2200      	movs	r2, #0
 8011484:	61da      	str	r2, [r3, #28]
    hAudioInButtomLeftChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8011486:	4b92      	ldr	r3, [pc, #584]	; (80116d0 <DFSDMx_Init+0x528>)
 8011488:	2204      	movs	r2, #4
 801148a:	621a      	str	r2, [r3, #32]
    hAudioInButtomLeftChannel.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 801148c:	4b90      	ldr	r3, [pc, #576]	; (80116d0 <DFSDMx_Init+0x528>)
 801148e:	2200      	movs	r2, #0
 8011490:	625a      	str	r2, [r3, #36]	; 0x24
    hAudioInButtomLeftChannel.Init.Awd.Oversampling         = 10;
 8011492:	4b8f      	ldr	r3, [pc, #572]	; (80116d0 <DFSDMx_Init+0x528>)
 8011494:	220a      	movs	r2, #10
 8011496:	629a      	str	r2, [r3, #40]	; 0x28
    hAudioInButtomLeftChannel.Init.Offset                   = 0;
 8011498:	4b8d      	ldr	r3, [pc, #564]	; (80116d0 <DFSDMx_Init+0x528>)
 801149a:	2200      	movs	r2, #0
 801149c:	62da      	str	r2, [r3, #44]	; 0x2c
    hAudioInButtomLeftChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80114a4:	d029      	beq.n	80114fa <DFSDMx_Init+0x352>
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	f642 3211 	movw	r2, #11025	; 0x2b11
 80114ac:	4293      	cmp	r3, r2
 80114ae:	d022      	beq.n	80114f6 <DFSDMx_Init+0x34e>
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80114b6:	d01c      	beq.n	80114f2 <DFSDMx_Init+0x34a>
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	f245 6222 	movw	r2, #22050	; 0x5622
 80114be:	4293      	cmp	r3, r2
 80114c0:	d015      	beq.n	80114ee <DFSDMx_Init+0x346>
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80114c8:	d00f      	beq.n	80114ea <DFSDMx_Init+0x342>
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f64a 4244 	movw	r2, #44100	; 0xac44
 80114d0:	4293      	cmp	r3, r2
 80114d2:	d008      	beq.n	80114e6 <DFSDMx_Init+0x33e>
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80114da:	4293      	cmp	r3, r2
 80114dc:	d101      	bne.n	80114e2 <DFSDMx_Init+0x33a>
 80114de:	2300      	movs	r3, #0
 80114e0:	e00c      	b.n	80114fc <DFSDMx_Init+0x354>
 80114e2:	2304      	movs	r3, #4
 80114e4:	e00a      	b.n	80114fc <DFSDMx_Init+0x354>
 80114e6:	2300      	movs	r3, #0
 80114e8:	e008      	b.n	80114fc <DFSDMx_Init+0x354>
 80114ea:	2307      	movs	r3, #7
 80114ec:	e006      	b.n	80114fc <DFSDMx_Init+0x354>
 80114ee:	2304      	movs	r3, #4
 80114f0:	e004      	b.n	80114fc <DFSDMx_Init+0x354>
 80114f2:	2303      	movs	r3, #3
 80114f4:	e002      	b.n	80114fc <DFSDMx_Init+0x354>
 80114f6:	2308      	movs	r3, #8
 80114f8:	e000      	b.n	80114fc <DFSDMx_Init+0x354>
 80114fa:	2308      	movs	r3, #8
 80114fc:	4a74      	ldr	r2, [pc, #464]	; (80116d0 <DFSDMx_Init+0x528>)
 80114fe:	6313      	str	r3, [r2, #48]	; 0x30
    if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInButtomLeftChannel))
 8011500:	4873      	ldr	r0, [pc, #460]	; (80116d0 <DFSDMx_Init+0x528>)
 8011502:	f7f9 fdad 	bl	800b060 <HAL_DFSDM_ChannelInit>
 8011506:	4603      	mov	r3, r0
 8011508:	2b00      	cmp	r3, #0
 801150a:	d001      	beq.n	8011510 <DFSDMx_Init+0x368>
    {
      return AUDIO_ERROR;
 801150c:	2301      	movs	r3, #1
 801150e:	e32d      	b.n	8011b6c <DFSDMx_Init+0x9c4>
    }
    
    /* CHANNEL 4 configuration */
    __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInButtomRightChannel);  
 8011510:	4b70      	ldr	r3, [pc, #448]	; (80116d4 <DFSDMx_Init+0x52c>)
 8011512:	2200      	movs	r2, #0
 8011514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hAudioInButtomRightChannel.Instance                      = DFSDM1_Channel4;  
 8011518:	4b6e      	ldr	r3, [pc, #440]	; (80116d4 <DFSDMx_Init+0x52c>)
 801151a:	4a6f      	ldr	r2, [pc, #444]	; (80116d8 <DFSDMx_Init+0x530>)
 801151c:	601a      	str	r2, [r3, #0]
    hAudioInButtomRightChannel.Init.OutputClock.Activation   = ENABLE;
 801151e:	4b6d      	ldr	r3, [pc, #436]	; (80116d4 <DFSDMx_Init+0x52c>)
 8011520:	2201      	movs	r2, #1
 8011522:	711a      	strb	r2, [r3, #4]
    hAudioInButtomRightChannel.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8011524:	4b6b      	ldr	r3, [pc, #428]	; (80116d4 <DFSDMx_Init+0x52c>)
 8011526:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801152a:	609a      	str	r2, [r3, #8]
    /* Set the DFSDM clock OUT audio frequency configuration */
    hAudioInButtomRightChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8011532:	d022      	beq.n	801157a <DFSDMx_Init+0x3d2>
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f642 3211 	movw	r2, #11025	; 0x2b11
 801153a:	4293      	cmp	r3, r2
 801153c:	d01b      	beq.n	8011576 <DFSDMx_Init+0x3ce>
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8011544:	d015      	beq.n	8011572 <DFSDMx_Init+0x3ca>
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	f245 6222 	movw	r2, #22050	; 0x5622
 801154c:	4293      	cmp	r3, r2
 801154e:	d00e      	beq.n	801156e <DFSDMx_Init+0x3c6>
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8011556:	d008      	beq.n	801156a <DFSDMx_Init+0x3c2>
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	f64a 4244 	movw	r2, #44100	; 0xac44
 801155e:	4293      	cmp	r3, r2
 8011560:	d101      	bne.n	8011566 <DFSDMx_Init+0x3be>
 8011562:	2304      	movs	r3, #4
 8011564:	e00a      	b.n	801157c <DFSDMx_Init+0x3d4>
 8011566:	2319      	movs	r3, #25
 8011568:	e008      	b.n	801157c <DFSDMx_Init+0x3d4>
 801156a:	2318      	movs	r3, #24
 801156c:	e006      	b.n	801157c <DFSDMx_Init+0x3d4>
 801156e:	2304      	movs	r3, #4
 8011570:	e004      	b.n	801157c <DFSDMx_Init+0x3d4>
 8011572:	2318      	movs	r3, #24
 8011574:	e002      	b.n	801157c <DFSDMx_Init+0x3d4>
 8011576:	2304      	movs	r3, #4
 8011578:	e000      	b.n	801157c <DFSDMx_Init+0x3d4>
 801157a:	2318      	movs	r3, #24
 801157c:	4a55      	ldr	r2, [pc, #340]	; (80116d4 <DFSDMx_Init+0x52c>)
 801157e:	60d3      	str	r3, [r2, #12]
    hAudioInButtomRightChannel.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8011580:	4b54      	ldr	r3, [pc, #336]	; (80116d4 <DFSDMx_Init+0x52c>)
 8011582:	2200      	movs	r2, #0
 8011584:	611a      	str	r2, [r3, #16]
    hAudioInButtomRightChannel.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 8011586:	4b53      	ldr	r3, [pc, #332]	; (80116d4 <DFSDMx_Init+0x52c>)
 8011588:	2200      	movs	r2, #0
 801158a:	615a      	str	r2, [r3, #20]
    hAudioInButtomRightChannel.Init.Input.Pins               = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 801158c:	4b51      	ldr	r3, [pc, #324]	; (80116d4 <DFSDMx_Init+0x52c>)
 801158e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011592:	619a      	str	r2, [r3, #24]
    /* Request to sample stable data for RIGHT micro on Falling edge */
    hAudioInButtomRightChannel.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_FALLING;
 8011594:	4b4f      	ldr	r3, [pc, #316]	; (80116d4 <DFSDMx_Init+0x52c>)
 8011596:	2201      	movs	r2, #1
 8011598:	61da      	str	r2, [r3, #28]
    hAudioInButtomRightChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 801159a:	4b4e      	ldr	r3, [pc, #312]	; (80116d4 <DFSDMx_Init+0x52c>)
 801159c:	2204      	movs	r2, #4
 801159e:	621a      	str	r2, [r3, #32]
    hAudioInButtomRightChannel.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 80115a0:	4b4c      	ldr	r3, [pc, #304]	; (80116d4 <DFSDMx_Init+0x52c>)
 80115a2:	2200      	movs	r2, #0
 80115a4:	625a      	str	r2, [r3, #36]	; 0x24
    hAudioInButtomRightChannel.Init.Awd.Oversampling         = 10;
 80115a6:	4b4b      	ldr	r3, [pc, #300]	; (80116d4 <DFSDMx_Init+0x52c>)
 80115a8:	220a      	movs	r2, #10
 80115aa:	629a      	str	r2, [r3, #40]	; 0x28
    hAudioInButtomRightChannel.Init.Offset                   = 0;
 80115ac:	4b49      	ldr	r3, [pc, #292]	; (80116d4 <DFSDMx_Init+0x52c>)
 80115ae:	2200      	movs	r2, #0
 80115b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hAudioInButtomRightChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80115b8:	d029      	beq.n	801160e <DFSDMx_Init+0x466>
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	f642 3211 	movw	r2, #11025	; 0x2b11
 80115c0:	4293      	cmp	r3, r2
 80115c2:	d022      	beq.n	801160a <DFSDMx_Init+0x462>
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80115ca:	d01c      	beq.n	8011606 <DFSDMx_Init+0x45e>
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f245 6222 	movw	r2, #22050	; 0x5622
 80115d2:	4293      	cmp	r3, r2
 80115d4:	d015      	beq.n	8011602 <DFSDMx_Init+0x45a>
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80115dc:	d00f      	beq.n	80115fe <DFSDMx_Init+0x456>
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f64a 4244 	movw	r2, #44100	; 0xac44
 80115e4:	4293      	cmp	r3, r2
 80115e6:	d008      	beq.n	80115fa <DFSDMx_Init+0x452>
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80115ee:	4293      	cmp	r3, r2
 80115f0:	d101      	bne.n	80115f6 <DFSDMx_Init+0x44e>
 80115f2:	2300      	movs	r3, #0
 80115f4:	e00c      	b.n	8011610 <DFSDMx_Init+0x468>
 80115f6:	2304      	movs	r3, #4
 80115f8:	e00a      	b.n	8011610 <DFSDMx_Init+0x468>
 80115fa:	2300      	movs	r3, #0
 80115fc:	e008      	b.n	8011610 <DFSDMx_Init+0x468>
 80115fe:	2307      	movs	r3, #7
 8011600:	e006      	b.n	8011610 <DFSDMx_Init+0x468>
 8011602:	2304      	movs	r3, #4
 8011604:	e004      	b.n	8011610 <DFSDMx_Init+0x468>
 8011606:	2303      	movs	r3, #3
 8011608:	e002      	b.n	8011610 <DFSDMx_Init+0x468>
 801160a:	2308      	movs	r3, #8
 801160c:	e000      	b.n	8011610 <DFSDMx_Init+0x468>
 801160e:	2308      	movs	r3, #8
 8011610:	4a30      	ldr	r2, [pc, #192]	; (80116d4 <DFSDMx_Init+0x52c>)
 8011612:	6313      	str	r3, [r2, #48]	; 0x30
    if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInButtomRightChannel))
 8011614:	482f      	ldr	r0, [pc, #188]	; (80116d4 <DFSDMx_Init+0x52c>)
 8011616:	f7f9 fd23 	bl	800b060 <HAL_DFSDM_ChannelInit>
 801161a:	4603      	mov	r3, r0
 801161c:	2b00      	cmp	r3, #0
 801161e:	d001      	beq.n	8011624 <DFSDMx_Init+0x47c>
    {
      return AUDIO_ERROR;
 8011620:	2301      	movs	r3, #1
 8011622:	e2a3      	b.n	8011b6c <DFSDMx_Init+0x9c4>
  /****************************************************************************/ 
  /********************** Filters configuration  ******************************/
  /****************************************************************************/
  
  /* FILTER 0 configuration */
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInTopLeftFilter);
 8011624:	4b2d      	ldr	r3, [pc, #180]	; (80116dc <DFSDMx_Init+0x534>)
 8011626:	2200      	movs	r2, #0
 8011628:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  hAudioInTopLeftFilter.Instance                          = AUDIO_DFSDMx_TOP_LEFT_FILTER;  
 801162c:	4b2b      	ldr	r3, [pc, #172]	; (80116dc <DFSDMx_Init+0x534>)
 801162e:	4a2c      	ldr	r2, [pc, #176]	; (80116e0 <DFSDMx_Init+0x538>)
 8011630:	601a      	str	r2, [r3, #0]
  hAudioInTopLeftFilter.Init.RegularParam.Trigger         = DFSDM_FILTER_SW_TRIGGER;
 8011632:	4b2a      	ldr	r3, [pc, #168]	; (80116dc <DFSDMx_Init+0x534>)
 8011634:	2200      	movs	r2, #0
 8011636:	605a      	str	r2, [r3, #4]
  hAudioInTopLeftFilter.Init.RegularParam.FastMode        = ENABLE;
 8011638:	4b28      	ldr	r3, [pc, #160]	; (80116dc <DFSDMx_Init+0x534>)
 801163a:	2201      	movs	r2, #1
 801163c:	721a      	strb	r2, [r3, #8]
  hAudioInTopLeftFilter.Init.RegularParam.DmaMode         = ENABLE;
 801163e:	4b27      	ldr	r3, [pc, #156]	; (80116dc <DFSDMx_Init+0x534>)
 8011640:	2201      	movs	r2, #1
 8011642:	725a      	strb	r2, [r3, #9]
  hAudioInTopLeftFilter.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 8011644:	4b25      	ldr	r3, [pc, #148]	; (80116dc <DFSDMx_Init+0x534>)
 8011646:	2200      	movs	r2, #0
 8011648:	60da      	str	r2, [r3, #12]
  hAudioInTopLeftFilter.Init.InjectedParam.ScanMode       = ENABLE;
 801164a:	4b24      	ldr	r3, [pc, #144]	; (80116dc <DFSDMx_Init+0x534>)
 801164c:	2201      	movs	r2, #1
 801164e:	741a      	strb	r2, [r3, #16]
  hAudioInTopLeftFilter.Init.InjectedParam.DmaMode        = DISABLE;
 8011650:	4b22      	ldr	r3, [pc, #136]	; (80116dc <DFSDMx_Init+0x534>)
 8011652:	2200      	movs	r2, #0
 8011654:	745a      	strb	r2, [r3, #17]
  hAudioInTopLeftFilter.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8011656:	4b21      	ldr	r3, [pc, #132]	; (80116dc <DFSDMx_Init+0x534>)
 8011658:	2200      	movs	r2, #0
 801165a:	615a      	str	r2, [r3, #20]
  hAudioInTopLeftFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 801165c:	4b1f      	ldr	r3, [pc, #124]	; (80116dc <DFSDMx_Init+0x534>)
 801165e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011662:	619a      	str	r2, [r3, #24]
  hAudioInTopLeftFilter.Init.FilterParam.SincOrder        = DFSDM_FILTER_ORDER(AudioFreq);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 801166a:	d03b      	beq.n	80116e4 <DFSDMx_Init+0x53c>
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f642 3211 	movw	r2, #11025	; 0x2b11
 8011672:	4293      	cmp	r3, r2
 8011674:	d028      	beq.n	80116c8 <DFSDMx_Init+0x520>
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 801167c:	d021      	beq.n	80116c2 <DFSDMx_Init+0x51a>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f245 6222 	movw	r2, #22050	; 0x5622
 8011684:	4293      	cmp	r3, r2
 8011686:	d019      	beq.n	80116bc <DFSDMx_Init+0x514>
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 801168e:	d012      	beq.n	80116b6 <DFSDMx_Init+0x50e>
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f64a 4244 	movw	r2, #44100	; 0xac44
 8011696:	4293      	cmp	r3, r2
 8011698:	d00a      	beq.n	80116b0 <DFSDMx_Init+0x508>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80116a0:	4293      	cmp	r3, r2
 80116a2:	d102      	bne.n	80116aa <DFSDMx_Init+0x502>
 80116a4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80116a8:	e01e      	b.n	80116e8 <DFSDMx_Init+0x540>
 80116aa:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80116ae:	e01b      	b.n	80116e8 <DFSDMx_Init+0x540>
 80116b0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80116b4:	e018      	b.n	80116e8 <DFSDMx_Init+0x540>
 80116b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80116ba:	e015      	b.n	80116e8 <DFSDMx_Init+0x540>
 80116bc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80116c0:	e012      	b.n	80116e8 <DFSDMx_Init+0x540>
 80116c2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80116c6:	e00f      	b.n	80116e8 <DFSDMx_Init+0x540>
 80116c8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80116cc:	e00c      	b.n	80116e8 <DFSDMx_Init+0x540>
 80116ce:	bf00      	nop
 80116d0:	2002aedc 	.word	0x2002aedc
 80116d4:	2002ae50 	.word	0x2002ae50
 80116d8:	40017480 	.word	0x40017480
 80116dc:	2002ac6c 	.word	0x2002ac6c
 80116e0:	40017500 	.word	0x40017500
 80116e4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80116e8:	4aa2      	ldr	r2, [pc, #648]	; (8011974 <DFSDMx_Init+0x7cc>)
 80116ea:	61d3      	str	r3, [r2, #28]
  /* Set the DFSDM Filters Oversampling to have correct sample rate */
  hAudioInTopLeftFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80116f2:	d02a      	beq.n	801174a <DFSDMx_Init+0x5a2>
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	f642 3211 	movw	r2, #11025	; 0x2b11
 80116fa:	4293      	cmp	r3, r2
 80116fc:	d022      	beq.n	8011744 <DFSDMx_Init+0x59c>
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8011704:	d01c      	beq.n	8011740 <DFSDMx_Init+0x598>
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	f245 6222 	movw	r2, #22050	; 0x5622
 801170c:	4293      	cmp	r3, r2
 801170e:	d015      	beq.n	801173c <DFSDMx_Init+0x594>
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8011716:	d00f      	beq.n	8011738 <DFSDMx_Init+0x590>
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f64a 4244 	movw	r2, #44100	; 0xac44
 801171e:	4293      	cmp	r3, r2
 8011720:	d008      	beq.n	8011734 <DFSDMx_Init+0x58c>
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8011728:	4293      	cmp	r3, r2
 801172a:	d101      	bne.n	8011730 <DFSDMx_Init+0x588>
 801172c:	2328      	movs	r3, #40	; 0x28
 801172e:	e00e      	b.n	801174e <DFSDMx_Init+0x5a6>
 8011730:	2314      	movs	r3, #20
 8011732:	e00c      	b.n	801174e <DFSDMx_Init+0x5a6>
 8011734:	2340      	movs	r3, #64	; 0x40
 8011736:	e00a      	b.n	801174e <DFSDMx_Init+0x5a6>
 8011738:	2340      	movs	r3, #64	; 0x40
 801173a:	e008      	b.n	801174e <DFSDMx_Init+0x5a6>
 801173c:	2380      	movs	r3, #128	; 0x80
 801173e:	e006      	b.n	801174e <DFSDMx_Init+0x5a6>
 8011740:	2380      	movs	r3, #128	; 0x80
 8011742:	e004      	b.n	801174e <DFSDMx_Init+0x5a6>
 8011744:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011748:	e001      	b.n	801174e <DFSDMx_Init+0x5a6>
 801174a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801174e:	4a89      	ldr	r2, [pc, #548]	; (8011974 <DFSDMx_Init+0x7cc>)
 8011750:	6213      	str	r3, [r2, #32]
  hAudioInTopLeftFilter.Init.FilterParam.IntOversampling  = 1;
 8011752:	4b88      	ldr	r3, [pc, #544]	; (8011974 <DFSDMx_Init+0x7cc>)
 8011754:	2201      	movs	r2, #1
 8011756:	625a      	str	r2, [r3, #36]	; 0x24
  if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInTopLeftFilter))
 8011758:	4886      	ldr	r0, [pc, #536]	; (8011974 <DFSDMx_Init+0x7cc>)
 801175a:	f7f9 fd41 	bl	800b1e0 <HAL_DFSDM_FilterInit>
 801175e:	4603      	mov	r3, r0
 8011760:	2b00      	cmp	r3, #0
 8011762:	d001      	beq.n	8011768 <DFSDMx_Init+0x5c0>
  {
    return AUDIO_ERROR;
 8011764:	2301      	movs	r3, #1
 8011766:	e201      	b.n	8011b6c <DFSDMx_Init+0x9c4>
  }
  
  /* Configure injected channel */
  if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInTopLeftFilter, AUDIO_DFSDMx_TOP_LEFT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 8011768:	2201      	movs	r2, #1
 801176a:	4983      	ldr	r1, [pc, #524]	; (8011978 <DFSDMx_Init+0x7d0>)
 801176c:	4881      	ldr	r0, [pc, #516]	; (8011974 <DFSDMx_Init+0x7cc>)
 801176e:	f7f9 fe1b 	bl	800b3a8 <HAL_DFSDM_FilterConfigRegChannel>
 8011772:	4603      	mov	r3, r0
 8011774:	2b00      	cmp	r3, #0
 8011776:	d001      	beq.n	801177c <DFSDMx_Init+0x5d4>
  {
    return AUDIO_ERROR;
 8011778:	2301      	movs	r3, #1
 801177a:	e1f7      	b.n	8011b6c <DFSDMx_Init+0x9c4>
  }
  
  /* FILTER 1 configuration */
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInTopRightFilter);
 801177c:	4b7f      	ldr	r3, [pc, #508]	; (801197c <DFSDMx_Init+0x7d4>)
 801177e:	2200      	movs	r2, #0
 8011780:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  hAudioInTopRightFilter.Instance                          = AUDIO_DFSDMx_TOP_RIGHT_FILTER;
 8011784:	4b7d      	ldr	r3, [pc, #500]	; (801197c <DFSDMx_Init+0x7d4>)
 8011786:	4a7e      	ldr	r2, [pc, #504]	; (8011980 <DFSDMx_Init+0x7d8>)
 8011788:	601a      	str	r2, [r3, #0]
  hAudioInTopRightFilter.Init.RegularParam.Trigger         = DFSDM_FILTER_SYNC_TRIGGER;
 801178a:	4b7c      	ldr	r3, [pc, #496]	; (801197c <DFSDMx_Init+0x7d4>)
 801178c:	2201      	movs	r2, #1
 801178e:	605a      	str	r2, [r3, #4]
  hAudioInTopRightFilter.Init.RegularParam.FastMode        = ENABLE;
 8011790:	4b7a      	ldr	r3, [pc, #488]	; (801197c <DFSDMx_Init+0x7d4>)
 8011792:	2201      	movs	r2, #1
 8011794:	721a      	strb	r2, [r3, #8]
  hAudioInTopRightFilter.Init.RegularParam.DmaMode         = ENABLE;
 8011796:	4b79      	ldr	r3, [pc, #484]	; (801197c <DFSDMx_Init+0x7d4>)
 8011798:	2201      	movs	r2, #1
 801179a:	725a      	strb	r2, [r3, #9]
  hAudioInTopRightFilter.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 801179c:	4b77      	ldr	r3, [pc, #476]	; (801197c <DFSDMx_Init+0x7d4>)
 801179e:	2200      	movs	r2, #0
 80117a0:	60da      	str	r2, [r3, #12]
  hAudioInTopRightFilter.Init.InjectedParam.ScanMode       = DISABLE;
 80117a2:	4b76      	ldr	r3, [pc, #472]	; (801197c <DFSDMx_Init+0x7d4>)
 80117a4:	2200      	movs	r2, #0
 80117a6:	741a      	strb	r2, [r3, #16]
  hAudioInTopRightFilter.Init.InjectedParam.DmaMode        = DISABLE;
 80117a8:	4b74      	ldr	r3, [pc, #464]	; (801197c <DFSDMx_Init+0x7d4>)
 80117aa:	2200      	movs	r2, #0
 80117ac:	745a      	strb	r2, [r3, #17]
  hAudioInTopRightFilter.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80117ae:	4b73      	ldr	r3, [pc, #460]	; (801197c <DFSDMx_Init+0x7d4>)
 80117b0:	2200      	movs	r2, #0
 80117b2:	615a      	str	r2, [r3, #20]
  hAudioInTopRightFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80117b4:	4b71      	ldr	r3, [pc, #452]	; (801197c <DFSDMx_Init+0x7d4>)
 80117b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80117ba:	619a      	str	r2, [r3, #24]
  hAudioInTopRightFilter.Init.FilterParam.SincOrder        = DFSDM_FILTER_ORDER(AudioFreq);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80117c2:	d030      	beq.n	8011826 <DFSDMx_Init+0x67e>
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f642 3211 	movw	r2, #11025	; 0x2b11
 80117ca:	4293      	cmp	r3, r2
 80117cc:	d028      	beq.n	8011820 <DFSDMx_Init+0x678>
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80117d4:	d021      	beq.n	801181a <DFSDMx_Init+0x672>
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	f245 6222 	movw	r2, #22050	; 0x5622
 80117dc:	4293      	cmp	r3, r2
 80117de:	d019      	beq.n	8011814 <DFSDMx_Init+0x66c>
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80117e6:	d012      	beq.n	801180e <DFSDMx_Init+0x666>
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f64a 4244 	movw	r2, #44100	; 0xac44
 80117ee:	4293      	cmp	r3, r2
 80117f0:	d00a      	beq.n	8011808 <DFSDMx_Init+0x660>
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80117f8:	4293      	cmp	r3, r2
 80117fa:	d102      	bne.n	8011802 <DFSDMx_Init+0x65a>
 80117fc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8011800:	e013      	b.n	801182a <DFSDMx_Init+0x682>
 8011802:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8011806:	e010      	b.n	801182a <DFSDMx_Init+0x682>
 8011808:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 801180c:	e00d      	b.n	801182a <DFSDMx_Init+0x682>
 801180e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011812:	e00a      	b.n	801182a <DFSDMx_Init+0x682>
 8011814:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8011818:	e007      	b.n	801182a <DFSDMx_Init+0x682>
 801181a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 801181e:	e004      	b.n	801182a <DFSDMx_Init+0x682>
 8011820:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8011824:	e001      	b.n	801182a <DFSDMx_Init+0x682>
 8011826:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 801182a:	4a54      	ldr	r2, [pc, #336]	; (801197c <DFSDMx_Init+0x7d4>)
 801182c:	61d3      	str	r3, [r2, #28]
  /* Set the DFSDM Filters Oversampling to have correct sample rate */
  hAudioInTopRightFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8011834:	d02a      	beq.n	801188c <DFSDMx_Init+0x6e4>
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f642 3211 	movw	r2, #11025	; 0x2b11
 801183c:	4293      	cmp	r3, r2
 801183e:	d022      	beq.n	8011886 <DFSDMx_Init+0x6de>
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8011846:	d01c      	beq.n	8011882 <DFSDMx_Init+0x6da>
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f245 6222 	movw	r2, #22050	; 0x5622
 801184e:	4293      	cmp	r3, r2
 8011850:	d015      	beq.n	801187e <DFSDMx_Init+0x6d6>
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8011858:	d00f      	beq.n	801187a <DFSDMx_Init+0x6d2>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8011860:	4293      	cmp	r3, r2
 8011862:	d008      	beq.n	8011876 <DFSDMx_Init+0x6ce>
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f64b 3280 	movw	r2, #48000	; 0xbb80
 801186a:	4293      	cmp	r3, r2
 801186c:	d101      	bne.n	8011872 <DFSDMx_Init+0x6ca>
 801186e:	2328      	movs	r3, #40	; 0x28
 8011870:	e00e      	b.n	8011890 <DFSDMx_Init+0x6e8>
 8011872:	2314      	movs	r3, #20
 8011874:	e00c      	b.n	8011890 <DFSDMx_Init+0x6e8>
 8011876:	2340      	movs	r3, #64	; 0x40
 8011878:	e00a      	b.n	8011890 <DFSDMx_Init+0x6e8>
 801187a:	2340      	movs	r3, #64	; 0x40
 801187c:	e008      	b.n	8011890 <DFSDMx_Init+0x6e8>
 801187e:	2380      	movs	r3, #128	; 0x80
 8011880:	e006      	b.n	8011890 <DFSDMx_Init+0x6e8>
 8011882:	2380      	movs	r3, #128	; 0x80
 8011884:	e004      	b.n	8011890 <DFSDMx_Init+0x6e8>
 8011886:	f44f 7380 	mov.w	r3, #256	; 0x100
 801188a:	e001      	b.n	8011890 <DFSDMx_Init+0x6e8>
 801188c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011890:	4a3a      	ldr	r2, [pc, #232]	; (801197c <DFSDMx_Init+0x7d4>)
 8011892:	6213      	str	r3, [r2, #32]
  hAudioInTopRightFilter.Init.FilterParam.IntOversampling  = 1;
 8011894:	4b39      	ldr	r3, [pc, #228]	; (801197c <DFSDMx_Init+0x7d4>)
 8011896:	2201      	movs	r2, #1
 8011898:	625a      	str	r2, [r3, #36]	; 0x24
  if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInTopRightFilter))
 801189a:	4838      	ldr	r0, [pc, #224]	; (801197c <DFSDMx_Init+0x7d4>)
 801189c:	f7f9 fca0 	bl	800b1e0 <HAL_DFSDM_FilterInit>
 80118a0:	4603      	mov	r3, r0
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d001      	beq.n	80118aa <DFSDMx_Init+0x702>
  {
    return AUDIO_ERROR;
 80118a6:	2301      	movs	r3, #1
 80118a8:	e160      	b.n	8011b6c <DFSDMx_Init+0x9c4>
  }
  /* Configure injected channel */
  if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInTopRightFilter, AUDIO_DFSDMx_TOP_RIGHT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 80118aa:	2201      	movs	r2, #1
 80118ac:	2101      	movs	r1, #1
 80118ae:	4833      	ldr	r0, [pc, #204]	; (801197c <DFSDMx_Init+0x7d4>)
 80118b0:	f7f9 fd7a 	bl	800b3a8 <HAL_DFSDM_FilterConfigRegChannel>
 80118b4:	4603      	mov	r3, r0
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d001      	beq.n	80118be <DFSDMx_Init+0x716>
  {
    return AUDIO_ERROR;
 80118ba:	2301      	movs	r3, #1
 80118bc:	e156      	b.n	8011b6c <DFSDMx_Init+0x9c4>
  } 
  
  if(AudioIn_ChannelNumber > 2)
 80118be:	4b31      	ldr	r3, [pc, #196]	; (8011984 <DFSDMx_Init+0x7dc>)
 80118c0:	781b      	ldrb	r3, [r3, #0]
 80118c2:	2b02      	cmp	r3, #2
 80118c4:	f240 8151 	bls.w	8011b6a <DFSDMx_Init+0x9c2>
  {
    /* FILTER 2 configuration */
    __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInButtomLeftFilter);
 80118c8:	4b2f      	ldr	r3, [pc, #188]	; (8011988 <DFSDMx_Init+0x7e0>)
 80118ca:	2200      	movs	r2, #0
 80118cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    hAudioInButtomLeftFilter.Instance                          = AUDIO_DFSDMx_BUTTOM_LEFT_FILTER;  
 80118d0:	4b2d      	ldr	r3, [pc, #180]	; (8011988 <DFSDMx_Init+0x7e0>)
 80118d2:	4a2e      	ldr	r2, [pc, #184]	; (801198c <DFSDMx_Init+0x7e4>)
 80118d4:	601a      	str	r2, [r3, #0]
    hAudioInButtomLeftFilter.Init.RegularParam.Trigger         = DFSDM_FILTER_SYNC_TRIGGER;
 80118d6:	4b2c      	ldr	r3, [pc, #176]	; (8011988 <DFSDMx_Init+0x7e0>)
 80118d8:	2201      	movs	r2, #1
 80118da:	605a      	str	r2, [r3, #4]
    hAudioInButtomLeftFilter.Init.RegularParam.FastMode        = ENABLE;
 80118dc:	4b2a      	ldr	r3, [pc, #168]	; (8011988 <DFSDMx_Init+0x7e0>)
 80118de:	2201      	movs	r2, #1
 80118e0:	721a      	strb	r2, [r3, #8]
    hAudioInButtomLeftFilter.Init.RegularParam.DmaMode         = ENABLE;
 80118e2:	4b29      	ldr	r3, [pc, #164]	; (8011988 <DFSDMx_Init+0x7e0>)
 80118e4:	2201      	movs	r2, #1
 80118e6:	725a      	strb	r2, [r3, #9]
    hAudioInButtomLeftFilter.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 80118e8:	4b27      	ldr	r3, [pc, #156]	; (8011988 <DFSDMx_Init+0x7e0>)
 80118ea:	2200      	movs	r2, #0
 80118ec:	60da      	str	r2, [r3, #12]
    hAudioInButtomLeftFilter.Init.InjectedParam.ScanMode       = ENABLE;
 80118ee:	4b26      	ldr	r3, [pc, #152]	; (8011988 <DFSDMx_Init+0x7e0>)
 80118f0:	2201      	movs	r2, #1
 80118f2:	741a      	strb	r2, [r3, #16]
    hAudioInButtomLeftFilter.Init.InjectedParam.DmaMode        = DISABLE;
 80118f4:	4b24      	ldr	r3, [pc, #144]	; (8011988 <DFSDMx_Init+0x7e0>)
 80118f6:	2200      	movs	r2, #0
 80118f8:	745a      	strb	r2, [r3, #17]
    hAudioInButtomLeftFilter.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80118fa:	4b23      	ldr	r3, [pc, #140]	; (8011988 <DFSDMx_Init+0x7e0>)
 80118fc:	2200      	movs	r2, #0
 80118fe:	615a      	str	r2, [r3, #20]
    hAudioInButtomLeftFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8011900:	4b21      	ldr	r3, [pc, #132]	; (8011988 <DFSDMx_Init+0x7e0>)
 8011902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011906:	619a      	str	r2, [r3, #24]
    hAudioInButtomLeftFilter.Init.FilterParam.SincOrder        = DFSDM_FILTER_ORDER(AudioFreq);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 801190e:	d03f      	beq.n	8011990 <DFSDMx_Init+0x7e8>
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f642 3211 	movw	r2, #11025	; 0x2b11
 8011916:	4293      	cmp	r3, r2
 8011918:	d028      	beq.n	801196c <DFSDMx_Init+0x7c4>
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8011920:	d021      	beq.n	8011966 <DFSDMx_Init+0x7be>
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f245 6222 	movw	r2, #22050	; 0x5622
 8011928:	4293      	cmp	r3, r2
 801192a:	d019      	beq.n	8011960 <DFSDMx_Init+0x7b8>
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8011932:	d012      	beq.n	801195a <DFSDMx_Init+0x7b2>
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f64a 4244 	movw	r2, #44100	; 0xac44
 801193a:	4293      	cmp	r3, r2
 801193c:	d00a      	beq.n	8011954 <DFSDMx_Init+0x7ac>
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8011944:	4293      	cmp	r3, r2
 8011946:	d102      	bne.n	801194e <DFSDMx_Init+0x7a6>
 8011948:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 801194c:	e022      	b.n	8011994 <DFSDMx_Init+0x7ec>
 801194e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8011952:	e01f      	b.n	8011994 <DFSDMx_Init+0x7ec>
 8011954:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8011958:	e01c      	b.n	8011994 <DFSDMx_Init+0x7ec>
 801195a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801195e:	e019      	b.n	8011994 <DFSDMx_Init+0x7ec>
 8011960:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8011964:	e016      	b.n	8011994 <DFSDMx_Init+0x7ec>
 8011966:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 801196a:	e013      	b.n	8011994 <DFSDMx_Init+0x7ec>
 801196c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8011970:	e010      	b.n	8011994 <DFSDMx_Init+0x7ec>
 8011972:	bf00      	nop
 8011974:	2002ac6c 	.word	0x2002ac6c
 8011978:	00010002 	.word	0x00010002
 801197c:	2002ae88 	.word	0x2002ae88
 8011980:	40017580 	.word	0x40017580
 8011984:	20000020 	.word	0x20000020
 8011988:	2002adfc 	.word	0x2002adfc
 801198c:	40017600 	.word	0x40017600
 8011990:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8011994:	4a77      	ldr	r2, [pc, #476]	; (8011b74 <DFSDMx_Init+0x9cc>)
 8011996:	61d3      	str	r3, [r2, #28]
    /* Set the DFSDM Filters Oversampling to have correct sample rate */
    hAudioInButtomLeftFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 801199e:	d02a      	beq.n	80119f6 <DFSDMx_Init+0x84e>
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f642 3211 	movw	r2, #11025	; 0x2b11
 80119a6:	4293      	cmp	r3, r2
 80119a8:	d022      	beq.n	80119f0 <DFSDMx_Init+0x848>
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80119b0:	d01c      	beq.n	80119ec <DFSDMx_Init+0x844>
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	f245 6222 	movw	r2, #22050	; 0x5622
 80119b8:	4293      	cmp	r3, r2
 80119ba:	d015      	beq.n	80119e8 <DFSDMx_Init+0x840>
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80119c2:	d00f      	beq.n	80119e4 <DFSDMx_Init+0x83c>
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f64a 4244 	movw	r2, #44100	; 0xac44
 80119ca:	4293      	cmp	r3, r2
 80119cc:	d008      	beq.n	80119e0 <DFSDMx_Init+0x838>
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80119d4:	4293      	cmp	r3, r2
 80119d6:	d101      	bne.n	80119dc <DFSDMx_Init+0x834>
 80119d8:	2328      	movs	r3, #40	; 0x28
 80119da:	e00e      	b.n	80119fa <DFSDMx_Init+0x852>
 80119dc:	2314      	movs	r3, #20
 80119de:	e00c      	b.n	80119fa <DFSDMx_Init+0x852>
 80119e0:	2340      	movs	r3, #64	; 0x40
 80119e2:	e00a      	b.n	80119fa <DFSDMx_Init+0x852>
 80119e4:	2340      	movs	r3, #64	; 0x40
 80119e6:	e008      	b.n	80119fa <DFSDMx_Init+0x852>
 80119e8:	2380      	movs	r3, #128	; 0x80
 80119ea:	e006      	b.n	80119fa <DFSDMx_Init+0x852>
 80119ec:	2380      	movs	r3, #128	; 0x80
 80119ee:	e004      	b.n	80119fa <DFSDMx_Init+0x852>
 80119f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80119f4:	e001      	b.n	80119fa <DFSDMx_Init+0x852>
 80119f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80119fa:	4a5e      	ldr	r2, [pc, #376]	; (8011b74 <DFSDMx_Init+0x9cc>)
 80119fc:	6213      	str	r3, [r2, #32]
    hAudioInButtomLeftFilter.Init.FilterParam.IntOversampling  = 1;
 80119fe:	4b5d      	ldr	r3, [pc, #372]	; (8011b74 <DFSDMx_Init+0x9cc>)
 8011a00:	2201      	movs	r2, #1
 8011a02:	625a      	str	r2, [r3, #36]	; 0x24
    if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInButtomLeftFilter))
 8011a04:	485b      	ldr	r0, [pc, #364]	; (8011b74 <DFSDMx_Init+0x9cc>)
 8011a06:	f7f9 fbeb 	bl	800b1e0 <HAL_DFSDM_FilterInit>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d001      	beq.n	8011a14 <DFSDMx_Init+0x86c>
    {
      return AUDIO_ERROR;
 8011a10:	2301      	movs	r3, #1
 8011a12:	e0ab      	b.n	8011b6c <DFSDMx_Init+0x9c4>
    }
    
    /* Configure injected channel */
    if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInButtomLeftFilter, AUDIO_DFSDMx_BUTTOM_LEFT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 8011a14:	2201      	movs	r2, #1
 8011a16:	4958      	ldr	r1, [pc, #352]	; (8011b78 <DFSDMx_Init+0x9d0>)
 8011a18:	4856      	ldr	r0, [pc, #344]	; (8011b74 <DFSDMx_Init+0x9cc>)
 8011a1a:	f7f9 fcc5 	bl	800b3a8 <HAL_DFSDM_FilterConfigRegChannel>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d001      	beq.n	8011a28 <DFSDMx_Init+0x880>
    {
      return AUDIO_ERROR;
 8011a24:	2301      	movs	r3, #1
 8011a26:	e0a1      	b.n	8011b6c <DFSDMx_Init+0x9c4>
    }
    
    /* FILTER 3 configuration */
    __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInButtomRightFilter);
 8011a28:	4b54      	ldr	r3, [pc, #336]	; (8011b7c <DFSDMx_Init+0x9d4>)
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    hAudioInButtomRightFilter.Instance                          = AUDIO_DFSDMx_BUTTOM_RIGHT_FILTER;
 8011a30:	4b52      	ldr	r3, [pc, #328]	; (8011b7c <DFSDMx_Init+0x9d4>)
 8011a32:	4a53      	ldr	r2, [pc, #332]	; (8011b80 <DFSDMx_Init+0x9d8>)
 8011a34:	601a      	str	r2, [r3, #0]
    hAudioInButtomRightFilter.Init.RegularParam.Trigger         = DFSDM_FILTER_SYNC_TRIGGER;
 8011a36:	4b51      	ldr	r3, [pc, #324]	; (8011b7c <DFSDMx_Init+0x9d4>)
 8011a38:	2201      	movs	r2, #1
 8011a3a:	605a      	str	r2, [r3, #4]
    hAudioInButtomRightFilter.Init.RegularParam.FastMode        = ENABLE;
 8011a3c:	4b4f      	ldr	r3, [pc, #316]	; (8011b7c <DFSDMx_Init+0x9d4>)
 8011a3e:	2201      	movs	r2, #1
 8011a40:	721a      	strb	r2, [r3, #8]
    hAudioInButtomRightFilter.Init.RegularParam.DmaMode         = ENABLE;
 8011a42:	4b4e      	ldr	r3, [pc, #312]	; (8011b7c <DFSDMx_Init+0x9d4>)
 8011a44:	2201      	movs	r2, #1
 8011a46:	725a      	strb	r2, [r3, #9]
    hAudioInButtomRightFilter.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 8011a48:	4b4c      	ldr	r3, [pc, #304]	; (8011b7c <DFSDMx_Init+0x9d4>)
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	60da      	str	r2, [r3, #12]
    hAudioInButtomRightFilter.Init.InjectedParam.ScanMode       = DISABLE;
 8011a4e:	4b4b      	ldr	r3, [pc, #300]	; (8011b7c <DFSDMx_Init+0x9d4>)
 8011a50:	2200      	movs	r2, #0
 8011a52:	741a      	strb	r2, [r3, #16]
    hAudioInButtomRightFilter.Init.InjectedParam.DmaMode        = DISABLE;
 8011a54:	4b49      	ldr	r3, [pc, #292]	; (8011b7c <DFSDMx_Init+0x9d4>)
 8011a56:	2200      	movs	r2, #0
 8011a58:	745a      	strb	r2, [r3, #17]
    hAudioInButtomRightFilter.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8011a5a:	4b48      	ldr	r3, [pc, #288]	; (8011b7c <DFSDMx_Init+0x9d4>)
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	615a      	str	r2, [r3, #20]
    hAudioInButtomRightFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8011a60:	4b46      	ldr	r3, [pc, #280]	; (8011b7c <DFSDMx_Init+0x9d4>)
 8011a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011a66:	619a      	str	r2, [r3, #24]
    hAudioInButtomRightFilter.Init.FilterParam.SincOrder        = DFSDM_FILTER_ORDER(AudioFreq);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8011a6e:	d030      	beq.n	8011ad2 <DFSDMx_Init+0x92a>
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	f642 3211 	movw	r2, #11025	; 0x2b11
 8011a76:	4293      	cmp	r3, r2
 8011a78:	d028      	beq.n	8011acc <DFSDMx_Init+0x924>
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8011a80:	d021      	beq.n	8011ac6 <DFSDMx_Init+0x91e>
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	f245 6222 	movw	r2, #22050	; 0x5622
 8011a88:	4293      	cmp	r3, r2
 8011a8a:	d019      	beq.n	8011ac0 <DFSDMx_Init+0x918>
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8011a92:	d012      	beq.n	8011aba <DFSDMx_Init+0x912>
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f64a 4244 	movw	r2, #44100	; 0xac44
 8011a9a:	4293      	cmp	r3, r2
 8011a9c:	d00a      	beq.n	8011ab4 <DFSDMx_Init+0x90c>
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8011aa4:	4293      	cmp	r3, r2
 8011aa6:	d102      	bne.n	8011aae <DFSDMx_Init+0x906>
 8011aa8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8011aac:	e013      	b.n	8011ad6 <DFSDMx_Init+0x92e>
 8011aae:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8011ab2:	e010      	b.n	8011ad6 <DFSDMx_Init+0x92e>
 8011ab4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8011ab8:	e00d      	b.n	8011ad6 <DFSDMx_Init+0x92e>
 8011aba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011abe:	e00a      	b.n	8011ad6 <DFSDMx_Init+0x92e>
 8011ac0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8011ac4:	e007      	b.n	8011ad6 <DFSDMx_Init+0x92e>
 8011ac6:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8011aca:	e004      	b.n	8011ad6 <DFSDMx_Init+0x92e>
 8011acc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8011ad0:	e001      	b.n	8011ad6 <DFSDMx_Init+0x92e>
 8011ad2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8011ad6:	4a29      	ldr	r2, [pc, #164]	; (8011b7c <DFSDMx_Init+0x9d4>)
 8011ad8:	61d3      	str	r3, [r2, #28]
    /* Set the DFSDM Filters Oversampling to have correct sample rate */
    hAudioInButtomRightFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8011ae0:	d02a      	beq.n	8011b38 <DFSDMx_Init+0x990>
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	f642 3211 	movw	r2, #11025	; 0x2b11
 8011ae8:	4293      	cmp	r3, r2
 8011aea:	d022      	beq.n	8011b32 <DFSDMx_Init+0x98a>
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8011af2:	d01c      	beq.n	8011b2e <DFSDMx_Init+0x986>
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f245 6222 	movw	r2, #22050	; 0x5622
 8011afa:	4293      	cmp	r3, r2
 8011afc:	d015      	beq.n	8011b2a <DFSDMx_Init+0x982>
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8011b04:	d00f      	beq.n	8011b26 <DFSDMx_Init+0x97e>
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f64a 4244 	movw	r2, #44100	; 0xac44
 8011b0c:	4293      	cmp	r3, r2
 8011b0e:	d008      	beq.n	8011b22 <DFSDMx_Init+0x97a>
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8011b16:	4293      	cmp	r3, r2
 8011b18:	d101      	bne.n	8011b1e <DFSDMx_Init+0x976>
 8011b1a:	2328      	movs	r3, #40	; 0x28
 8011b1c:	e00e      	b.n	8011b3c <DFSDMx_Init+0x994>
 8011b1e:	2314      	movs	r3, #20
 8011b20:	e00c      	b.n	8011b3c <DFSDMx_Init+0x994>
 8011b22:	2340      	movs	r3, #64	; 0x40
 8011b24:	e00a      	b.n	8011b3c <DFSDMx_Init+0x994>
 8011b26:	2340      	movs	r3, #64	; 0x40
 8011b28:	e008      	b.n	8011b3c <DFSDMx_Init+0x994>
 8011b2a:	2380      	movs	r3, #128	; 0x80
 8011b2c:	e006      	b.n	8011b3c <DFSDMx_Init+0x994>
 8011b2e:	2380      	movs	r3, #128	; 0x80
 8011b30:	e004      	b.n	8011b3c <DFSDMx_Init+0x994>
 8011b32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b36:	e001      	b.n	8011b3c <DFSDMx_Init+0x994>
 8011b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b3c:	4a0f      	ldr	r2, [pc, #60]	; (8011b7c <DFSDMx_Init+0x9d4>)
 8011b3e:	6213      	str	r3, [r2, #32]
    hAudioInButtomRightFilter.Init.FilterParam.IntOversampling  = 1;
 8011b40:	4b0e      	ldr	r3, [pc, #56]	; (8011b7c <DFSDMx_Init+0x9d4>)
 8011b42:	2201      	movs	r2, #1
 8011b44:	625a      	str	r2, [r3, #36]	; 0x24
    if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInButtomRightFilter))
 8011b46:	480d      	ldr	r0, [pc, #52]	; (8011b7c <DFSDMx_Init+0x9d4>)
 8011b48:	f7f9 fb4a 	bl	800b1e0 <HAL_DFSDM_FilterInit>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d001      	beq.n	8011b56 <DFSDMx_Init+0x9ae>
    {
      return AUDIO_ERROR;
 8011b52:	2301      	movs	r3, #1
 8011b54:	e00a      	b.n	8011b6c <DFSDMx_Init+0x9c4>
    }
    /* Configure injected channel */
    if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInButtomRightFilter, AUDIO_DFSDMx_BUTTOM_RIGHT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 8011b56:	2201      	movs	r2, #1
 8011b58:	490a      	ldr	r1, [pc, #40]	; (8011b84 <DFSDMx_Init+0x9dc>)
 8011b5a:	4808      	ldr	r0, [pc, #32]	; (8011b7c <DFSDMx_Init+0x9d4>)
 8011b5c:	f7f9 fc24 	bl	800b3a8 <HAL_DFSDM_FilterConfigRegChannel>
 8011b60:	4603      	mov	r3, r0
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d001      	beq.n	8011b6a <DFSDMx_Init+0x9c2>
    {
      return AUDIO_ERROR;
 8011b66:	2301      	movs	r3, #1
 8011b68:	e000      	b.n	8011b6c <DFSDMx_Init+0x9c4>
    } 
  }
  return AUDIO_OK;
 8011b6a:	2300      	movs	r3, #0
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3708      	adds	r7, #8
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}
 8011b74:	2002adfc 	.word	0x2002adfc
 8011b78:	00050020 	.word	0x00050020
 8011b7c:	2002aab0 	.word	0x2002aab0
 8011b80:	40017680 	.word	0x40017680
 8011b84:	00040010 	.word	0x00040010

08011b88 <DFSDMx_ChannelMspInit>:
/**
  * @brief  Initialize the DFSDM channel MSP.
  * @retval None
  */
static void DFSDMx_ChannelMspInit(void)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b088      	sub	sp, #32
 8011b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;  
  
  /* Enable DFSDM clock */
  AUDIO_DFSDMx_CLK_ENABLE();
 8011b8e:	4b28      	ldr	r3, [pc, #160]	; (8011c30 <DFSDMx_ChannelMspInit+0xa8>)
 8011b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b92:	4a27      	ldr	r2, [pc, #156]	; (8011c30 <DFSDMx_ChannelMspInit+0xa8>)
 8011b94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011b98:	6453      	str	r3, [r2, #68]	; 0x44
 8011b9a:	4b25      	ldr	r3, [pc, #148]	; (8011c30 <DFSDMx_ChannelMspInit+0xa8>)
 8011b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011ba2:	60bb      	str	r3, [r7, #8]
 8011ba4:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable GPIO clock */
  AUDIO_DFSDMx_DMIC_DATIN_GPIO_CLK_ENABLE();
 8011ba6:	4b22      	ldr	r3, [pc, #136]	; (8011c30 <DFSDMx_ChannelMspInit+0xa8>)
 8011ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011baa:	4a21      	ldr	r2, [pc, #132]	; (8011c30 <DFSDMx_ChannelMspInit+0xa8>)
 8011bac:	f043 0304 	orr.w	r3, r3, #4
 8011bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8011bb2:	4b1f      	ldr	r3, [pc, #124]	; (8011c30 <DFSDMx_ChannelMspInit+0xa8>)
 8011bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bb6:	f003 0304 	and.w	r3, r3, #4
 8011bba:	607b      	str	r3, [r7, #4]
 8011bbc:	687b      	ldr	r3, [r7, #4]
  AUDIO_DFSDMx_CKOUT_DMIC_GPIO_CLK_ENABLE();
 8011bbe:	4b1c      	ldr	r3, [pc, #112]	; (8011c30 <DFSDMx_ChannelMspInit+0xa8>)
 8011bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bc2:	4a1b      	ldr	r2, [pc, #108]	; (8011c30 <DFSDMx_ChannelMspInit+0xa8>)
 8011bc4:	f043 0308 	orr.w	r3, r3, #8
 8011bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8011bca:	4b19      	ldr	r3, [pc, #100]	; (8011c30 <DFSDMx_ChannelMspInit+0xa8>)
 8011bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bce:	f003 0308 	and.w	r3, r3, #8
 8011bd2:	603b      	str	r3, [r7, #0]
 8011bd4:	683b      	ldr	r3, [r7, #0]
  
  /* DFSDM pins configuration: DFSDM_CKOUT, DMIC_DATIN1 pins ------------------*/
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_CKOUT_PIN;
 8011bd6:	2308      	movs	r3, #8
 8011bd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011bda:	2302      	movs	r3, #2
 8011bdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011bde:	2300      	movs	r3, #0
 8011be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011be2:	2303      	movs	r3, #3
 8011be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_CKOUT_AF;
 8011be6:	2303      	movs	r3, #3
 8011be8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AUDIO_DFSDMx_CKOUT_DMIC_GPIO_PORT, &GPIO_InitStruct);
 8011bea:	f107 030c 	add.w	r3, r7, #12
 8011bee:	4619      	mov	r1, r3
 8011bf0:	4810      	ldr	r0, [pc, #64]	; (8011c34 <DFSDMx_ChannelMspInit+0xac>)
 8011bf2:	f7fa fa41 	bl	800c078 <HAL_GPIO_Init>
  
  /* DFSDM pin configuration: DMIC_DATIN1 pin --------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DMIC_DATIN1_PIN;
 8011bf6:	2308      	movs	r3, #8
 8011bf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DMIC_DATIN_AF;
 8011bfa:	2303      	movs	r3, #3
 8011bfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, &GPIO_InitStruct);
 8011bfe:	f107 030c 	add.w	r3, r7, #12
 8011c02:	4619      	mov	r1, r3
 8011c04:	480c      	ldr	r0, [pc, #48]	; (8011c38 <DFSDMx_ChannelMspInit+0xb0>)
 8011c06:	f7fa fa37 	bl	800c078 <HAL_GPIO_Init>
  
  if(AudioIn_ChannelNumber > 2)
 8011c0a:	4b0c      	ldr	r3, [pc, #48]	; (8011c3c <DFSDMx_ChannelMspInit+0xb4>)
 8011c0c:	781b      	ldrb	r3, [r3, #0]
 8011c0e:	2b02      	cmp	r3, #2
 8011c10:	d90a      	bls.n	8011c28 <DFSDMx_ChannelMspInit+0xa0>
  {
  /* DFSDM pin configuration: DMIC_DATIN5 pin --------------------------------*/  
    GPIO_InitStruct.Pin = AUDIO_DFSDMx_DMIC_DATIN5_PIN;
 8011c12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011c16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DMIC_DATIN_AF;
 8011c18:	2303      	movs	r3, #3
 8011c1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, &GPIO_InitStruct);    
 8011c1c:	f107 030c 	add.w	r3, r7, #12
 8011c20:	4619      	mov	r1, r3
 8011c22:	4805      	ldr	r0, [pc, #20]	; (8011c38 <DFSDMx_ChannelMspInit+0xb0>)
 8011c24:	f7fa fa28 	bl	800c078 <HAL_GPIO_Init>
  }
}
 8011c28:	bf00      	nop
 8011c2a:	3720      	adds	r7, #32
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}
 8011c30:	40023800 	.word	0x40023800
 8011c34:	40020c00 	.word	0x40020c00
 8011c38:	40020800 	.word	0x40020800
 8011c3c:	20000020 	.word	0x20000020

08011c40 <DFSDMx_FilterMspInit>:
/**
  * @brief  Initialize the DFSDM filter MSP.
  * @retval None
  */
static void DFSDMx_FilterMspInit(void)
{  
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b082      	sub	sp, #8
 8011c44:	af00      	add	r7, sp, #0
  /* Enable DFSDM clock */
  AUDIO_DFSDMx_CLK_ENABLE();
 8011c46:	4b7c      	ldr	r3, [pc, #496]	; (8011e38 <DFSDMx_FilterMspInit+0x1f8>)
 8011c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c4a:	4a7b      	ldr	r2, [pc, #492]	; (8011e38 <DFSDMx_FilterMspInit+0x1f8>)
 8011c4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011c50:	6453      	str	r3, [r2, #68]	; 0x44
 8011c52:	4b79      	ldr	r3, [pc, #484]	; (8011e38 <DFSDMx_FilterMspInit+0x1f8>)
 8011c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011c5a:	607b      	str	r3, [r7, #4]
 8011c5c:	687b      	ldr	r3, [r7, #4]
  
  /* Enable the DMA clock */
  AUDIO_DFSDMx_DMAx_CLK_ENABLE();
 8011c5e:	4b76      	ldr	r3, [pc, #472]	; (8011e38 <DFSDMx_FilterMspInit+0x1f8>)
 8011c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c62:	4a75      	ldr	r2, [pc, #468]	; (8011e38 <DFSDMx_FilterMspInit+0x1f8>)
 8011c64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011c68:	6313      	str	r3, [r2, #48]	; 0x30
 8011c6a:	4b73      	ldr	r3, [pc, #460]	; (8011e38 <DFSDMx_FilterMspInit+0x1f8>)
 8011c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011c72:	603b      	str	r3, [r7, #0]
 8011c74:	683b      	ldr	r3, [r7, #0]
  
  /*********** Configure DMA stream for TOP LEFT microphone *******************/
  hDmaTopLeft.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8011c76:	4b71      	ldr	r3, [pc, #452]	; (8011e3c <DFSDMx_FilterMspInit+0x1fc>)
 8011c78:	2200      	movs	r2, #0
 8011c7a:	609a      	str	r2, [r3, #8]
  hDmaTopLeft.Init.PeriphInc           = DMA_PINC_DISABLE;
 8011c7c:	4b6f      	ldr	r3, [pc, #444]	; (8011e3c <DFSDMx_FilterMspInit+0x1fc>)
 8011c7e:	2200      	movs	r2, #0
 8011c80:	60da      	str	r2, [r3, #12]
  hDmaTopLeft.Init.MemInc              = DMA_MINC_ENABLE;
 8011c82:	4b6e      	ldr	r3, [pc, #440]	; (8011e3c <DFSDMx_FilterMspInit+0x1fc>)
 8011c84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011c88:	611a      	str	r2, [r3, #16]
  hDmaTopLeft.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 8011c8a:	4b6c      	ldr	r3, [pc, #432]	; (8011e3c <DFSDMx_FilterMspInit+0x1fc>)
 8011c8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011c90:	615a      	str	r2, [r3, #20]
  hDmaTopLeft.Init.MemDataAlignment    = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
 8011c92:	4b6a      	ldr	r3, [pc, #424]	; (8011e3c <DFSDMx_FilterMspInit+0x1fc>)
 8011c94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011c98:	619a      	str	r2, [r3, #24]
  hDmaTopLeft.Init.Mode                = DMA_CIRCULAR;
 8011c9a:	4b68      	ldr	r3, [pc, #416]	; (8011e3c <DFSDMx_FilterMspInit+0x1fc>)
 8011c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011ca0:	61da      	str	r2, [r3, #28]
  hDmaTopLeft.Init.Priority            = DMA_PRIORITY_HIGH;
 8011ca2:	4b66      	ldr	r3, [pc, #408]	; (8011e3c <DFSDMx_FilterMspInit+0x1fc>)
 8011ca4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8011ca8:	621a      	str	r2, [r3, #32]
  hDmaTopLeft.Instance                 = AUDIO_DFSDMx_DMAx_TOP_LEFT_STREAM;
 8011caa:	4b64      	ldr	r3, [pc, #400]	; (8011e3c <DFSDMx_FilterMspInit+0x1fc>)
 8011cac:	4a64      	ldr	r2, [pc, #400]	; (8011e40 <DFSDMx_FilterMspInit+0x200>)
 8011cae:	601a      	str	r2, [r3, #0]
  hDmaTopLeft.Init.Channel             = AUDIO_DFSDMx_DMAx_CHANNEL; 
 8011cb0:	4b62      	ldr	r3, [pc, #392]	; (8011e3c <DFSDMx_FilterMspInit+0x1fc>)
 8011cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cb6:	605a      	str	r2, [r3, #4]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(&hAudioInTopLeftFilter, hdmaReg, hDmaTopLeft);
 8011cb8:	4b62      	ldr	r3, [pc, #392]	; (8011e44 <DFSDMx_FilterMspInit+0x204>)
 8011cba:	4a60      	ldr	r2, [pc, #384]	; (8011e3c <DFSDMx_FilterMspInit+0x1fc>)
 8011cbc:	629a      	str	r2, [r3, #40]	; 0x28
 8011cbe:	4b5f      	ldr	r3, [pc, #380]	; (8011e3c <DFSDMx_FilterMspInit+0x1fc>)
 8011cc0:	4a60      	ldr	r2, [pc, #384]	; (8011e44 <DFSDMx_FilterMspInit+0x204>)
 8011cc2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Reset DMA handle state */
  __HAL_DMA_RESET_HANDLE_STATE(&hDmaTopLeft);
 8011cc4:	4b5d      	ldr	r3, [pc, #372]	; (8011e3c <DFSDMx_FilterMspInit+0x1fc>)
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Configure the DMA Channel */
  HAL_DMA_Init(&hDmaTopLeft);      
 8011ccc:	485b      	ldr	r0, [pc, #364]	; (8011e3c <DFSDMx_FilterMspInit+0x1fc>)
 8011cce:	f7f9 fd8f 	bl	800b7f0 <HAL_DMA_Init>
  
  /* DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_TOP_LEFT_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	210e      	movs	r1, #14
 8011cd6:	2038      	movs	r0, #56	; 0x38
 8011cd8:	f7f9 f8a1 	bl	800ae1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_TOP_LEFT_IRQ);
 8011cdc:	2038      	movs	r0, #56	; 0x38
 8011cde:	f7f9 f8ba 	bl	800ae56 <HAL_NVIC_EnableIRQ>
  
  
  /*********** Configure DMA stream for TOP RIGHT microphone ******************/
  hDmaTopRight.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8011ce2:	4b59      	ldr	r3, [pc, #356]	; (8011e48 <DFSDMx_FilterMspInit+0x208>)
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	609a      	str	r2, [r3, #8]
  hDmaTopRight.Init.PeriphInc           = DMA_PINC_DISABLE;
 8011ce8:	4b57      	ldr	r3, [pc, #348]	; (8011e48 <DFSDMx_FilterMspInit+0x208>)
 8011cea:	2200      	movs	r2, #0
 8011cec:	60da      	str	r2, [r3, #12]
  hDmaTopRight.Init.MemInc              = DMA_MINC_ENABLE;
 8011cee:	4b56      	ldr	r3, [pc, #344]	; (8011e48 <DFSDMx_FilterMspInit+0x208>)
 8011cf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011cf4:	611a      	str	r2, [r3, #16]
  hDmaTopRight.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 8011cf6:	4b54      	ldr	r3, [pc, #336]	; (8011e48 <DFSDMx_FilterMspInit+0x208>)
 8011cf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011cfc:	615a      	str	r2, [r3, #20]
  hDmaTopRight.Init.MemDataAlignment    = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
 8011cfe:	4b52      	ldr	r3, [pc, #328]	; (8011e48 <DFSDMx_FilterMspInit+0x208>)
 8011d00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011d04:	619a      	str	r2, [r3, #24]
  hDmaTopRight.Init.Mode                = DMA_CIRCULAR;
 8011d06:	4b50      	ldr	r3, [pc, #320]	; (8011e48 <DFSDMx_FilterMspInit+0x208>)
 8011d08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011d0c:	61da      	str	r2, [r3, #28]
  hDmaTopRight.Init.Priority            = DMA_PRIORITY_HIGH;  
 8011d0e:	4b4e      	ldr	r3, [pc, #312]	; (8011e48 <DFSDMx_FilterMspInit+0x208>)
 8011d10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8011d14:	621a      	str	r2, [r3, #32]
  hDmaTopRight.Instance                 = AUDIO_DFSDMx_DMAx_TOP_RIGHT_STREAM;
 8011d16:	4b4c      	ldr	r3, [pc, #304]	; (8011e48 <DFSDMx_FilterMspInit+0x208>)
 8011d18:	4a4c      	ldr	r2, [pc, #304]	; (8011e4c <DFSDMx_FilterMspInit+0x20c>)
 8011d1a:	601a      	str	r2, [r3, #0]
  hDmaTopRight.Init.Channel             = AUDIO_DFSDMx_DMAx_CHANNEL;
 8011d1c:	4b4a      	ldr	r3, [pc, #296]	; (8011e48 <DFSDMx_FilterMspInit+0x208>)
 8011d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d22:	605a      	str	r2, [r3, #4]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(&hAudioInTopRightFilter, hdmaReg, hDmaTopRight);
 8011d24:	4b4a      	ldr	r3, [pc, #296]	; (8011e50 <DFSDMx_FilterMspInit+0x210>)
 8011d26:	4a48      	ldr	r2, [pc, #288]	; (8011e48 <DFSDMx_FilterMspInit+0x208>)
 8011d28:	629a      	str	r2, [r3, #40]	; 0x28
 8011d2a:	4b47      	ldr	r3, [pc, #284]	; (8011e48 <DFSDMx_FilterMspInit+0x208>)
 8011d2c:	4a48      	ldr	r2, [pc, #288]	; (8011e50 <DFSDMx_FilterMspInit+0x210>)
 8011d2e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Reset DMA handle state */
  __HAL_DMA_RESET_HANDLE_STATE(&hDmaTopRight);
 8011d30:	4b45      	ldr	r3, [pc, #276]	; (8011e48 <DFSDMx_FilterMspInit+0x208>)
 8011d32:	2200      	movs	r2, #0
 8011d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Configure the DMA Channel */
  HAL_DMA_Init(&hDmaTopRight);      
 8011d38:	4843      	ldr	r0, [pc, #268]	; (8011e48 <DFSDMx_FilterMspInit+0x208>)
 8011d3a:	f7f9 fd59 	bl	800b7f0 <HAL_DMA_Init>
  
  /* DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_TOP_RIGHT_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8011d3e:	2200      	movs	r2, #0
 8011d40:	210e      	movs	r1, #14
 8011d42:	2044      	movs	r0, #68	; 0x44
 8011d44:	f7f9 f86b 	bl	800ae1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_TOP_RIGHT_IRQ);
 8011d48:	2044      	movs	r0, #68	; 0x44
 8011d4a:	f7f9 f884 	bl	800ae56 <HAL_NVIC_EnableIRQ>
  
  if(AudioIn_ChannelNumber > 2)
 8011d4e:	4b41      	ldr	r3, [pc, #260]	; (8011e54 <DFSDMx_FilterMspInit+0x214>)
 8011d50:	781b      	ldrb	r3, [r3, #0]
 8011d52:	2b02      	cmp	r3, #2
 8011d54:	d96b      	bls.n	8011e2e <DFSDMx_FilterMspInit+0x1ee>
  {  
    /*********** Configure DMA stream for BUTTOM LEFT microphone ****************/
    hDmaButtomLeft.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8011d56:	4b40      	ldr	r3, [pc, #256]	; (8011e58 <DFSDMx_FilterMspInit+0x218>)
 8011d58:	2200      	movs	r2, #0
 8011d5a:	609a      	str	r2, [r3, #8]
    hDmaButtomLeft.Init.PeriphInc           = DMA_PINC_DISABLE;
 8011d5c:	4b3e      	ldr	r3, [pc, #248]	; (8011e58 <DFSDMx_FilterMspInit+0x218>)
 8011d5e:	2200      	movs	r2, #0
 8011d60:	60da      	str	r2, [r3, #12]
    hDmaButtomLeft.Init.MemInc              = DMA_MINC_ENABLE;
 8011d62:	4b3d      	ldr	r3, [pc, #244]	; (8011e58 <DFSDMx_FilterMspInit+0x218>)
 8011d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011d68:	611a      	str	r2, [r3, #16]
    hDmaButtomLeft.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 8011d6a:	4b3b      	ldr	r3, [pc, #236]	; (8011e58 <DFSDMx_FilterMspInit+0x218>)
 8011d6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011d70:	615a      	str	r2, [r3, #20]
    hDmaButtomLeft.Init.MemDataAlignment    = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
 8011d72:	4b39      	ldr	r3, [pc, #228]	; (8011e58 <DFSDMx_FilterMspInit+0x218>)
 8011d74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011d78:	619a      	str	r2, [r3, #24]
    hDmaButtomLeft.Init.Mode                = DMA_CIRCULAR;
 8011d7a:	4b37      	ldr	r3, [pc, #220]	; (8011e58 <DFSDMx_FilterMspInit+0x218>)
 8011d7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011d80:	61da      	str	r2, [r3, #28]
    hDmaButtomLeft.Init.Priority            = DMA_PRIORITY_HIGH;
 8011d82:	4b35      	ldr	r3, [pc, #212]	; (8011e58 <DFSDMx_FilterMspInit+0x218>)
 8011d84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8011d88:	621a      	str	r2, [r3, #32]
    hDmaButtomLeft.Instance                 = AUDIO_DFSDMx_DMAx_BUTTOM_LEFT_STREAM;
 8011d8a:	4b33      	ldr	r3, [pc, #204]	; (8011e58 <DFSDMx_FilterMspInit+0x218>)
 8011d8c:	4a33      	ldr	r2, [pc, #204]	; (8011e5c <DFSDMx_FilterMspInit+0x21c>)
 8011d8e:	601a      	str	r2, [r3, #0]
    hDmaButtomLeft.Init.Channel             = AUDIO_DFSDMx_DMAx_CHANNEL; 
 8011d90:	4b31      	ldr	r3, [pc, #196]	; (8011e58 <DFSDMx_FilterMspInit+0x218>)
 8011d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d96:	605a      	str	r2, [r3, #4]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(&hAudioInButtomLeftFilter, hdmaReg, hDmaButtomLeft);
 8011d98:	4b31      	ldr	r3, [pc, #196]	; (8011e60 <DFSDMx_FilterMspInit+0x220>)
 8011d9a:	4a2f      	ldr	r2, [pc, #188]	; (8011e58 <DFSDMx_FilterMspInit+0x218>)
 8011d9c:	629a      	str	r2, [r3, #40]	; 0x28
 8011d9e:	4b2e      	ldr	r3, [pc, #184]	; (8011e58 <DFSDMx_FilterMspInit+0x218>)
 8011da0:	4a2f      	ldr	r2, [pc, #188]	; (8011e60 <DFSDMx_FilterMspInit+0x220>)
 8011da2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Reset DMA handle state */
    __HAL_DMA_RESET_HANDLE_STATE(&hDmaButtomLeft);
 8011da4:	4b2c      	ldr	r3, [pc, #176]	; (8011e58 <DFSDMx_FilterMspInit+0x218>)
 8011da6:	2200      	movs	r2, #0
 8011da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Configure the DMA Channel */
    HAL_DMA_Init(&hDmaButtomLeft);      
 8011dac:	482a      	ldr	r0, [pc, #168]	; (8011e58 <DFSDMx_FilterMspInit+0x218>)
 8011dae:	f7f9 fd1f 	bl	800b7f0 <HAL_DMA_Init>
    
    /* DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_BUTTOM_LEFT_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8011db2:	2200      	movs	r2, #0
 8011db4:	210e      	movs	r1, #14
 8011db6:	2045      	movs	r0, #69	; 0x45
 8011db8:	f7f9 f831 	bl	800ae1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_BUTTOM_LEFT_IRQ);
 8011dbc:	2045      	movs	r0, #69	; 0x45
 8011dbe:	f7f9 f84a 	bl	800ae56 <HAL_NVIC_EnableIRQ>
    
    
    /*********** Configure DMA stream for BUTTOM RIGHT microphone ***************/
    hDmaButtomRight.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8011dc2:	4b28      	ldr	r3, [pc, #160]	; (8011e64 <DFSDMx_FilterMspInit+0x224>)
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	609a      	str	r2, [r3, #8]
    hDmaButtomRight.Init.PeriphInc           = DMA_PINC_DISABLE;
 8011dc8:	4b26      	ldr	r3, [pc, #152]	; (8011e64 <DFSDMx_FilterMspInit+0x224>)
 8011dca:	2200      	movs	r2, #0
 8011dcc:	60da      	str	r2, [r3, #12]
    hDmaButtomRight.Init.MemInc              = DMA_MINC_ENABLE;
 8011dce:	4b25      	ldr	r3, [pc, #148]	; (8011e64 <DFSDMx_FilterMspInit+0x224>)
 8011dd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011dd4:	611a      	str	r2, [r3, #16]
    hDmaButtomRight.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 8011dd6:	4b23      	ldr	r3, [pc, #140]	; (8011e64 <DFSDMx_FilterMspInit+0x224>)
 8011dd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011ddc:	615a      	str	r2, [r3, #20]
    hDmaButtomRight.Init.MemDataAlignment    = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
 8011dde:	4b21      	ldr	r3, [pc, #132]	; (8011e64 <DFSDMx_FilterMspInit+0x224>)
 8011de0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011de4:	619a      	str	r2, [r3, #24]
    hDmaButtomRight.Init.Mode                = DMA_CIRCULAR;
 8011de6:	4b1f      	ldr	r3, [pc, #124]	; (8011e64 <DFSDMx_FilterMspInit+0x224>)
 8011de8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011dec:	61da      	str	r2, [r3, #28]
    hDmaButtomRight.Init.Priority            = DMA_PRIORITY_HIGH;  
 8011dee:	4b1d      	ldr	r3, [pc, #116]	; (8011e64 <DFSDMx_FilterMspInit+0x224>)
 8011df0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8011df4:	621a      	str	r2, [r3, #32]
    hDmaButtomRight.Instance                 = AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_STREAM;
 8011df6:	4b1b      	ldr	r3, [pc, #108]	; (8011e64 <DFSDMx_FilterMspInit+0x224>)
 8011df8:	4a1b      	ldr	r2, [pc, #108]	; (8011e68 <DFSDMx_FilterMspInit+0x228>)
 8011dfa:	601a      	str	r2, [r3, #0]
    hDmaButtomRight.Init.Channel             = AUDIO_DFSDMx_DMAx_CHANNEL;
 8011dfc:	4b19      	ldr	r3, [pc, #100]	; (8011e64 <DFSDMx_FilterMspInit+0x224>)
 8011dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e02:	605a      	str	r2, [r3, #4]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(&hAudioInButtomRightFilter, hdmaReg, hDmaButtomRight);
 8011e04:	4b19      	ldr	r3, [pc, #100]	; (8011e6c <DFSDMx_FilterMspInit+0x22c>)
 8011e06:	4a17      	ldr	r2, [pc, #92]	; (8011e64 <DFSDMx_FilterMspInit+0x224>)
 8011e08:	629a      	str	r2, [r3, #40]	; 0x28
 8011e0a:	4b16      	ldr	r3, [pc, #88]	; (8011e64 <DFSDMx_FilterMspInit+0x224>)
 8011e0c:	4a17      	ldr	r2, [pc, #92]	; (8011e6c <DFSDMx_FilterMspInit+0x22c>)
 8011e0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Reset DMA handle state */
    __HAL_DMA_RESET_HANDLE_STATE(&hDmaButtomRight);
 8011e10:	4b14      	ldr	r3, [pc, #80]	; (8011e64 <DFSDMx_FilterMspInit+0x224>)
 8011e12:	2200      	movs	r2, #0
 8011e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Configure the DMA Channel */
    HAL_DMA_Init(&hDmaButtomRight);      
 8011e18:	4812      	ldr	r0, [pc, #72]	; (8011e64 <DFSDMx_FilterMspInit+0x224>)
 8011e1a:	f7f9 fce9 	bl	800b7f0 <HAL_DMA_Init>
    
    /* DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8011e1e:	2200      	movs	r2, #0
 8011e20:	210e      	movs	r1, #14
 8011e22:	2046      	movs	r0, #70	; 0x46
 8011e24:	f7f8 fffb 	bl	800ae1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_IRQ); 
 8011e28:	2046      	movs	r0, #70	; 0x46
 8011e2a:	f7f9 f814 	bl	800ae56 <HAL_NVIC_EnableIRQ>
  }
}
 8011e2e:	bf00      	nop
 8011e30:	3708      	adds	r7, #8
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}
 8011e36:	bf00      	nop
 8011e38:	40023800 	.word	0x40023800
 8011e3c:	2002ad2c 	.word	0x2002ad2c
 8011e40:	40026410 	.word	0x40026410
 8011e44:	2002ac6c 	.word	0x2002ac6c
 8011e48:	2002acc8 	.word	0x2002acc8
 8011e4c:	40026488 	.word	0x40026488
 8011e50:	2002ae88 	.word	0x2002ae88
 8011e54:	20000020 	.word	0x20000020
 8011e58:	2002ab88 	.word	0x2002ab88
 8011e5c:	400264a0 	.word	0x400264a0
 8011e60:	2002adfc 	.word	0x2002adfc
 8011e64:	2002af14 	.word	0x2002af14
 8011e68:	400264b8 	.word	0x400264b8
 8011e6c:	2002aab0 	.word	0x2002aab0

08011e70 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8011e70:	b580      	push	{r7, lr}
 8011e72:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8011e74:	4b29      	ldr	r3, [pc, #164]	; (8011f1c <BSP_SDRAM_Init+0xac>)
 8011e76:	4a2a      	ldr	r2, [pc, #168]	; (8011f20 <BSP_SDRAM_Init+0xb0>)
 8011e78:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8011e7a:	4b2a      	ldr	r3, [pc, #168]	; (8011f24 <BSP_SDRAM_Init+0xb4>)
 8011e7c:	2202      	movs	r2, #2
 8011e7e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8011e80:	4b28      	ldr	r3, [pc, #160]	; (8011f24 <BSP_SDRAM_Init+0xb4>)
 8011e82:	2207      	movs	r2, #7
 8011e84:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8011e86:	4b27      	ldr	r3, [pc, #156]	; (8011f24 <BSP_SDRAM_Init+0xb4>)
 8011e88:	2204      	movs	r2, #4
 8011e8a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8011e8c:	4b25      	ldr	r3, [pc, #148]	; (8011f24 <BSP_SDRAM_Init+0xb4>)
 8011e8e:	2207      	movs	r2, #7
 8011e90:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8011e92:	4b24      	ldr	r3, [pc, #144]	; (8011f24 <BSP_SDRAM_Init+0xb4>)
 8011e94:	2202      	movs	r2, #2
 8011e96:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8011e98:	4b22      	ldr	r3, [pc, #136]	; (8011f24 <BSP_SDRAM_Init+0xb4>)
 8011e9a:	2202      	movs	r2, #2
 8011e9c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8011e9e:	4b21      	ldr	r3, [pc, #132]	; (8011f24 <BSP_SDRAM_Init+0xb4>)
 8011ea0:	2202      	movs	r2, #2
 8011ea2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8011ea4:	4b1d      	ldr	r3, [pc, #116]	; (8011f1c <BSP_SDRAM_Init+0xac>)
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8011eaa:	4b1c      	ldr	r3, [pc, #112]	; (8011f1c <BSP_SDRAM_Init+0xac>)
 8011eac:	2200      	movs	r2, #0
 8011eae:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8011eb0:	4b1a      	ldr	r3, [pc, #104]	; (8011f1c <BSP_SDRAM_Init+0xac>)
 8011eb2:	2204      	movs	r2, #4
 8011eb4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8011eb6:	4b19      	ldr	r3, [pc, #100]	; (8011f1c <BSP_SDRAM_Init+0xac>)
 8011eb8:	2220      	movs	r2, #32
 8011eba:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8011ebc:	4b17      	ldr	r3, [pc, #92]	; (8011f1c <BSP_SDRAM_Init+0xac>)
 8011ebe:	2240      	movs	r2, #64	; 0x40
 8011ec0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8011ec2:	4b16      	ldr	r3, [pc, #88]	; (8011f1c <BSP_SDRAM_Init+0xac>)
 8011ec4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8011ec8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8011eca:	4b14      	ldr	r3, [pc, #80]	; (8011f1c <BSP_SDRAM_Init+0xac>)
 8011ecc:	2200      	movs	r2, #0
 8011ece:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8011ed0:	4b12      	ldr	r3, [pc, #72]	; (8011f1c <BSP_SDRAM_Init+0xac>)
 8011ed2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011ed6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8011ed8:	4b10      	ldr	r3, [pc, #64]	; (8011f1c <BSP_SDRAM_Init+0xac>)
 8011eda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011ede:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8011ee0:	4b0e      	ldr	r3, [pc, #56]	; (8011f1c <BSP_SDRAM_Init+0xac>)
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8011ee6:	2100      	movs	r1, #0
 8011ee8:	480c      	ldr	r0, [pc, #48]	; (8011f1c <BSP_SDRAM_Init+0xac>)
 8011eea:	f000 f87f 	bl	8011fec <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8011eee:	490d      	ldr	r1, [pc, #52]	; (8011f24 <BSP_SDRAM_Init+0xb4>)
 8011ef0:	480a      	ldr	r0, [pc, #40]	; (8011f1c <BSP_SDRAM_Init+0xac>)
 8011ef2:	f7fc ff4c 	bl	800ed8e <HAL_SDRAM_Init>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d003      	beq.n	8011f04 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8011efc:	4b0a      	ldr	r3, [pc, #40]	; (8011f28 <BSP_SDRAM_Init+0xb8>)
 8011efe:	2201      	movs	r2, #1
 8011f00:	701a      	strb	r2, [r3, #0]
 8011f02:	e002      	b.n	8011f0a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8011f04:	4b08      	ldr	r3, [pc, #32]	; (8011f28 <BSP_SDRAM_Init+0xb8>)
 8011f06:	2200      	movs	r2, #0
 8011f08:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8011f0a:	f240 6003 	movw	r0, #1539	; 0x603
 8011f0e:	f000 f80d 	bl	8011f2c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8011f12:	4b05      	ldr	r3, [pc, #20]	; (8011f28 <BSP_SDRAM_Init+0xb8>)
 8011f14:	781b      	ldrb	r3, [r3, #0]
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	bd80      	pop	{r7, pc}
 8011f1a:	bf00      	nop
 8011f1c:	2002af74 	.word	0x2002af74
 8011f20:	a0000140 	.word	0xa0000140
 8011f24:	20004c40 	.word	0x20004c40
 8011f28:	20000021 	.word	0x20000021

08011f2c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b084      	sub	sp, #16
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8011f34:	2300      	movs	r3, #0
 8011f36:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8011f38:	4b2a      	ldr	r3, [pc, #168]	; (8011fe4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011f3a:	2201      	movs	r2, #1
 8011f3c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8011f3e:	4b29      	ldr	r3, [pc, #164]	; (8011fe4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011f40:	2210      	movs	r2, #16
 8011f42:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8011f44:	4b27      	ldr	r3, [pc, #156]	; (8011fe4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011f46:	2201      	movs	r2, #1
 8011f48:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8011f4a:	4b26      	ldr	r3, [pc, #152]	; (8011fe4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8011f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f54:	4923      	ldr	r1, [pc, #140]	; (8011fe4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011f56:	4824      	ldr	r0, [pc, #144]	; (8011fe8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8011f58:	f7fc ff57 	bl	800ee0a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8011f5c:	2001      	movs	r0, #1
 8011f5e:	f7f8 fe61 	bl	800ac24 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8011f62:	4b20      	ldr	r3, [pc, #128]	; (8011fe4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011f64:	2202      	movs	r2, #2
 8011f66:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8011f68:	4b1e      	ldr	r3, [pc, #120]	; (8011fe4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011f6a:	2210      	movs	r2, #16
 8011f6c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8011f6e:	4b1d      	ldr	r3, [pc, #116]	; (8011fe4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011f70:	2201      	movs	r2, #1
 8011f72:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8011f74:	4b1b      	ldr	r3, [pc, #108]	; (8011fe4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011f76:	2200      	movs	r2, #0
 8011f78:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8011f7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f7e:	4919      	ldr	r1, [pc, #100]	; (8011fe4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011f80:	4819      	ldr	r0, [pc, #100]	; (8011fe8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8011f82:	f7fc ff42 	bl	800ee0a <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8011f86:	4b17      	ldr	r3, [pc, #92]	; (8011fe4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011f88:	2203      	movs	r2, #3
 8011f8a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8011f8c:	4b15      	ldr	r3, [pc, #84]	; (8011fe4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011f8e:	2210      	movs	r2, #16
 8011f90:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8011f92:	4b14      	ldr	r3, [pc, #80]	; (8011fe4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011f94:	2208      	movs	r2, #8
 8011f96:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8011f98:	4b12      	ldr	r3, [pc, #72]	; (8011fe4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8011f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011fa2:	4910      	ldr	r1, [pc, #64]	; (8011fe4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011fa4:	4810      	ldr	r0, [pc, #64]	; (8011fe8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8011fa6:	f7fc ff30 	bl	800ee0a <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8011faa:	f44f 730c 	mov.w	r3, #560	; 0x230
 8011fae:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8011fb0:	4b0c      	ldr	r3, [pc, #48]	; (8011fe4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011fb2:	2204      	movs	r2, #4
 8011fb4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8011fb6:	4b0b      	ldr	r3, [pc, #44]	; (8011fe4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011fb8:	2210      	movs	r2, #16
 8011fba:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8011fbc:	4b09      	ldr	r3, [pc, #36]	; (8011fe4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011fbe:	2201      	movs	r2, #1
 8011fc0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	4a07      	ldr	r2, [pc, #28]	; (8011fe4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011fc6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8011fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011fcc:	4905      	ldr	r1, [pc, #20]	; (8011fe4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011fce:	4806      	ldr	r0, [pc, #24]	; (8011fe8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8011fd0:	f7fc ff1b 	bl	800ee0a <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8011fd4:	6879      	ldr	r1, [r7, #4]
 8011fd6:	4804      	ldr	r0, [pc, #16]	; (8011fe8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8011fd8:	f7fc ff42 	bl	800ee60 <HAL_SDRAM_ProgramRefreshRate>
}
 8011fdc:	bf00      	nop
 8011fde:	3710      	adds	r7, #16
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	20004c5c 	.word	0x20004c5c
 8011fe8:	2002af74 	.word	0x2002af74

08011fec <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b090      	sub	sp, #64	; 0x40
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
 8011ff4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8011ff6:	4b71      	ldr	r3, [pc, #452]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 8011ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ffa:	4a70      	ldr	r2, [pc, #448]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 8011ffc:	f043 0301 	orr.w	r3, r3, #1
 8012000:	6393      	str	r3, [r2, #56]	; 0x38
 8012002:	4b6e      	ldr	r3, [pc, #440]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 8012004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012006:	f003 0301 	and.w	r3, r3, #1
 801200a:	62bb      	str	r3, [r7, #40]	; 0x28
 801200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 801200e:	4b6b      	ldr	r3, [pc, #428]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 8012010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012012:	4a6a      	ldr	r2, [pc, #424]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 8012014:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8012018:	6313      	str	r3, [r2, #48]	; 0x30
 801201a:	4b68      	ldr	r3, [pc, #416]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 801201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801201e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012022:	627b      	str	r3, [r7, #36]	; 0x24
 8012024:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8012026:	4b65      	ldr	r3, [pc, #404]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 8012028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801202a:	4a64      	ldr	r2, [pc, #400]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 801202c:	f043 0308 	orr.w	r3, r3, #8
 8012030:	6313      	str	r3, [r2, #48]	; 0x30
 8012032:	4b62      	ldr	r3, [pc, #392]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 8012034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012036:	f003 0308 	and.w	r3, r3, #8
 801203a:	623b      	str	r3, [r7, #32]
 801203c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801203e:	4b5f      	ldr	r3, [pc, #380]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 8012040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012042:	4a5e      	ldr	r2, [pc, #376]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 8012044:	f043 0310 	orr.w	r3, r3, #16
 8012048:	6313      	str	r3, [r2, #48]	; 0x30
 801204a:	4b5c      	ldr	r3, [pc, #368]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 801204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801204e:	f003 0310 	and.w	r3, r3, #16
 8012052:	61fb      	str	r3, [r7, #28]
 8012054:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8012056:	4b59      	ldr	r3, [pc, #356]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 8012058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801205a:	4a58      	ldr	r2, [pc, #352]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 801205c:	f043 0320 	orr.w	r3, r3, #32
 8012060:	6313      	str	r3, [r2, #48]	; 0x30
 8012062:	4b56      	ldr	r3, [pc, #344]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 8012064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012066:	f003 0320 	and.w	r3, r3, #32
 801206a:	61bb      	str	r3, [r7, #24]
 801206c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801206e:	4b53      	ldr	r3, [pc, #332]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 8012070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012072:	4a52      	ldr	r2, [pc, #328]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 8012074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012078:	6313      	str	r3, [r2, #48]	; 0x30
 801207a:	4b50      	ldr	r3, [pc, #320]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 801207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801207e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012082:	617b      	str	r3, [r7, #20]
 8012084:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8012086:	4b4d      	ldr	r3, [pc, #308]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 8012088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801208a:	4a4c      	ldr	r2, [pc, #304]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 801208c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012090:	6313      	str	r3, [r2, #48]	; 0x30
 8012092:	4b4a      	ldr	r3, [pc, #296]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 8012094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801209a:	613b      	str	r3, [r7, #16]
 801209c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 801209e:	4b47      	ldr	r3, [pc, #284]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 80120a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120a2:	4a46      	ldr	r2, [pc, #280]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 80120a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80120a8:	6313      	str	r3, [r2, #48]	; 0x30
 80120aa:	4b44      	ldr	r3, [pc, #272]	; (80121bc <BSP_SDRAM_MspInit+0x1d0>)
 80120ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80120b2:	60fb      	str	r3, [r7, #12]
 80120b4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80120b6:	2302      	movs	r3, #2
 80120b8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80120ba:	2301      	movs	r3, #1
 80120bc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80120be:	2303      	movs	r3, #3
 80120c0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80120c2:	230c      	movs	r3, #12
 80120c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80120c6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80120ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80120cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80120d0:	4619      	mov	r1, r3
 80120d2:	483b      	ldr	r0, [pc, #236]	; (80121c0 <BSP_SDRAM_MspInit+0x1d4>)
 80120d4:	f7f9 ffd0 	bl	800c078 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80120d8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80120dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80120de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80120e2:	4619      	mov	r1, r3
 80120e4:	4837      	ldr	r0, [pc, #220]	; (80121c4 <BSP_SDRAM_MspInit+0x1d8>)
 80120e6:	f7f9 ffc7 	bl	800c078 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80120ea:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80120ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80120f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80120f4:	4619      	mov	r1, r3
 80120f6:	4834      	ldr	r0, [pc, #208]	; (80121c8 <BSP_SDRAM_MspInit+0x1dc>)
 80120f8:	f7f9 ffbe 	bl	800c078 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 80120fc:	f248 1337 	movw	r3, #33079	; 0x8137
 8012100:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8012102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012106:	4619      	mov	r1, r3
 8012108:	4830      	ldr	r0, [pc, #192]	; (80121cc <BSP_SDRAM_MspInit+0x1e0>)
 801210a:	f7f9 ffb5 	bl	800c078 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 801210e:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8012112:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8012114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012118:	4619      	mov	r1, r3
 801211a:	482d      	ldr	r0, [pc, #180]	; (80121d0 <BSP_SDRAM_MspInit+0x1e4>)
 801211c:	f7f9 ffac 	bl	800c078 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8012120:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8012124:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8012126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801212a:	4619      	mov	r1, r3
 801212c:	4829      	ldr	r0, [pc, #164]	; (80121d4 <BSP_SDRAM_MspInit+0x1e8>)
 801212e:	f7f9 ffa3 	bl	800c078 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8012132:	4b29      	ldr	r3, [pc, #164]	; (80121d8 <BSP_SDRAM_MspInit+0x1ec>)
 8012134:	2200      	movs	r2, #0
 8012136:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8012138:	4b27      	ldr	r3, [pc, #156]	; (80121d8 <BSP_SDRAM_MspInit+0x1ec>)
 801213a:	2280      	movs	r2, #128	; 0x80
 801213c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 801213e:	4b26      	ldr	r3, [pc, #152]	; (80121d8 <BSP_SDRAM_MspInit+0x1ec>)
 8012140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012144:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8012146:	4b24      	ldr	r3, [pc, #144]	; (80121d8 <BSP_SDRAM_MspInit+0x1ec>)
 8012148:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801214c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801214e:	4b22      	ldr	r3, [pc, #136]	; (80121d8 <BSP_SDRAM_MspInit+0x1ec>)
 8012150:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012154:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8012156:	4b20      	ldr	r3, [pc, #128]	; (80121d8 <BSP_SDRAM_MspInit+0x1ec>)
 8012158:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801215c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 801215e:	4b1e      	ldr	r3, [pc, #120]	; (80121d8 <BSP_SDRAM_MspInit+0x1ec>)
 8012160:	2200      	movs	r2, #0
 8012162:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8012164:	4b1c      	ldr	r3, [pc, #112]	; (80121d8 <BSP_SDRAM_MspInit+0x1ec>)
 8012166:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801216a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 801216c:	4b1a      	ldr	r3, [pc, #104]	; (80121d8 <BSP_SDRAM_MspInit+0x1ec>)
 801216e:	2200      	movs	r2, #0
 8012170:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8012172:	4b19      	ldr	r3, [pc, #100]	; (80121d8 <BSP_SDRAM_MspInit+0x1ec>)
 8012174:	2203      	movs	r2, #3
 8012176:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8012178:	4b17      	ldr	r3, [pc, #92]	; (80121d8 <BSP_SDRAM_MspInit+0x1ec>)
 801217a:	2200      	movs	r2, #0
 801217c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 801217e:	4b16      	ldr	r3, [pc, #88]	; (80121d8 <BSP_SDRAM_MspInit+0x1ec>)
 8012180:	2200      	movs	r2, #0
 8012182:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8012184:	4b14      	ldr	r3, [pc, #80]	; (80121d8 <BSP_SDRAM_MspInit+0x1ec>)
 8012186:	4a15      	ldr	r2, [pc, #84]	; (80121dc <BSP_SDRAM_MspInit+0x1f0>)
 8012188:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	4a12      	ldr	r2, [pc, #72]	; (80121d8 <BSP_SDRAM_MspInit+0x1ec>)
 801218e:	631a      	str	r2, [r3, #48]	; 0x30
 8012190:	4a11      	ldr	r2, [pc, #68]	; (80121d8 <BSP_SDRAM_MspInit+0x1ec>)
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8012196:	4810      	ldr	r0, [pc, #64]	; (80121d8 <BSP_SDRAM_MspInit+0x1ec>)
 8012198:	f7f9 fbd8 	bl	800b94c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 801219c:	480e      	ldr	r0, [pc, #56]	; (80121d8 <BSP_SDRAM_MspInit+0x1ec>)
 801219e:	f7f9 fb27 	bl	800b7f0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80121a2:	2200      	movs	r2, #0
 80121a4:	210f      	movs	r1, #15
 80121a6:	2038      	movs	r0, #56	; 0x38
 80121a8:	f7f8 fe39 	bl	800ae1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80121ac:	2038      	movs	r0, #56	; 0x38
 80121ae:	f7f8 fe52 	bl	800ae56 <HAL_NVIC_EnableIRQ>
}
 80121b2:	bf00      	nop
 80121b4:	3740      	adds	r7, #64	; 0x40
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}
 80121ba:	bf00      	nop
 80121bc:	40023800 	.word	0x40023800
 80121c0:	40020c00 	.word	0x40020c00
 80121c4:	40021000 	.word	0x40021000
 80121c8:	40021400 	.word	0x40021400
 80121cc:	40021800 	.word	0x40021800
 80121d0:	40021c00 	.word	0x40021c00
 80121d4:	40022000 	.word	0x40022000
 80121d8:	20004c6c 	.word	0x20004c6c
 80121dc:	40026410 	.word	0x40026410

080121e0 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b088      	sub	sp, #32
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	607b      	str	r3, [r7, #4]
 80121e8:	4603      	mov	r3, r0
 80121ea:	81fb      	strh	r3, [r7, #14]
 80121ec:	460b      	mov	r3, r1
 80121ee:	81bb      	strh	r3, [r7, #12]
 80121f0:	4613      	mov	r3, r2
 80121f2:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80121f4:	2300      	movs	r3, #0
 80121f6:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 80121f8:	89bb      	ldrh	r3, [r7, #12]
 80121fa:	b2db      	uxtb	r3, r3
 80121fc:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 80121fe:	89bb      	ldrh	r3, [r7, #12]
 8012200:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8012204:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8012206:	2300      	movs	r3, #0
 8012208:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 801220a:	f7fd fe3f 	bl	800fe8c <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 801220e:	89fb      	ldrh	r3, [r7, #14]
 8012210:	b2db      	uxtb	r3, r3
 8012212:	2203      	movs	r2, #3
 8012214:	f44f 7181 	mov.w	r1, #258	; 0x102
 8012218:	4618      	mov	r0, r3
 801221a:	f001 fab3 	bl	8013784 <CODEC_IO_Write>
 801221e:	4603      	mov	r3, r0
 8012220:	461a      	mov	r2, r3
 8012222:	69fb      	ldr	r3, [r7, #28]
 8012224:	4413      	add	r3, r2
 8012226:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8012228:	89fb      	ldrh	r3, [r7, #14]
 801222a:	b2db      	uxtb	r3, r3
 801222c:	2200      	movs	r2, #0
 801222e:	f640 0117 	movw	r1, #2071	; 0x817
 8012232:	4618      	mov	r0, r3
 8012234:	f001 faa6 	bl	8013784 <CODEC_IO_Write>
 8012238:	4603      	mov	r3, r0
 801223a:	461a      	mov	r2, r3
 801223c:	69fb      	ldr	r3, [r7, #28]
 801223e:	4413      	add	r3, r2
 8012240:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8012242:	89fb      	ldrh	r3, [r7, #14]
 8012244:	b2db      	uxtb	r3, r3
 8012246:	2200      	movs	r2, #0
 8012248:	f44f 7181 	mov.w	r1, #258	; 0x102
 801224c:	4618      	mov	r0, r3
 801224e:	f001 fa99 	bl	8013784 <CODEC_IO_Write>
 8012252:	4603      	mov	r3, r0
 8012254:	461a      	mov	r2, r3
 8012256:	69fb      	ldr	r3, [r7, #28]
 8012258:	4413      	add	r3, r2
 801225a:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 801225c:	89fb      	ldrh	r3, [r7, #14]
 801225e:	b2db      	uxtb	r3, r3
 8012260:	226c      	movs	r2, #108	; 0x6c
 8012262:	2139      	movs	r1, #57	; 0x39
 8012264:	4618      	mov	r0, r3
 8012266:	f001 fa8d 	bl	8013784 <CODEC_IO_Write>
 801226a:	4603      	mov	r3, r0
 801226c:	461a      	mov	r2, r3
 801226e:	69fb      	ldr	r3, [r7, #28]
 8012270:	4413      	add	r3, r2
 8012272:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8012274:	8afb      	ldrh	r3, [r7, #22]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d00c      	beq.n	8012294 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 801227a:	89fb      	ldrh	r3, [r7, #14]
 801227c:	b2db      	uxtb	r3, r3
 801227e:	2213      	movs	r2, #19
 8012280:	2101      	movs	r1, #1
 8012282:	4618      	mov	r0, r3
 8012284:	f001 fa7e 	bl	8013784 <CODEC_IO_Write>
 8012288:	4603      	mov	r3, r0
 801228a:	461a      	mov	r2, r3
 801228c:	69fb      	ldr	r3, [r7, #28]
 801228e:	4413      	add	r3, r2
 8012290:	61fb      	str	r3, [r7, #28]
 8012292:	e00b      	b.n	80122ac <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8012294:	89fb      	ldrh	r3, [r7, #14]
 8012296:	b2db      	uxtb	r3, r3
 8012298:	2203      	movs	r2, #3
 801229a:	2101      	movs	r1, #1
 801229c:	4618      	mov	r0, r3
 801229e:	f001 fa71 	bl	8013784 <CODEC_IO_Write>
 80122a2:	4603      	mov	r3, r0
 80122a4:	461a      	mov	r2, r3
 80122a6:	69fb      	ldr	r3, [r7, #28]
 80122a8:	4413      	add	r3, r2
 80122aa:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 80122ac:	2032      	movs	r0, #50	; 0x32
 80122ae:	f7fd fe55 	bl	800ff5c <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 80122b2:	8b3b      	ldrh	r3, [r7, #24]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	f000 815b 	beq.w	8012570 <wm8994_Init+0x390>
  {
    outputEnabled = 1;
 80122ba:	4bbc      	ldr	r3, [pc, #752]	; (80125ac <wm8994_Init+0x3cc>)
 80122bc:	2201      	movs	r2, #1
 80122be:	601a      	str	r2, [r3, #0]

    switch (output_device)
 80122c0:	8b3b      	ldrh	r3, [r7, #24]
 80122c2:	2b02      	cmp	r3, #2
 80122c4:	d047      	beq.n	8012356 <wm8994_Init+0x176>
 80122c6:	2b03      	cmp	r3, #3
 80122c8:	f000 8087 	beq.w	80123da <wm8994_Init+0x1fa>
 80122cc:	2b01      	cmp	r3, #1
 80122ce:	f040 810c 	bne.w	80124ea <wm8994_Init+0x30a>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80122d2:	89fb      	ldrh	r3, [r7, #14]
 80122d4:	b2db      	uxtb	r3, r3
 80122d6:	f640 420c 	movw	r2, #3084	; 0xc0c
 80122da:	2105      	movs	r1, #5
 80122dc:	4618      	mov	r0, r3
 80122de:	f001 fa51 	bl	8013784 <CODEC_IO_Write>
 80122e2:	4603      	mov	r3, r0
 80122e4:	461a      	mov	r2, r3
 80122e6:	69fb      	ldr	r3, [r7, #28]
 80122e8:	4413      	add	r3, r2
 80122ea:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80122ec:	89fb      	ldrh	r3, [r7, #14]
 80122ee:	b2db      	uxtb	r3, r3
 80122f0:	2200      	movs	r2, #0
 80122f2:	f240 6101 	movw	r1, #1537	; 0x601
 80122f6:	4618      	mov	r0, r3
 80122f8:	f001 fa44 	bl	8013784 <CODEC_IO_Write>
 80122fc:	4603      	mov	r3, r0
 80122fe:	461a      	mov	r2, r3
 8012300:	69fb      	ldr	r3, [r7, #28]
 8012302:	4413      	add	r3, r2
 8012304:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8012306:	89fb      	ldrh	r3, [r7, #14]
 8012308:	b2db      	uxtb	r3, r3
 801230a:	2200      	movs	r2, #0
 801230c:	f240 6102 	movw	r1, #1538	; 0x602
 8012310:	4618      	mov	r0, r3
 8012312:	f001 fa37 	bl	8013784 <CODEC_IO_Write>
 8012316:	4603      	mov	r3, r0
 8012318:	461a      	mov	r2, r3
 801231a:	69fb      	ldr	r3, [r7, #28]
 801231c:	4413      	add	r3, r2
 801231e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8012320:	89fb      	ldrh	r3, [r7, #14]
 8012322:	b2db      	uxtb	r3, r3
 8012324:	2202      	movs	r2, #2
 8012326:	f240 6104 	movw	r1, #1540	; 0x604
 801232a:	4618      	mov	r0, r3
 801232c:	f001 fa2a 	bl	8013784 <CODEC_IO_Write>
 8012330:	4603      	mov	r3, r0
 8012332:	461a      	mov	r2, r3
 8012334:	69fb      	ldr	r3, [r7, #28]
 8012336:	4413      	add	r3, r2
 8012338:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 801233a:	89fb      	ldrh	r3, [r7, #14]
 801233c:	b2db      	uxtb	r3, r3
 801233e:	2202      	movs	r2, #2
 8012340:	f240 6105 	movw	r1, #1541	; 0x605
 8012344:	4618      	mov	r0, r3
 8012346:	f001 fa1d 	bl	8013784 <CODEC_IO_Write>
 801234a:	4603      	mov	r3, r0
 801234c:	461a      	mov	r2, r3
 801234e:	69fb      	ldr	r3, [r7, #28]
 8012350:	4413      	add	r3, r2
 8012352:	61fb      	str	r3, [r7, #28]
      break;
 8012354:	e10f      	b.n	8012576 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8012356:	89fb      	ldrh	r3, [r7, #14]
 8012358:	b2db      	uxtb	r3, r3
 801235a:	f240 3203 	movw	r2, #771	; 0x303
 801235e:	2105      	movs	r1, #5
 8012360:	4618      	mov	r0, r3
 8012362:	f001 fa0f 	bl	8013784 <CODEC_IO_Write>
 8012366:	4603      	mov	r3, r0
 8012368:	461a      	mov	r2, r3
 801236a:	69fb      	ldr	r3, [r7, #28]
 801236c:	4413      	add	r3, r2
 801236e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8012370:	89fb      	ldrh	r3, [r7, #14]
 8012372:	b2db      	uxtb	r3, r3
 8012374:	2201      	movs	r2, #1
 8012376:	f240 6101 	movw	r1, #1537	; 0x601
 801237a:	4618      	mov	r0, r3
 801237c:	f001 fa02 	bl	8013784 <CODEC_IO_Write>
 8012380:	4603      	mov	r3, r0
 8012382:	461a      	mov	r2, r3
 8012384:	69fb      	ldr	r3, [r7, #28]
 8012386:	4413      	add	r3, r2
 8012388:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 801238a:	89fb      	ldrh	r3, [r7, #14]
 801238c:	b2db      	uxtb	r3, r3
 801238e:	2201      	movs	r2, #1
 8012390:	f240 6102 	movw	r1, #1538	; 0x602
 8012394:	4618      	mov	r0, r3
 8012396:	f001 f9f5 	bl	8013784 <CODEC_IO_Write>
 801239a:	4603      	mov	r3, r0
 801239c:	461a      	mov	r2, r3
 801239e:	69fb      	ldr	r3, [r7, #28]
 80123a0:	4413      	add	r3, r2
 80123a2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80123a4:	89fb      	ldrh	r3, [r7, #14]
 80123a6:	b2db      	uxtb	r3, r3
 80123a8:	2200      	movs	r2, #0
 80123aa:	f240 6104 	movw	r1, #1540	; 0x604
 80123ae:	4618      	mov	r0, r3
 80123b0:	f001 f9e8 	bl	8013784 <CODEC_IO_Write>
 80123b4:	4603      	mov	r3, r0
 80123b6:	461a      	mov	r2, r3
 80123b8:	69fb      	ldr	r3, [r7, #28]
 80123ba:	4413      	add	r3, r2
 80123bc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80123be:	89fb      	ldrh	r3, [r7, #14]
 80123c0:	b2db      	uxtb	r3, r3
 80123c2:	2200      	movs	r2, #0
 80123c4:	f240 6105 	movw	r1, #1541	; 0x605
 80123c8:	4618      	mov	r0, r3
 80123ca:	f001 f9db 	bl	8013784 <CODEC_IO_Write>
 80123ce:	4603      	mov	r3, r0
 80123d0:	461a      	mov	r2, r3
 80123d2:	69fb      	ldr	r3, [r7, #28]
 80123d4:	4413      	add	r3, r2
 80123d6:	61fb      	str	r3, [r7, #28]
      break;
 80123d8:	e0cd      	b.n	8012576 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80123da:	8afb      	ldrh	r3, [r7, #22]
 80123dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80123e0:	d141      	bne.n	8012466 <wm8994_Init+0x286>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80123e2:	89fb      	ldrh	r3, [r7, #14]
 80123e4:	b2db      	uxtb	r3, r3
 80123e6:	f640 720f 	movw	r2, #3855	; 0xf0f
 80123ea:	2105      	movs	r1, #5
 80123ec:	4618      	mov	r0, r3
 80123ee:	f001 f9c9 	bl	8013784 <CODEC_IO_Write>
 80123f2:	4603      	mov	r3, r0
 80123f4:	461a      	mov	r2, r3
 80123f6:	69fb      	ldr	r3, [r7, #28]
 80123f8:	4413      	add	r3, r2
 80123fa:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80123fc:	89fb      	ldrh	r3, [r7, #14]
 80123fe:	b2db      	uxtb	r3, r3
 8012400:	2203      	movs	r2, #3
 8012402:	f240 6101 	movw	r1, #1537	; 0x601
 8012406:	4618      	mov	r0, r3
 8012408:	f001 f9bc 	bl	8013784 <CODEC_IO_Write>
 801240c:	4603      	mov	r3, r0
 801240e:	461a      	mov	r2, r3
 8012410:	69fb      	ldr	r3, [r7, #28]
 8012412:	4413      	add	r3, r2
 8012414:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8012416:	89fb      	ldrh	r3, [r7, #14]
 8012418:	b2db      	uxtb	r3, r3
 801241a:	2203      	movs	r2, #3
 801241c:	f240 6102 	movw	r1, #1538	; 0x602
 8012420:	4618      	mov	r0, r3
 8012422:	f001 f9af 	bl	8013784 <CODEC_IO_Write>
 8012426:	4603      	mov	r3, r0
 8012428:	461a      	mov	r2, r3
 801242a:	69fb      	ldr	r3, [r7, #28]
 801242c:	4413      	add	r3, r2
 801242e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8012430:	89fb      	ldrh	r3, [r7, #14]
 8012432:	b2db      	uxtb	r3, r3
 8012434:	2203      	movs	r2, #3
 8012436:	f240 6104 	movw	r1, #1540	; 0x604
 801243a:	4618      	mov	r0, r3
 801243c:	f001 f9a2 	bl	8013784 <CODEC_IO_Write>
 8012440:	4603      	mov	r3, r0
 8012442:	461a      	mov	r2, r3
 8012444:	69fb      	ldr	r3, [r7, #28]
 8012446:	4413      	add	r3, r2
 8012448:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 801244a:	89fb      	ldrh	r3, [r7, #14]
 801244c:	b2db      	uxtb	r3, r3
 801244e:	2203      	movs	r2, #3
 8012450:	f240 6105 	movw	r1, #1541	; 0x605
 8012454:	4618      	mov	r0, r3
 8012456:	f001 f995 	bl	8013784 <CODEC_IO_Write>
 801245a:	4603      	mov	r3, r0
 801245c:	461a      	mov	r2, r3
 801245e:	69fb      	ldr	r3, [r7, #28]
 8012460:	4413      	add	r3, r2
 8012462:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8012464:	e087      	b.n	8012576 <wm8994_Init+0x396>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8012466:	89fb      	ldrh	r3, [r7, #14]
 8012468:	b2db      	uxtb	r3, r3
 801246a:	f640 720f 	movw	r2, #3855	; 0xf0f
 801246e:	2105      	movs	r1, #5
 8012470:	4618      	mov	r0, r3
 8012472:	f001 f987 	bl	8013784 <CODEC_IO_Write>
 8012476:	4603      	mov	r3, r0
 8012478:	461a      	mov	r2, r3
 801247a:	69fb      	ldr	r3, [r7, #28]
 801247c:	4413      	add	r3, r2
 801247e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8012480:	89fb      	ldrh	r3, [r7, #14]
 8012482:	b2db      	uxtb	r3, r3
 8012484:	2201      	movs	r2, #1
 8012486:	f240 6101 	movw	r1, #1537	; 0x601
 801248a:	4618      	mov	r0, r3
 801248c:	f001 f97a 	bl	8013784 <CODEC_IO_Write>
 8012490:	4603      	mov	r3, r0
 8012492:	461a      	mov	r2, r3
 8012494:	69fb      	ldr	r3, [r7, #28]
 8012496:	4413      	add	r3, r2
 8012498:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 801249a:	89fb      	ldrh	r3, [r7, #14]
 801249c:	b2db      	uxtb	r3, r3
 801249e:	2201      	movs	r2, #1
 80124a0:	f240 6102 	movw	r1, #1538	; 0x602
 80124a4:	4618      	mov	r0, r3
 80124a6:	f001 f96d 	bl	8013784 <CODEC_IO_Write>
 80124aa:	4603      	mov	r3, r0
 80124ac:	461a      	mov	r2, r3
 80124ae:	69fb      	ldr	r3, [r7, #28]
 80124b0:	4413      	add	r3, r2
 80124b2:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80124b4:	89fb      	ldrh	r3, [r7, #14]
 80124b6:	b2db      	uxtb	r3, r3
 80124b8:	2202      	movs	r2, #2
 80124ba:	f240 6104 	movw	r1, #1540	; 0x604
 80124be:	4618      	mov	r0, r3
 80124c0:	f001 f960 	bl	8013784 <CODEC_IO_Write>
 80124c4:	4603      	mov	r3, r0
 80124c6:	461a      	mov	r2, r3
 80124c8:	69fb      	ldr	r3, [r7, #28]
 80124ca:	4413      	add	r3, r2
 80124cc:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80124ce:	89fb      	ldrh	r3, [r7, #14]
 80124d0:	b2db      	uxtb	r3, r3
 80124d2:	2202      	movs	r2, #2
 80124d4:	f240 6105 	movw	r1, #1541	; 0x605
 80124d8:	4618      	mov	r0, r3
 80124da:	f001 f953 	bl	8013784 <CODEC_IO_Write>
 80124de:	4603      	mov	r3, r0
 80124e0:	461a      	mov	r2, r3
 80124e2:	69fb      	ldr	r3, [r7, #28]
 80124e4:	4413      	add	r3, r2
 80124e6:	61fb      	str	r3, [r7, #28]
      break;
 80124e8:	e045      	b.n	8012576 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80124ea:	89fb      	ldrh	r3, [r7, #14]
 80124ec:	b2db      	uxtb	r3, r3
 80124ee:	f240 3203 	movw	r2, #771	; 0x303
 80124f2:	2105      	movs	r1, #5
 80124f4:	4618      	mov	r0, r3
 80124f6:	f001 f945 	bl	8013784 <CODEC_IO_Write>
 80124fa:	4603      	mov	r3, r0
 80124fc:	461a      	mov	r2, r3
 80124fe:	69fb      	ldr	r3, [r7, #28]
 8012500:	4413      	add	r3, r2
 8012502:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8012504:	89fb      	ldrh	r3, [r7, #14]
 8012506:	b2db      	uxtb	r3, r3
 8012508:	2201      	movs	r2, #1
 801250a:	f240 6101 	movw	r1, #1537	; 0x601
 801250e:	4618      	mov	r0, r3
 8012510:	f001 f938 	bl	8013784 <CODEC_IO_Write>
 8012514:	4603      	mov	r3, r0
 8012516:	461a      	mov	r2, r3
 8012518:	69fb      	ldr	r3, [r7, #28]
 801251a:	4413      	add	r3, r2
 801251c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 801251e:	89fb      	ldrh	r3, [r7, #14]
 8012520:	b2db      	uxtb	r3, r3
 8012522:	2201      	movs	r2, #1
 8012524:	f240 6102 	movw	r1, #1538	; 0x602
 8012528:	4618      	mov	r0, r3
 801252a:	f001 f92b 	bl	8013784 <CODEC_IO_Write>
 801252e:	4603      	mov	r3, r0
 8012530:	461a      	mov	r2, r3
 8012532:	69fb      	ldr	r3, [r7, #28]
 8012534:	4413      	add	r3, r2
 8012536:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8012538:	89fb      	ldrh	r3, [r7, #14]
 801253a:	b2db      	uxtb	r3, r3
 801253c:	2200      	movs	r2, #0
 801253e:	f240 6104 	movw	r1, #1540	; 0x604
 8012542:	4618      	mov	r0, r3
 8012544:	f001 f91e 	bl	8013784 <CODEC_IO_Write>
 8012548:	4603      	mov	r3, r0
 801254a:	461a      	mov	r2, r3
 801254c:	69fb      	ldr	r3, [r7, #28]
 801254e:	4413      	add	r3, r2
 8012550:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8012552:	89fb      	ldrh	r3, [r7, #14]
 8012554:	b2db      	uxtb	r3, r3
 8012556:	2200      	movs	r2, #0
 8012558:	f240 6105 	movw	r1, #1541	; 0x605
 801255c:	4618      	mov	r0, r3
 801255e:	f001 f911 	bl	8013784 <CODEC_IO_Write>
 8012562:	4603      	mov	r3, r0
 8012564:	461a      	mov	r2, r3
 8012566:	69fb      	ldr	r3, [r7, #28]
 8012568:	4413      	add	r3, r2
 801256a:	61fb      	str	r3, [r7, #28]
      break;
 801256c:	bf00      	nop
 801256e:	e002      	b.n	8012576 <wm8994_Init+0x396>
    }
  }
  else
  {
    outputEnabled = 0;
 8012570:	4b0e      	ldr	r3, [pc, #56]	; (80125ac <wm8994_Init+0x3cc>)
 8012572:	2200      	movs	r2, #0
 8012574:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8012576:	8afb      	ldrh	r3, [r7, #22]
 8012578:	2b00      	cmp	r3, #0
 801257a:	f000 81a7 	beq.w	80128cc <wm8994_Init+0x6ec>
  {
    inputEnabled = 1;
 801257e:	4b0c      	ldr	r3, [pc, #48]	; (80125b0 <wm8994_Init+0x3d0>)
 8012580:	2201      	movs	r2, #1
 8012582:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8012584:	8afb      	ldrh	r3, [r7, #22]
 8012586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801258a:	d013      	beq.n	80125b4 <wm8994_Init+0x3d4>
 801258c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012590:	dc04      	bgt.n	801259c <wm8994_Init+0x3bc>
 8012592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012596:	f000 80cf 	beq.w	8012738 <wm8994_Init+0x558>
 801259a:	e192      	b.n	80128c2 <wm8994_Init+0x6e2>
 801259c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80125a0:	d057      	beq.n	8012652 <wm8994_Init+0x472>
 80125a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80125a6:	f000 8116 	beq.w	80127d6 <wm8994_Init+0x5f6>
 80125aa:	e18a      	b.n	80128c2 <wm8994_Init+0x6e2>
 80125ac:	20004ccc 	.word	0x20004ccc
 80125b0:	20004cd0 	.word	0x20004cd0
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80125b4:	89fb      	ldrh	r3, [r7, #14]
 80125b6:	b2db      	uxtb	r3, r3
 80125b8:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80125bc:	2104      	movs	r1, #4
 80125be:	4618      	mov	r0, r3
 80125c0:	f001 f8e0 	bl	8013784 <CODEC_IO_Write>
 80125c4:	4603      	mov	r3, r0
 80125c6:	461a      	mov	r2, r3
 80125c8:	69fb      	ldr	r3, [r7, #28]
 80125ca:	4413      	add	r3, r2
 80125cc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80125ce:	89fb      	ldrh	r3, [r7, #14]
 80125d0:	b2db      	uxtb	r3, r3
 80125d2:	22db      	movs	r2, #219	; 0xdb
 80125d4:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80125d8:	4618      	mov	r0, r3
 80125da:	f001 f8d3 	bl	8013784 <CODEC_IO_Write>
 80125de:	4603      	mov	r3, r0
 80125e0:	461a      	mov	r2, r3
 80125e2:	69fb      	ldr	r3, [r7, #28]
 80125e4:	4413      	add	r3, r2
 80125e6:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80125e8:	89fb      	ldrh	r3, [r7, #14]
 80125ea:	b2db      	uxtb	r3, r3
 80125ec:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80125f0:	2102      	movs	r1, #2
 80125f2:	4618      	mov	r0, r3
 80125f4:	f001 f8c6 	bl	8013784 <CODEC_IO_Write>
 80125f8:	4603      	mov	r3, r0
 80125fa:	461a      	mov	r2, r3
 80125fc:	69fb      	ldr	r3, [r7, #28]
 80125fe:	4413      	add	r3, r2
 8012600:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8012602:	89fb      	ldrh	r3, [r7, #14]
 8012604:	b2db      	uxtb	r3, r3
 8012606:	2202      	movs	r2, #2
 8012608:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 801260c:	4618      	mov	r0, r3
 801260e:	f001 f8b9 	bl	8013784 <CODEC_IO_Write>
 8012612:	4603      	mov	r3, r0
 8012614:	461a      	mov	r2, r3
 8012616:	69fb      	ldr	r3, [r7, #28]
 8012618:	4413      	add	r3, r2
 801261a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 801261c:	89fb      	ldrh	r3, [r7, #14]
 801261e:	b2db      	uxtb	r3, r3
 8012620:	2202      	movs	r2, #2
 8012622:	f240 6109 	movw	r1, #1545	; 0x609
 8012626:	4618      	mov	r0, r3
 8012628:	f001 f8ac 	bl	8013784 <CODEC_IO_Write>
 801262c:	4603      	mov	r3, r0
 801262e:	461a      	mov	r2, r3
 8012630:	69fb      	ldr	r3, [r7, #28]
 8012632:	4413      	add	r3, r2
 8012634:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8012636:	89fb      	ldrh	r3, [r7, #14]
 8012638:	b2db      	uxtb	r3, r3
 801263a:	220e      	movs	r2, #14
 801263c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8012640:	4618      	mov	r0, r3
 8012642:	f001 f89f 	bl	8013784 <CODEC_IO_Write>
 8012646:	4603      	mov	r3, r0
 8012648:	461a      	mov	r2, r3
 801264a:	69fb      	ldr	r3, [r7, #28]
 801264c:	4413      	add	r3, r2
 801264e:	61fb      	str	r3, [r7, #28]
      break;
 8012650:	e13f      	b.n	80128d2 <wm8994_Init+0x6f2>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8012652:	89fb      	ldrh	r3, [r7, #14]
 8012654:	b2db      	uxtb	r3, r3
 8012656:	2211      	movs	r2, #17
 8012658:	2128      	movs	r1, #40	; 0x28
 801265a:	4618      	mov	r0, r3
 801265c:	f001 f892 	bl	8013784 <CODEC_IO_Write>
 8012660:	4603      	mov	r3, r0
 8012662:	461a      	mov	r2, r3
 8012664:	69fb      	ldr	r3, [r7, #28]
 8012666:	4413      	add	r3, r2
 8012668:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 801266a:	89fb      	ldrh	r3, [r7, #14]
 801266c:	b2db      	uxtb	r3, r3
 801266e:	2235      	movs	r2, #53	; 0x35
 8012670:	2129      	movs	r1, #41	; 0x29
 8012672:	4618      	mov	r0, r3
 8012674:	f001 f886 	bl	8013784 <CODEC_IO_Write>
 8012678:	4603      	mov	r3, r0
 801267a:	461a      	mov	r2, r3
 801267c:	69fb      	ldr	r3, [r7, #28]
 801267e:	4413      	add	r3, r2
 8012680:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8012682:	89fb      	ldrh	r3, [r7, #14]
 8012684:	b2db      	uxtb	r3, r3
 8012686:	2235      	movs	r2, #53	; 0x35
 8012688:	212a      	movs	r1, #42	; 0x2a
 801268a:	4618      	mov	r0, r3
 801268c:	f001 f87a 	bl	8013784 <CODEC_IO_Write>
 8012690:	4603      	mov	r3, r0
 8012692:	461a      	mov	r2, r3
 8012694:	69fb      	ldr	r3, [r7, #28]
 8012696:	4413      	add	r3, r2
 8012698:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 801269a:	89fb      	ldrh	r3, [r7, #14]
 801269c:	b2db      	uxtb	r3, r3
 801269e:	f240 3203 	movw	r2, #771	; 0x303
 80126a2:	2104      	movs	r1, #4
 80126a4:	4618      	mov	r0, r3
 80126a6:	f001 f86d 	bl	8013784 <CODEC_IO_Write>
 80126aa:	4603      	mov	r3, r0
 80126ac:	461a      	mov	r2, r3
 80126ae:	69fb      	ldr	r3, [r7, #28]
 80126b0:	4413      	add	r3, r2
 80126b2:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80126b4:	89fb      	ldrh	r3, [r7, #14]
 80126b6:	b2db      	uxtb	r3, r3
 80126b8:	22db      	movs	r2, #219	; 0xdb
 80126ba:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80126be:	4618      	mov	r0, r3
 80126c0:	f001 f860 	bl	8013784 <CODEC_IO_Write>
 80126c4:	4603      	mov	r3, r0
 80126c6:	461a      	mov	r2, r3
 80126c8:	69fb      	ldr	r3, [r7, #28]
 80126ca:	4413      	add	r3, r2
 80126cc:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80126ce:	89fb      	ldrh	r3, [r7, #14]
 80126d0:	b2db      	uxtb	r3, r3
 80126d2:	f246 3250 	movw	r2, #25424	; 0x6350
 80126d6:	2102      	movs	r1, #2
 80126d8:	4618      	mov	r0, r3
 80126da:	f001 f853 	bl	8013784 <CODEC_IO_Write>
 80126de:	4603      	mov	r3, r0
 80126e0:	461a      	mov	r2, r3
 80126e2:	69fb      	ldr	r3, [r7, #28]
 80126e4:	4413      	add	r3, r2
 80126e6:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80126e8:	89fb      	ldrh	r3, [r7, #14]
 80126ea:	b2db      	uxtb	r3, r3
 80126ec:	2202      	movs	r2, #2
 80126ee:	f240 6106 	movw	r1, #1542	; 0x606
 80126f2:	4618      	mov	r0, r3
 80126f4:	f001 f846 	bl	8013784 <CODEC_IO_Write>
 80126f8:	4603      	mov	r3, r0
 80126fa:	461a      	mov	r2, r3
 80126fc:	69fb      	ldr	r3, [r7, #28]
 80126fe:	4413      	add	r3, r2
 8012700:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8012702:	89fb      	ldrh	r3, [r7, #14]
 8012704:	b2db      	uxtb	r3, r3
 8012706:	2202      	movs	r2, #2
 8012708:	f240 6107 	movw	r1, #1543	; 0x607
 801270c:	4618      	mov	r0, r3
 801270e:	f001 f839 	bl	8013784 <CODEC_IO_Write>
 8012712:	4603      	mov	r3, r0
 8012714:	461a      	mov	r2, r3
 8012716:	69fb      	ldr	r3, [r7, #28]
 8012718:	4413      	add	r3, r2
 801271a:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 801271c:	89fb      	ldrh	r3, [r7, #14]
 801271e:	b2db      	uxtb	r3, r3
 8012720:	220d      	movs	r2, #13
 8012722:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8012726:	4618      	mov	r0, r3
 8012728:	f001 f82c 	bl	8013784 <CODEC_IO_Write>
 801272c:	4603      	mov	r3, r0
 801272e:	461a      	mov	r2, r3
 8012730:	69fb      	ldr	r3, [r7, #28]
 8012732:	4413      	add	r3, r2
 8012734:	61fb      	str	r3, [r7, #28]
      break;
 8012736:	e0cc      	b.n	80128d2 <wm8994_Init+0x6f2>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8012738:	89fb      	ldrh	r3, [r7, #14]
 801273a:	b2db      	uxtb	r3, r3
 801273c:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8012740:	2104      	movs	r1, #4
 8012742:	4618      	mov	r0, r3
 8012744:	f001 f81e 	bl	8013784 <CODEC_IO_Write>
 8012748:	4603      	mov	r3, r0
 801274a:	461a      	mov	r2, r3
 801274c:	69fb      	ldr	r3, [r7, #28]
 801274e:	4413      	add	r3, r2
 8012750:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8012752:	89fb      	ldrh	r3, [r7, #14]
 8012754:	b2db      	uxtb	r3, r3
 8012756:	22db      	movs	r2, #219	; 0xdb
 8012758:	f44f 6188 	mov.w	r1, #1088	; 0x440
 801275c:	4618      	mov	r0, r3
 801275e:	f001 f811 	bl	8013784 <CODEC_IO_Write>
 8012762:	4603      	mov	r3, r0
 8012764:	461a      	mov	r2, r3
 8012766:	69fb      	ldr	r3, [r7, #28]
 8012768:	4413      	add	r3, r2
 801276a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 801276c:	89fb      	ldrh	r3, [r7, #14]
 801276e:	b2db      	uxtb	r3, r3
 8012770:	f246 3250 	movw	r2, #25424	; 0x6350
 8012774:	2102      	movs	r1, #2
 8012776:	4618      	mov	r0, r3
 8012778:	f001 f804 	bl	8013784 <CODEC_IO_Write>
 801277c:	4603      	mov	r3, r0
 801277e:	461a      	mov	r2, r3
 8012780:	69fb      	ldr	r3, [r7, #28]
 8012782:	4413      	add	r3, r2
 8012784:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8012786:	89fb      	ldrh	r3, [r7, #14]
 8012788:	b2db      	uxtb	r3, r3
 801278a:	2202      	movs	r2, #2
 801278c:	f240 6106 	movw	r1, #1542	; 0x606
 8012790:	4618      	mov	r0, r3
 8012792:	f000 fff7 	bl	8013784 <CODEC_IO_Write>
 8012796:	4603      	mov	r3, r0
 8012798:	461a      	mov	r2, r3
 801279a:	69fb      	ldr	r3, [r7, #28]
 801279c:	4413      	add	r3, r2
 801279e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80127a0:	89fb      	ldrh	r3, [r7, #14]
 80127a2:	b2db      	uxtb	r3, r3
 80127a4:	2202      	movs	r2, #2
 80127a6:	f240 6107 	movw	r1, #1543	; 0x607
 80127aa:	4618      	mov	r0, r3
 80127ac:	f000 ffea 	bl	8013784 <CODEC_IO_Write>
 80127b0:	4603      	mov	r3, r0
 80127b2:	461a      	mov	r2, r3
 80127b4:	69fb      	ldr	r3, [r7, #28]
 80127b6:	4413      	add	r3, r2
 80127b8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80127ba:	89fb      	ldrh	r3, [r7, #14]
 80127bc:	b2db      	uxtb	r3, r3
 80127be:	220d      	movs	r2, #13
 80127c0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80127c4:	4618      	mov	r0, r3
 80127c6:	f000 ffdd 	bl	8013784 <CODEC_IO_Write>
 80127ca:	4603      	mov	r3, r0
 80127cc:	461a      	mov	r2, r3
 80127ce:	69fb      	ldr	r3, [r7, #28]
 80127d0:	4413      	add	r3, r2
 80127d2:	61fb      	str	r3, [r7, #28]
      break; 
 80127d4:	e07d      	b.n	80128d2 <wm8994_Init+0x6f2>
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80127d6:	89fb      	ldrh	r3, [r7, #14]
 80127d8:	b2db      	uxtb	r3, r3
 80127da:	f640 723c 	movw	r2, #3900	; 0xf3c
 80127de:	2104      	movs	r1, #4
 80127e0:	4618      	mov	r0, r3
 80127e2:	f000 ffcf 	bl	8013784 <CODEC_IO_Write>
 80127e6:	4603      	mov	r3, r0
 80127e8:	461a      	mov	r2, r3
 80127ea:	69fb      	ldr	r3, [r7, #28]
 80127ec:	4413      	add	r3, r2
 80127ee:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80127f0:	89fb      	ldrh	r3, [r7, #14]
 80127f2:	b2db      	uxtb	r3, r3
 80127f4:	22db      	movs	r2, #219	; 0xdb
 80127f6:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80127fa:	4618      	mov	r0, r3
 80127fc:	f000 ffc2 	bl	8013784 <CODEC_IO_Write>
 8012800:	4603      	mov	r3, r0
 8012802:	461a      	mov	r2, r3
 8012804:	69fb      	ldr	r3, [r7, #28]
 8012806:	4413      	add	r3, r2
 8012808:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 801280a:	89fb      	ldrh	r3, [r7, #14]
 801280c:	b2db      	uxtb	r3, r3
 801280e:	22db      	movs	r2, #219	; 0xdb
 8012810:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8012814:	4618      	mov	r0, r3
 8012816:	f000 ffb5 	bl	8013784 <CODEC_IO_Write>
 801281a:	4603      	mov	r3, r0
 801281c:	461a      	mov	r2, r3
 801281e:	69fb      	ldr	r3, [r7, #28]
 8012820:	4413      	add	r3, r2
 8012822:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8012824:	89fb      	ldrh	r3, [r7, #14]
 8012826:	b2db      	uxtb	r3, r3
 8012828:	f246 32a0 	movw	r2, #25504	; 0x63a0
 801282c:	2102      	movs	r1, #2
 801282e:	4618      	mov	r0, r3
 8012830:	f000 ffa8 	bl	8013784 <CODEC_IO_Write>
 8012834:	4603      	mov	r3, r0
 8012836:	461a      	mov	r2, r3
 8012838:	69fb      	ldr	r3, [r7, #28]
 801283a:	4413      	add	r3, r2
 801283c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 801283e:	89fb      	ldrh	r3, [r7, #14]
 8012840:	b2db      	uxtb	r3, r3
 8012842:	2202      	movs	r2, #2
 8012844:	f240 6106 	movw	r1, #1542	; 0x606
 8012848:	4618      	mov	r0, r3
 801284a:	f000 ff9b 	bl	8013784 <CODEC_IO_Write>
 801284e:	4603      	mov	r3, r0
 8012850:	461a      	mov	r2, r3
 8012852:	69fb      	ldr	r3, [r7, #28]
 8012854:	4413      	add	r3, r2
 8012856:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8012858:	89fb      	ldrh	r3, [r7, #14]
 801285a:	b2db      	uxtb	r3, r3
 801285c:	2202      	movs	r2, #2
 801285e:	f240 6107 	movw	r1, #1543	; 0x607
 8012862:	4618      	mov	r0, r3
 8012864:	f000 ff8e 	bl	8013784 <CODEC_IO_Write>
 8012868:	4603      	mov	r3, r0
 801286a:	461a      	mov	r2, r3
 801286c:	69fb      	ldr	r3, [r7, #28]
 801286e:	4413      	add	r3, r2
 8012870:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8012872:	89fb      	ldrh	r3, [r7, #14]
 8012874:	b2db      	uxtb	r3, r3
 8012876:	2202      	movs	r2, #2
 8012878:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 801287c:	4618      	mov	r0, r3
 801287e:	f000 ff81 	bl	8013784 <CODEC_IO_Write>
 8012882:	4603      	mov	r3, r0
 8012884:	461a      	mov	r2, r3
 8012886:	69fb      	ldr	r3, [r7, #28]
 8012888:	4413      	add	r3, r2
 801288a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 801288c:	89fb      	ldrh	r3, [r7, #14]
 801288e:	b2db      	uxtb	r3, r3
 8012890:	2202      	movs	r2, #2
 8012892:	f240 6109 	movw	r1, #1545	; 0x609
 8012896:	4618      	mov	r0, r3
 8012898:	f000 ff74 	bl	8013784 <CODEC_IO_Write>
 801289c:	4603      	mov	r3, r0
 801289e:	461a      	mov	r2, r3
 80128a0:	69fb      	ldr	r3, [r7, #28]
 80128a2:	4413      	add	r3, r2
 80128a4:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80128a6:	89fb      	ldrh	r3, [r7, #14]
 80128a8:	b2db      	uxtb	r3, r3
 80128aa:	220d      	movs	r2, #13
 80128ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80128b0:	4618      	mov	r0, r3
 80128b2:	f000 ff67 	bl	8013784 <CODEC_IO_Write>
 80128b6:	4603      	mov	r3, r0
 80128b8:	461a      	mov	r2, r3
 80128ba:	69fb      	ldr	r3, [r7, #28]
 80128bc:	4413      	add	r3, r2
 80128be:	61fb      	str	r3, [r7, #28]
      break;    
 80128c0:	e007      	b.n	80128d2 <wm8994_Init+0x6f2>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80128c2:	69fb      	ldr	r3, [r7, #28]
 80128c4:	3301      	adds	r3, #1
 80128c6:	61fb      	str	r3, [r7, #28]
      break;
 80128c8:	bf00      	nop
 80128ca:	e002      	b.n	80128d2 <wm8994_Init+0x6f2>
    }
  }
  else
  {
    inputEnabled = 0;
 80128cc:	4b95      	ldr	r3, [pc, #596]	; (8012b24 <wm8994_Init+0x944>)
 80128ce:	2200      	movs	r2, #0
 80128d0:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	f245 6222 	movw	r2, #22050	; 0x5622
 80128d8:	4293      	cmp	r3, r2
 80128da:	d076      	beq.n	80129ca <wm8994_Init+0x7ea>
 80128dc:	f245 6222 	movw	r2, #22050	; 0x5622
 80128e0:	4293      	cmp	r3, r2
 80128e2:	d80a      	bhi.n	80128fa <wm8994_Init+0x71a>
 80128e4:	f642 3211 	movw	r2, #11025	; 0x2b11
 80128e8:	4293      	cmp	r3, r2
 80128ea:	d060      	beq.n	80129ae <wm8994_Init+0x7ce>
 80128ec:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80128f0:	d025      	beq.n	801293e <wm8994_Init+0x75e>
 80128f2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80128f6:	d014      	beq.n	8012922 <wm8994_Init+0x742>
 80128f8:	e083      	b.n	8012a02 <wm8994_Init+0x822>
 80128fa:	f64a 4244 	movw	r2, #44100	; 0xac44
 80128fe:	4293      	cmp	r3, r2
 8012900:	d071      	beq.n	80129e6 <wm8994_Init+0x806>
 8012902:	f64a 4244 	movw	r2, #44100	; 0xac44
 8012906:	4293      	cmp	r3, r2
 8012908:	d803      	bhi.n	8012912 <wm8994_Init+0x732>
 801290a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 801290e:	d024      	beq.n	801295a <wm8994_Init+0x77a>
 8012910:	e077      	b.n	8012a02 <wm8994_Init+0x822>
 8012912:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8012916:	4293      	cmp	r3, r2
 8012918:	d02d      	beq.n	8012976 <wm8994_Init+0x796>
 801291a:	4a83      	ldr	r2, [pc, #524]	; (8012b28 <wm8994_Init+0x948>)
 801291c:	4293      	cmp	r3, r2
 801291e:	d038      	beq.n	8012992 <wm8994_Init+0x7b2>
 8012920:	e06f      	b.n	8012a02 <wm8994_Init+0x822>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8012922:	89fb      	ldrh	r3, [r7, #14]
 8012924:	b2db      	uxtb	r3, r3
 8012926:	2203      	movs	r2, #3
 8012928:	f44f 7104 	mov.w	r1, #528	; 0x210
 801292c:	4618      	mov	r0, r3
 801292e:	f000 ff29 	bl	8013784 <CODEC_IO_Write>
 8012932:	4603      	mov	r3, r0
 8012934:	461a      	mov	r2, r3
 8012936:	69fb      	ldr	r3, [r7, #28]
 8012938:	4413      	add	r3, r2
 801293a:	61fb      	str	r3, [r7, #28]
    break;
 801293c:	e06f      	b.n	8012a1e <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 801293e:	89fb      	ldrh	r3, [r7, #14]
 8012940:	b2db      	uxtb	r3, r3
 8012942:	2233      	movs	r2, #51	; 0x33
 8012944:	f44f 7104 	mov.w	r1, #528	; 0x210
 8012948:	4618      	mov	r0, r3
 801294a:	f000 ff1b 	bl	8013784 <CODEC_IO_Write>
 801294e:	4603      	mov	r3, r0
 8012950:	461a      	mov	r2, r3
 8012952:	69fb      	ldr	r3, [r7, #28]
 8012954:	4413      	add	r3, r2
 8012956:	61fb      	str	r3, [r7, #28]
    break;
 8012958:	e061      	b.n	8012a1e <wm8994_Init+0x83e>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 801295a:	89fb      	ldrh	r3, [r7, #14]
 801295c:	b2db      	uxtb	r3, r3
 801295e:	2263      	movs	r2, #99	; 0x63
 8012960:	f44f 7104 	mov.w	r1, #528	; 0x210
 8012964:	4618      	mov	r0, r3
 8012966:	f000 ff0d 	bl	8013784 <CODEC_IO_Write>
 801296a:	4603      	mov	r3, r0
 801296c:	461a      	mov	r2, r3
 801296e:	69fb      	ldr	r3, [r7, #28]
 8012970:	4413      	add	r3, r2
 8012972:	61fb      	str	r3, [r7, #28]
    break;
 8012974:	e053      	b.n	8012a1e <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8012976:	89fb      	ldrh	r3, [r7, #14]
 8012978:	b2db      	uxtb	r3, r3
 801297a:	2283      	movs	r2, #131	; 0x83
 801297c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8012980:	4618      	mov	r0, r3
 8012982:	f000 feff 	bl	8013784 <CODEC_IO_Write>
 8012986:	4603      	mov	r3, r0
 8012988:	461a      	mov	r2, r3
 801298a:	69fb      	ldr	r3, [r7, #28]
 801298c:	4413      	add	r3, r2
 801298e:	61fb      	str	r3, [r7, #28]
    break;
 8012990:	e045      	b.n	8012a1e <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8012992:	89fb      	ldrh	r3, [r7, #14]
 8012994:	b2db      	uxtb	r3, r3
 8012996:	22a3      	movs	r2, #163	; 0xa3
 8012998:	f44f 7104 	mov.w	r1, #528	; 0x210
 801299c:	4618      	mov	r0, r3
 801299e:	f000 fef1 	bl	8013784 <CODEC_IO_Write>
 80129a2:	4603      	mov	r3, r0
 80129a4:	461a      	mov	r2, r3
 80129a6:	69fb      	ldr	r3, [r7, #28]
 80129a8:	4413      	add	r3, r2
 80129aa:	61fb      	str	r3, [r7, #28]
    break;
 80129ac:	e037      	b.n	8012a1e <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80129ae:	89fb      	ldrh	r3, [r7, #14]
 80129b0:	b2db      	uxtb	r3, r3
 80129b2:	2213      	movs	r2, #19
 80129b4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80129b8:	4618      	mov	r0, r3
 80129ba:	f000 fee3 	bl	8013784 <CODEC_IO_Write>
 80129be:	4603      	mov	r3, r0
 80129c0:	461a      	mov	r2, r3
 80129c2:	69fb      	ldr	r3, [r7, #28]
 80129c4:	4413      	add	r3, r2
 80129c6:	61fb      	str	r3, [r7, #28]
    break;
 80129c8:	e029      	b.n	8012a1e <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80129ca:	89fb      	ldrh	r3, [r7, #14]
 80129cc:	b2db      	uxtb	r3, r3
 80129ce:	2243      	movs	r2, #67	; 0x43
 80129d0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80129d4:	4618      	mov	r0, r3
 80129d6:	f000 fed5 	bl	8013784 <CODEC_IO_Write>
 80129da:	4603      	mov	r3, r0
 80129dc:	461a      	mov	r2, r3
 80129de:	69fb      	ldr	r3, [r7, #28]
 80129e0:	4413      	add	r3, r2
 80129e2:	61fb      	str	r3, [r7, #28]
    break;
 80129e4:	e01b      	b.n	8012a1e <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80129e6:	89fb      	ldrh	r3, [r7, #14]
 80129e8:	b2db      	uxtb	r3, r3
 80129ea:	2273      	movs	r2, #115	; 0x73
 80129ec:	f44f 7104 	mov.w	r1, #528	; 0x210
 80129f0:	4618      	mov	r0, r3
 80129f2:	f000 fec7 	bl	8013784 <CODEC_IO_Write>
 80129f6:	4603      	mov	r3, r0
 80129f8:	461a      	mov	r2, r3
 80129fa:	69fb      	ldr	r3, [r7, #28]
 80129fc:	4413      	add	r3, r2
 80129fe:	61fb      	str	r3, [r7, #28]
    break; 
 8012a00:	e00d      	b.n	8012a1e <wm8994_Init+0x83e>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8012a02:	89fb      	ldrh	r3, [r7, #14]
 8012a04:	b2db      	uxtb	r3, r3
 8012a06:	2283      	movs	r2, #131	; 0x83
 8012a08:	f44f 7104 	mov.w	r1, #528	; 0x210
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f000 feb9 	bl	8013784 <CODEC_IO_Write>
 8012a12:	4603      	mov	r3, r0
 8012a14:	461a      	mov	r2, r3
 8012a16:	69fb      	ldr	r3, [r7, #28]
 8012a18:	4413      	add	r3, r2
 8012a1a:	61fb      	str	r3, [r7, #28]
    break; 
 8012a1c:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8012a1e:	8afb      	ldrh	r3, [r7, #22]
 8012a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012a24:	d10e      	bne.n	8012a44 <wm8994_Init+0x864>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8012a26:	89fb      	ldrh	r3, [r7, #14]
 8012a28:	b2db      	uxtb	r3, r3
 8012a2a:	f244 0218 	movw	r2, #16408	; 0x4018
 8012a2e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8012a32:	4618      	mov	r0, r3
 8012a34:	f000 fea6 	bl	8013784 <CODEC_IO_Write>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	461a      	mov	r2, r3
 8012a3c:	69fb      	ldr	r3, [r7, #28]
 8012a3e:	4413      	add	r3, r2
 8012a40:	61fb      	str	r3, [r7, #28]
 8012a42:	e00d      	b.n	8012a60 <wm8994_Init+0x880>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8012a44:	89fb      	ldrh	r3, [r7, #14]
 8012a46:	b2db      	uxtb	r3, r3
 8012a48:	f244 0210 	movw	r2, #16400	; 0x4010
 8012a4c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8012a50:	4618      	mov	r0, r3
 8012a52:	f000 fe97 	bl	8013784 <CODEC_IO_Write>
 8012a56:	4603      	mov	r3, r0
 8012a58:	461a      	mov	r2, r3
 8012a5a:	69fb      	ldr	r3, [r7, #28]
 8012a5c:	4413      	add	r3, r2
 8012a5e:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8012a60:	89fb      	ldrh	r3, [r7, #14]
 8012a62:	b2db      	uxtb	r3, r3
 8012a64:	2200      	movs	r2, #0
 8012a66:	f240 3102 	movw	r1, #770	; 0x302
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f000 fe8a 	bl	8013784 <CODEC_IO_Write>
 8012a70:	4603      	mov	r3, r0
 8012a72:	461a      	mov	r2, r3
 8012a74:	69fb      	ldr	r3, [r7, #28]
 8012a76:	4413      	add	r3, r2
 8012a78:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8012a7a:	89fb      	ldrh	r3, [r7, #14]
 8012a7c:	b2db      	uxtb	r3, r3
 8012a7e:	220a      	movs	r2, #10
 8012a80:	f44f 7102 	mov.w	r1, #520	; 0x208
 8012a84:	4618      	mov	r0, r3
 8012a86:	f000 fe7d 	bl	8013784 <CODEC_IO_Write>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	461a      	mov	r2, r3
 8012a8e:	69fb      	ldr	r3, [r7, #28]
 8012a90:	4413      	add	r3, r2
 8012a92:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8012a94:	89fb      	ldrh	r3, [r7, #14]
 8012a96:	b2db      	uxtb	r3, r3
 8012a98:	2201      	movs	r2, #1
 8012a9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f000 fe70 	bl	8013784 <CODEC_IO_Write>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	461a      	mov	r2, r3
 8012aa8:	69fb      	ldr	r3, [r7, #28]
 8012aaa:	4413      	add	r3, r2
 8012aac:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8012aae:	8b3b      	ldrh	r3, [r7, #24]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	f000 817b 	beq.w	8012dac <wm8994_Init+0xbcc>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8012ab6:	8b3b      	ldrh	r3, [r7, #24]
 8012ab8:	2b02      	cmp	r3, #2
 8012aba:	d157      	bne.n	8012b6c <wm8994_Init+0x98c>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8012abc:	89fb      	ldrh	r3, [r7, #14]
 8012abe:	b2db      	uxtb	r3, r3
 8012ac0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012ac4:	212d      	movs	r1, #45	; 0x2d
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	f000 fe5c 	bl	8013784 <CODEC_IO_Write>
 8012acc:	4603      	mov	r3, r0
 8012ace:	461a      	mov	r2, r3
 8012ad0:	69fb      	ldr	r3, [r7, #28]
 8012ad2:	4413      	add	r3, r2
 8012ad4:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8012ad6:	89fb      	ldrh	r3, [r7, #14]
 8012ad8:	b2db      	uxtb	r3, r3
 8012ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012ade:	212e      	movs	r1, #46	; 0x2e
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	f000 fe4f 	bl	8013784 <CODEC_IO_Write>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	461a      	mov	r2, r3
 8012aea:	69fb      	ldr	r3, [r7, #28]
 8012aec:	4413      	add	r3, r2
 8012aee:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8012af0:	4b0e      	ldr	r3, [pc, #56]	; (8012b2c <wm8994_Init+0x94c>)
 8012af2:	781b      	ldrb	r3, [r3, #0]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d01b      	beq.n	8012b30 <wm8994_Init+0x950>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8012af8:	89fb      	ldrh	r3, [r7, #14]
 8012afa:	b2db      	uxtb	r3, r3
 8012afc:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8012b00:	f44f 7188 	mov.w	r1, #272	; 0x110
 8012b04:	4618      	mov	r0, r3
 8012b06:	f000 fe3d 	bl	8013784 <CODEC_IO_Write>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	461a      	mov	r2, r3
 8012b0e:	69fb      	ldr	r3, [r7, #28]
 8012b10:	4413      	add	r3, r2
 8012b12:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8012b14:	4b05      	ldr	r3, [pc, #20]	; (8012b2c <wm8994_Init+0x94c>)
 8012b16:	2200      	movs	r2, #0
 8012b18:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8012b1a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8012b1e:	f7fd fa1d 	bl	800ff5c <AUDIO_IO_Delay>
 8012b22:	e016      	b.n	8012b52 <wm8994_Init+0x972>
 8012b24:	20004cd0 	.word	0x20004cd0
 8012b28:	00017700 	.word	0x00017700
 8012b2c:	20000054 	.word	0x20000054
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8012b30:	89fb      	ldrh	r3, [r7, #14]
 8012b32:	b2db      	uxtb	r3, r3
 8012b34:	f248 1208 	movw	r2, #33032	; 0x8108
 8012b38:	f44f 7188 	mov.w	r1, #272	; 0x110
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f000 fe21 	bl	8013784 <CODEC_IO_Write>
 8012b42:	4603      	mov	r3, r0
 8012b44:	461a      	mov	r2, r3
 8012b46:	69fb      	ldr	r3, [r7, #28]
 8012b48:	4413      	add	r3, r2
 8012b4a:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8012b4c:	2032      	movs	r0, #50	; 0x32
 8012b4e:	f7fd fa05 	bl	800ff5c <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8012b52:	89fb      	ldrh	r3, [r7, #14]
 8012b54:	b2db      	uxtb	r3, r3
 8012b56:	2200      	movs	r2, #0
 8012b58:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f000 fe11 	bl	8013784 <CODEC_IO_Write>
 8012b62:	4603      	mov	r3, r0
 8012b64:	461a      	mov	r2, r3
 8012b66:	69fb      	ldr	r3, [r7, #28]
 8012b68:	4413      	add	r3, r2
 8012b6a:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8012b6c:	89fb      	ldrh	r3, [r7, #14]
 8012b6e:	b2db      	uxtb	r3, r3
 8012b70:	f44f 7240 	mov.w	r2, #768	; 0x300
 8012b74:	2103      	movs	r1, #3
 8012b76:	4618      	mov	r0, r3
 8012b78:	f000 fe04 	bl	8013784 <CODEC_IO_Write>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	461a      	mov	r2, r3
 8012b80:	69fb      	ldr	r3, [r7, #28]
 8012b82:	4413      	add	r3, r2
 8012b84:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8012b86:	89fb      	ldrh	r3, [r7, #14]
 8012b88:	b2db      	uxtb	r3, r3
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	2122      	movs	r1, #34	; 0x22
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f000 fdf8 	bl	8013784 <CODEC_IO_Write>
 8012b94:	4603      	mov	r3, r0
 8012b96:	461a      	mov	r2, r3
 8012b98:	69fb      	ldr	r3, [r7, #28]
 8012b9a:	4413      	add	r3, r2
 8012b9c:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8012b9e:	89fb      	ldrh	r3, [r7, #14]
 8012ba0:	b2db      	uxtb	r3, r3
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	2123      	movs	r1, #35	; 0x23
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f000 fdec 	bl	8013784 <CODEC_IO_Write>
 8012bac:	4603      	mov	r3, r0
 8012bae:	461a      	mov	r2, r3
 8012bb0:	69fb      	ldr	r3, [r7, #28]
 8012bb2:	4413      	add	r3, r2
 8012bb4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8012bb6:	89fb      	ldrh	r3, [r7, #14]
 8012bb8:	b2db      	uxtb	r3, r3
 8012bba:	f44f 7240 	mov.w	r2, #768	; 0x300
 8012bbe:	2136      	movs	r1, #54	; 0x36
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f000 fddf 	bl	8013784 <CODEC_IO_Write>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	461a      	mov	r2, r3
 8012bca:	69fb      	ldr	r3, [r7, #28]
 8012bcc:	4413      	add	r3, r2
 8012bce:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8012bd0:	89fb      	ldrh	r3, [r7, #14]
 8012bd2:	b2db      	uxtb	r3, r3
 8012bd4:	f243 0203 	movw	r2, #12291	; 0x3003
 8012bd8:	2101      	movs	r1, #1
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f000 fdd2 	bl	8013784 <CODEC_IO_Write>
 8012be0:	4603      	mov	r3, r0
 8012be2:	461a      	mov	r2, r3
 8012be4:	69fb      	ldr	r3, [r7, #28]
 8012be6:	4413      	add	r3, r2
 8012be8:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8012bea:	8afb      	ldrh	r3, [r7, #22]
 8012bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012bf0:	d10d      	bne.n	8012c0e <wm8994_Init+0xa2e>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8012bf2:	89fb      	ldrh	r3, [r7, #14]
 8012bf4:	b2db      	uxtb	r3, r3
 8012bf6:	f240 2205 	movw	r2, #517	; 0x205
 8012bfa:	2151      	movs	r1, #81	; 0x51
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f000 fdc1 	bl	8013784 <CODEC_IO_Write>
 8012c02:	4603      	mov	r3, r0
 8012c04:	461a      	mov	r2, r3
 8012c06:	69fb      	ldr	r3, [r7, #28]
 8012c08:	4413      	add	r3, r2
 8012c0a:	61fb      	str	r3, [r7, #28]
 8012c0c:	e00b      	b.n	8012c26 <wm8994_Init+0xa46>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8012c0e:	89fb      	ldrh	r3, [r7, #14]
 8012c10:	b2db      	uxtb	r3, r3
 8012c12:	2205      	movs	r2, #5
 8012c14:	2151      	movs	r1, #81	; 0x51
 8012c16:	4618      	mov	r0, r3
 8012c18:	f000 fdb4 	bl	8013784 <CODEC_IO_Write>
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	461a      	mov	r2, r3
 8012c20:	69fb      	ldr	r3, [r7, #28]
 8012c22:	4413      	add	r3, r2
 8012c24:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8012c26:	8b7b      	ldrh	r3, [r7, #26]
 8012c28:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8012c2c:	f043 0303 	orr.w	r3, r3, #3
 8012c30:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8012c32:	89fb      	ldrh	r3, [r7, #14]
 8012c34:	b2db      	uxtb	r3, r3
 8012c36:	8b7a      	ldrh	r2, [r7, #26]
 8012c38:	2101      	movs	r1, #1
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f000 fda2 	bl	8013784 <CODEC_IO_Write>
 8012c40:	4603      	mov	r3, r0
 8012c42:	461a      	mov	r2, r3
 8012c44:	69fb      	ldr	r3, [r7, #28]
 8012c46:	4413      	add	r3, r2
 8012c48:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8012c4a:	89fb      	ldrh	r3, [r7, #14]
 8012c4c:	b2db      	uxtb	r3, r3
 8012c4e:	2222      	movs	r2, #34	; 0x22
 8012c50:	2160      	movs	r1, #96	; 0x60
 8012c52:	4618      	mov	r0, r3
 8012c54:	f000 fd96 	bl	8013784 <CODEC_IO_Write>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	461a      	mov	r2, r3
 8012c5c:	69fb      	ldr	r3, [r7, #28]
 8012c5e:	4413      	add	r3, r2
 8012c60:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8012c62:	89fb      	ldrh	r3, [r7, #14]
 8012c64:	b2db      	uxtb	r3, r3
 8012c66:	f649 7225 	movw	r2, #40741	; 0x9f25
 8012c6a:	214c      	movs	r1, #76	; 0x4c
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f000 fd89 	bl	8013784 <CODEC_IO_Write>
 8012c72:	4603      	mov	r3, r0
 8012c74:	461a      	mov	r2, r3
 8012c76:	69fb      	ldr	r3, [r7, #28]
 8012c78:	4413      	add	r3, r2
 8012c7a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8012c7c:	200f      	movs	r0, #15
 8012c7e:	f7fd f96d 	bl	800ff5c <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8012c82:	89fb      	ldrh	r3, [r7, #14]
 8012c84:	b2db      	uxtb	r3, r3
 8012c86:	2201      	movs	r2, #1
 8012c88:	212d      	movs	r1, #45	; 0x2d
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f000 fd7a 	bl	8013784 <CODEC_IO_Write>
 8012c90:	4603      	mov	r3, r0
 8012c92:	461a      	mov	r2, r3
 8012c94:	69fb      	ldr	r3, [r7, #28]
 8012c96:	4413      	add	r3, r2
 8012c98:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8012c9a:	89fb      	ldrh	r3, [r7, #14]
 8012c9c:	b2db      	uxtb	r3, r3
 8012c9e:	2201      	movs	r2, #1
 8012ca0:	212e      	movs	r1, #46	; 0x2e
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f000 fd6e 	bl	8013784 <CODEC_IO_Write>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	461a      	mov	r2, r3
 8012cac:	69fb      	ldr	r3, [r7, #28]
 8012cae:	4413      	add	r3, r2
 8012cb0:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8012cb2:	89fb      	ldrh	r3, [r7, #14]
 8012cb4:	b2db      	uxtb	r3, r3
 8012cb6:	f44f 724c 	mov.w	r2, #816	; 0x330
 8012cba:	2103      	movs	r1, #3
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f000 fd61 	bl	8013784 <CODEC_IO_Write>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	461a      	mov	r2, r3
 8012cc6:	69fb      	ldr	r3, [r7, #28]
 8012cc8:	4413      	add	r3, r2
 8012cca:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8012ccc:	89fb      	ldrh	r3, [r7, #14]
 8012cce:	b2db      	uxtb	r3, r3
 8012cd0:	2233      	movs	r2, #51	; 0x33
 8012cd2:	2154      	movs	r1, #84	; 0x54
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f000 fd55 	bl	8013784 <CODEC_IO_Write>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	461a      	mov	r2, r3
 8012cde:	69fb      	ldr	r3, [r7, #28]
 8012ce0:	4413      	add	r3, r2
 8012ce2:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8012ce4:	f240 1001 	movw	r0, #257	; 0x101
 8012ce8:	f7fd f938 	bl	800ff5c <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8012cec:	89fb      	ldrh	r3, [r7, #14]
 8012cee:	b2db      	uxtb	r3, r3
 8012cf0:	22ee      	movs	r2, #238	; 0xee
 8012cf2:	2160      	movs	r1, #96	; 0x60
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f000 fd45 	bl	8013784 <CODEC_IO_Write>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	461a      	mov	r2, r3
 8012cfe:	69fb      	ldr	r3, [r7, #28]
 8012d00:	4413      	add	r3, r2
 8012d02:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8012d04:	89fb      	ldrh	r3, [r7, #14]
 8012d06:	b2db      	uxtb	r3, r3
 8012d08:	22c0      	movs	r2, #192	; 0xc0
 8012d0a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8012d0e:	4618      	mov	r0, r3
 8012d10:	f000 fd38 	bl	8013784 <CODEC_IO_Write>
 8012d14:	4603      	mov	r3, r0
 8012d16:	461a      	mov	r2, r3
 8012d18:	69fb      	ldr	r3, [r7, #28]
 8012d1a:	4413      	add	r3, r2
 8012d1c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8012d1e:	89fb      	ldrh	r3, [r7, #14]
 8012d20:	b2db      	uxtb	r3, r3
 8012d22:	22c0      	movs	r2, #192	; 0xc0
 8012d24:	f240 6111 	movw	r1, #1553	; 0x611
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f000 fd2b 	bl	8013784 <CODEC_IO_Write>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	461a      	mov	r2, r3
 8012d32:	69fb      	ldr	r3, [r7, #28]
 8012d34:	4413      	add	r3, r2
 8012d36:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8012d38:	89fb      	ldrh	r3, [r7, #14]
 8012d3a:	b2db      	uxtb	r3, r3
 8012d3c:	2210      	movs	r2, #16
 8012d3e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8012d42:	4618      	mov	r0, r3
 8012d44:	f000 fd1e 	bl	8013784 <CODEC_IO_Write>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	69fb      	ldr	r3, [r7, #28]
 8012d4e:	4413      	add	r3, r2
 8012d50:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8012d52:	89fb      	ldrh	r3, [r7, #14]
 8012d54:	b2db      	uxtb	r3, r3
 8012d56:	22c0      	movs	r2, #192	; 0xc0
 8012d58:	f240 6112 	movw	r1, #1554	; 0x612
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f000 fd11 	bl	8013784 <CODEC_IO_Write>
 8012d62:	4603      	mov	r3, r0
 8012d64:	461a      	mov	r2, r3
 8012d66:	69fb      	ldr	r3, [r7, #28]
 8012d68:	4413      	add	r3, r2
 8012d6a:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8012d6c:	89fb      	ldrh	r3, [r7, #14]
 8012d6e:	b2db      	uxtb	r3, r3
 8012d70:	22c0      	movs	r2, #192	; 0xc0
 8012d72:	f240 6113 	movw	r1, #1555	; 0x613
 8012d76:	4618      	mov	r0, r3
 8012d78:	f000 fd04 	bl	8013784 <CODEC_IO_Write>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	461a      	mov	r2, r3
 8012d80:	69fb      	ldr	r3, [r7, #28]
 8012d82:	4413      	add	r3, r2
 8012d84:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8012d86:	89fb      	ldrh	r3, [r7, #14]
 8012d88:	b2db      	uxtb	r3, r3
 8012d8a:	2210      	movs	r2, #16
 8012d8c:	f240 4122 	movw	r1, #1058	; 0x422
 8012d90:	4618      	mov	r0, r3
 8012d92:	f000 fcf7 	bl	8013784 <CODEC_IO_Write>
 8012d96:	4603      	mov	r3, r0
 8012d98:	461a      	mov	r2, r3
 8012d9a:	69fb      	ldr	r3, [r7, #28]
 8012d9c:	4413      	add	r3, r2
 8012d9e:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8012da0:	7afa      	ldrb	r2, [r7, #11]
 8012da2:	89fb      	ldrh	r3, [r7, #14]
 8012da4:	4611      	mov	r1, r2
 8012da6:	4618      	mov	r0, r3
 8012da8:	f000 f984 	bl	80130b4 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8012dac:	8afb      	ldrh	r3, [r7, #22]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	f000 80a6 	beq.w	8012f00 <wm8994_Init+0xd20>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8012db4:	8afb      	ldrh	r3, [r7, #22]
 8012db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012dba:	d003      	beq.n	8012dc4 <wm8994_Init+0xbe4>
 8012dbc:	8afb      	ldrh	r3, [r7, #22]
 8012dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012dc2:	d12b      	bne.n	8012e1c <wm8994_Init+0xc3c>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8012dc4:	8b7b      	ldrh	r3, [r7, #26]
 8012dc6:	f043 0313 	orr.w	r3, r3, #19
 8012dca:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8012dcc:	89fb      	ldrh	r3, [r7, #14]
 8012dce:	b2db      	uxtb	r3, r3
 8012dd0:	8b7a      	ldrh	r2, [r7, #26]
 8012dd2:	2101      	movs	r1, #1
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f000 fcd5 	bl	8013784 <CODEC_IO_Write>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	461a      	mov	r2, r3
 8012dde:	69fb      	ldr	r3, [r7, #28]
 8012de0:	4413      	add	r3, r2
 8012de2:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8012de4:	89fb      	ldrh	r3, [r7, #14]
 8012de6:	b2db      	uxtb	r3, r3
 8012de8:	2202      	movs	r2, #2
 8012dea:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8012dee:	4618      	mov	r0, r3
 8012df0:	f000 fcc8 	bl	8013784 <CODEC_IO_Write>
 8012df4:	4603      	mov	r3, r0
 8012df6:	461a      	mov	r2, r3
 8012df8:	69fb      	ldr	r3, [r7, #28]
 8012dfa:	4413      	add	r3, r2
 8012dfc:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8012dfe:	89fb      	ldrh	r3, [r7, #14]
 8012e00:	b2db      	uxtb	r3, r3
 8012e02:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8012e06:	f240 4111 	movw	r1, #1041	; 0x411
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f000 fcba 	bl	8013784 <CODEC_IO_Write>
 8012e10:	4603      	mov	r3, r0
 8012e12:	461a      	mov	r2, r3
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	4413      	add	r3, r2
 8012e18:	61fb      	str	r3, [r7, #28]
 8012e1a:	e06b      	b.n	8012ef4 <wm8994_Init+0xd14>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8012e1c:	8afb      	ldrh	r3, [r7, #22]
 8012e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012e22:	d139      	bne.n	8012e98 <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8012e24:	8b7b      	ldrh	r3, [r7, #26]
 8012e26:	f043 0313 	orr.w	r3, r3, #19
 8012e2a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8012e2c:	89fb      	ldrh	r3, [r7, #14]
 8012e2e:	b2db      	uxtb	r3, r3
 8012e30:	8b7a      	ldrh	r2, [r7, #26]
 8012e32:	2101      	movs	r1, #1
 8012e34:	4618      	mov	r0, r3
 8012e36:	f000 fca5 	bl	8013784 <CODEC_IO_Write>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	461a      	mov	r2, r3
 8012e3e:	69fb      	ldr	r3, [r7, #28]
 8012e40:	4413      	add	r3, r2
 8012e42:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8012e44:	89fb      	ldrh	r3, [r7, #14]
 8012e46:	b2db      	uxtb	r3, r3
 8012e48:	2202      	movs	r2, #2
 8012e4a:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f000 fc98 	bl	8013784 <CODEC_IO_Write>
 8012e54:	4603      	mov	r3, r0
 8012e56:	461a      	mov	r2, r3
 8012e58:	69fb      	ldr	r3, [r7, #28]
 8012e5a:	4413      	add	r3, r2
 8012e5c:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8012e5e:	89fb      	ldrh	r3, [r7, #14]
 8012e60:	b2db      	uxtb	r3, r3
 8012e62:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8012e66:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f000 fc8a 	bl	8013784 <CODEC_IO_Write>
 8012e70:	4603      	mov	r3, r0
 8012e72:	461a      	mov	r2, r3
 8012e74:	69fb      	ldr	r3, [r7, #28]
 8012e76:	4413      	add	r3, r2
 8012e78:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8012e7a:	89fb      	ldrh	r3, [r7, #14]
 8012e7c:	b2db      	uxtb	r3, r3
 8012e7e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8012e82:	f240 4111 	movw	r1, #1041	; 0x411
 8012e86:	4618      	mov	r0, r3
 8012e88:	f000 fc7c 	bl	8013784 <CODEC_IO_Write>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	461a      	mov	r2, r3
 8012e90:	69fb      	ldr	r3, [r7, #28]
 8012e92:	4413      	add	r3, r2
 8012e94:	61fb      	str	r3, [r7, #28]
 8012e96:	e02d      	b.n	8012ef4 <wm8994_Init+0xd14>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8012e98:	8afb      	ldrh	r3, [r7, #22]
 8012e9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012e9e:	d003      	beq.n	8012ea8 <wm8994_Init+0xcc8>
 8012ea0:	8afb      	ldrh	r3, [r7, #22]
 8012ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012ea6:	d125      	bne.n	8012ef4 <wm8994_Init+0xd14>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8012ea8:	89fb      	ldrh	r3, [r7, #14]
 8012eaa:	b2db      	uxtb	r3, r3
 8012eac:	220b      	movs	r2, #11
 8012eae:	2118      	movs	r1, #24
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f000 fc67 	bl	8013784 <CODEC_IO_Write>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	461a      	mov	r2, r3
 8012eba:	69fb      	ldr	r3, [r7, #28]
 8012ebc:	4413      	add	r3, r2
 8012ebe:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8012ec0:	89fb      	ldrh	r3, [r7, #14]
 8012ec2:	b2db      	uxtb	r3, r3
 8012ec4:	220b      	movs	r2, #11
 8012ec6:	211a      	movs	r1, #26
 8012ec8:	4618      	mov	r0, r3
 8012eca:	f000 fc5b 	bl	8013784 <CODEC_IO_Write>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	461a      	mov	r2, r3
 8012ed2:	69fb      	ldr	r3, [r7, #28]
 8012ed4:	4413      	add	r3, r2
 8012ed6:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8012ed8:	89fb      	ldrh	r3, [r7, #14]
 8012eda:	b2db      	uxtb	r3, r3
 8012edc:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8012ee0:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f000 fc4d 	bl	8013784 <CODEC_IO_Write>
 8012eea:	4603      	mov	r3, r0
 8012eec:	461a      	mov	r2, r3
 8012eee:	69fb      	ldr	r3, [r7, #28]
 8012ef0:	4413      	add	r3, r2
 8012ef2:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8012ef4:	7afa      	ldrb	r2, [r7, #11]
 8012ef6:	89fb      	ldrh	r3, [r7, #14]
 8012ef8:	4611      	mov	r1, r2
 8012efa:	4618      	mov	r0, r3
 8012efc:	f000 f8da 	bl	80130b4 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8012f00:	69fb      	ldr	r3, [r7, #28]
}
 8012f02:	4618      	mov	r0, r3
 8012f04:	3720      	adds	r7, #32
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
 8012f0a:	bf00      	nop

08012f0c <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8012f10:	f7fc ffc6 	bl	800fea0 <AUDIO_IO_DeInit>
}
 8012f14:	bf00      	nop
 8012f16:	bd80      	pop	{r7, pc}

08012f18 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b082      	sub	sp, #8
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	4603      	mov	r3, r0
 8012f20:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8012f22:	f7fc ffb3 	bl	800fe8c <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8012f26:	88fb      	ldrh	r3, [r7, #6]
 8012f28:	b2db      	uxtb	r3, r3
 8012f2a:	2100      	movs	r1, #0
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f7fc ffe9 	bl	800ff04 <AUDIO_IO_Read>
 8012f32:	4603      	mov	r3, r0
}
 8012f34:	4618      	mov	r0, r3
 8012f36:	3708      	adds	r7, #8
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}

08012f3c <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b084      	sub	sp, #16
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	4603      	mov	r3, r0
 8012f44:	6039      	str	r1, [r7, #0]
 8012f46:	80fb      	strh	r3, [r7, #6]
 8012f48:	4613      	mov	r3, r2
 8012f4a:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8012f50:	88fb      	ldrh	r3, [r7, #6]
 8012f52:	2100      	movs	r1, #0
 8012f54:	4618      	mov	r0, r3
 8012f56:	f000 f9d1 	bl	80132fc <wm8994_SetMute>
 8012f5a:	4602      	mov	r2, r0
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	4413      	add	r3, r2
 8012f60:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8012f62:	68fb      	ldr	r3, [r7, #12]
}
 8012f64:	4618      	mov	r0, r3
 8012f66:	3710      	adds	r7, #16
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bd80      	pop	{r7, pc}

08012f6c <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b084      	sub	sp, #16
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	4603      	mov	r3, r0
 8012f74:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8012f76:	2300      	movs	r3, #0
 8012f78:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8012f7a:	88fb      	ldrh	r3, [r7, #6]
 8012f7c:	2101      	movs	r1, #1
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f000 f9bc 	bl	80132fc <wm8994_SetMute>
 8012f84:	4602      	mov	r2, r0
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	4413      	add	r3, r2
 8012f8a:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8012f8c:	88fb      	ldrh	r3, [r7, #6]
 8012f8e:	b2db      	uxtb	r3, r3
 8012f90:	2201      	movs	r2, #1
 8012f92:	2102      	movs	r1, #2
 8012f94:	4618      	mov	r0, r3
 8012f96:	f000 fbf5 	bl	8013784 <CODEC_IO_Write>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	461a      	mov	r2, r3
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	4413      	add	r3, r2
 8012fa2:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8012fa4:	68fb      	ldr	r3, [r7, #12]
}
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	3710      	adds	r7, #16
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd80      	pop	{r7, pc}

08012fae <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8012fae:	b580      	push	{r7, lr}
 8012fb0:	b084      	sub	sp, #16
 8012fb2:	af00      	add	r7, sp, #0
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8012fb8:	2300      	movs	r3, #0
 8012fba:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8012fbc:	88fb      	ldrh	r3, [r7, #6]
 8012fbe:	2100      	movs	r1, #0
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f000 f99b 	bl	80132fc <wm8994_SetMute>
 8012fc6:	4602      	mov	r2, r0
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	4413      	add	r3, r2
 8012fcc:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8012fce:	68fb      	ldr	r3, [r7, #12]
}
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	3710      	adds	r7, #16
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}

08012fd8 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b084      	sub	sp, #16
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	4603      	mov	r3, r0
 8012fe0:	6039      	str	r1, [r7, #0]
 8012fe2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8012fe8:	4b31      	ldr	r3, [pc, #196]	; (80130b0 <wm8994_Stop+0xd8>)
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d05a      	beq.n	80130a6 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8012ff0:	88fb      	ldrh	r3, [r7, #6]
 8012ff2:	2101      	movs	r1, #1
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f000 f981 	bl	80132fc <wm8994_SetMute>
 8012ffa:	4602      	mov	r2, r0
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	4413      	add	r3, r2
 8013000:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	2b02      	cmp	r3, #2
 8013006:	d04e      	beq.n	80130a6 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8013008:	88fb      	ldrh	r3, [r7, #6]
 801300a:	b2db      	uxtb	r3, r3
 801300c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013010:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8013014:	4618      	mov	r0, r3
 8013016:	f000 fbb5 	bl	8013784 <CODEC_IO_Write>
 801301a:	4603      	mov	r3, r0
 801301c:	461a      	mov	r2, r3
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	4413      	add	r3, r2
 8013022:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8013024:	88fb      	ldrh	r3, [r7, #6]
 8013026:	b2db      	uxtb	r3, r3
 8013028:	f44f 7200 	mov.w	r2, #512	; 0x200
 801302c:	f240 4122 	movw	r1, #1058	; 0x422
 8013030:	4618      	mov	r0, r3
 8013032:	f000 fba7 	bl	8013784 <CODEC_IO_Write>
 8013036:	4603      	mov	r3, r0
 8013038:	461a      	mov	r2, r3
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	4413      	add	r3, r2
 801303e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8013040:	88fb      	ldrh	r3, [r7, #6]
 8013042:	b2db      	uxtb	r3, r3
 8013044:	2200      	movs	r2, #0
 8013046:	212d      	movs	r1, #45	; 0x2d
 8013048:	4618      	mov	r0, r3
 801304a:	f000 fb9b 	bl	8013784 <CODEC_IO_Write>
 801304e:	4603      	mov	r3, r0
 8013050:	461a      	mov	r2, r3
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	4413      	add	r3, r2
 8013056:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8013058:	88fb      	ldrh	r3, [r7, #6]
 801305a:	b2db      	uxtb	r3, r3
 801305c:	2200      	movs	r2, #0
 801305e:	212e      	movs	r1, #46	; 0x2e
 8013060:	4618      	mov	r0, r3
 8013062:	f000 fb8f 	bl	8013784 <CODEC_IO_Write>
 8013066:	4603      	mov	r3, r0
 8013068:	461a      	mov	r2, r3
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	4413      	add	r3, r2
 801306e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8013070:	88fb      	ldrh	r3, [r7, #6]
 8013072:	b2db      	uxtb	r3, r3
 8013074:	2200      	movs	r2, #0
 8013076:	2105      	movs	r1, #5
 8013078:	4618      	mov	r0, r3
 801307a:	f000 fb83 	bl	8013784 <CODEC_IO_Write>
 801307e:	4603      	mov	r3, r0
 8013080:	461a      	mov	r2, r3
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	4413      	add	r3, r2
 8013086:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8013088:	88fb      	ldrh	r3, [r7, #6]
 801308a:	b2db      	uxtb	r3, r3
 801308c:	2200      	movs	r2, #0
 801308e:	2100      	movs	r1, #0
 8013090:	4618      	mov	r0, r3
 8013092:	f000 fb77 	bl	8013784 <CODEC_IO_Write>
 8013096:	4603      	mov	r3, r0
 8013098:	461a      	mov	r2, r3
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	4413      	add	r3, r2
 801309e:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 80130a0:	4b03      	ldr	r3, [pc, #12]	; (80130b0 <wm8994_Stop+0xd8>)
 80130a2:	2200      	movs	r2, #0
 80130a4:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 80130a6:	68fb      	ldr	r3, [r7, #12]
}
 80130a8:	4618      	mov	r0, r3
 80130aa:	3710      	adds	r7, #16
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd80      	pop	{r7, pc}
 80130b0:	20004ccc 	.word	0x20004ccc

080130b4 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b084      	sub	sp, #16
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	4603      	mov	r3, r0
 80130bc:	460a      	mov	r2, r1
 80130be:	80fb      	strh	r3, [r7, #6]
 80130c0:	4613      	mov	r3, r2
 80130c2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80130c4:	2300      	movs	r3, #0
 80130c6:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80130c8:	797b      	ldrb	r3, [r7, #5]
 80130ca:	2b64      	cmp	r3, #100	; 0x64
 80130cc:	d80b      	bhi.n	80130e6 <wm8994_SetVolume+0x32>
 80130ce:	797a      	ldrb	r2, [r7, #5]
 80130d0:	4613      	mov	r3, r2
 80130d2:	019b      	lsls	r3, r3, #6
 80130d4:	1a9b      	subs	r3, r3, r2
 80130d6:	4a86      	ldr	r2, [pc, #536]	; (80132f0 <wm8994_SetVolume+0x23c>)
 80130d8:	fb82 1203 	smull	r1, r2, r2, r3
 80130dc:	1152      	asrs	r2, r2, #5
 80130de:	17db      	asrs	r3, r3, #31
 80130e0:	1ad3      	subs	r3, r2, r3
 80130e2:	b2db      	uxtb	r3, r3
 80130e4:	e000      	b.n	80130e8 <wm8994_SetVolume+0x34>
 80130e6:	2364      	movs	r3, #100	; 0x64
 80130e8:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 80130ea:	4b82      	ldr	r3, [pc, #520]	; (80132f4 <wm8994_SetVolume+0x240>)
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	f000 809b 	beq.w	801322a <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 80130f4:	7afb      	ldrb	r3, [r7, #11]
 80130f6:	2b3e      	cmp	r3, #62	; 0x3e
 80130f8:	d93d      	bls.n	8013176 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80130fa:	88fb      	ldrh	r3, [r7, #6]
 80130fc:	2100      	movs	r1, #0
 80130fe:	4618      	mov	r0, r3
 8013100:	f000 f8fc 	bl	80132fc <wm8994_SetMute>
 8013104:	4602      	mov	r2, r0
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	4413      	add	r3, r2
 801310a:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 801310c:	88fb      	ldrh	r3, [r7, #6]
 801310e:	b2db      	uxtb	r3, r3
 8013110:	f240 127f 	movw	r2, #383	; 0x17f
 8013114:	211c      	movs	r1, #28
 8013116:	4618      	mov	r0, r3
 8013118:	f000 fb34 	bl	8013784 <CODEC_IO_Write>
 801311c:	4603      	mov	r3, r0
 801311e:	461a      	mov	r2, r3
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	4413      	add	r3, r2
 8013124:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8013126:	88fb      	ldrh	r3, [r7, #6]
 8013128:	b2db      	uxtb	r3, r3
 801312a:	f240 127f 	movw	r2, #383	; 0x17f
 801312e:	211d      	movs	r1, #29
 8013130:	4618      	mov	r0, r3
 8013132:	f000 fb27 	bl	8013784 <CODEC_IO_Write>
 8013136:	4603      	mov	r3, r0
 8013138:	461a      	mov	r2, r3
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	4413      	add	r3, r2
 801313e:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8013140:	88fb      	ldrh	r3, [r7, #6]
 8013142:	b2db      	uxtb	r3, r3
 8013144:	f240 127f 	movw	r2, #383	; 0x17f
 8013148:	2126      	movs	r1, #38	; 0x26
 801314a:	4618      	mov	r0, r3
 801314c:	f000 fb1a 	bl	8013784 <CODEC_IO_Write>
 8013150:	4603      	mov	r3, r0
 8013152:	461a      	mov	r2, r3
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	4413      	add	r3, r2
 8013158:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 801315a:	88fb      	ldrh	r3, [r7, #6]
 801315c:	b2db      	uxtb	r3, r3
 801315e:	f240 127f 	movw	r2, #383	; 0x17f
 8013162:	2127      	movs	r1, #39	; 0x27
 8013164:	4618      	mov	r0, r3
 8013166:	f000 fb0d 	bl	8013784 <CODEC_IO_Write>
 801316a:	4603      	mov	r3, r0
 801316c:	461a      	mov	r2, r3
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	4413      	add	r3, r2
 8013172:	60fb      	str	r3, [r7, #12]
 8013174:	e059      	b.n	801322a <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8013176:	797b      	ldrb	r3, [r7, #5]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d109      	bne.n	8013190 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 801317c:	88fb      	ldrh	r3, [r7, #6]
 801317e:	2101      	movs	r1, #1
 8013180:	4618      	mov	r0, r3
 8013182:	f000 f8bb 	bl	80132fc <wm8994_SetMute>
 8013186:	4602      	mov	r2, r0
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	4413      	add	r3, r2
 801318c:	60fb      	str	r3, [r7, #12]
 801318e:	e04c      	b.n	801322a <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8013190:	88fb      	ldrh	r3, [r7, #6]
 8013192:	2100      	movs	r1, #0
 8013194:	4618      	mov	r0, r3
 8013196:	f000 f8b1 	bl	80132fc <wm8994_SetMute>
 801319a:	4602      	mov	r2, r0
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	4413      	add	r3, r2
 80131a0:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80131a2:	88fb      	ldrh	r3, [r7, #6]
 80131a4:	b2d8      	uxtb	r0, r3
 80131a6:	7afb      	ldrb	r3, [r7, #11]
 80131a8:	b21b      	sxth	r3, r3
 80131aa:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80131ae:	b21b      	sxth	r3, r3
 80131b0:	b29b      	uxth	r3, r3
 80131b2:	461a      	mov	r2, r3
 80131b4:	211c      	movs	r1, #28
 80131b6:	f000 fae5 	bl	8013784 <CODEC_IO_Write>
 80131ba:	4603      	mov	r3, r0
 80131bc:	461a      	mov	r2, r3
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	4413      	add	r3, r2
 80131c2:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80131c4:	88fb      	ldrh	r3, [r7, #6]
 80131c6:	b2d8      	uxtb	r0, r3
 80131c8:	7afb      	ldrb	r3, [r7, #11]
 80131ca:	b21b      	sxth	r3, r3
 80131cc:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80131d0:	b21b      	sxth	r3, r3
 80131d2:	b29b      	uxth	r3, r3
 80131d4:	461a      	mov	r2, r3
 80131d6:	211d      	movs	r1, #29
 80131d8:	f000 fad4 	bl	8013784 <CODEC_IO_Write>
 80131dc:	4603      	mov	r3, r0
 80131de:	461a      	mov	r2, r3
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	4413      	add	r3, r2
 80131e4:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 80131e6:	88fb      	ldrh	r3, [r7, #6]
 80131e8:	b2d8      	uxtb	r0, r3
 80131ea:	7afb      	ldrb	r3, [r7, #11]
 80131ec:	b21b      	sxth	r3, r3
 80131ee:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80131f2:	b21b      	sxth	r3, r3
 80131f4:	b29b      	uxth	r3, r3
 80131f6:	461a      	mov	r2, r3
 80131f8:	2126      	movs	r1, #38	; 0x26
 80131fa:	f000 fac3 	bl	8013784 <CODEC_IO_Write>
 80131fe:	4603      	mov	r3, r0
 8013200:	461a      	mov	r2, r3
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	4413      	add	r3, r2
 8013206:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8013208:	88fb      	ldrh	r3, [r7, #6]
 801320a:	b2d8      	uxtb	r0, r3
 801320c:	7afb      	ldrb	r3, [r7, #11]
 801320e:	b21b      	sxth	r3, r3
 8013210:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8013214:	b21b      	sxth	r3, r3
 8013216:	b29b      	uxth	r3, r3
 8013218:	461a      	mov	r2, r3
 801321a:	2127      	movs	r1, #39	; 0x27
 801321c:	f000 fab2 	bl	8013784 <CODEC_IO_Write>
 8013220:	4603      	mov	r3, r0
 8013222:	461a      	mov	r2, r3
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	4413      	add	r3, r2
 8013228:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 801322a:	4b33      	ldr	r3, [pc, #204]	; (80132f8 <wm8994_SetVolume+0x244>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d059      	beq.n	80132e6 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8013232:	797b      	ldrb	r3, [r7, #5]
 8013234:	2b63      	cmp	r3, #99	; 0x63
 8013236:	d80c      	bhi.n	8013252 <wm8994_SetVolume+0x19e>
 8013238:	797a      	ldrb	r2, [r7, #5]
 801323a:	4613      	mov	r3, r2
 801323c:	011b      	lsls	r3, r3, #4
 801323e:	1a9b      	subs	r3, r3, r2
 8013240:	011b      	lsls	r3, r3, #4
 8013242:	4a2b      	ldr	r2, [pc, #172]	; (80132f0 <wm8994_SetVolume+0x23c>)
 8013244:	fb82 1203 	smull	r1, r2, r2, r3
 8013248:	1152      	asrs	r2, r2, #5
 801324a:	17db      	asrs	r3, r3, #31
 801324c:	1ad3      	subs	r3, r2, r3
 801324e:	b2db      	uxtb	r3, r3
 8013250:	e000      	b.n	8013254 <wm8994_SetVolume+0x1a0>
 8013252:	23ef      	movs	r3, #239	; 0xef
 8013254:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8013256:	88fb      	ldrh	r3, [r7, #6]
 8013258:	b2d8      	uxtb	r0, r3
 801325a:	7afb      	ldrb	r3, [r7, #11]
 801325c:	b21b      	sxth	r3, r3
 801325e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013262:	b21b      	sxth	r3, r3
 8013264:	b29b      	uxth	r3, r3
 8013266:	461a      	mov	r2, r3
 8013268:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801326c:	f000 fa8a 	bl	8013784 <CODEC_IO_Write>
 8013270:	4603      	mov	r3, r0
 8013272:	461a      	mov	r2, r3
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	4413      	add	r3, r2
 8013278:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 801327a:	88fb      	ldrh	r3, [r7, #6]
 801327c:	b2d8      	uxtb	r0, r3
 801327e:	7afb      	ldrb	r3, [r7, #11]
 8013280:	b21b      	sxth	r3, r3
 8013282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013286:	b21b      	sxth	r3, r3
 8013288:	b29b      	uxth	r3, r3
 801328a:	461a      	mov	r2, r3
 801328c:	f240 4101 	movw	r1, #1025	; 0x401
 8013290:	f000 fa78 	bl	8013784 <CODEC_IO_Write>
 8013294:	4603      	mov	r3, r0
 8013296:	461a      	mov	r2, r3
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	4413      	add	r3, r2
 801329c:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 801329e:	88fb      	ldrh	r3, [r7, #6]
 80132a0:	b2d8      	uxtb	r0, r3
 80132a2:	7afb      	ldrb	r3, [r7, #11]
 80132a4:	b21b      	sxth	r3, r3
 80132a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80132aa:	b21b      	sxth	r3, r3
 80132ac:	b29b      	uxth	r3, r3
 80132ae:	461a      	mov	r2, r3
 80132b0:	f240 4104 	movw	r1, #1028	; 0x404
 80132b4:	f000 fa66 	bl	8013784 <CODEC_IO_Write>
 80132b8:	4603      	mov	r3, r0
 80132ba:	461a      	mov	r2, r3
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	4413      	add	r3, r2
 80132c0:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80132c2:	88fb      	ldrh	r3, [r7, #6]
 80132c4:	b2d8      	uxtb	r0, r3
 80132c6:	7afb      	ldrb	r3, [r7, #11]
 80132c8:	b21b      	sxth	r3, r3
 80132ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80132ce:	b21b      	sxth	r3, r3
 80132d0:	b29b      	uxth	r3, r3
 80132d2:	461a      	mov	r2, r3
 80132d4:	f240 4105 	movw	r1, #1029	; 0x405
 80132d8:	f000 fa54 	bl	8013784 <CODEC_IO_Write>
 80132dc:	4603      	mov	r3, r0
 80132de:	461a      	mov	r2, r3
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	4413      	add	r3, r2
 80132e4:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80132e6:	68fb      	ldr	r3, [r7, #12]
}
 80132e8:	4618      	mov	r0, r3
 80132ea:	3710      	adds	r7, #16
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bd80      	pop	{r7, pc}
 80132f0:	51eb851f 	.word	0x51eb851f
 80132f4:	20004ccc 	.word	0x20004ccc
 80132f8:	20004cd0 	.word	0x20004cd0

080132fc <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b084      	sub	sp, #16
 8013300:	af00      	add	r7, sp, #0
 8013302:	4603      	mov	r3, r0
 8013304:	6039      	str	r1, [r7, #0]
 8013306:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8013308:	2300      	movs	r3, #0
 801330a:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 801330c:	4b21      	ldr	r3, [pc, #132]	; (8013394 <wm8994_SetMute+0x98>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d039      	beq.n	8013388 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	2b01      	cmp	r3, #1
 8013318:	d11c      	bne.n	8013354 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 801331a:	88fb      	ldrh	r3, [r7, #6]
 801331c:	b2db      	uxtb	r3, r3
 801331e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013322:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8013326:	4618      	mov	r0, r3
 8013328:	f000 fa2c 	bl	8013784 <CODEC_IO_Write>
 801332c:	4603      	mov	r3, r0
 801332e:	461a      	mov	r2, r3
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	4413      	add	r3, r2
 8013334:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8013336:	88fb      	ldrh	r3, [r7, #6]
 8013338:	b2db      	uxtb	r3, r3
 801333a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801333e:	f240 4122 	movw	r1, #1058	; 0x422
 8013342:	4618      	mov	r0, r3
 8013344:	f000 fa1e 	bl	8013784 <CODEC_IO_Write>
 8013348:	4603      	mov	r3, r0
 801334a:	461a      	mov	r2, r3
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	4413      	add	r3, r2
 8013350:	60fb      	str	r3, [r7, #12]
 8013352:	e019      	b.n	8013388 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8013354:	88fb      	ldrh	r3, [r7, #6]
 8013356:	b2db      	uxtb	r3, r3
 8013358:	2210      	movs	r2, #16
 801335a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 801335e:	4618      	mov	r0, r3
 8013360:	f000 fa10 	bl	8013784 <CODEC_IO_Write>
 8013364:	4603      	mov	r3, r0
 8013366:	461a      	mov	r2, r3
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	4413      	add	r3, r2
 801336c:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 801336e:	88fb      	ldrh	r3, [r7, #6]
 8013370:	b2db      	uxtb	r3, r3
 8013372:	2210      	movs	r2, #16
 8013374:	f240 4122 	movw	r1, #1058	; 0x422
 8013378:	4618      	mov	r0, r3
 801337a:	f000 fa03 	bl	8013784 <CODEC_IO_Write>
 801337e:	4603      	mov	r3, r0
 8013380:	461a      	mov	r2, r3
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	4413      	add	r3, r2
 8013386:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8013388:	68fb      	ldr	r3, [r7, #12]
}
 801338a:	4618      	mov	r0, r3
 801338c:	3710      	adds	r7, #16
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}
 8013392:	bf00      	nop
 8013394:	20004ccc 	.word	0x20004ccc

08013398 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b084      	sub	sp, #16
 801339c:	af00      	add	r7, sp, #0
 801339e:	4603      	mov	r3, r0
 80133a0:	460a      	mov	r2, r1
 80133a2:	80fb      	strh	r3, [r7, #6]
 80133a4:	4613      	mov	r3, r2
 80133a6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80133a8:	2300      	movs	r3, #0
 80133aa:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80133ac:	797b      	ldrb	r3, [r7, #5]
 80133ae:	2b02      	cmp	r3, #2
 80133b0:	d047      	beq.n	8013442 <wm8994_SetOutputMode+0xaa>
 80133b2:	2b03      	cmp	r3, #3
 80133b4:	f000 8087 	beq.w	80134c6 <wm8994_SetOutputMode+0x12e>
 80133b8:	2b01      	cmp	r3, #1
 80133ba:	f040 80c6 	bne.w	801354a <wm8994_SetOutputMode+0x1b2>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80133be:	88fb      	ldrh	r3, [r7, #6]
 80133c0:	b2db      	uxtb	r3, r3
 80133c2:	f640 420c 	movw	r2, #3084	; 0xc0c
 80133c6:	2105      	movs	r1, #5
 80133c8:	4618      	mov	r0, r3
 80133ca:	f000 f9db 	bl	8013784 <CODEC_IO_Write>
 80133ce:	4603      	mov	r3, r0
 80133d0:	461a      	mov	r2, r3
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	4413      	add	r3, r2
 80133d6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80133d8:	88fb      	ldrh	r3, [r7, #6]
 80133da:	b2db      	uxtb	r3, r3
 80133dc:	2200      	movs	r2, #0
 80133de:	f240 6101 	movw	r1, #1537	; 0x601
 80133e2:	4618      	mov	r0, r3
 80133e4:	f000 f9ce 	bl	8013784 <CODEC_IO_Write>
 80133e8:	4603      	mov	r3, r0
 80133ea:	461a      	mov	r2, r3
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	4413      	add	r3, r2
 80133f0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80133f2:	88fb      	ldrh	r3, [r7, #6]
 80133f4:	b2db      	uxtb	r3, r3
 80133f6:	2200      	movs	r2, #0
 80133f8:	f240 6102 	movw	r1, #1538	; 0x602
 80133fc:	4618      	mov	r0, r3
 80133fe:	f000 f9c1 	bl	8013784 <CODEC_IO_Write>
 8013402:	4603      	mov	r3, r0
 8013404:	461a      	mov	r2, r3
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	4413      	add	r3, r2
 801340a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 801340c:	88fb      	ldrh	r3, [r7, #6]
 801340e:	b2db      	uxtb	r3, r3
 8013410:	2202      	movs	r2, #2
 8013412:	f240 6104 	movw	r1, #1540	; 0x604
 8013416:	4618      	mov	r0, r3
 8013418:	f000 f9b4 	bl	8013784 <CODEC_IO_Write>
 801341c:	4603      	mov	r3, r0
 801341e:	461a      	mov	r2, r3
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	4413      	add	r3, r2
 8013424:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8013426:	88fb      	ldrh	r3, [r7, #6]
 8013428:	b2db      	uxtb	r3, r3
 801342a:	2202      	movs	r2, #2
 801342c:	f240 6105 	movw	r1, #1541	; 0x605
 8013430:	4618      	mov	r0, r3
 8013432:	f000 f9a7 	bl	8013784 <CODEC_IO_Write>
 8013436:	4603      	mov	r3, r0
 8013438:	461a      	mov	r2, r3
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	4413      	add	r3, r2
 801343e:	60fb      	str	r3, [r7, #12]
    break;
 8013440:	e0c5      	b.n	80135ce <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8013442:	88fb      	ldrh	r3, [r7, #6]
 8013444:	b2db      	uxtb	r3, r3
 8013446:	f240 3203 	movw	r2, #771	; 0x303
 801344a:	2105      	movs	r1, #5
 801344c:	4618      	mov	r0, r3
 801344e:	f000 f999 	bl	8013784 <CODEC_IO_Write>
 8013452:	4603      	mov	r3, r0
 8013454:	461a      	mov	r2, r3
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	4413      	add	r3, r2
 801345a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 801345c:	88fb      	ldrh	r3, [r7, #6]
 801345e:	b2db      	uxtb	r3, r3
 8013460:	2201      	movs	r2, #1
 8013462:	f240 6101 	movw	r1, #1537	; 0x601
 8013466:	4618      	mov	r0, r3
 8013468:	f000 f98c 	bl	8013784 <CODEC_IO_Write>
 801346c:	4603      	mov	r3, r0
 801346e:	461a      	mov	r2, r3
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	4413      	add	r3, r2
 8013474:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8013476:	88fb      	ldrh	r3, [r7, #6]
 8013478:	b2db      	uxtb	r3, r3
 801347a:	2201      	movs	r2, #1
 801347c:	f240 6102 	movw	r1, #1538	; 0x602
 8013480:	4618      	mov	r0, r3
 8013482:	f000 f97f 	bl	8013784 <CODEC_IO_Write>
 8013486:	4603      	mov	r3, r0
 8013488:	461a      	mov	r2, r3
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	4413      	add	r3, r2
 801348e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8013490:	88fb      	ldrh	r3, [r7, #6]
 8013492:	b2db      	uxtb	r3, r3
 8013494:	2200      	movs	r2, #0
 8013496:	f240 6104 	movw	r1, #1540	; 0x604
 801349a:	4618      	mov	r0, r3
 801349c:	f000 f972 	bl	8013784 <CODEC_IO_Write>
 80134a0:	4603      	mov	r3, r0
 80134a2:	461a      	mov	r2, r3
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	4413      	add	r3, r2
 80134a8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80134aa:	88fb      	ldrh	r3, [r7, #6]
 80134ac:	b2db      	uxtb	r3, r3
 80134ae:	2200      	movs	r2, #0
 80134b0:	f240 6105 	movw	r1, #1541	; 0x605
 80134b4:	4618      	mov	r0, r3
 80134b6:	f000 f965 	bl	8013784 <CODEC_IO_Write>
 80134ba:	4603      	mov	r3, r0
 80134bc:	461a      	mov	r2, r3
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	4413      	add	r3, r2
 80134c2:	60fb      	str	r3, [r7, #12]
    break;
 80134c4:	e083      	b.n	80135ce <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80134c6:	88fb      	ldrh	r3, [r7, #6]
 80134c8:	b2db      	uxtb	r3, r3
 80134ca:	f640 720f 	movw	r2, #3855	; 0xf0f
 80134ce:	2105      	movs	r1, #5
 80134d0:	4618      	mov	r0, r3
 80134d2:	f000 f957 	bl	8013784 <CODEC_IO_Write>
 80134d6:	4603      	mov	r3, r0
 80134d8:	461a      	mov	r2, r3
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	4413      	add	r3, r2
 80134de:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80134e0:	88fb      	ldrh	r3, [r7, #6]
 80134e2:	b2db      	uxtb	r3, r3
 80134e4:	2201      	movs	r2, #1
 80134e6:	f240 6101 	movw	r1, #1537	; 0x601
 80134ea:	4618      	mov	r0, r3
 80134ec:	f000 f94a 	bl	8013784 <CODEC_IO_Write>
 80134f0:	4603      	mov	r3, r0
 80134f2:	461a      	mov	r2, r3
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	4413      	add	r3, r2
 80134f8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80134fa:	88fb      	ldrh	r3, [r7, #6]
 80134fc:	b2db      	uxtb	r3, r3
 80134fe:	2201      	movs	r2, #1
 8013500:	f240 6102 	movw	r1, #1538	; 0x602
 8013504:	4618      	mov	r0, r3
 8013506:	f000 f93d 	bl	8013784 <CODEC_IO_Write>
 801350a:	4603      	mov	r3, r0
 801350c:	461a      	mov	r2, r3
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	4413      	add	r3, r2
 8013512:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8013514:	88fb      	ldrh	r3, [r7, #6]
 8013516:	b2db      	uxtb	r3, r3
 8013518:	2202      	movs	r2, #2
 801351a:	f240 6104 	movw	r1, #1540	; 0x604
 801351e:	4618      	mov	r0, r3
 8013520:	f000 f930 	bl	8013784 <CODEC_IO_Write>
 8013524:	4603      	mov	r3, r0
 8013526:	461a      	mov	r2, r3
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	4413      	add	r3, r2
 801352c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 801352e:	88fb      	ldrh	r3, [r7, #6]
 8013530:	b2db      	uxtb	r3, r3
 8013532:	2202      	movs	r2, #2
 8013534:	f240 6105 	movw	r1, #1541	; 0x605
 8013538:	4618      	mov	r0, r3
 801353a:	f000 f923 	bl	8013784 <CODEC_IO_Write>
 801353e:	4603      	mov	r3, r0
 8013540:	461a      	mov	r2, r3
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	4413      	add	r3, r2
 8013546:	60fb      	str	r3, [r7, #12]
    break;
 8013548:	e041      	b.n	80135ce <wm8994_SetOutputMode+0x236>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 801354a:	88fb      	ldrh	r3, [r7, #6]
 801354c:	b2db      	uxtb	r3, r3
 801354e:	f240 3203 	movw	r2, #771	; 0x303
 8013552:	2105      	movs	r1, #5
 8013554:	4618      	mov	r0, r3
 8013556:	f000 f915 	bl	8013784 <CODEC_IO_Write>
 801355a:	4603      	mov	r3, r0
 801355c:	461a      	mov	r2, r3
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	4413      	add	r3, r2
 8013562:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8013564:	88fb      	ldrh	r3, [r7, #6]
 8013566:	b2db      	uxtb	r3, r3
 8013568:	2201      	movs	r2, #1
 801356a:	f240 6101 	movw	r1, #1537	; 0x601
 801356e:	4618      	mov	r0, r3
 8013570:	f000 f908 	bl	8013784 <CODEC_IO_Write>
 8013574:	4603      	mov	r3, r0
 8013576:	461a      	mov	r2, r3
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	4413      	add	r3, r2
 801357c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 801357e:	88fb      	ldrh	r3, [r7, #6]
 8013580:	b2db      	uxtb	r3, r3
 8013582:	2201      	movs	r2, #1
 8013584:	f240 6102 	movw	r1, #1538	; 0x602
 8013588:	4618      	mov	r0, r3
 801358a:	f000 f8fb 	bl	8013784 <CODEC_IO_Write>
 801358e:	4603      	mov	r3, r0
 8013590:	461a      	mov	r2, r3
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	4413      	add	r3, r2
 8013596:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8013598:	88fb      	ldrh	r3, [r7, #6]
 801359a:	b2db      	uxtb	r3, r3
 801359c:	2200      	movs	r2, #0
 801359e:	f240 6104 	movw	r1, #1540	; 0x604
 80135a2:	4618      	mov	r0, r3
 80135a4:	f000 f8ee 	bl	8013784 <CODEC_IO_Write>
 80135a8:	4603      	mov	r3, r0
 80135aa:	461a      	mov	r2, r3
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	4413      	add	r3, r2
 80135b0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80135b2:	88fb      	ldrh	r3, [r7, #6]
 80135b4:	b2db      	uxtb	r3, r3
 80135b6:	2200      	movs	r2, #0
 80135b8:	f240 6105 	movw	r1, #1541	; 0x605
 80135bc:	4618      	mov	r0, r3
 80135be:	f000 f8e1 	bl	8013784 <CODEC_IO_Write>
 80135c2:	4603      	mov	r3, r0
 80135c4:	461a      	mov	r2, r3
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	4413      	add	r3, r2
 80135ca:	60fb      	str	r3, [r7, #12]
    break;    
 80135cc:	bf00      	nop
  }  
  return counter;
 80135ce:	68fb      	ldr	r3, [r7, #12]
}
 80135d0:	4618      	mov	r0, r3
 80135d2:	3710      	adds	r7, #16
 80135d4:	46bd      	mov	sp, r7
 80135d6:	bd80      	pop	{r7, pc}

080135d8 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b084      	sub	sp, #16
 80135dc:	af00      	add	r7, sp, #0
 80135de:	4603      	mov	r3, r0
 80135e0:	6039      	str	r1, [r7, #0]
 80135e2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80135e4:	2300      	movs	r3, #0
 80135e6:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	f245 6222 	movw	r2, #22050	; 0x5622
 80135ee:	4293      	cmp	r3, r2
 80135f0:	d076      	beq.n	80136e0 <wm8994_SetFrequency+0x108>
 80135f2:	f245 6222 	movw	r2, #22050	; 0x5622
 80135f6:	4293      	cmp	r3, r2
 80135f8:	d80a      	bhi.n	8013610 <wm8994_SetFrequency+0x38>
 80135fa:	f642 3211 	movw	r2, #11025	; 0x2b11
 80135fe:	4293      	cmp	r3, r2
 8013600:	d060      	beq.n	80136c4 <wm8994_SetFrequency+0xec>
 8013602:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8013606:	d025      	beq.n	8013654 <wm8994_SetFrequency+0x7c>
 8013608:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 801360c:	d014      	beq.n	8013638 <wm8994_SetFrequency+0x60>
 801360e:	e083      	b.n	8013718 <wm8994_SetFrequency+0x140>
 8013610:	f64a 4244 	movw	r2, #44100	; 0xac44
 8013614:	4293      	cmp	r3, r2
 8013616:	d071      	beq.n	80136fc <wm8994_SetFrequency+0x124>
 8013618:	f64a 4244 	movw	r2, #44100	; 0xac44
 801361c:	4293      	cmp	r3, r2
 801361e:	d803      	bhi.n	8013628 <wm8994_SetFrequency+0x50>
 8013620:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8013624:	d024      	beq.n	8013670 <wm8994_SetFrequency+0x98>
 8013626:	e077      	b.n	8013718 <wm8994_SetFrequency+0x140>
 8013628:	f64b 3280 	movw	r2, #48000	; 0xbb80
 801362c:	4293      	cmp	r3, r2
 801362e:	d02d      	beq.n	801368c <wm8994_SetFrequency+0xb4>
 8013630:	4a43      	ldr	r2, [pc, #268]	; (8013740 <wm8994_SetFrequency+0x168>)
 8013632:	4293      	cmp	r3, r2
 8013634:	d038      	beq.n	80136a8 <wm8994_SetFrequency+0xd0>
 8013636:	e06f      	b.n	8013718 <wm8994_SetFrequency+0x140>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8013638:	88fb      	ldrh	r3, [r7, #6]
 801363a:	b2db      	uxtb	r3, r3
 801363c:	2203      	movs	r2, #3
 801363e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8013642:	4618      	mov	r0, r3
 8013644:	f000 f89e 	bl	8013784 <CODEC_IO_Write>
 8013648:	4603      	mov	r3, r0
 801364a:	461a      	mov	r2, r3
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	4413      	add	r3, r2
 8013650:	60fb      	str	r3, [r7, #12]
    break;
 8013652:	e06f      	b.n	8013734 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8013654:	88fb      	ldrh	r3, [r7, #6]
 8013656:	b2db      	uxtb	r3, r3
 8013658:	2233      	movs	r2, #51	; 0x33
 801365a:	f44f 7104 	mov.w	r1, #528	; 0x210
 801365e:	4618      	mov	r0, r3
 8013660:	f000 f890 	bl	8013784 <CODEC_IO_Write>
 8013664:	4603      	mov	r3, r0
 8013666:	461a      	mov	r2, r3
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	4413      	add	r3, r2
 801366c:	60fb      	str	r3, [r7, #12]
    break;
 801366e:	e061      	b.n	8013734 <wm8994_SetFrequency+0x15c>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8013670:	88fb      	ldrh	r3, [r7, #6]
 8013672:	b2db      	uxtb	r3, r3
 8013674:	2263      	movs	r2, #99	; 0x63
 8013676:	f44f 7104 	mov.w	r1, #528	; 0x210
 801367a:	4618      	mov	r0, r3
 801367c:	f000 f882 	bl	8013784 <CODEC_IO_Write>
 8013680:	4603      	mov	r3, r0
 8013682:	461a      	mov	r2, r3
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	4413      	add	r3, r2
 8013688:	60fb      	str	r3, [r7, #12]
    break;
 801368a:	e053      	b.n	8013734 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 801368c:	88fb      	ldrh	r3, [r7, #6]
 801368e:	b2db      	uxtb	r3, r3
 8013690:	2283      	movs	r2, #131	; 0x83
 8013692:	f44f 7104 	mov.w	r1, #528	; 0x210
 8013696:	4618      	mov	r0, r3
 8013698:	f000 f874 	bl	8013784 <CODEC_IO_Write>
 801369c:	4603      	mov	r3, r0
 801369e:	461a      	mov	r2, r3
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	4413      	add	r3, r2
 80136a4:	60fb      	str	r3, [r7, #12]
    break;
 80136a6:	e045      	b.n	8013734 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80136a8:	88fb      	ldrh	r3, [r7, #6]
 80136aa:	b2db      	uxtb	r3, r3
 80136ac:	22a3      	movs	r2, #163	; 0xa3
 80136ae:	f44f 7104 	mov.w	r1, #528	; 0x210
 80136b2:	4618      	mov	r0, r3
 80136b4:	f000 f866 	bl	8013784 <CODEC_IO_Write>
 80136b8:	4603      	mov	r3, r0
 80136ba:	461a      	mov	r2, r3
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	4413      	add	r3, r2
 80136c0:	60fb      	str	r3, [r7, #12]
    break;
 80136c2:	e037      	b.n	8013734 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80136c4:	88fb      	ldrh	r3, [r7, #6]
 80136c6:	b2db      	uxtb	r3, r3
 80136c8:	2213      	movs	r2, #19
 80136ca:	f44f 7104 	mov.w	r1, #528	; 0x210
 80136ce:	4618      	mov	r0, r3
 80136d0:	f000 f858 	bl	8013784 <CODEC_IO_Write>
 80136d4:	4603      	mov	r3, r0
 80136d6:	461a      	mov	r2, r3
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	4413      	add	r3, r2
 80136dc:	60fb      	str	r3, [r7, #12]
    break;
 80136de:	e029      	b.n	8013734 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80136e0:	88fb      	ldrh	r3, [r7, #6]
 80136e2:	b2db      	uxtb	r3, r3
 80136e4:	2243      	movs	r2, #67	; 0x43
 80136e6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80136ea:	4618      	mov	r0, r3
 80136ec:	f000 f84a 	bl	8013784 <CODEC_IO_Write>
 80136f0:	4603      	mov	r3, r0
 80136f2:	461a      	mov	r2, r3
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	4413      	add	r3, r2
 80136f8:	60fb      	str	r3, [r7, #12]
    break;
 80136fa:	e01b      	b.n	8013734 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80136fc:	88fb      	ldrh	r3, [r7, #6]
 80136fe:	b2db      	uxtb	r3, r3
 8013700:	2273      	movs	r2, #115	; 0x73
 8013702:	f44f 7104 	mov.w	r1, #528	; 0x210
 8013706:	4618      	mov	r0, r3
 8013708:	f000 f83c 	bl	8013784 <CODEC_IO_Write>
 801370c:	4603      	mov	r3, r0
 801370e:	461a      	mov	r2, r3
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	4413      	add	r3, r2
 8013714:	60fb      	str	r3, [r7, #12]
    break; 
 8013716:	e00d      	b.n	8013734 <wm8994_SetFrequency+0x15c>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8013718:	88fb      	ldrh	r3, [r7, #6]
 801371a:	b2db      	uxtb	r3, r3
 801371c:	2283      	movs	r2, #131	; 0x83
 801371e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8013722:	4618      	mov	r0, r3
 8013724:	f000 f82e 	bl	8013784 <CODEC_IO_Write>
 8013728:	4603      	mov	r3, r0
 801372a:	461a      	mov	r2, r3
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	4413      	add	r3, r2
 8013730:	60fb      	str	r3, [r7, #12]
    break; 
 8013732:	bf00      	nop
  }
  return counter;
 8013734:	68fb      	ldr	r3, [r7, #12]
}
 8013736:	4618      	mov	r0, r3
 8013738:	3710      	adds	r7, #16
 801373a:	46bd      	mov	sp, r7
 801373c:	bd80      	pop	{r7, pc}
 801373e:	bf00      	nop
 8013740:	00017700 	.word	0x00017700

08013744 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b084      	sub	sp, #16
 8013748:	af00      	add	r7, sp, #0
 801374a:	4603      	mov	r3, r0
 801374c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 801374e:	2300      	movs	r3, #0
 8013750:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8013752:	88fb      	ldrh	r3, [r7, #6]
 8013754:	b2db      	uxtb	r3, r3
 8013756:	2200      	movs	r2, #0
 8013758:	2100      	movs	r1, #0
 801375a:	4618      	mov	r0, r3
 801375c:	f000 f812 	bl	8013784 <CODEC_IO_Write>
 8013760:	4603      	mov	r3, r0
 8013762:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8013764:	4b05      	ldr	r3, [pc, #20]	; (801377c <wm8994_Reset+0x38>)
 8013766:	2200      	movs	r2, #0
 8013768:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 801376a:	4b05      	ldr	r3, [pc, #20]	; (8013780 <wm8994_Reset+0x3c>)
 801376c:	2200      	movs	r2, #0
 801376e:	601a      	str	r2, [r3, #0]

  return counter;
 8013770:	68fb      	ldr	r3, [r7, #12]
}
 8013772:	4618      	mov	r0, r3
 8013774:	3710      	adds	r7, #16
 8013776:	46bd      	mov	sp, r7
 8013778:	bd80      	pop	{r7, pc}
 801377a:	bf00      	nop
 801377c:	20004ccc 	.word	0x20004ccc
 8013780:	20004cd0 	.word	0x20004cd0

08013784 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b084      	sub	sp, #16
 8013788:	af00      	add	r7, sp, #0
 801378a:	4603      	mov	r3, r0
 801378c:	71fb      	strb	r3, [r7, #7]
 801378e:	460b      	mov	r3, r1
 8013790:	80bb      	strh	r3, [r7, #4]
 8013792:	4613      	mov	r3, r2
 8013794:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8013796:	2300      	movs	r3, #0
 8013798:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 801379a:	887a      	ldrh	r2, [r7, #2]
 801379c:	88b9      	ldrh	r1, [r7, #4]
 801379e:	79fb      	ldrb	r3, [r7, #7]
 80137a0:	4618      	mov	r0, r3
 80137a2:	f7fc fb85 	bl	800feb0 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	b2db      	uxtb	r3, r3
}
 80137aa:	4618      	mov	r0, r3
 80137ac:	3710      	adds	r7, #16
 80137ae:	46bd      	mov	sp, r7
 80137b0:	bd80      	pop	{r7, pc}
	...

080137b4 <aiInit>:

/*
 * Init function to create and initialize a NN.
 */
int aiInit(const ai_u8* activations)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b090      	sub	sp, #64	; 0x40
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
    ai_error err;

    /* 1 - Specific AI data structure to provide the references of the
     * activation/working memory chunk and the weights/bias parameters */
    const ai_network_params params = {
 80137bc:	4b27      	ldr	r3, [pc, #156]	; (801385c <aiInit+0xa8>)
 80137be:	60fb      	str	r3, [r7, #12]
 80137c0:	2301      	movs	r3, #1
 80137c2:	823b      	strh	r3, [r7, #16]
 80137c4:	2301      	movs	r3, #1
 80137c6:	827b      	strh	r3, [r7, #18]
 80137c8:	2301      	movs	r3, #1
 80137ca:	82bb      	strh	r3, [r7, #20]
 80137cc:	4b24      	ldr	r3, [pc, #144]	; (8013860 <aiInit+0xac>)
 80137ce:	61bb      	str	r3, [r7, #24]
            AI_KWDNETZ_DATA_WEIGHTS(ai_kwdnetz_data_weights_get()),
 80137d0:	f000 fa52 	bl	8013c78 <ai_kwdnetz_data_weights_get>
 80137d4:	4603      	mov	r3, r0
    const ai_network_params params = {
 80137d6:	61fb      	str	r3, [r7, #28]
 80137d8:	2300      	movs	r3, #0
 80137da:	623b      	str	r3, [r7, #32]
 80137dc:	4b21      	ldr	r3, [pc, #132]	; (8013864 <aiInit+0xb0>)
 80137de:	627b      	str	r3, [r7, #36]	; 0x24
 80137e0:	2301      	movs	r3, #1
 80137e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80137e4:	2301      	movs	r3, #1
 80137e6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80137e8:	2301      	movs	r3, #1
 80137ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80137ec:	4b1e      	ldr	r3, [pc, #120]	; (8013868 <aiInit+0xb4>)
 80137ee:	633b      	str	r3, [r7, #48]	; 0x30
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	637b      	str	r3, [r7, #52]	; 0x34
 80137f4:	2300      	movs	r3, #0
 80137f6:	63bb      	str	r3, [r7, #56]	; 0x38
            AI_KWDNETZ_DATA_ACTIVATIONS(activations)
    };

    /* 2 - Create an instance of the NN */
    err = ai_kwdnetz_create(&kwdnetz, AI_KWDNETZ_DATA_CONFIG);
 80137f8:	2100      	movs	r1, #0
 80137fa:	481c      	ldr	r0, [pc, #112]	; (801386c <aiInit+0xb8>)
 80137fc:	f000 f9d6 	bl	8013bac <ai_kwdnetz_create>
 8013800:	4603      	mov	r3, r0
 8013802:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (err.type != AI_ERROR_NONE) {
 8013804:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8013808:	2b00      	cmp	r3, #0
 801380a:	d002      	beq.n	8013812 <aiInit+0x5e>
	    return -1;
 801380c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013810:	e020      	b.n	8013854 <aiInit+0xa0>
    }

    /* 3 - Initialize the NN - Ready to be used */
    if (!ai_kwdnetz_init(kwdnetz, &params)) {
 8013812:	4b16      	ldr	r3, [pc, #88]	; (801386c <aiInit+0xb8>)
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	f107 020c 	add.w	r2, r7, #12
 801381a:	4611      	mov	r1, r2
 801381c:	4618      	mov	r0, r3
 801381e:	f000 f9e7 	bl	8013bf0 <ai_kwdnetz_init>
 8013822:	4603      	mov	r3, r0
 8013824:	f083 0301 	eor.w	r3, r3, #1
 8013828:	b2db      	uxtb	r3, r3
 801382a:	2b00      	cmp	r3, #0
 801382c:	d011      	beq.n	8013852 <aiInit+0x9e>
        err = ai_kwdnetz_get_error(kwdnetz);
 801382e:	4b0f      	ldr	r3, [pc, #60]	; (801386c <aiInit+0xb8>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	4618      	mov	r0, r3
 8013834:	f000 f9ae 	bl	8013b94 <ai_kwdnetz_get_error>
 8013838:	4603      	mov	r3, r0
 801383a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ai_kwdnetz_destroy(kwdnetz);
 801383c:	4b0b      	ldr	r3, [pc, #44]	; (801386c <aiInit+0xb8>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	4618      	mov	r0, r3
 8013842:	f000 f9c9 	bl	8013bd8 <ai_kwdnetz_destroy>
        kwdnetz = AI_HANDLE_NULL;
 8013846:	4b09      	ldr	r3, [pc, #36]	; (801386c <aiInit+0xb8>)
 8013848:	2200      	movs	r2, #0
 801384a:	601a      	str	r2, [r3, #0]
	    return -2;
 801384c:	f06f 0301 	mvn.w	r3, #1
 8013850:	e000      	b.n	8013854 <aiInit+0xa0>
    }

    return 0;
 8013852:	2300      	movs	r3, #0
}
 8013854:	4618      	mov	r0, r3
 8013856:	3740      	adds	r7, #64	; 0x40
 8013858:	46bd      	mov	sp, r7
 801385a:	bd80      	pop	{r7, pc}
 801385c:	40040440 	.word	0x40040440
 8013860:	000115a0 	.word	0x000115a0
 8013864:	00040440 	.word	0x00040440
 8013868:	00025c60 	.word	0x00025c60
 801386c:	20004cd4 	.word	0x20004cd4

08013870 <aiRun>:

/*
 * Run function to execute an inference.
 */
int aiRun(const void *in_data, void *out_data)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b084      	sub	sp, #16
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
 8013878:	6039      	str	r1, [r7, #0]
    ai_i32 nbatch;
    ai_error err;

    /* Parameters checking */
    if (!in_data || !out_data || !kwdnetz)
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d006      	beq.n	801388e <aiRun+0x1e>
 8013880:	683b      	ldr	r3, [r7, #0]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d003      	beq.n	801388e <aiRun+0x1e>
 8013886:	4b17      	ldr	r3, [pc, #92]	; (80138e4 <aiRun+0x74>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d102      	bne.n	8013894 <aiRun+0x24>
        return -1;
 801388e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013892:	e022      	b.n	80138da <aiRun+0x6a>

    /* Initialize input/output buffer handlers */
    ai_input[0].n_batches = 1;
 8013894:	4b14      	ldr	r3, [pc, #80]	; (80138e8 <aiRun+0x78>)
 8013896:	2201      	movs	r2, #1
 8013898:	809a      	strh	r2, [r3, #4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 801389a:	4a13      	ldr	r2, [pc, #76]	; (80138e8 <aiRun+0x78>)
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	6113      	str	r3, [r2, #16]
    ai_output[0].n_batches = 1;
 80138a0:	4b12      	ldr	r3, [pc, #72]	; (80138ec <aiRun+0x7c>)
 80138a2:	2201      	movs	r2, #1
 80138a4:	809a      	strh	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 80138a6:	4a11      	ldr	r2, [pc, #68]	; (80138ec <aiRun+0x7c>)
 80138a8:	683b      	ldr	r3, [r7, #0]
 80138aa:	6113      	str	r3, [r2, #16]

    /* 2 - Perform the inference */
    nbatch = ai_kwdnetz_run(kwdnetz, &ai_input[0], &ai_output[0]);
 80138ac:	4b0d      	ldr	r3, [pc, #52]	; (80138e4 <aiRun+0x74>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	4a0e      	ldr	r2, [pc, #56]	; (80138ec <aiRun+0x7c>)
 80138b2:	490d      	ldr	r1, [pc, #52]	; (80138e8 <aiRun+0x78>)
 80138b4:	4618      	mov	r0, r3
 80138b6:	f000 f9ce 	bl	8013c56 <ai_kwdnetz_run>
 80138ba:	60f8      	str	r0, [r7, #12]
    if (nbatch != 1) {
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	2b01      	cmp	r3, #1
 80138c0:	d00a      	beq.n	80138d8 <aiRun+0x68>
        err = ai_kwdnetz_get_error(kwdnetz);
 80138c2:	4b08      	ldr	r3, [pc, #32]	; (80138e4 <aiRun+0x74>)
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	4618      	mov	r0, r3
 80138c8:	f000 f964 	bl	8013b94 <ai_kwdnetz_get_error>
 80138cc:	4603      	mov	r3, r0
 80138ce:	60bb      	str	r3, [r7, #8]
        // ...
        return err.code;
 80138d0:	68bb      	ldr	r3, [r7, #8]
 80138d2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80138d6:	e000      	b.n	80138da <aiRun+0x6a>
    }

    return 0;
 80138d8:	2300      	movs	r3, #0
}
 80138da:	4618      	mov	r0, r3
 80138dc:	3710      	adds	r7, #16
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}
 80138e2:	bf00      	nop
 80138e4:	20004cd4 	.word	0x20004cd4
 80138e8:	20000058 	.word	0x20000058
 80138ec:	20000070 	.word	0x20000070

080138f0 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	af00      	add	r7, sp, #0
    /* Activation/working buffer is allocated as a static memory chunk
     * (bss section) */
    AI_ALIGNED(4)
    static ai_u8 activations[AI_KWDNETZ_DATA_ACTIVATIONS_SIZE];

    aiInit(activations);
 80138f4:	4802      	ldr	r0, [pc, #8]	; (8013900 <MX_X_CUBE_AI_Init+0x10>)
 80138f6:	f7ff ff5d 	bl	80137b4 <aiInit>
    /* USER CODE END 0 */
}
 80138fa:	bf00      	nop
 80138fc:	bd80      	pop	{r7, pc}
 80138fe:	bf00      	nop
 8013900:	20004cd8 	.word	0x20004cd8

08013904 <kwdnetz_configure_activations>:


AI_DECLARE_STATIC
ai_bool kwdnetz_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8013904:	b480      	push	{r7}
 8013906:	b085      	sub	sp, #20
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
 801390c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 801390e:	683b      	ldr	r3, [r7, #0]
 8013910:	691b      	ldr	r3, [r3, #16]
 8013912:	3303      	adds	r3, #3
 8013914:	f023 0303 	bic.w	r3, r3, #3
 8013918:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    conv2d_2_scratch0_array.data = AI_PTR(activations + 0);
 801391a:	4a2b      	ldr	r2, [pc, #172]	; (80139c8 <kwdnetz_configure_activations+0xc4>)
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(activations + 0);
 8013920:	4a29      	ldr	r2, [pc, #164]	; (80139c8 <kwdnetz_configure_activations+0xc4>)
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	60d3      	str	r3, [r2, #12]
    conv2d_0_scratch0_array.data = AI_PTR(activations + 0);
 8013926:	4a29      	ldr	r2, [pc, #164]	; (80139cc <kwdnetz_configure_activations+0xc8>)
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch0_array.data_start = AI_PTR(activations + 0);
 801392c:	4a27      	ldr	r2, [pc, #156]	; (80139cc <kwdnetz_configure_activations+0xc8>)
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	60d3      	str	r3, [r2, #12]
    input_0_output_array.data = AI_PTR(NULL);
 8013932:	4b27      	ldr	r3, [pc, #156]	; (80139d0 <kwdnetz_configure_activations+0xcc>)
 8013934:	2200      	movs	r2, #0
 8013936:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8013938:	4b25      	ldr	r3, [pc, #148]	; (80139d0 <kwdnetz_configure_activations+0xcc>)
 801393a:	2200      	movs	r2, #0
 801393c:	60da      	str	r2, [r3, #12]
    conv2d_0_output_array.data = AI_PTR(activations + 80320);
 801393e:	68fa      	ldr	r2, [r7, #12]
 8013940:	4b24      	ldr	r3, [pc, #144]	; (80139d4 <kwdnetz_configure_activations+0xd0>)
 8013942:	4413      	add	r3, r2
 8013944:	4a24      	ldr	r2, [pc, #144]	; (80139d8 <kwdnetz_configure_activations+0xd4>)
 8013946:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(activations + 80320);
 8013948:	68fa      	ldr	r2, [r7, #12]
 801394a:	4b22      	ldr	r3, [pc, #136]	; (80139d4 <kwdnetz_configure_activations+0xd0>)
 801394c:	4413      	add	r3, r2
 801394e:	4a22      	ldr	r2, [pc, #136]	; (80139d8 <kwdnetz_configure_activations+0xd4>)
 8013950:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(activations + 17100);
 8013952:	68fa      	ldr	r2, [r7, #12]
 8013954:	f244 23cc 	movw	r3, #17100	; 0x42cc
 8013958:	4413      	add	r3, r2
 801395a:	4a20      	ldr	r2, [pc, #128]	; (80139dc <kwdnetz_configure_activations+0xd8>)
 801395c:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(activations + 17100);
 801395e:	68fa      	ldr	r2, [r7, #12]
 8013960:	f244 23cc 	movw	r3, #17100	; 0x42cc
 8013964:	4413      	add	r3, r2
 8013966:	4a1d      	ldr	r2, [pc, #116]	; (80139dc <kwdnetz_configure_activations+0xd8>)
 8013968:	60d3      	str	r3, [r2, #12]
    dense_4_output_array.data = AI_PTR(activations + 0);
 801396a:	4a1d      	ldr	r2, [pc, #116]	; (80139e0 <kwdnetz_configure_activations+0xdc>)
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(activations + 0);
 8013970:	4a1b      	ldr	r2, [pc, #108]	; (80139e0 <kwdnetz_configure_activations+0xdc>)
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	60d3      	str	r3, [r2, #12]
    nl_4_output_array.data = AI_PTR(activations + 0);
 8013976:	4a1b      	ldr	r2, [pc, #108]	; (80139e4 <kwdnetz_configure_activations+0xe0>)
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	6093      	str	r3, [r2, #8]
    nl_4_output_array.data_start = AI_PTR(activations + 0);
 801397c:	4a19      	ldr	r2, [pc, #100]	; (80139e4 <kwdnetz_configure_activations+0xe0>)
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	60d3      	str	r3, [r2, #12]
    dense_5_output_array.data = AI_PTR(activations + 120);
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	3378      	adds	r3, #120	; 0x78
 8013986:	4a18      	ldr	r2, [pc, #96]	; (80139e8 <kwdnetz_configure_activations+0xe4>)
 8013988:	6093      	str	r3, [r2, #8]
    dense_5_output_array.data_start = AI_PTR(activations + 120);
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	3378      	adds	r3, #120	; 0x78
 801398e:	4a16      	ldr	r2, [pc, #88]	; (80139e8 <kwdnetz_configure_activations+0xe4>)
 8013990:	60d3      	str	r3, [r2, #12]
    nl_5_output_array.data = AI_PTR(activations + 120);
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	3378      	adds	r3, #120	; 0x78
 8013996:	4a15      	ldr	r2, [pc, #84]	; (80139ec <kwdnetz_configure_activations+0xe8>)
 8013998:	6093      	str	r3, [r2, #8]
    nl_5_output_array.data_start = AI_PTR(activations + 120);
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	3378      	adds	r3, #120	; 0x78
 801399e:	4a13      	ldr	r2, [pc, #76]	; (80139ec <kwdnetz_configure_activations+0xe8>)
 80139a0:	60d3      	str	r3, [r2, #12]
    dense_6_output_array.data = AI_PTR(activations + 0);
 80139a2:	4a13      	ldr	r2, [pc, #76]	; (80139f0 <kwdnetz_configure_activations+0xec>)
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	6093      	str	r3, [r2, #8]
    dense_6_output_array.data_start = AI_PTR(activations + 0);
 80139a8:	4a11      	ldr	r2, [pc, #68]	; (80139f0 <kwdnetz_configure_activations+0xec>)
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	60d3      	str	r3, [r2, #12]
    nl_7_output_array.data = AI_PTR(NULL);
 80139ae:	4b11      	ldr	r3, [pc, #68]	; (80139f4 <kwdnetz_configure_activations+0xf0>)
 80139b0:	2200      	movs	r2, #0
 80139b2:	609a      	str	r2, [r3, #8]
    nl_7_output_array.data_start = AI_PTR(NULL);
 80139b4:	4b0f      	ldr	r3, [pc, #60]	; (80139f4 <kwdnetz_configure_activations+0xf0>)
 80139b6:	2200      	movs	r2, #0
 80139b8:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 80139ba:	2301      	movs	r3, #1
}
 80139bc:	4618      	mov	r0, r3
 80139be:	3714      	adds	r7, #20
 80139c0:	46bd      	mov	sp, r7
 80139c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c6:	4770      	bx	lr
 80139c8:	200000e0 	.word	0x200000e0
 80139cc:	200000f0 	.word	0x200000f0
 80139d0:	200001a0 	.word	0x200001a0
 80139d4:	000139c0 	.word	0x000139c0
 80139d8:	200001b0 	.word	0x200001b0
 80139dc:	200001c0 	.word	0x200001c0
 80139e0:	200001d0 	.word	0x200001d0
 80139e4:	200001e0 	.word	0x200001e0
 80139e8:	200001f0 	.word	0x200001f0
 80139ec:	20000200 	.word	0x20000200
 80139f0:	20000210 	.word	0x20000210
 80139f4:	20000220 	.word	0x20000220

080139f8 <kwdnetz_configure_weights>:


AI_DECLARE_STATIC
ai_bool kwdnetz_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 80139f8:	b480      	push	{r7}
 80139fa:	b085      	sub	sp, #20
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
 8013a00:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8013a02:	683b      	ldr	r3, [r7, #0]
 8013a04:	691b      	ldr	r3, [r3, #16]
 8013a06:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8013a08:	4b55      	ldr	r3, [pc, #340]	; (8013b60 <kwdnetz_configure_weights+0x168>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a10:	4a53      	ldr	r2, [pc, #332]	; (8013b60 <kwdnetz_configure_weights+0x168>)
 8013a12:	6013      	str	r3, [r2, #0]
    dense_6_bias_array.data = AI_PTR(weights + 71060);
 8013a14:	68fa      	ldr	r2, [r7, #12]
 8013a16:	4b53      	ldr	r3, [pc, #332]	; (8013b64 <kwdnetz_configure_weights+0x16c>)
 8013a18:	4413      	add	r3, r2
 8013a1a:	4a51      	ldr	r2, [pc, #324]	; (8013b60 <kwdnetz_configure_weights+0x168>)
 8013a1c:	6093      	str	r3, [r2, #8]
    dense_6_bias_array.data_start = AI_PTR(weights + 71060);
 8013a1e:	68fa      	ldr	r2, [r7, #12]
 8013a20:	4b50      	ldr	r3, [pc, #320]	; (8013b64 <kwdnetz_configure_weights+0x16c>)
 8013a22:	4413      	add	r3, r2
 8013a24:	4a4e      	ldr	r2, [pc, #312]	; (8013b60 <kwdnetz_configure_weights+0x168>)
 8013a26:	60d3      	str	r3, [r2, #12]
    dense_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8013a28:	4b4f      	ldr	r3, [pc, #316]	; (8013b68 <kwdnetz_configure_weights+0x170>)
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a30:	4a4d      	ldr	r2, [pc, #308]	; (8013b68 <kwdnetz_configure_weights+0x170>)
 8013a32:	6013      	str	r3, [r2, #0]
    dense_6_weights_array.data = AI_PTR(weights + 70340);
 8013a34:	68fa      	ldr	r2, [r7, #12]
 8013a36:	4b4d      	ldr	r3, [pc, #308]	; (8013b6c <kwdnetz_configure_weights+0x174>)
 8013a38:	4413      	add	r3, r2
 8013a3a:	4a4b      	ldr	r2, [pc, #300]	; (8013b68 <kwdnetz_configure_weights+0x170>)
 8013a3c:	6093      	str	r3, [r2, #8]
    dense_6_weights_array.data_start = AI_PTR(weights + 70340);
 8013a3e:	68fa      	ldr	r2, [r7, #12]
 8013a40:	4b4a      	ldr	r3, [pc, #296]	; (8013b6c <kwdnetz_configure_weights+0x174>)
 8013a42:	4413      	add	r3, r2
 8013a44:	4a48      	ldr	r2, [pc, #288]	; (8013b68 <kwdnetz_configure_weights+0x170>)
 8013a46:	60d3      	str	r3, [r2, #12]
    dense_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8013a48:	4b49      	ldr	r3, [pc, #292]	; (8013b70 <kwdnetz_configure_weights+0x178>)
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a50:	4a47      	ldr	r2, [pc, #284]	; (8013b70 <kwdnetz_configure_weights+0x178>)
 8013a52:	6013      	str	r3, [r2, #0]
    dense_5_bias_array.data = AI_PTR(weights + 70100);
 8013a54:	68fa      	ldr	r2, [r7, #12]
 8013a56:	4b47      	ldr	r3, [pc, #284]	; (8013b74 <kwdnetz_configure_weights+0x17c>)
 8013a58:	4413      	add	r3, r2
 8013a5a:	4a45      	ldr	r2, [pc, #276]	; (8013b70 <kwdnetz_configure_weights+0x178>)
 8013a5c:	6093      	str	r3, [r2, #8]
    dense_5_bias_array.data_start = AI_PTR(weights + 70100);
 8013a5e:	68fa      	ldr	r2, [r7, #12]
 8013a60:	4b44      	ldr	r3, [pc, #272]	; (8013b74 <kwdnetz_configure_weights+0x17c>)
 8013a62:	4413      	add	r3, r2
 8013a64:	4a42      	ldr	r2, [pc, #264]	; (8013b70 <kwdnetz_configure_weights+0x178>)
 8013a66:	60d3      	str	r3, [r2, #12]
    dense_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8013a68:	4b43      	ldr	r3, [pc, #268]	; (8013b78 <kwdnetz_configure_weights+0x180>)
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a70:	4a41      	ldr	r2, [pc, #260]	; (8013b78 <kwdnetz_configure_weights+0x180>)
 8013a72:	6013      	str	r3, [r2, #0]
    dense_5_weights_array.data = AI_PTR(weights + 62900);
 8013a74:	68fa      	ldr	r2, [r7, #12]
 8013a76:	f24f 53b4 	movw	r3, #62900	; 0xf5b4
 8013a7a:	4413      	add	r3, r2
 8013a7c:	4a3e      	ldr	r2, [pc, #248]	; (8013b78 <kwdnetz_configure_weights+0x180>)
 8013a7e:	6093      	str	r3, [r2, #8]
    dense_5_weights_array.data_start = AI_PTR(weights + 62900);
 8013a80:	68fa      	ldr	r2, [r7, #12]
 8013a82:	f24f 53b4 	movw	r3, #62900	; 0xf5b4
 8013a86:	4413      	add	r3, r2
 8013a88:	4a3b      	ldr	r2, [pc, #236]	; (8013b78 <kwdnetz_configure_weights+0x180>)
 8013a8a:	60d3      	str	r3, [r2, #12]
    dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8013a8c:	4b3b      	ldr	r3, [pc, #236]	; (8013b7c <kwdnetz_configure_weights+0x184>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a94:	4a39      	ldr	r2, [pc, #228]	; (8013b7c <kwdnetz_configure_weights+0x184>)
 8013a96:	6013      	str	r3, [r2, #0]
    dense_4_bias_array.data = AI_PTR(weights + 62780);
 8013a98:	68fa      	ldr	r2, [r7, #12]
 8013a9a:	f24f 533c 	movw	r3, #62780	; 0xf53c
 8013a9e:	4413      	add	r3, r2
 8013aa0:	4a36      	ldr	r2, [pc, #216]	; (8013b7c <kwdnetz_configure_weights+0x184>)
 8013aa2:	6093      	str	r3, [r2, #8]
    dense_4_bias_array.data_start = AI_PTR(weights + 62780);
 8013aa4:	68fa      	ldr	r2, [r7, #12]
 8013aa6:	f24f 533c 	movw	r3, #62780	; 0xf53c
 8013aaa:	4413      	add	r3, r2
 8013aac:	4a33      	ldr	r2, [pc, #204]	; (8013b7c <kwdnetz_configure_weights+0x184>)
 8013aae:	60d3      	str	r3, [r2, #12]
    dense_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8013ab0:	4b33      	ldr	r3, [pc, #204]	; (8013b80 <kwdnetz_configure_weights+0x188>)
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013ab8:	4a31      	ldr	r2, [pc, #196]	; (8013b80 <kwdnetz_configure_weights+0x188>)
 8013aba:	6013      	str	r3, [r2, #0]
    dense_4_weights_array.data = AI_PTR(weights + 23180);
 8013abc:	68fa      	ldr	r2, [r7, #12]
 8013abe:	f645 238c 	movw	r3, #23180	; 0x5a8c
 8013ac2:	4413      	add	r3, r2
 8013ac4:	4a2e      	ldr	r2, [pc, #184]	; (8013b80 <kwdnetz_configure_weights+0x188>)
 8013ac6:	6093      	str	r3, [r2, #8]
    dense_4_weights_array.data_start = AI_PTR(weights + 23180);
 8013ac8:	68fa      	ldr	r2, [r7, #12]
 8013aca:	f645 238c 	movw	r3, #23180	; 0x5a8c
 8013ace:	4413      	add	r3, r2
 8013ad0:	4a2b      	ldr	r2, [pc, #172]	; (8013b80 <kwdnetz_configure_weights+0x188>)
 8013ad2:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8013ad4:	4b2b      	ldr	r3, [pc, #172]	; (8013b84 <kwdnetz_configure_weights+0x18c>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013adc:	4a29      	ldr	r2, [pc, #164]	; (8013b84 <kwdnetz_configure_weights+0x18c>)
 8013ade:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(weights + 23120);
 8013ae0:	68fa      	ldr	r2, [r7, #12]
 8013ae2:	f645 2350 	movw	r3, #23120	; 0x5a50
 8013ae6:	4413      	add	r3, r2
 8013ae8:	4a26      	ldr	r2, [pc, #152]	; (8013b84 <kwdnetz_configure_weights+0x18c>)
 8013aea:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(weights + 23120);
 8013aec:	68fa      	ldr	r2, [r7, #12]
 8013aee:	f645 2350 	movw	r3, #23120	; 0x5a50
 8013af2:	4413      	add	r3, r2
 8013af4:	4a23      	ldr	r2, [pc, #140]	; (8013b84 <kwdnetz_configure_weights+0x18c>)
 8013af6:	60d3      	str	r3, [r2, #12]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8013af8:	4b23      	ldr	r3, [pc, #140]	; (8013b88 <kwdnetz_configure_weights+0x190>)
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013b00:	4a21      	ldr	r2, [pc, #132]	; (8013b88 <kwdnetz_configure_weights+0x190>)
 8013b02:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(weights + 1520);
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 8013b0a:	4a1f      	ldr	r2, [pc, #124]	; (8013b88 <kwdnetz_configure_weights+0x190>)
 8013b0c:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(weights + 1520);
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 8013b14:	4a1c      	ldr	r2, [pc, #112]	; (8013b88 <kwdnetz_configure_weights+0x190>)
 8013b16:	60d3      	str	r3, [r2, #12]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8013b18:	4b1c      	ldr	r3, [pc, #112]	; (8013b8c <kwdnetz_configure_weights+0x194>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013b20:	4a1a      	ldr	r2, [pc, #104]	; (8013b8c <kwdnetz_configure_weights+0x194>)
 8013b22:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(weights + 1440);
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8013b2a:	4a18      	ldr	r2, [pc, #96]	; (8013b8c <kwdnetz_configure_weights+0x194>)
 8013b2c:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(weights + 1440);
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8013b34:	4a15      	ldr	r2, [pc, #84]	; (8013b8c <kwdnetz_configure_weights+0x194>)
 8013b36:	60d3      	str	r3, [r2, #12]
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8013b38:	4b15      	ldr	r3, [pc, #84]	; (8013b90 <kwdnetz_configure_weights+0x198>)
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013b40:	4a13      	ldr	r2, [pc, #76]	; (8013b90 <kwdnetz_configure_weights+0x198>)
 8013b42:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(weights + 0);
 8013b44:	4a12      	ldr	r2, [pc, #72]	; (8013b90 <kwdnetz_configure_weights+0x198>)
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(weights + 0);
 8013b4a:	4a11      	ldr	r2, [pc, #68]	; (8013b90 <kwdnetz_configure_weights+0x198>)
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8013b50:	2301      	movs	r3, #1
}
 8013b52:	4618      	mov	r0, r3
 8013b54:	3714      	adds	r7, #20
 8013b56:	46bd      	mov	sp, r7
 8013b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5c:	4770      	bx	lr
 8013b5e:	bf00      	nop
 8013b60:	20000100 	.word	0x20000100
 8013b64:	00011594 	.word	0x00011594
 8013b68:	20000110 	.word	0x20000110
 8013b6c:	000112c4 	.word	0x000112c4
 8013b70:	20000120 	.word	0x20000120
 8013b74:	000111d4 	.word	0x000111d4
 8013b78:	20000130 	.word	0x20000130
 8013b7c:	20000140 	.word	0x20000140
 8013b80:	20000150 	.word	0x20000150
 8013b84:	20000160 	.word	0x20000160
 8013b88:	20000170 	.word	0x20000170
 8013b8c:	20000180 	.word	0x20000180
 8013b90:	20000190 	.word	0x20000190

08013b94 <ai_kwdnetz_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_kwdnetz_get_error(ai_handle network)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b082      	sub	sp, #8
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8013b9c:	6878      	ldr	r0, [r7, #4]
 8013b9e:	f7ec fe03 	bl	80007a8 <ai_platform_network_get_error>
 8013ba2:	4603      	mov	r3, r0
}
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	3708      	adds	r7, #8
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	bd80      	pop	{r7, pc}

08013bac <ai_kwdnetz_create>:

AI_API_ENTRY
ai_error ai_kwdnetz_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b084      	sub	sp, #16
 8013bb0:	af02      	add	r7, sp, #8
 8013bb2:	6078      	str	r0, [r7, #4]
 8013bb4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	9301      	str	r3, [sp, #4]
 8013bba:	2303      	movs	r3, #3
 8013bbc:	9300      	str	r3, [sp, #0]
 8013bbe:	2301      	movs	r3, #1
 8013bc0:	4a04      	ldr	r2, [pc, #16]	; (8013bd4 <ai_kwdnetz_create+0x28>)
 8013bc2:	6839      	ldr	r1, [r7, #0]
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	f7ec ff0f 	bl	80009e8 <ai_platform_network_create>
 8013bca:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8013bcc:	4618      	mov	r0, r3
 8013bce:	3708      	adds	r7, #8
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	bd80      	pop	{r7, pc}
 8013bd4:	20000088 	.word	0x20000088

08013bd8 <ai_kwdnetz_destroy>:

AI_API_ENTRY
ai_handle ai_kwdnetz_destroy(ai_handle network)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b082      	sub	sp, #8
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	f7ec ff37 	bl	8000a54 <ai_platform_network_destroy>
 8013be6:	4603      	mov	r3, r0
}
 8013be8:	4618      	mov	r0, r3
 8013bea:	3708      	adds	r7, #8
 8013bec:	46bd      	mov	sp, r7
 8013bee:	bd80      	pop	{r7, pc}

08013bf0 <ai_kwdnetz_init>:

AI_API_ENTRY
ai_bool ai_kwdnetz_init(
  ai_handle network, const ai_network_params* params)
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b084      	sub	sp, #16
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
 8013bf8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8013bfa:	6839      	ldr	r1, [r7, #0]
 8013bfc:	6878      	ldr	r0, [r7, #4]
 8013bfe:	f7ec ff79 	bl	8000af4 <ai_platform_network_init>
 8013c02:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d101      	bne.n	8013c0e <ai_kwdnetz_init+0x1e>
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	e01f      	b.n	8013c4e <ai_kwdnetz_init+0x5e>

  ai_bool ok = true;
 8013c0e:	2301      	movs	r3, #1
 8013c10:	72fb      	strb	r3, [r7, #11]
  ok &= kwdnetz_configure_weights(net_ctx, &params->params);
 8013c12:	683b      	ldr	r3, [r7, #0]
 8013c14:	4619      	mov	r1, r3
 8013c16:	68f8      	ldr	r0, [r7, #12]
 8013c18:	f7ff feee 	bl	80139f8 <kwdnetz_configure_weights>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	461a      	mov	r2, r3
 8013c20:	7afb      	ldrb	r3, [r7, #11]
 8013c22:	4013      	ands	r3, r2
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	bf14      	ite	ne
 8013c28:	2301      	movne	r3, #1
 8013c2a:	2300      	moveq	r3, #0
 8013c2c:	72fb      	strb	r3, [r7, #11]
  ok &= kwdnetz_configure_activations(net_ctx, &params->activations);
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	3318      	adds	r3, #24
 8013c32:	4619      	mov	r1, r3
 8013c34:	68f8      	ldr	r0, [r7, #12]
 8013c36:	f7ff fe65 	bl	8013904 <kwdnetz_configure_activations>
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	461a      	mov	r2, r3
 8013c3e:	7afb      	ldrb	r3, [r7, #11]
 8013c40:	4013      	ands	r3, r2
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	bf14      	ite	ne
 8013c46:	2301      	movne	r3, #1
 8013c48:	2300      	moveq	r3, #0
 8013c4a:	72fb      	strb	r3, [r7, #11]

  return ok;
 8013c4c:	7afb      	ldrb	r3, [r7, #11]
}
 8013c4e:	4618      	mov	r0, r3
 8013c50:	3710      	adds	r7, #16
 8013c52:	46bd      	mov	sp, r7
 8013c54:	bd80      	pop	{r7, pc}

08013c56 <ai_kwdnetz_run>:


AI_API_ENTRY
ai_i32 ai_kwdnetz_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8013c56:	b580      	push	{r7, lr}
 8013c58:	b084      	sub	sp, #16
 8013c5a:	af00      	add	r7, sp, #0
 8013c5c:	60f8      	str	r0, [r7, #12]
 8013c5e:	60b9      	str	r1, [r7, #8]
 8013c60:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8013c62:	687a      	ldr	r2, [r7, #4]
 8013c64:	68b9      	ldr	r1, [r7, #8]
 8013c66:	68f8      	ldr	r0, [r7, #12]
 8013c68:	f7ec ffdc 	bl	8000c24 <ai_platform_network_process>
 8013c6c:	4603      	mov	r3, r0
}
 8013c6e:	4618      	mov	r0, r3
 8013c70:	3710      	adds	r7, #16
 8013c72:	46bd      	mov	sp, r7
 8013c74:	bd80      	pop	{r7, pc}
	...

08013c78 <ai_kwdnetz_data_weights_get>:
#include "kwdnetz_data.h"

ai_handle ai_kwdnetz_data_weights_get(void)
{
 8013c78:	b480      	push	{r7}
 8013c7a:	af00      	add	r7, sp, #0
    0x87, 0x28, 0x3e, 0xe5, 0x94, 0xb3, 0xbc, 0x8c, 0xb0,
    0x84, 0x3e, 0x9c, 0x7d, 0xb1, 0xbd, 0xaf, 0x16, 0x6c,
    0xbd, 0x6d, 0xc4, 0x8e, 0xbd, 0x3c, 0x8d, 0x88, 0x3d
  };

  return AI_HANDLE_PTR(s_kwdnetz_weights);
 8013c7c:	4b02      	ldr	r3, [pc, #8]	; (8013c88 <ai_kwdnetz_data_weights_get+0x10>)
}
 8013c7e:	4618      	mov	r0, r3
 8013c80:	46bd      	mov	sp, r7
 8013c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c86:	4770      	bx	lr
 8013c88:	0802ca18 	.word	0x0802ca18
 8013c8c:	00000000 	.word	0x00000000

08013c90 <cos>:
 8013c90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013c92:	eeb0 7b40 	vmov.f64	d7, d0
 8013c96:	ee17 3a90 	vmov	r3, s15
 8013c9a:	4a19      	ldr	r2, [pc, #100]	; (8013d00 <cos+0x70>)
 8013c9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013ca0:	4293      	cmp	r3, r2
 8013ca2:	dc04      	bgt.n	8013cae <cos+0x1e>
 8013ca4:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8013cf8 <cos+0x68>
 8013ca8:	f002 f94e 	bl	8015f48 <__kernel_cos>
 8013cac:	e004      	b.n	8013cb8 <cos+0x28>
 8013cae:	4a15      	ldr	r2, [pc, #84]	; (8013d04 <cos+0x74>)
 8013cb0:	4293      	cmp	r3, r2
 8013cb2:	dd04      	ble.n	8013cbe <cos+0x2e>
 8013cb4:	ee30 0b40 	vsub.f64	d0, d0, d0
 8013cb8:	b005      	add	sp, #20
 8013cba:	f85d fb04 	ldr.w	pc, [sp], #4
 8013cbe:	4668      	mov	r0, sp
 8013cc0:	f001 fafa 	bl	80152b8 <__ieee754_rem_pio2>
 8013cc4:	f000 0003 	and.w	r0, r0, #3
 8013cc8:	2801      	cmp	r0, #1
 8013cca:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013cce:	ed9d 0b00 	vldr	d0, [sp]
 8013cd2:	d007      	beq.n	8013ce4 <cos+0x54>
 8013cd4:	2802      	cmp	r0, #2
 8013cd6:	d00a      	beq.n	8013cee <cos+0x5e>
 8013cd8:	2800      	cmp	r0, #0
 8013cda:	d0e5      	beq.n	8013ca8 <cos+0x18>
 8013cdc:	2001      	movs	r0, #1
 8013cde:	f002 fc3b 	bl	8016558 <__kernel_sin>
 8013ce2:	e7e9      	b.n	8013cb8 <cos+0x28>
 8013ce4:	f002 fc38 	bl	8016558 <__kernel_sin>
 8013ce8:	eeb1 0b40 	vneg.f64	d0, d0
 8013cec:	e7e4      	b.n	8013cb8 <cos+0x28>
 8013cee:	f002 f92b 	bl	8015f48 <__kernel_cos>
 8013cf2:	e7f9      	b.n	8013ce8 <cos+0x58>
 8013cf4:	f3af 8000 	nop.w
	...
 8013d00:	3fe921fb 	.word	0x3fe921fb
 8013d04:	7fefffff 	.word	0x7fefffff

08013d08 <asinhf>:
 8013d08:	b510      	push	{r4, lr}
 8013d0a:	ee10 4a10 	vmov	r4, s0
 8013d0e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013d12:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013d16:	ed2d 8b04 	vpush	{d8-d9}
 8013d1a:	eeb0 8a40 	vmov.f32	s16, s0
 8013d1e:	db06      	blt.n	8013d2e <asinhf+0x26>
 8013d20:	ee30 8a00 	vadd.f32	s16, s0, s0
 8013d24:	eeb0 0a48 	vmov.f32	s0, s16
 8013d28:	ecbd 8b04 	vpop	{d8-d9}
 8013d2c:	bd10      	pop	{r4, pc}
 8013d2e:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 8013d32:	da21      	bge.n	8013d78 <asinhf+0x70>
 8013d34:	eddf 7a26 	vldr	s15, [pc, #152]	; 8013dd0 <asinhf+0xc8>
 8013d38:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013d3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d48:	dcec      	bgt.n	8013d24 <asinhf+0x1c>
 8013d4a:	eeb0 0a48 	vmov.f32	s0, s16
 8013d4e:	f000 fbf3 	bl	8014538 <fabsf>
 8013d52:	ee68 8a08 	vmul.f32	s17, s16, s16
 8013d56:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013d5a:	eeb0 9a40 	vmov.f32	s18, s0
 8013d5e:	ee38 0a88 	vadd.f32	s0, s17, s16
 8013d62:	f002 f8ed 	bl	8015f40 <__ieee754_sqrtf>
 8013d66:	ee30 8a08 	vadd.f32	s16, s0, s16
 8013d6a:	ee88 0a88 	vdiv.f32	s0, s17, s16
 8013d6e:	ee30 0a09 	vadd.f32	s0, s0, s18
 8013d72:	f000 fc93 	bl	801469c <log1pf>
 8013d76:	e028      	b.n	8013dca <asinhf+0xc2>
 8013d78:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 8013d7c:	dd0c      	ble.n	8013d98 <asinhf+0x90>
 8013d7e:	f000 fbdb 	bl	8014538 <fabsf>
 8013d82:	f000 fc23 	bl	80145cc <logf>
 8013d86:	ed9f 8a13 	vldr	s16, [pc, #76]	; 8013dd4 <asinhf+0xcc>
 8013d8a:	ee30 8a08 	vadd.f32	s16, s0, s16
 8013d8e:	2c00      	cmp	r4, #0
 8013d90:	bfd8      	it	le
 8013d92:	eeb1 8a48 	vnegle.f32	s16, s16
 8013d96:	e7c5      	b.n	8013d24 <asinhf+0x1c>
 8013d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d9c:	ddd5      	ble.n	8013d4a <asinhf+0x42>
 8013d9e:	f000 fbcb 	bl	8014538 <fabsf>
 8013da2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8013da6:	eef0 8a40 	vmov.f32	s17, s0
 8013daa:	eeb0 0a49 	vmov.f32	s0, s18
 8013dae:	eea8 0a08 	vfma.f32	s0, s16, s16
 8013db2:	f002 f8c5 	bl	8015f40 <__ieee754_sqrtf>
 8013db6:	ee70 7a28 	vadd.f32	s15, s0, s17
 8013dba:	ee89 0a27 	vdiv.f32	s0, s18, s15
 8013dbe:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013dc2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8013dc6:	f000 fc01 	bl	80145cc <logf>
 8013dca:	eeb0 8a40 	vmov.f32	s16, s0
 8013dce:	e7de      	b.n	8013d8e <asinhf+0x86>
 8013dd0:	7149f2ca 	.word	0x7149f2ca
 8013dd4:	3f317218 	.word	0x3f317218

08013dd8 <atanf>:
 8013dd8:	b538      	push	{r3, r4, r5, lr}
 8013dda:	ee10 5a10 	vmov	r5, s0
 8013dde:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013de2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8013de6:	eef0 7a40 	vmov.f32	s15, s0
 8013dea:	db0f      	blt.n	8013e0c <atanf+0x34>
 8013dec:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013df0:	dd04      	ble.n	8013dfc <atanf+0x24>
 8013df2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8013df6:	eeb0 0a67 	vmov.f32	s0, s15
 8013dfa:	bd38      	pop	{r3, r4, r5, pc}
 8013dfc:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8013f30 <atanf+0x158>
 8013e00:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8013f34 <atanf+0x15c>
 8013e04:	2d00      	cmp	r5, #0
 8013e06:	fe77 7a87 	vselgt.f32	s15, s15, s14
 8013e0a:	e7f4      	b.n	8013df6 <atanf+0x1e>
 8013e0c:	4b4a      	ldr	r3, [pc, #296]	; (8013f38 <atanf+0x160>)
 8013e0e:	429c      	cmp	r4, r3
 8013e10:	dc10      	bgt.n	8013e34 <atanf+0x5c>
 8013e12:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8013e16:	da0a      	bge.n	8013e2e <atanf+0x56>
 8013e18:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8013f3c <atanf+0x164>
 8013e1c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8013e20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013e24:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e2c:	dce3      	bgt.n	8013df6 <atanf+0x1e>
 8013e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e32:	e013      	b.n	8013e5c <atanf+0x84>
 8013e34:	f000 fb80 	bl	8014538 <fabsf>
 8013e38:	4b41      	ldr	r3, [pc, #260]	; (8013f40 <atanf+0x168>)
 8013e3a:	429c      	cmp	r4, r3
 8013e3c:	dc4f      	bgt.n	8013ede <atanf+0x106>
 8013e3e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8013e42:	429c      	cmp	r4, r3
 8013e44:	dc41      	bgt.n	8013eca <atanf+0xf2>
 8013e46:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013e4a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013e4e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013e52:	2300      	movs	r3, #0
 8013e54:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013e58:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013e5c:	1c5a      	adds	r2, r3, #1
 8013e5e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8013e62:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013f44 <atanf+0x16c>
 8013e66:	eddf 5a38 	vldr	s11, [pc, #224]	; 8013f48 <atanf+0x170>
 8013e6a:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8013f4c <atanf+0x174>
 8013e6e:	ee66 6a06 	vmul.f32	s13, s12, s12
 8013e72:	eee6 5a87 	vfma.f32	s11, s13, s14
 8013e76:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8013f50 <atanf+0x178>
 8013e7a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013e7e:	eddf 5a35 	vldr	s11, [pc, #212]	; 8013f54 <atanf+0x17c>
 8013e82:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013e86:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013f58 <atanf+0x180>
 8013e8a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013e8e:	eddf 5a33 	vldr	s11, [pc, #204]	; 8013f5c <atanf+0x184>
 8013e92:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013e96:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8013f60 <atanf+0x188>
 8013e9a:	eea6 5a87 	vfma.f32	s10, s13, s14
 8013e9e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013f64 <atanf+0x18c>
 8013ea2:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013ea6:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8013f68 <atanf+0x190>
 8013eaa:	eea7 5a26 	vfma.f32	s10, s14, s13
 8013eae:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8013f6c <atanf+0x194>
 8013eb2:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013eb6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013eba:	eea5 7a86 	vfma.f32	s14, s11, s12
 8013ebe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013ec2:	d121      	bne.n	8013f08 <atanf+0x130>
 8013ec4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ec8:	e795      	b.n	8013df6 <atanf+0x1e>
 8013eca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013ece:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013ed2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013edc:	e7be      	b.n	8013e5c <atanf+0x84>
 8013ede:	4b24      	ldr	r3, [pc, #144]	; (8013f70 <atanf+0x198>)
 8013ee0:	429c      	cmp	r4, r3
 8013ee2:	dc0b      	bgt.n	8013efc <atanf+0x124>
 8013ee4:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013eec:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013ef0:	2302      	movs	r3, #2
 8013ef2:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013efa:	e7af      	b.n	8013e5c <atanf+0x84>
 8013efc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013f00:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013f04:	2303      	movs	r3, #3
 8013f06:	e7a9      	b.n	8013e5c <atanf+0x84>
 8013f08:	4a1a      	ldr	r2, [pc, #104]	; (8013f74 <atanf+0x19c>)
 8013f0a:	491b      	ldr	r1, [pc, #108]	; (8013f78 <atanf+0x1a0>)
 8013f0c:	009b      	lsls	r3, r3, #2
 8013f0e:	441a      	add	r2, r3
 8013f10:	440b      	add	r3, r1
 8013f12:	edd3 6a00 	vldr	s13, [r3]
 8013f16:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013f1a:	2d00      	cmp	r5, #0
 8013f1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f20:	ed92 7a00 	vldr	s14, [r2]
 8013f24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f28:	bfb8      	it	lt
 8013f2a:	eef1 7a67 	vneglt.f32	s15, s15
 8013f2e:	e762      	b.n	8013df6 <atanf+0x1e>
 8013f30:	bfc90fdb 	.word	0xbfc90fdb
 8013f34:	3fc90fdb 	.word	0x3fc90fdb
 8013f38:	3edfffff 	.word	0x3edfffff
 8013f3c:	7149f2ca 	.word	0x7149f2ca
 8013f40:	3f97ffff 	.word	0x3f97ffff
 8013f44:	3c8569d7 	.word	0x3c8569d7
 8013f48:	3d4bda59 	.word	0x3d4bda59
 8013f4c:	bd6ef16b 	.word	0xbd6ef16b
 8013f50:	3d886b35 	.word	0x3d886b35
 8013f54:	3dba2e6e 	.word	0x3dba2e6e
 8013f58:	3e124925 	.word	0x3e124925
 8013f5c:	3eaaaaab 	.word	0x3eaaaaab
 8013f60:	bd15a221 	.word	0xbd15a221
 8013f64:	bd9d8795 	.word	0xbd9d8795
 8013f68:	bde38e38 	.word	0xbde38e38
 8013f6c:	be4ccccd 	.word	0xbe4ccccd
 8013f70:	401bffff 	.word	0x401bffff
 8013f74:	0803dfb8 	.word	0x0803dfb8
 8013f78:	0803dfc8 	.word	0x0803dfc8

08013f7c <ceilf>:
 8013f7c:	ee10 3a10 	vmov	r3, s0
 8013f80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013f84:	0dca      	lsrs	r2, r1, #23
 8013f86:	3a7f      	subs	r2, #127	; 0x7f
 8013f88:	2a16      	cmp	r2, #22
 8013f8a:	dc2a      	bgt.n	8013fe2 <ceilf+0x66>
 8013f8c:	2a00      	cmp	r2, #0
 8013f8e:	da11      	bge.n	8013fb4 <ceilf+0x38>
 8013f90:	eddf 7a18 	vldr	s15, [pc, #96]	; 8013ff4 <ceilf+0x78>
 8013f94:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013f98:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fa0:	dd05      	ble.n	8013fae <ceilf+0x32>
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	db23      	blt.n	8013fee <ceilf+0x72>
 8013fa6:	2900      	cmp	r1, #0
 8013fa8:	bf18      	it	ne
 8013faa:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8013fae:	ee00 3a10 	vmov	s0, r3
 8013fb2:	4770      	bx	lr
 8013fb4:	4910      	ldr	r1, [pc, #64]	; (8013ff8 <ceilf+0x7c>)
 8013fb6:	4111      	asrs	r1, r2
 8013fb8:	420b      	tst	r3, r1
 8013fba:	d0fa      	beq.n	8013fb2 <ceilf+0x36>
 8013fbc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8013ff4 <ceilf+0x78>
 8013fc0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013fc4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fcc:	ddef      	ble.n	8013fae <ceilf+0x32>
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	bfc2      	ittt	gt
 8013fd2:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8013fd6:	fa40 f202 	asrgt.w	r2, r0, r2
 8013fda:	189b      	addgt	r3, r3, r2
 8013fdc:	ea23 0301 	bic.w	r3, r3, r1
 8013fe0:	e7e5      	b.n	8013fae <ceilf+0x32>
 8013fe2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013fe6:	d3e4      	bcc.n	8013fb2 <ceilf+0x36>
 8013fe8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013fec:	4770      	bx	lr
 8013fee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013ff2:	e7dc      	b.n	8013fae <ceilf+0x32>
 8013ff4:	7149f2ca 	.word	0x7149f2ca
 8013ff8:	007fffff 	.word	0x007fffff

08013ffc <cosf>:
 8013ffc:	ee10 3a10 	vmov	r3, s0
 8014000:	b507      	push	{r0, r1, r2, lr}
 8014002:	4a1c      	ldr	r2, [pc, #112]	; (8014074 <cosf+0x78>)
 8014004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014008:	4293      	cmp	r3, r2
 801400a:	dc04      	bgt.n	8014016 <cosf+0x1a>
 801400c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8014078 <cosf+0x7c>
 8014010:	f002 fafa 	bl	8016608 <__kernel_cosf>
 8014014:	e004      	b.n	8014020 <cosf+0x24>
 8014016:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801401a:	db04      	blt.n	8014026 <cosf+0x2a>
 801401c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014020:	b003      	add	sp, #12
 8014022:	f85d fb04 	ldr.w	pc, [sp], #4
 8014026:	4668      	mov	r0, sp
 8014028:	f001 fdf0 	bl	8015c0c <__ieee754_rem_pio2f>
 801402c:	f000 0003 	and.w	r0, r0, #3
 8014030:	2801      	cmp	r0, #1
 8014032:	d007      	beq.n	8014044 <cosf+0x48>
 8014034:	2802      	cmp	r0, #2
 8014036:	d00e      	beq.n	8014056 <cosf+0x5a>
 8014038:	b9a0      	cbnz	r0, 8014064 <cosf+0x68>
 801403a:	eddd 0a01 	vldr	s1, [sp, #4]
 801403e:	ed9d 0a00 	vldr	s0, [sp]
 8014042:	e7e5      	b.n	8014010 <cosf+0x14>
 8014044:	eddd 0a01 	vldr	s1, [sp, #4]
 8014048:	ed9d 0a00 	vldr	s0, [sp]
 801404c:	f002 fdbc 	bl	8016bc8 <__kernel_sinf>
 8014050:	eeb1 0a40 	vneg.f32	s0, s0
 8014054:	e7e4      	b.n	8014020 <cosf+0x24>
 8014056:	eddd 0a01 	vldr	s1, [sp, #4]
 801405a:	ed9d 0a00 	vldr	s0, [sp]
 801405e:	f002 fad3 	bl	8016608 <__kernel_cosf>
 8014062:	e7f5      	b.n	8014050 <cosf+0x54>
 8014064:	2001      	movs	r0, #1
 8014066:	eddd 0a01 	vldr	s1, [sp, #4]
 801406a:	ed9d 0a00 	vldr	s0, [sp]
 801406e:	f002 fdab 	bl	8016bc8 <__kernel_sinf>
 8014072:	e7d5      	b.n	8014020 <cosf+0x24>
 8014074:	3f490fd8 	.word	0x3f490fd8
 8014078:	00000000 	.word	0x00000000

0801407c <erff>:
 801407c:	b538      	push	{r3, r4, r5, lr}
 801407e:	ee10 4a10 	vmov	r4, s0
 8014082:	f024 4500 	bic.w	r5, r4, #2147483648	; 0x80000000
 8014086:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801408a:	ed2d 8b06 	vpush	{d8-d10}
 801408e:	eef0 7a40 	vmov.f32	s15, s0
 8014092:	db12      	blt.n	80140ba <erff+0x3e>
 8014094:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014098:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801409c:	0fe4      	lsrs	r4, r4, #31
 801409e:	0064      	lsls	r4, r4, #1
 80140a0:	f1c4 0301 	rsb	r3, r4, #1
 80140a4:	ee00 3a10 	vmov	s0, r3
 80140a8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80140ac:	ee70 7a07 	vadd.f32	s15, s0, s14
 80140b0:	ecbd 8b06 	vpop	{d8-d10}
 80140b4:	eeb0 0a67 	vmov.f32	s0, s15
 80140b8:	bd38      	pop	{r3, r4, r5, pc}
 80140ba:	4ba4      	ldr	r3, [pc, #656]	; (801434c <erff+0x2d0>)
 80140bc:	429d      	cmp	r5, r3
 80140be:	dc4a      	bgt.n	8014156 <erff+0xda>
 80140c0:	f1b5 5f46 	cmp.w	r5, #830472192	; 0x31800000
 80140c4:	da16      	bge.n	80140f4 <erff+0x78>
 80140c6:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 80140ca:	da0e      	bge.n	80140ea <erff+0x6e>
 80140cc:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8014350 <erff+0x2d4>
 80140d0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80140d4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80140d8:	eea7 0a87 	vfma.f32	s0, s15, s14
 80140dc:	eef0 7a40 	vmov.f32	s15, s0
 80140e0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80140e4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80140e8:	e7e2      	b.n	80140b0 <erff+0x34>
 80140ea:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8014354 <erff+0x2d8>
 80140ee:	eee0 7a07 	vfma.f32	s15, s0, s14
 80140f2:	e7dd      	b.n	80140b0 <erff+0x34>
 80140f4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80140f8:	ed9f 6a97 	vldr	s12, [pc, #604]	; 8014358 <erff+0x2dc>
 80140fc:	eddf 6a97 	vldr	s13, [pc, #604]	; 801435c <erff+0x2e0>
 8014100:	eddf 5a97 	vldr	s11, [pc, #604]	; 8014360 <erff+0x2e4>
 8014104:	eee7 6a06 	vfma.f32	s13, s14, s12
 8014108:	ed9f 6a96 	vldr	s12, [pc, #600]	; 8014364 <erff+0x2e8>
 801410c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014110:	eddf 6a95 	vldr	s13, [pc, #596]	; 8014368 <erff+0x2ec>
 8014114:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014118:	ed9f 6a8e 	vldr	s12, [pc, #568]	; 8014354 <erff+0x2d8>
 801411c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014120:	eddf 6a92 	vldr	s13, [pc, #584]	; 801436c <erff+0x2f0>
 8014124:	eee7 6a25 	vfma.f32	s13, s14, s11
 8014128:	eddf 5a91 	vldr	s11, [pc, #580]	; 8014370 <erff+0x2f4>
 801412c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014130:	eddf 6a90 	vldr	s13, [pc, #576]	; 8014374 <erff+0x2f8>
 8014134:	eee5 6a87 	vfma.f32	s13, s11, s14
 8014138:	eddf 5a8f 	vldr	s11, [pc, #572]	; 8014378 <erff+0x2fc>
 801413c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014140:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014144:	eee5 6a87 	vfma.f32	s13, s11, s14
 8014148:	eeb0 7a66 	vmov.f32	s14, s13
 801414c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8014150:	eee0 7a26 	vfma.f32	s15, s0, s13
 8014154:	e7ac      	b.n	80140b0 <erff+0x34>
 8014156:	4b89      	ldr	r3, [pc, #548]	; (801437c <erff+0x300>)
 8014158:	429d      	cmp	r5, r3
 801415a:	dc44      	bgt.n	80141e6 <erff+0x16a>
 801415c:	f000 f9ec 	bl	8014538 <fabsf>
 8014160:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014164:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014168:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8014380 <erff+0x304>
 801416c:	eddf 6a85 	vldr	s13, [pc, #532]	; 8014384 <erff+0x308>
 8014170:	ed9f 6a85 	vldr	s12, [pc, #532]	; 8014388 <erff+0x30c>
 8014174:	eee0 6a07 	vfma.f32	s13, s0, s14
 8014178:	2c00      	cmp	r4, #0
 801417a:	ed9f 7a84 	vldr	s14, [pc, #528]	; 801438c <erff+0x310>
 801417e:	eea6 7a80 	vfma.f32	s14, s13, s0
 8014182:	eddf 6a83 	vldr	s13, [pc, #524]	; 8014390 <erff+0x314>
 8014186:	eee7 6a00 	vfma.f32	s13, s14, s0
 801418a:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8014394 <erff+0x318>
 801418e:	eea6 7a80 	vfma.f32	s14, s13, s0
 8014192:	eddf 6a81 	vldr	s13, [pc, #516]	; 8014398 <erff+0x31c>
 8014196:	eee7 6a00 	vfma.f32	s13, s14, s0
 801419a:	ed9f 7a80 	vldr	s14, [pc, #512]	; 801439c <erff+0x320>
 801419e:	eea6 7a80 	vfma.f32	s14, s13, s0
 80141a2:	eddf 6a7f 	vldr	s13, [pc, #508]	; 80143a0 <erff+0x324>
 80141a6:	eee0 6a06 	vfma.f32	s13, s0, s12
 80141aa:	ed9f 6a7e 	vldr	s12, [pc, #504]	; 80143a4 <erff+0x328>
 80141ae:	eea6 6a80 	vfma.f32	s12, s13, s0
 80141b2:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80143a8 <erff+0x32c>
 80141b6:	eee6 6a00 	vfma.f32	s13, s12, s0
 80141ba:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 80143ac <erff+0x330>
 80141be:	eea6 6a80 	vfma.f32	s12, s13, s0
 80141c2:	eddf 6a7b 	vldr	s13, [pc, #492]	; 80143b0 <erff+0x334>
 80141c6:	eee6 6a00 	vfma.f32	s13, s12, s0
 80141ca:	eee6 7a80 	vfma.f32	s15, s13, s0
 80141ce:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80141d2:	bfab      	itete	ge
 80141d4:	eddf 7a77 	vldrge	s15, [pc, #476]	; 80143b4 <erff+0x338>
 80141d8:	eddf 7a77 	vldrlt	s15, [pc, #476]	; 80143b8 <erff+0x33c>
 80141dc:	ee70 7a27 	vaddge.f32	s15, s0, s15
 80141e0:	ee77 7ac0 	vsublt.f32	s15, s15, s0
 80141e4:	e764      	b.n	80140b0 <erff+0x34>
 80141e6:	4b75      	ldr	r3, [pc, #468]	; (80143bc <erff+0x340>)
 80141e8:	429d      	cmp	r5, r3
 80141ea:	dd07      	ble.n	80141fc <erff+0x180>
 80141ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80141f0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80141f4:	2c00      	cmp	r4, #0
 80141f6:	fe60 7a27 	vselge.f32	s15, s0, s15
 80141fa:	e759      	b.n	80140b0 <erff+0x34>
 80141fc:	f000 f99c 	bl	8014538 <fabsf>
 8014200:	4b6f      	ldr	r3, [pc, #444]	; (80143c0 <erff+0x344>)
 8014202:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014206:	eeb0 9a40 	vmov.f32	s18, s0
 801420a:	429d      	cmp	r5, r3
 801420c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014210:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8014214:	eef0 8a40 	vmov.f32	s17, s0
 8014218:	dc64      	bgt.n	80142e4 <erff+0x268>
 801421a:	eddf 7a6a 	vldr	s15, [pc, #424]	; 80143c4 <erff+0x348>
 801421e:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80143c8 <erff+0x34c>
 8014222:	eddf 9a6a 	vldr	s19, [pc, #424]	; 80143cc <erff+0x350>
 8014226:	eee7 6a27 	vfma.f32	s13, s14, s15
 801422a:	eddf 7a69 	vldr	s15, [pc, #420]	; 80143d0 <erff+0x354>
 801422e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014232:	eddf 6a68 	vldr	s13, [pc, #416]	; 80143d4 <erff+0x358>
 8014236:	eee7 6a87 	vfma.f32	s13, s15, s14
 801423a:	eddf 7a67 	vldr	s15, [pc, #412]	; 80143d8 <erff+0x35c>
 801423e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014242:	eddf 6a66 	vldr	s13, [pc, #408]	; 80143dc <erff+0x360>
 8014246:	eee7 6a87 	vfma.f32	s13, s15, s14
 801424a:	eddf 7a65 	vldr	s15, [pc, #404]	; 80143e0 <erff+0x364>
 801424e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014252:	eddf 6a64 	vldr	s13, [pc, #400]	; 80143e4 <erff+0x368>
 8014256:	eee7 9a87 	vfma.f32	s19, s15, s14
 801425a:	eddf 7a63 	vldr	s15, [pc, #396]	; 80143e8 <erff+0x36c>
 801425e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014262:	eddf 6a62 	vldr	s13, [pc, #392]	; 80143ec <erff+0x370>
 8014266:	eee7 6a87 	vfma.f32	s13, s15, s14
 801426a:	eddf 7a61 	vldr	s15, [pc, #388]	; 80143f0 <erff+0x374>
 801426e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014272:	eddf 6a60 	vldr	s13, [pc, #384]	; 80143f4 <erff+0x378>
 8014276:	eee7 6a87 	vfma.f32	s13, s15, s14
 801427a:	eddf 7a5f 	vldr	s15, [pc, #380]	; 80143f8 <erff+0x37c>
 801427e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014282:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80143fc <erff+0x380>
 8014286:	eee7 6a87 	vfma.f32	s13, s15, s14
 801428a:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8014400 <erff+0x384>
 801428e:	ee19 3a10 	vmov	r3, s18
 8014292:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014296:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801429a:	f023 030f 	bic.w	r3, r3, #15
 801429e:	ee08 3a10 	vmov	s16, r3
 80142a2:	eef0 aa68 	vmov.f32	s21, s17
 80142a6:	eebe 0a02 	vmov.f32	s0, #226	; 0xbf100000 -0.5625000
 80142aa:	eee7 aa87 	vfma.f32	s21, s15, s14
 80142ae:	eea8 0a48 	vfms.f32	s0, s16, s16
 80142b2:	f000 f8c3 	bl	801443c <expf>
 80142b6:	eeb0 aa40 	vmov.f32	s20, s0
 80142ba:	ee89 0aaa 	vdiv.f32	s0, s19, s21
 80142be:	ee78 7a49 	vsub.f32	s15, s16, s18
 80142c2:	ee38 8a09 	vadd.f32	s16, s16, s18
 80142c6:	eea7 0a88 	vfma.f32	s0, s15, s16
 80142ca:	f000 f8b7 	bl	801443c <expf>
 80142ce:	ee2a 0a00 	vmul.f32	s0, s20, s0
 80142d2:	2c00      	cmp	r4, #0
 80142d4:	eec0 7a09 	vdiv.f32	s15, s0, s18
 80142d8:	bfac      	ite	ge
 80142da:	ee78 7ae7 	vsubge.f32	s15, s17, s15
 80142de:	ee77 7ae8 	vsublt.f32	s15, s15, s17
 80142e2:	e6e5      	b.n	80140b0 <erff+0x34>
 80142e4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8014404 <erff+0x388>
 80142e8:	eddf 7a47 	vldr	s15, [pc, #284]	; 8014408 <erff+0x38c>
 80142ec:	eddf 9a47 	vldr	s19, [pc, #284]	; 801440c <erff+0x390>
 80142f0:	eee7 7a26 	vfma.f32	s15, s14, s13
 80142f4:	eddf 6a46 	vldr	s13, [pc, #280]	; 8014410 <erff+0x394>
 80142f8:	eee7 6a87 	vfma.f32	s13, s15, s14
 80142fc:	eddf 7a45 	vldr	s15, [pc, #276]	; 8014414 <erff+0x398>
 8014300:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014304:	eddf 6a44 	vldr	s13, [pc, #272]	; 8014418 <erff+0x39c>
 8014308:	eee7 6a87 	vfma.f32	s13, s15, s14
 801430c:	eddf 7a43 	vldr	s15, [pc, #268]	; 801441c <erff+0x3a0>
 8014310:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014314:	eddf 6a42 	vldr	s13, [pc, #264]	; 8014420 <erff+0x3a4>
 8014318:	eee7 9a87 	vfma.f32	s19, s15, s14
 801431c:	eddf 7a41 	vldr	s15, [pc, #260]	; 8014424 <erff+0x3a8>
 8014320:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014324:	eddf 7a40 	vldr	s15, [pc, #256]	; 8014428 <erff+0x3ac>
 8014328:	eee6 7a87 	vfma.f32	s15, s13, s14
 801432c:	eddf 6a3f 	vldr	s13, [pc, #252]	; 801442c <erff+0x3b0>
 8014330:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014334:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8014430 <erff+0x3b4>
 8014338:	eee6 7a87 	vfma.f32	s15, s13, s14
 801433c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8014434 <erff+0x3b8>
 8014340:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014344:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8014438 <erff+0x3bc>
 8014348:	e7a1      	b.n	801428e <erff+0x212>
 801434a:	bf00      	nop
 801434c:	3f57ffff 	.word	0x3f57ffff
 8014350:	3f8375d4 	.word	0x3f8375d4
 8014354:	3e0375d4 	.word	0x3e0375d4
 8014358:	b7c756b1 	.word	0xb7c756b1
 801435c:	bbbd1489 	.word	0xbbbd1489
 8014360:	b684e21a 	.word	0xb684e21a
 8014364:	bce9528f 	.word	0xbce9528f
 8014368:	bea66beb 	.word	0xbea66beb
 801436c:	390aee49 	.word	0x390aee49
 8014370:	3ba68116 	.word	0x3ba68116
 8014374:	3d852a63 	.word	0x3d852a63
 8014378:	3ecbbbce 	.word	0x3ecbbbce
 801437c:	3f9fffff 	.word	0x3f9fffff
 8014380:	bb0df9c0 	.word	0xbb0df9c0
 8014384:	3d1151b3 	.word	0x3d1151b3
 8014388:	3c445aa3 	.word	0x3c445aa3
 801438c:	bde31cc2 	.word	0xbde31cc2
 8014390:	3ea2fe54 	.word	0x3ea2fe54
 8014394:	bebe9208 	.word	0xbebe9208
 8014398:	3ed46805 	.word	0x3ed46805
 801439c:	bb1acdc6 	.word	0xbb1acdc6
 80143a0:	3c5f6e13 	.word	0x3c5f6e13
 80143a4:	3e013307 	.word	0x3e013307
 80143a8:	3d931ae7 	.word	0x3d931ae7
 80143ac:	3f0a5785 	.word	0x3f0a5785
 80143b0:	3dd9f331 	.word	0x3dd9f331
 80143b4:	3f58560b 	.word	0x3f58560b
 80143b8:	bf58560b 	.word	0xbf58560b
 80143bc:	40bfffff 	.word	0x40bfffff
 80143c0:	4036db6d 	.word	0x4036db6d
 80143c4:	c11d077e 	.word	0xc11d077e
 80143c8:	c2a2932b 	.word	0xc2a2932b
 80143cc:	bc21a093 	.word	0xbc21a093
 80143d0:	c3389ae7 	.word	0xc3389ae7
 80143d4:	c322658c 	.word	0xc322658c
 80143d8:	c2798057 	.word	0xc2798057
 80143dc:	c128f022 	.word	0xc128f022
 80143e0:	bf31a0b7 	.word	0xbf31a0b7
 80143e4:	bd777f97 	.word	0xbd777f97
 80143e8:	40d23f7c 	.word	0x40d23f7c
 80143ec:	42d9451f 	.word	0x42d9451f
 80143f0:	43d6810b 	.word	0x43d6810b
 80143f4:	442158c9 	.word	0x442158c9
 80143f8:	43d9486f 	.word	0x43d9486f
 80143fc:	4309a863 	.word	0x4309a863
 8014400:	419d35ce 	.word	0x419d35ce
 8014404:	c3f1c275 	.word	0xc3f1c275
 8014408:	c480230b 	.word	0xc480230b
 801440c:	bc21a092 	.word	0xbc21a092
 8014410:	c41f6441 	.word	0xc41f6441
 8014414:	c320a2ea 	.word	0xc320a2ea
 8014418:	c18e104b 	.word	0xc18e104b
 801441c:	bf4c9dd4 	.word	0xbf4c9dd4
 8014420:	43ed43a7 	.word	0x43ed43a7
 8014424:	c1b38712 	.word	0xc1b38712
 8014428:	451f90ce 	.word	0x451f90ce
 801442c:	4547fdbb 	.word	0x4547fdbb
 8014430:	44c01759 	.word	0x44c01759
 8014434:	43a2e571 	.word	0x43a2e571
 8014438:	41f2b459 	.word	0x41f2b459

0801443c <expf>:
 801443c:	ee10 2a10 	vmov	r2, s0
 8014440:	f240 412a 	movw	r1, #1066	; 0x42a
 8014444:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8014448:	428b      	cmp	r3, r1
 801444a:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
 801444e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8014452:	d92e      	bls.n	80144b2 <expf+0x76>
 8014454:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8014458:	d061      	beq.n	801451e <expf+0xe2>
 801445a:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801445e:	d304      	bcc.n	801446a <expf+0x2e>
 8014460:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014464:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8014468:	4770      	bx	lr
 801446a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8014524 <expf+0xe8>
 801446e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014476:	dd04      	ble.n	8014482 <expf+0x46>
 8014478:	2000      	movs	r0, #0
 801447a:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 801447e:	f002 bcf5 	b.w	8016e6c <__math_oflowf>
 8014482:	eddf 7a29 	vldr	s15, [pc, #164]	; 8014528 <expf+0xec>
 8014486:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801448a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801448e:	d504      	bpl.n	801449a <expf+0x5e>
 8014490:	2000      	movs	r0, #0
 8014492:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8014496:	f002 bcdd 	b.w	8016e54 <__math_uflowf>
 801449a:	eddf 7a24 	vldr	s15, [pc, #144]	; 801452c <expf+0xf0>
 801449e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80144a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144a6:	d504      	bpl.n	80144b2 <expf+0x76>
 80144a8:	2000      	movs	r0, #0
 80144aa:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 80144ae:	f002 bcd7 	b.w	8016e60 <__math_may_uflowf>
 80144b2:	491f      	ldr	r1, [pc, #124]	; (8014530 <expf+0xf4>)
 80144b4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80144b8:	ed91 5b4a 	vldr	d5, [r1, #296]	; 0x128
 80144bc:	ed91 7b48 	vldr	d7, [r1, #288]	; 0x120
 80144c0:	eeb0 4b47 	vmov.f64	d4, d7
 80144c4:	eea5 4b06 	vfma.f64	d4, d5, d6
 80144c8:	ec55 4b14 	vmov	r4, r5, d4
 80144cc:	ee34 7b47 	vsub.f64	d7, d4, d7
 80144d0:	f004 021f 	and.w	r2, r4, #31
 80144d4:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80144d8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80144dc:	ed91 6b50 	vldr	d6, [r1, #320]	; 0x140
 80144e0:	e9d2 4500 	ldrd	r4, r5, [r2]
 80144e4:	eea6 0b07 	vfma.f64	d0, d6, d7
 80144e8:	ee14 0a10 	vmov	r0, s8
 80144ec:	ed91 5b4c 	vldr	d5, [r1, #304]	; 0x130
 80144f0:	ed91 6b4e 	vldr	d6, [r1, #312]	; 0x138
 80144f4:	f04f 0b00 	mov.w	fp, #0
 80144f8:	eb1b 0204 	adds.w	r2, fp, r4
 80144fc:	ea4f 3cc0 	mov.w	ip, r0, lsl #15
 8014500:	eb4c 0305 	adc.w	r3, ip, r5
 8014504:	eea5 6b07 	vfma.f64	d6, d5, d7
 8014508:	ee27 7b07 	vmul.f64	d7, d7, d7
 801450c:	eea6 0b07 	vfma.f64	d0, d6, d7
 8014510:	ec43 2b17 	vmov	d7, r2, r3
 8014514:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014518:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801451c:	e7a2      	b.n	8014464 <expf+0x28>
 801451e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8014534 <expf+0xf8>
 8014522:	e79f      	b.n	8014464 <expf+0x28>
 8014524:	42b17217 	.word	0x42b17217
 8014528:	c2cff1b4 	.word	0xc2cff1b4
 801452c:	c2ce8ecf 	.word	0xc2ce8ecf
 8014530:	0803dfd8 	.word	0x0803dfd8
 8014534:	00000000 	.word	0x00000000

08014538 <fabsf>:
 8014538:	ee10 3a10 	vmov	r3, s0
 801453c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014540:	ee00 3a10 	vmov	s0, r3
 8014544:	4770      	bx	lr
	...

08014548 <floorf>:
 8014548:	ee10 3a10 	vmov	r3, s0
 801454c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014550:	0dca      	lsrs	r2, r1, #23
 8014552:	3a7f      	subs	r2, #127	; 0x7f
 8014554:	2a16      	cmp	r2, #22
 8014556:	dc2a      	bgt.n	80145ae <floorf+0x66>
 8014558:	2a00      	cmp	r2, #0
 801455a:	da11      	bge.n	8014580 <floorf+0x38>
 801455c:	eddf 7a18 	vldr	s15, [pc, #96]	; 80145c0 <floorf+0x78>
 8014560:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014564:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801456c:	dd05      	ble.n	801457a <floorf+0x32>
 801456e:	2b00      	cmp	r3, #0
 8014570:	da23      	bge.n	80145ba <floorf+0x72>
 8014572:	4a14      	ldr	r2, [pc, #80]	; (80145c4 <floorf+0x7c>)
 8014574:	2900      	cmp	r1, #0
 8014576:	bf18      	it	ne
 8014578:	4613      	movne	r3, r2
 801457a:	ee00 3a10 	vmov	s0, r3
 801457e:	4770      	bx	lr
 8014580:	4911      	ldr	r1, [pc, #68]	; (80145c8 <floorf+0x80>)
 8014582:	4111      	asrs	r1, r2
 8014584:	420b      	tst	r3, r1
 8014586:	d0fa      	beq.n	801457e <floorf+0x36>
 8014588:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80145c0 <floorf+0x78>
 801458c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014590:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014598:	ddef      	ble.n	801457a <floorf+0x32>
 801459a:	2b00      	cmp	r3, #0
 801459c:	bfbe      	ittt	lt
 801459e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80145a2:	fa40 f202 	asrlt.w	r2, r0, r2
 80145a6:	189b      	addlt	r3, r3, r2
 80145a8:	ea23 0301 	bic.w	r3, r3, r1
 80145ac:	e7e5      	b.n	801457a <floorf+0x32>
 80145ae:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80145b2:	d3e4      	bcc.n	801457e <floorf+0x36>
 80145b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80145b8:	4770      	bx	lr
 80145ba:	2300      	movs	r3, #0
 80145bc:	e7dd      	b.n	801457a <floorf+0x32>
 80145be:	bf00      	nop
 80145c0:	7149f2ca 	.word	0x7149f2ca
 80145c4:	bf800000 	.word	0xbf800000
 80145c8:	007fffff 	.word	0x007fffff

080145cc <logf>:
 80145cc:	ee10 3a10 	vmov	r3, s0
 80145d0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80145d4:	b410      	push	{r4}
 80145d6:	d057      	beq.n	8014688 <logf+0xbc>
 80145d8:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 80145dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80145e0:	d31a      	bcc.n	8014618 <logf+0x4c>
 80145e2:	005a      	lsls	r2, r3, #1
 80145e4:	d104      	bne.n	80145f0 <logf+0x24>
 80145e6:	2001      	movs	r0, #1
 80145e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145ec:	f002 bc44 	b.w	8016e78 <__math_divzerof>
 80145f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80145f4:	d045      	beq.n	8014682 <logf+0xb6>
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	db02      	blt.n	8014600 <logf+0x34>
 80145fa:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80145fe:	d303      	bcc.n	8014608 <logf+0x3c>
 8014600:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014604:	f002 bc48 	b.w	8016e98 <__math_invalidf>
 8014608:	eddf 7a21 	vldr	s15, [pc, #132]	; 8014690 <logf+0xc4>
 801460c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014610:	ee10 3a10 	vmov	r3, s0
 8014614:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8014618:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 801461c:	491d      	ldr	r1, [pc, #116]	; (8014694 <logf+0xc8>)
 801461e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8014622:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8014626:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 801462a:	0dd4      	lsrs	r4, r2, #23
 801462c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8014630:	05e4      	lsls	r4, r4, #23
 8014632:	ed90 5b00 	vldr	d5, [r0]
 8014636:	1b1b      	subs	r3, r3, r4
 8014638:	ee07 3a90 	vmov	s15, r3
 801463c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8014640:	eea5 6b07 	vfma.f64	d6, d5, d7
 8014644:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8014648:	ee26 3b06 	vmul.f64	d3, d6, d6
 801464c:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8014650:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014654:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8014658:	15d2      	asrs	r2, r2, #23
 801465a:	ed91 4b40 	vldr	d4, [r1, #256]	; 0x100
 801465e:	eea5 7b03 	vfma.f64	d7, d5, d3
 8014662:	eeb0 5b47 	vmov.f64	d5, d7
 8014666:	ed90 0b02 	vldr	d0, [r0, #8]
 801466a:	ee07 2a90 	vmov	s15, r2
 801466e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014672:	eea7 0b04 	vfma.f64	d0, d7, d4
 8014676:	ee30 0b06 	vadd.f64	d0, d0, d6
 801467a:	eea3 0b05 	vfma.f64	d0, d3, d5
 801467e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014686:	4770      	bx	lr
 8014688:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8014698 <logf+0xcc>
 801468c:	e7f9      	b.n	8014682 <logf+0xb6>
 801468e:	bf00      	nop
 8014690:	4b000000 	.word	0x4b000000
 8014694:	0803e120 	.word	0x0803e120
 8014698:	00000000 	.word	0x00000000

0801469c <log1pf>:
 801469c:	ee10 2a10 	vmov	r2, s0
 80146a0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80146a4:	db02      	blt.n	80146ac <log1pf+0x10>
 80146a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80146aa:	4770      	bx	lr
 80146ac:	4b70      	ldr	r3, [pc, #448]	; (8014870 <log1pf+0x1d4>)
 80146ae:	429a      	cmp	r2, r3
 80146b0:	dc78      	bgt.n	80147a4 <log1pf+0x108>
 80146b2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80146b6:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80146ba:	db12      	blt.n	80146e2 <log1pf+0x46>
 80146bc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80146c0:	eeb4 0a67 	vcmp.f32	s0, s15
 80146c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146c8:	bf05      	ittet	eq
 80146ca:	ed9f 7a6a 	vldreq	s14, [pc, #424]	; 8014874 <log1pf+0x1d8>
 80146ce:	eddf 7a6a 	vldreq	s15, [pc, #424]	; 8014878 <log1pf+0x1dc>
 80146d2:	ee70 7a40 	vsubne.f32	s15, s0, s0
 80146d6:	ee87 0a27 	vdiveq.f32	s0, s14, s15
 80146da:	bf18      	it	ne
 80146dc:	ee87 0aa7 	vdivne.f32	s0, s15, s15
 80146e0:	4770      	bx	lr
 80146e2:	f1b3 5f44 	cmp.w	r3, #822083584	; 0x31000000
 80146e6:	da13      	bge.n	8014710 <log1pf+0x74>
 80146e8:	eddf 7a64 	vldr	s15, [pc, #400]	; 801487c <log1pf+0x1e0>
 80146ec:	ee70 7a27 	vadd.f32	s15, s0, s15
 80146f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80146f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146f8:	dd03      	ble.n	8014702 <log1pf+0x66>
 80146fa:	f1b3 5f12 	cmp.w	r3, #612368384	; 0x24800000
 80146fe:	f2c0 80b6 	blt.w	801486e <log1pf+0x1d2>
 8014702:	ee20 7a40 	vnmul.f32	s14, s0, s0
 8014706:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801470a:	eea7 0a27 	vfma.f32	s0, s14, s15
 801470e:	4770      	bx	lr
 8014710:	4b5b      	ldr	r3, [pc, #364]	; (8014880 <log1pf+0x1e4>)
 8014712:	441a      	add	r2, r3
 8014714:	429a      	cmp	r2, r3
 8014716:	d84d      	bhi.n	80147b4 <log1pf+0x118>
 8014718:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801471c:	ee30 7a27 	vadd.f32	s14, s0, s15
 8014720:	ee17 2a10 	vmov	r2, s14
 8014724:	15d3      	asrs	r3, r2, #23
 8014726:	3b7f      	subs	r3, #127	; 0x7f
 8014728:	2b00      	cmp	r3, #0
 801472a:	bfcb      	itete	gt
 801472c:	ee37 0a40 	vsubgt.f32	s0, s14, s0
 8014730:	ee77 7a67 	vsuble.f32	s15, s14, s15
 8014734:	ee37 0ac0 	vsubgt.f32	s0, s15, s0
 8014738:	ee30 0a67 	vsuble.f32	s0, s0, s15
 801473c:	eec0 6a07 	vdiv.f32	s13, s0, s14
 8014740:	4950      	ldr	r1, [pc, #320]	; (8014884 <log1pf+0x1e8>)
 8014742:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8014746:	428a      	cmp	r2, r1
 8014748:	bfc9      	itett	gt
 801474a:	f042 517c 	orrgt.w	r1, r2, #1056964608	; 0x3f000000
 801474e:	f042 517e 	orrle.w	r1, r2, #1065353216	; 0x3f800000
 8014752:	f5c2 0200 	rsbgt	r2, r2, #8388608	; 0x800000
 8014756:	3301      	addgt	r3, #1
 8014758:	bfc8      	it	gt
 801475a:	1092      	asrgt	r2, r2, #2
 801475c:	ee07 1a90 	vmov	s15, r1
 8014760:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014764:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014768:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801476c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8014770:	ee27 7a00 	vmul.f32	s14, s14, s0
 8014774:	2a00      	cmp	r2, #0
 8014776:	d13d      	bne.n	80147f4 <log1pf+0x158>
 8014778:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801477c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014780:	d11b      	bne.n	80147ba <log1pf+0x11e>
 8014782:	2b00      	cmp	r3, #0
 8014784:	d071      	beq.n	801486a <log1pf+0x1ce>
 8014786:	ee07 3a90 	vmov	s15, r3
 801478a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8014888 <log1pf+0x1ec>
 801478e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014792:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014796:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 801488c <log1pf+0x1f0>
 801479a:	eeb0 0a66 	vmov.f32	s0, s13
 801479e:	eea7 0a87 	vfma.f32	s0, s15, s14
 80147a2:	4770      	bx	lr
 80147a4:	f1b2 4fb4 	cmp.w	r2, #1509949440	; 0x5a000000
 80147a8:	dbb6      	blt.n	8014718 <log1pf+0x7c>
 80147aa:	15d3      	asrs	r3, r2, #23
 80147ac:	3b7f      	subs	r3, #127	; 0x7f
 80147ae:	eddf 6a32 	vldr	s13, [pc, #200]	; 8014878 <log1pf+0x1dc>
 80147b2:	e7c5      	b.n	8014740 <log1pf+0xa4>
 80147b4:	2201      	movs	r2, #1
 80147b6:	2300      	movs	r3, #0
 80147b8:	e7d6      	b.n	8014768 <log1pf+0xcc>
 80147ba:	eddf 7a35 	vldr	s15, [pc, #212]	; 8014890 <log1pf+0x1f4>
 80147be:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80147c2:	eea0 6a67 	vfms.f32	s12, s0, s15
 80147c6:	ee26 6a07 	vmul.f32	s12, s12, s14
 80147ca:	b913      	cbnz	r3, 80147d2 <log1pf+0x136>
 80147cc:	ee30 0a46 	vsub.f32	s0, s0, s12
 80147d0:	4770      	bx	lr
 80147d2:	ee07 3a90 	vmov	s15, r3
 80147d6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8014888 <log1pf+0x1ec>
 80147da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80147de:	eee7 6a87 	vfma.f32	s13, s15, s14
 80147e2:	ee36 7a66 	vsub.f32	s14, s12, s13
 80147e6:	ee37 0a40 	vsub.f32	s0, s14, s0
 80147ea:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801488c <log1pf+0x1f0>
 80147ee:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80147f2:	4770      	bx	lr
 80147f4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80147f8:	ee70 7a27 	vadd.f32	s15, s0, s15
 80147fc:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8014894 <log1pf+0x1f8>
 8014800:	ed9f 5a25 	vldr	s10, [pc, #148]	; 8014898 <log1pf+0x1fc>
 8014804:	eec0 5a27 	vdiv.f32	s11, s0, s15
 8014808:	ee65 7aa5 	vmul.f32	s15, s11, s11
 801480c:	eea7 5a86 	vfma.f32	s10, s15, s12
 8014810:	ed9f 6a22 	vldr	s12, [pc, #136]	; 801489c <log1pf+0x200>
 8014814:	eea5 6a27 	vfma.f32	s12, s10, s15
 8014818:	ed9f 5a21 	vldr	s10, [pc, #132]	; 80148a0 <log1pf+0x204>
 801481c:	eea6 5a27 	vfma.f32	s10, s12, s15
 8014820:	ed9f 6a20 	vldr	s12, [pc, #128]	; 80148a4 <log1pf+0x208>
 8014824:	eea5 6a27 	vfma.f32	s12, s10, s15
 8014828:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 80148a8 <log1pf+0x20c>
 801482c:	eea6 5a27 	vfma.f32	s10, s12, s15
 8014830:	ed9f 6a17 	vldr	s12, [pc, #92]	; 8014890 <log1pf+0x1f4>
 8014834:	eea5 6a27 	vfma.f32	s12, s10, s15
 8014838:	eeb0 5a47 	vmov.f32	s10, s14
 801483c:	eea6 5a27 	vfma.f32	s10, s12, s15
 8014840:	ee25 6a25 	vmul.f32	s12, s10, s11
 8014844:	b923      	cbnz	r3, 8014850 <log1pf+0x1b4>
 8014846:	ee37 7a46 	vsub.f32	s14, s14, s12
 801484a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801484e:	4770      	bx	lr
 8014850:	ee07 3a90 	vmov	s15, r3
 8014854:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8014888 <log1pf+0x1ec>
 8014858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801485c:	eee7 6aa5 	vfma.f32	s13, s15, s11
 8014860:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014864:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014868:	e7bd      	b.n	80147e6 <log1pf+0x14a>
 801486a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8014878 <log1pf+0x1dc>
 801486e:	4770      	bx	lr
 8014870:	3ed413d6 	.word	0x3ed413d6
 8014874:	cc000000 	.word	0xcc000000
 8014878:	00000000 	.word	0x00000000
 801487c:	4c000000 	.word	0x4c000000
 8014880:	416a09e0 	.word	0x416a09e0
 8014884:	003504f6 	.word	0x003504f6
 8014888:	3717f7d1 	.word	0x3717f7d1
 801488c:	3f317180 	.word	0x3f317180
 8014890:	3f2aaaab 	.word	0x3f2aaaab
 8014894:	3e178897 	.word	0x3e178897
 8014898:	3e1cd04f 	.word	0x3e1cd04f
 801489c:	3e3a3325 	.word	0x3e3a3325
 80148a0:	3e638e29 	.word	0x3e638e29
 80148a4:	3e924925 	.word	0x3e924925
 80148a8:	3ecccccd 	.word	0x3ecccccd

080148ac <checkint>:
 80148ac:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80148b0:	2b7e      	cmp	r3, #126	; 0x7e
 80148b2:	dd10      	ble.n	80148d6 <checkint+0x2a>
 80148b4:	2b96      	cmp	r3, #150	; 0x96
 80148b6:	dc0c      	bgt.n	80148d2 <checkint+0x26>
 80148b8:	2201      	movs	r2, #1
 80148ba:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80148be:	fa02 f303 	lsl.w	r3, r2, r3
 80148c2:	1e5a      	subs	r2, r3, #1
 80148c4:	4202      	tst	r2, r0
 80148c6:	d106      	bne.n	80148d6 <checkint+0x2a>
 80148c8:	4203      	tst	r3, r0
 80148ca:	bf0c      	ite	eq
 80148cc:	2002      	moveq	r0, #2
 80148ce:	2001      	movne	r0, #1
 80148d0:	4770      	bx	lr
 80148d2:	2002      	movs	r0, #2
 80148d4:	4770      	bx	lr
 80148d6:	2000      	movs	r0, #0
 80148d8:	4770      	bx	lr
 80148da:	0000      	movs	r0, r0
 80148dc:	0000      	movs	r0, r0
	...

080148e0 <powf>:
 80148e0:	ee10 1a10 	vmov	r1, s0
 80148e4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80148e8:	ee10 4a90 	vmov	r4, s1
 80148ec:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 80148f0:	0062      	lsls	r2, r4, #1
 80148f2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80148f6:	eef0 4a60 	vmov.f32	s9, s1
 80148fa:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 80148fe:	4b92      	ldr	r3, [pc, #584]	; (8014b48 <powf+0x268>)
 8014900:	d255      	bcs.n	80149ae <powf+0xce>
 8014902:	4298      	cmp	r0, r3
 8014904:	d855      	bhi.n	80149b2 <powf+0xd2>
 8014906:	2000      	movs	r0, #0
 8014908:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 801490c:	4a8f      	ldr	r2, [pc, #572]	; (8014b4c <powf+0x26c>)
 801490e:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 8014912:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8014916:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 801491a:	0ddb      	lsrs	r3, r3, #23
 801491c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8014920:	05db      	lsls	r3, r3, #23
 8014922:	ed94 6b00 	vldr	d6, [r4]
 8014926:	1ac9      	subs	r1, r1, r3
 8014928:	ee07 1a90 	vmov	s15, r1
 801492c:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8014930:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8014934:	eea6 2b07 	vfma.f64	d2, d6, d7
 8014938:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 801493c:	ee22 6b02 	vmul.f64	d6, d2, d2
 8014940:	eea2 7b05 	vfma.f64	d7, d2, d5
 8014944:	15db      	asrs	r3, r3, #23
 8014946:	ed94 5b02 	vldr	d5, [r4, #8]
 801494a:	ee00 3a10 	vmov	s0, r3
 801494e:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8014952:	ee30 0b05 	vadd.f64	d0, d0, d5
 8014956:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 801495a:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 801495e:	eea2 0b05 	vfma.f64	d0, d2, d5
 8014962:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 8014966:	eea2 5b03 	vfma.f64	d5, d2, d3
 801496a:	eea6 0b05 	vfma.f64	d0, d6, d5
 801496e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8014972:	eea7 0b06 	vfma.f64	d0, d7, d6
 8014976:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 801497a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801497e:	ee10 3a90 	vmov	r3, s1
 8014982:	2500      	movs	r5, #0
 8014984:	0bda      	lsrs	r2, r3, #15
 8014986:	2300      	movs	r3, #0
 8014988:	b292      	uxth	r2, r2
 801498a:	f248 04be 	movw	r4, #32958	; 0x80be
 801498e:	429d      	cmp	r5, r3
 8014990:	bf08      	it	eq
 8014992:	4294      	cmpeq	r4, r2
 8014994:	f080 8094 	bcs.w	8014ac0 <powf+0x1e0>
 8014998:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8014b30 <powf+0x250>
 801499c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80149a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149a4:	dd76      	ble.n	8014a94 <powf+0x1b4>
 80149a6:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 80149aa:	f002 ba5f 	b.w	8016e6c <__math_oflowf>
 80149ae:	4298      	cmp	r0, r3
 80149b0:	d92d      	bls.n	8014a0e <powf+0x12e>
 80149b2:	b952      	cbnz	r2, 80149ca <powf+0xea>
 80149b4:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 80149b8:	005b      	lsls	r3, r3, #1
 80149ba:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 80149be:	f240 80ae 	bls.w	8014b1e <powf+0x23e>
 80149c2:	ee30 0a24 	vadd.f32	s0, s0, s9
 80149c6:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80149ca:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80149ce:	d105      	bne.n	80149dc <powf+0xfc>
 80149d0:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80149d4:	0064      	lsls	r4, r4, #1
 80149d6:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80149da:	e7f0      	b.n	80149be <powf+0xde>
 80149dc:	004b      	lsls	r3, r1, #1
 80149de:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80149e2:	d8ee      	bhi.n	80149c2 <powf+0xe2>
 80149e4:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80149e8:	d1eb      	bne.n	80149c2 <powf+0xe2>
 80149ea:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80149ee:	f000 8096 	beq.w	8014b1e <powf+0x23e>
 80149f2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80149f6:	ea6f 0404 	mvn.w	r4, r4
 80149fa:	bf34      	ite	cc
 80149fc:	2300      	movcc	r3, #0
 80149fe:	2301      	movcs	r3, #1
 8014a00:	0fe4      	lsrs	r4, r4, #31
 8014a02:	42a3      	cmp	r3, r4
 8014a04:	f040 808e 	bne.w	8014b24 <powf+0x244>
 8014a08:	ee24 0aa4 	vmul.f32	s0, s9, s9
 8014a0c:	e7db      	b.n	80149c6 <powf+0xe6>
 8014a0e:	004d      	lsls	r5, r1, #1
 8014a10:	1e6a      	subs	r2, r5, #1
 8014a12:	429a      	cmp	r2, r3
 8014a14:	d91b      	bls.n	8014a4e <powf+0x16e>
 8014a16:	2900      	cmp	r1, #0
 8014a18:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014a1c:	da0e      	bge.n	8014a3c <powf+0x15c>
 8014a1e:	ee10 0a90 	vmov	r0, s1
 8014a22:	f7ff ff43 	bl	80148ac <checkint>
 8014a26:	2801      	cmp	r0, #1
 8014a28:	d108      	bne.n	8014a3c <powf+0x15c>
 8014a2a:	eeb1 0a40 	vneg.f32	s0, s0
 8014a2e:	b93d      	cbnz	r5, 8014a40 <powf+0x160>
 8014a30:	2c00      	cmp	r4, #0
 8014a32:	dac8      	bge.n	80149c6 <powf+0xe6>
 8014a34:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8014a38:	f002 ba1e 	b.w	8016e78 <__math_divzerof>
 8014a3c:	2000      	movs	r0, #0
 8014a3e:	e7f6      	b.n	8014a2e <powf+0x14e>
 8014a40:	2c00      	cmp	r4, #0
 8014a42:	dac0      	bge.n	80149c6 <powf+0xe6>
 8014a44:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014a48:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8014a4c:	e7bb      	b.n	80149c6 <powf+0xe6>
 8014a4e:	2900      	cmp	r1, #0
 8014a50:	da1e      	bge.n	8014a90 <powf+0x1b0>
 8014a52:	ee10 0a90 	vmov	r0, s1
 8014a56:	f7ff ff29 	bl	80148ac <checkint>
 8014a5a:	b918      	cbnz	r0, 8014a64 <powf+0x184>
 8014a5c:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8014a60:	f002 ba1a 	b.w	8016e98 <__math_invalidf>
 8014a64:	2801      	cmp	r0, #1
 8014a66:	bf0c      	ite	eq
 8014a68:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8014a6c:	2000      	movne	r0, #0
 8014a6e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014a72:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8014a76:	f4bf af47 	bcs.w	8014908 <powf+0x28>
 8014a7a:	eddf 0a35 	vldr	s1, [pc, #212]	; 8014b50 <powf+0x270>
 8014a7e:	ee20 0a20 	vmul.f32	s0, s0, s1
 8014a82:	ee10 3a10 	vmov	r3, s0
 8014a86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014a8a:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8014a8e:	e73b      	b.n	8014908 <powf+0x28>
 8014a90:	2000      	movs	r0, #0
 8014a92:	e7ee      	b.n	8014a72 <powf+0x192>
 8014a94:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8014b38 <powf+0x258>
 8014a98:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aa0:	d803      	bhi.n	8014aaa <powf+0x1ca>
 8014aa2:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8014aa6:	f002 b9d5 	b.w	8016e54 <__math_uflowf>
 8014aaa:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8014b40 <powf+0x260>
 8014aae:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ab6:	d503      	bpl.n	8014ac0 <powf+0x1e0>
 8014ab8:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8014abc:	f002 b9d0 	b.w	8016e60 <__math_may_uflowf>
 8014ac0:	4924      	ldr	r1, [pc, #144]	; (8014b54 <powf+0x274>)
 8014ac2:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 8014ac6:	ee30 6b07 	vadd.f64	d6, d0, d7
 8014aca:	ec55 4b16 	vmov	r4, r5, d6
 8014ace:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014ad2:	f004 021f 	and.w	r2, r4, #31
 8014ad6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8014ada:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 8014ade:	ee30 0b47 	vsub.f64	d0, d0, d7
 8014ae2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014ae6:	e9d2 6700 	ldrd	r6, r7, [r2]
 8014aea:	eea0 7b06 	vfma.f64	d7, d0, d6
 8014aee:	1824      	adds	r4, r4, r0
 8014af0:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8014af4:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 8014af8:	2000      	movs	r0, #0
 8014afa:	1982      	adds	r2, r0, r6
 8014afc:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 8014b00:	eb41 0307 	adc.w	r3, r1, r7
 8014b04:	eea0 6b05 	vfma.f64	d6, d0, d5
 8014b08:	ee20 0b00 	vmul.f64	d0, d0, d0
 8014b0c:	eea6 7b00 	vfma.f64	d7, d6, d0
 8014b10:	ec43 2b16 	vmov	d6, r2, r3
 8014b14:	ee27 0b06 	vmul.f64	d0, d7, d6
 8014b18:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014b1c:	e753      	b.n	80149c6 <powf+0xe6>
 8014b1e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014b22:	e750      	b.n	80149c6 <powf+0xe6>
 8014b24:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8014b58 <powf+0x278>
 8014b28:	e74d      	b.n	80149c6 <powf+0xe6>
 8014b2a:	bf00      	nop
 8014b2c:	f3af 8000 	nop.w
 8014b30:	ffd1d571 	.word	0xffd1d571
 8014b34:	405fffff 	.word	0x405fffff
 8014b38:	00000000 	.word	0x00000000
 8014b3c:	c062c000 	.word	0xc062c000
 8014b40:	00000000 	.word	0x00000000
 8014b44:	c062a000 	.word	0xc062a000
 8014b48:	fefffffe 	.word	0xfefffffe
 8014b4c:	0803e240 	.word	0x0803e240
 8014b50:	4b000000 	.word	0x4b000000
 8014b54:	0803dfd8 	.word	0x0803dfd8
 8014b58:	00000000 	.word	0x00000000

08014b5c <roundf>:
 8014b5c:	ee10 0a10 	vmov	r0, s0
 8014b60:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8014b64:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8014b68:	2a16      	cmp	r2, #22
 8014b6a:	dc15      	bgt.n	8014b98 <roundf+0x3c>
 8014b6c:	2a00      	cmp	r2, #0
 8014b6e:	da08      	bge.n	8014b82 <roundf+0x26>
 8014b70:	3201      	adds	r2, #1
 8014b72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8014b76:	d101      	bne.n	8014b7c <roundf+0x20>
 8014b78:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8014b7c:	ee00 3a10 	vmov	s0, r3
 8014b80:	4770      	bx	lr
 8014b82:	4908      	ldr	r1, [pc, #32]	; (8014ba4 <roundf+0x48>)
 8014b84:	4111      	asrs	r1, r2
 8014b86:	4208      	tst	r0, r1
 8014b88:	d0fa      	beq.n	8014b80 <roundf+0x24>
 8014b8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014b8e:	4113      	asrs	r3, r2
 8014b90:	4403      	add	r3, r0
 8014b92:	ea23 0301 	bic.w	r3, r3, r1
 8014b96:	e7f1      	b.n	8014b7c <roundf+0x20>
 8014b98:	2a80      	cmp	r2, #128	; 0x80
 8014b9a:	d1f1      	bne.n	8014b80 <roundf+0x24>
 8014b9c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014ba0:	4770      	bx	lr
 8014ba2:	bf00      	nop
 8014ba4:	007fffff 	.word	0x007fffff

08014ba8 <sinf>:
 8014ba8:	ee10 3a10 	vmov	r3, s0
 8014bac:	b507      	push	{r0, r1, r2, lr}
 8014bae:	4a1d      	ldr	r2, [pc, #116]	; (8014c24 <sinf+0x7c>)
 8014bb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014bb4:	4293      	cmp	r3, r2
 8014bb6:	dc05      	bgt.n	8014bc4 <sinf+0x1c>
 8014bb8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8014c28 <sinf+0x80>
 8014bbc:	2000      	movs	r0, #0
 8014bbe:	f002 f803 	bl	8016bc8 <__kernel_sinf>
 8014bc2:	e004      	b.n	8014bce <sinf+0x26>
 8014bc4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014bc8:	db04      	blt.n	8014bd4 <sinf+0x2c>
 8014bca:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014bce:	b003      	add	sp, #12
 8014bd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8014bd4:	4668      	mov	r0, sp
 8014bd6:	f001 f819 	bl	8015c0c <__ieee754_rem_pio2f>
 8014bda:	f000 0003 	and.w	r0, r0, #3
 8014bde:	2801      	cmp	r0, #1
 8014be0:	d008      	beq.n	8014bf4 <sinf+0x4c>
 8014be2:	2802      	cmp	r0, #2
 8014be4:	d00d      	beq.n	8014c02 <sinf+0x5a>
 8014be6:	b9b0      	cbnz	r0, 8014c16 <sinf+0x6e>
 8014be8:	2001      	movs	r0, #1
 8014bea:	eddd 0a01 	vldr	s1, [sp, #4]
 8014bee:	ed9d 0a00 	vldr	s0, [sp]
 8014bf2:	e7e4      	b.n	8014bbe <sinf+0x16>
 8014bf4:	eddd 0a01 	vldr	s1, [sp, #4]
 8014bf8:	ed9d 0a00 	vldr	s0, [sp]
 8014bfc:	f001 fd04 	bl	8016608 <__kernel_cosf>
 8014c00:	e7e5      	b.n	8014bce <sinf+0x26>
 8014c02:	2001      	movs	r0, #1
 8014c04:	eddd 0a01 	vldr	s1, [sp, #4]
 8014c08:	ed9d 0a00 	vldr	s0, [sp]
 8014c0c:	f001 ffdc 	bl	8016bc8 <__kernel_sinf>
 8014c10:	eeb1 0a40 	vneg.f32	s0, s0
 8014c14:	e7db      	b.n	8014bce <sinf+0x26>
 8014c16:	eddd 0a01 	vldr	s1, [sp, #4]
 8014c1a:	ed9d 0a00 	vldr	s0, [sp]
 8014c1e:	f001 fcf3 	bl	8016608 <__kernel_cosf>
 8014c22:	e7f5      	b.n	8014c10 <sinf+0x68>
 8014c24:	3f490fd8 	.word	0x3f490fd8
 8014c28:	00000000 	.word	0x00000000

08014c2c <tanf>:
 8014c2c:	ee10 3a10 	vmov	r3, s0
 8014c30:	b507      	push	{r0, r1, r2, lr}
 8014c32:	4a10      	ldr	r2, [pc, #64]	; (8014c74 <tanf+0x48>)
 8014c34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014c38:	4293      	cmp	r3, r2
 8014c3a:	dc05      	bgt.n	8014c48 <tanf+0x1c>
 8014c3c:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8014c78 <tanf+0x4c>
 8014c40:	2001      	movs	r0, #1
 8014c42:	f002 f809 	bl	8016c58 <__kernel_tanf>
 8014c46:	e004      	b.n	8014c52 <tanf+0x26>
 8014c48:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014c4c:	db04      	blt.n	8014c58 <tanf+0x2c>
 8014c4e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014c52:	b003      	add	sp, #12
 8014c54:	f85d fb04 	ldr.w	pc, [sp], #4
 8014c58:	4668      	mov	r0, sp
 8014c5a:	f000 ffd7 	bl	8015c0c <__ieee754_rem_pio2f>
 8014c5e:	0040      	lsls	r0, r0, #1
 8014c60:	f000 0002 	and.w	r0, r0, #2
 8014c64:	f1c0 0001 	rsb	r0, r0, #1
 8014c68:	eddd 0a01 	vldr	s1, [sp, #4]
 8014c6c:	ed9d 0a00 	vldr	s0, [sp]
 8014c70:	e7e7      	b.n	8014c42 <tanf+0x16>
 8014c72:	bf00      	nop
 8014c74:	3f490fda 	.word	0x3f490fda
 8014c78:	00000000 	.word	0x00000000

08014c7c <tanhf>:
 8014c7c:	b510      	push	{r4, lr}
 8014c7e:	ee10 4a10 	vmov	r4, s0
 8014c82:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014c86:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014c8a:	ed2d 8b02 	vpush	{d8}
 8014c8e:	eef0 7a40 	vmov.f32	s15, s0
 8014c92:	db0c      	blt.n	8014cae <tanhf+0x32>
 8014c94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014c98:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8014c9c:	2c00      	cmp	r4, #0
 8014c9e:	bfac      	ite	ge
 8014ca0:	ee30 0a07 	vaddge.f32	s0, s0, s14
 8014ca4:	ee30 0a47 	vsublt.f32	s0, s0, s14
 8014ca8:	ecbd 8b02 	vpop	{d8}
 8014cac:	bd10      	pop	{r4, pc}
 8014cae:	4a1b      	ldr	r2, [pc, #108]	; (8014d1c <tanhf+0xa0>)
 8014cb0:	4293      	cmp	r3, r2
 8014cb2:	dc30      	bgt.n	8014d16 <tanhf+0x9a>
 8014cb4:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8014cb8:	da06      	bge.n	8014cc8 <tanhf+0x4c>
 8014cba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014cbe:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014cc2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014cc6:	e7ef      	b.n	8014ca8 <tanhf+0x2c>
 8014cc8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8014ccc:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8014cd0:	db12      	blt.n	8014cf8 <tanhf+0x7c>
 8014cd2:	f7ff fc31 	bl	8014538 <fabsf>
 8014cd6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014cda:	f002 f9f7 	bl	80170cc <expm1f>
 8014cde:	ee30 0a08 	vadd.f32	s0, s0, s16
 8014ce2:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8014ce6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014cea:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014cee:	2c00      	cmp	r4, #0
 8014cf0:	bfb8      	it	lt
 8014cf2:	eeb1 0a40 	vneglt.f32	s0, s0
 8014cf6:	e7d7      	b.n	8014ca8 <tanhf+0x2c>
 8014cf8:	f7ff fc1e 	bl	8014538 <fabsf>
 8014cfc:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8014d00:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014d04:	f002 f9e2 	bl	80170cc <expm1f>
 8014d08:	ee70 7a08 	vadd.f32	s15, s0, s16
 8014d0c:	eeb1 7a40 	vneg.f32	s14, s0
 8014d10:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8014d14:	e7eb      	b.n	8014cee <tanhf+0x72>
 8014d16:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014d1a:	e7e8      	b.n	8014cee <tanhf+0x72>
 8014d1c:	41afffff 	.word	0x41afffff

08014d20 <sqrt>:
 8014d20:	b500      	push	{lr}
 8014d22:	ed2d 8b02 	vpush	{d8}
 8014d26:	eeb0 8b40 	vmov.f64	d8, d0
 8014d2a:	b08b      	sub	sp, #44	; 0x2c
 8014d2c:	f000 fc00 	bl	8015530 <__ieee754_sqrt>
 8014d30:	4b1f      	ldr	r3, [pc, #124]	; (8014db0 <sqrt+0x90>)
 8014d32:	f993 3000 	ldrsb.w	r3, [r3]
 8014d36:	1c5a      	adds	r2, r3, #1
 8014d38:	d024      	beq.n	8014d84 <sqrt+0x64>
 8014d3a:	eeb4 8b48 	vcmp.f64	d8, d8
 8014d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d42:	d61f      	bvs.n	8014d84 <sqrt+0x64>
 8014d44:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8014da8 <sqrt+0x88>
 8014d48:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d50:	d518      	bpl.n	8014d84 <sqrt+0x64>
 8014d52:	2201      	movs	r2, #1
 8014d54:	9200      	str	r2, [sp, #0]
 8014d56:	4a17      	ldr	r2, [pc, #92]	; (8014db4 <sqrt+0x94>)
 8014d58:	9201      	str	r2, [sp, #4]
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	9208      	str	r2, [sp, #32]
 8014d5e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8014d62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014d66:	b993      	cbnz	r3, 8014d8e <sqrt+0x6e>
 8014d68:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014d6c:	4668      	mov	r0, sp
 8014d6e:	f002 f923 	bl	8016fb8 <matherr>
 8014d72:	b190      	cbz	r0, 8014d9a <sqrt+0x7a>
 8014d74:	9b08      	ldr	r3, [sp, #32]
 8014d76:	b11b      	cbz	r3, 8014d80 <sqrt+0x60>
 8014d78:	f002 fb5c 	bl	8017434 <__errno>
 8014d7c:	9b08      	ldr	r3, [sp, #32]
 8014d7e:	6003      	str	r3, [r0, #0]
 8014d80:	ed9d 0b06 	vldr	d0, [sp, #24]
 8014d84:	b00b      	add	sp, #44	; 0x2c
 8014d86:	ecbd 8b02 	vpop	{d8}
 8014d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8014d8e:	2b02      	cmp	r3, #2
 8014d90:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8014d94:	ed8d 6b06 	vstr	d6, [sp, #24]
 8014d98:	d1e8      	bne.n	8014d6c <sqrt+0x4c>
 8014d9a:	f002 fb4b 	bl	8017434 <__errno>
 8014d9e:	2321      	movs	r3, #33	; 0x21
 8014da0:	6003      	str	r3, [r0, #0]
 8014da2:	e7e7      	b.n	8014d74 <sqrt+0x54>
 8014da4:	f3af 8000 	nop.w
	...
 8014db0:	20000ad4 	.word	0x20000ad4
 8014db4:	0803e368 	.word	0x0803e368

08014db8 <acosf>:
 8014db8:	b510      	push	{r4, lr}
 8014dba:	ed2d 8b02 	vpush	{d8}
 8014dbe:	4c25      	ldr	r4, [pc, #148]	; (8014e54 <acosf+0x9c>)
 8014dc0:	b08a      	sub	sp, #40	; 0x28
 8014dc2:	eeb0 8a40 	vmov.f32	s16, s0
 8014dc6:	f000 fbb7 	bl	8015538 <__ieee754_acosf>
 8014dca:	f994 3000 	ldrsb.w	r3, [r4]
 8014dce:	3301      	adds	r3, #1
 8014dd0:	eef0 8a40 	vmov.f32	s17, s0
 8014dd4:	d038      	beq.n	8014e48 <acosf+0x90>
 8014dd6:	eeb4 8a48 	vcmp.f32	s16, s16
 8014dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dde:	d633      	bvs.n	8014e48 <acosf+0x90>
 8014de0:	eeb0 0a48 	vmov.f32	s0, s16
 8014de4:	f7ff fba8 	bl	8014538 <fabsf>
 8014de8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014dec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014df4:	dd28      	ble.n	8014e48 <acosf+0x90>
 8014df6:	2301      	movs	r3, #1
 8014df8:	9300      	str	r3, [sp, #0]
 8014dfa:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8014dfe:	4b16      	ldr	r3, [pc, #88]	; (8014e58 <acosf+0xa0>)
 8014e00:	9301      	str	r3, [sp, #4]
 8014e02:	4816      	ldr	r0, [pc, #88]	; (8014e5c <acosf+0xa4>)
 8014e04:	2300      	movs	r3, #0
 8014e06:	9308      	str	r3, [sp, #32]
 8014e08:	ed8d 8b04 	vstr	d8, [sp, #16]
 8014e0c:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014e10:	f002 f8d6 	bl	8016fc0 <nan>
 8014e14:	f994 3000 	ldrsb.w	r3, [r4]
 8014e18:	2b02      	cmp	r3, #2
 8014e1a:	ed8d 0b06 	vstr	d0, [sp, #24]
 8014e1e:	d104      	bne.n	8014e2a <acosf+0x72>
 8014e20:	f002 fb08 	bl	8017434 <__errno>
 8014e24:	2321      	movs	r3, #33	; 0x21
 8014e26:	6003      	str	r3, [r0, #0]
 8014e28:	e004      	b.n	8014e34 <acosf+0x7c>
 8014e2a:	4668      	mov	r0, sp
 8014e2c:	f002 f8c4 	bl	8016fb8 <matherr>
 8014e30:	2800      	cmp	r0, #0
 8014e32:	d0f5      	beq.n	8014e20 <acosf+0x68>
 8014e34:	9b08      	ldr	r3, [sp, #32]
 8014e36:	b11b      	cbz	r3, 8014e40 <acosf+0x88>
 8014e38:	f002 fafc 	bl	8017434 <__errno>
 8014e3c:	9b08      	ldr	r3, [sp, #32]
 8014e3e:	6003      	str	r3, [r0, #0]
 8014e40:	ed9d 0b06 	vldr	d0, [sp, #24]
 8014e44:	eef7 8bc0 	vcvt.f32.f64	s17, d0
 8014e48:	eeb0 0a68 	vmov.f32	s0, s17
 8014e4c:	b00a      	add	sp, #40	; 0x28
 8014e4e:	ecbd 8b02 	vpop	{d8}
 8014e52:	bd10      	pop	{r4, pc}
 8014e54:	20000ad4 	.word	0x20000ad4
 8014e58:	0803e36d 	.word	0x0803e36d
 8014e5c:	0803ea89 	.word	0x0803ea89

08014e60 <acoshf>:
 8014e60:	b500      	push	{lr}
 8014e62:	ed2d 8b02 	vpush	{d8}
 8014e66:	b08b      	sub	sp, #44	; 0x2c
 8014e68:	eeb0 8a40 	vmov.f32	s16, s0
 8014e6c:	f000 fc60 	bl	8015730 <__ieee754_acoshf>
 8014e70:	4b21      	ldr	r3, [pc, #132]	; (8014ef8 <acoshf+0x98>)
 8014e72:	f993 3000 	ldrsb.w	r3, [r3]
 8014e76:	1c5a      	adds	r2, r3, #1
 8014e78:	d034      	beq.n	8014ee4 <acoshf+0x84>
 8014e7a:	eeb4 8a48 	vcmp.f32	s16, s16
 8014e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e82:	d62f      	bvs.n	8014ee4 <acoshf+0x84>
 8014e84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014e88:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e90:	d528      	bpl.n	8014ee4 <acoshf+0x84>
 8014e92:	2201      	movs	r2, #1
 8014e94:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8014ef0 <acoshf+0x90>
 8014e98:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8014e9c:	9200      	str	r2, [sp, #0]
 8014e9e:	4a17      	ldr	r2, [pc, #92]	; (8014efc <acoshf+0x9c>)
 8014ea0:	9201      	str	r2, [sp, #4]
 8014ea2:	2b02      	cmp	r3, #2
 8014ea4:	f04f 0200 	mov.w	r2, #0
 8014ea8:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8014eac:	9208      	str	r2, [sp, #32]
 8014eae:	ed8d 8b04 	vstr	d8, [sp, #16]
 8014eb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014eb6:	ed8d 6b06 	vstr	d6, [sp, #24]
 8014eba:	d104      	bne.n	8014ec6 <acoshf+0x66>
 8014ebc:	f002 faba 	bl	8017434 <__errno>
 8014ec0:	2321      	movs	r3, #33	; 0x21
 8014ec2:	6003      	str	r3, [r0, #0]
 8014ec4:	e004      	b.n	8014ed0 <acoshf+0x70>
 8014ec6:	4668      	mov	r0, sp
 8014ec8:	f002 f876 	bl	8016fb8 <matherr>
 8014ecc:	2800      	cmp	r0, #0
 8014ece:	d0f5      	beq.n	8014ebc <acoshf+0x5c>
 8014ed0:	9b08      	ldr	r3, [sp, #32]
 8014ed2:	b11b      	cbz	r3, 8014edc <acoshf+0x7c>
 8014ed4:	f002 faae 	bl	8017434 <__errno>
 8014ed8:	9b08      	ldr	r3, [sp, #32]
 8014eda:	6003      	str	r3, [r0, #0]
 8014edc:	ed9d 0b06 	vldr	d0, [sp, #24]
 8014ee0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014ee4:	b00b      	add	sp, #44	; 0x2c
 8014ee6:	ecbd 8b02 	vpop	{d8}
 8014eea:	f85d fb04 	ldr.w	pc, [sp], #4
 8014eee:	bf00      	nop
	...
 8014ef8:	20000ad4 	.word	0x20000ad4
 8014efc:	0803e373 	.word	0x0803e373

08014f00 <asinf>:
 8014f00:	b510      	push	{r4, lr}
 8014f02:	ed2d 8b02 	vpush	{d8}
 8014f06:	4c25      	ldr	r4, [pc, #148]	; (8014f9c <asinf+0x9c>)
 8014f08:	b08a      	sub	sp, #40	; 0x28
 8014f0a:	eeb0 8a40 	vmov.f32	s16, s0
 8014f0e:	f000 fc63 	bl	80157d8 <__ieee754_asinf>
 8014f12:	f994 3000 	ldrsb.w	r3, [r4]
 8014f16:	3301      	adds	r3, #1
 8014f18:	eef0 8a40 	vmov.f32	s17, s0
 8014f1c:	d038      	beq.n	8014f90 <asinf+0x90>
 8014f1e:	eeb4 8a48 	vcmp.f32	s16, s16
 8014f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f26:	d633      	bvs.n	8014f90 <asinf+0x90>
 8014f28:	eeb0 0a48 	vmov.f32	s0, s16
 8014f2c:	f7ff fb04 	bl	8014538 <fabsf>
 8014f30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014f34:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f3c:	dd28      	ble.n	8014f90 <asinf+0x90>
 8014f3e:	2301      	movs	r3, #1
 8014f40:	9300      	str	r3, [sp, #0]
 8014f42:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8014f46:	4b16      	ldr	r3, [pc, #88]	; (8014fa0 <asinf+0xa0>)
 8014f48:	9301      	str	r3, [sp, #4]
 8014f4a:	4816      	ldr	r0, [pc, #88]	; (8014fa4 <asinf+0xa4>)
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	9308      	str	r3, [sp, #32]
 8014f50:	ed8d 8b04 	vstr	d8, [sp, #16]
 8014f54:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014f58:	f002 f832 	bl	8016fc0 <nan>
 8014f5c:	f994 3000 	ldrsb.w	r3, [r4]
 8014f60:	2b02      	cmp	r3, #2
 8014f62:	ed8d 0b06 	vstr	d0, [sp, #24]
 8014f66:	d104      	bne.n	8014f72 <asinf+0x72>
 8014f68:	f002 fa64 	bl	8017434 <__errno>
 8014f6c:	2321      	movs	r3, #33	; 0x21
 8014f6e:	6003      	str	r3, [r0, #0]
 8014f70:	e004      	b.n	8014f7c <asinf+0x7c>
 8014f72:	4668      	mov	r0, sp
 8014f74:	f002 f820 	bl	8016fb8 <matherr>
 8014f78:	2800      	cmp	r0, #0
 8014f7a:	d0f5      	beq.n	8014f68 <asinf+0x68>
 8014f7c:	9b08      	ldr	r3, [sp, #32]
 8014f7e:	b11b      	cbz	r3, 8014f88 <asinf+0x88>
 8014f80:	f002 fa58 	bl	8017434 <__errno>
 8014f84:	9b08      	ldr	r3, [sp, #32]
 8014f86:	6003      	str	r3, [r0, #0]
 8014f88:	ed9d 0b06 	vldr	d0, [sp, #24]
 8014f8c:	eef7 8bc0 	vcvt.f32.f64	s17, d0
 8014f90:	eeb0 0a68 	vmov.f32	s0, s17
 8014f94:	b00a      	add	sp, #40	; 0x28
 8014f96:	ecbd 8b02 	vpop	{d8}
 8014f9a:	bd10      	pop	{r4, pc}
 8014f9c:	20000ad4 	.word	0x20000ad4
 8014fa0:	0803e37a 	.word	0x0803e37a
 8014fa4:	0803ea89 	.word	0x0803ea89

08014fa8 <atanhf>:
 8014fa8:	b510      	push	{r4, lr}
 8014faa:	ed2d 8b02 	vpush	{d8}
 8014fae:	4c30      	ldr	r4, [pc, #192]	; (8015070 <atanhf+0xc8>)
 8014fb0:	b08a      	sub	sp, #40	; 0x28
 8014fb2:	eeb0 8a40 	vmov.f32	s16, s0
 8014fb6:	f000 fcf7 	bl	80159a8 <__ieee754_atanhf>
 8014fba:	f994 3000 	ldrsb.w	r3, [r4]
 8014fbe:	3301      	adds	r3, #1
 8014fc0:	eef0 8a40 	vmov.f32	s17, s0
 8014fc4:	d049      	beq.n	801505a <atanhf+0xb2>
 8014fc6:	eeb4 8a48 	vcmp.f32	s16, s16
 8014fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fce:	d644      	bvs.n	801505a <atanhf+0xb2>
 8014fd0:	eeb0 0a48 	vmov.f32	s0, s16
 8014fd4:	f7ff fab0 	bl	8014538 <fabsf>
 8014fd8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014fdc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fe4:	db39      	blt.n	801505a <atanhf+0xb2>
 8014fe6:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8014fea:	f994 3000 	ldrsb.w	r3, [r4]
 8014fee:	4a21      	ldr	r2, [pc, #132]	; (8015074 <atanhf+0xcc>)
 8014ff0:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8015068 <atanhf+0xc0>
 8014ff4:	dd13      	ble.n	801501e <atanhf+0x76>
 8014ff6:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8014ffa:	2101      	movs	r1, #1
 8014ffc:	ed8d 8b04 	vstr	d8, [sp, #16]
 8015000:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015004:	ed8d 6b06 	vstr	d6, [sp, #24]
 8015008:	e9cd 1200 	strd	r1, r2, [sp]
 801500c:	2200      	movs	r2, #0
 801500e:	9208      	str	r2, [sp, #32]
 8015010:	2b02      	cmp	r3, #2
 8015012:	d113      	bne.n	801503c <atanhf+0x94>
 8015014:	f002 fa0e 	bl	8017434 <__errno>
 8015018:	2321      	movs	r3, #33	; 0x21
 801501a:	6003      	str	r3, [r0, #0]
 801501c:	e013      	b.n	8015046 <atanhf+0x9e>
 801501e:	2102      	movs	r1, #2
 8015020:	e9cd 1200 	strd	r1, r2, [sp]
 8015024:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8015028:	2200      	movs	r2, #0
 801502a:	9208      	str	r2, [sp, #32]
 801502c:	ed8d 8b04 	vstr	d8, [sp, #16]
 8015030:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015034:	ed8d 6b06 	vstr	d6, [sp, #24]
 8015038:	428b      	cmp	r3, r1
 801503a:	e7ea      	b.n	8015012 <atanhf+0x6a>
 801503c:	4668      	mov	r0, sp
 801503e:	f001 ffbb 	bl	8016fb8 <matherr>
 8015042:	2800      	cmp	r0, #0
 8015044:	d0e6      	beq.n	8015014 <atanhf+0x6c>
 8015046:	9b08      	ldr	r3, [sp, #32]
 8015048:	b11b      	cbz	r3, 8015052 <atanhf+0xaa>
 801504a:	f002 f9f3 	bl	8017434 <__errno>
 801504e:	9b08      	ldr	r3, [sp, #32]
 8015050:	6003      	str	r3, [r0, #0]
 8015052:	ed9d 0b06 	vldr	d0, [sp, #24]
 8015056:	eef7 8bc0 	vcvt.f32.f64	s17, d0
 801505a:	eeb0 0a68 	vmov.f32	s0, s17
 801505e:	b00a      	add	sp, #40	; 0x28
 8015060:	ecbd 8b02 	vpop	{d8}
 8015064:	bd10      	pop	{r4, pc}
 8015066:	bf00      	nop
	...
 8015070:	20000ad4 	.word	0x20000ad4
 8015074:	0803e380 	.word	0x0803e380

08015078 <coshf>:
 8015078:	b510      	push	{r4, lr}
 801507a:	ed2d 8b02 	vpush	{d8}
 801507e:	4c27      	ldr	r4, [pc, #156]	; (801511c <coshf+0xa4>)
 8015080:	b08a      	sub	sp, #40	; 0x28
 8015082:	eeb0 8a40 	vmov.f32	s16, s0
 8015086:	f000 fcd5 	bl	8015a34 <__ieee754_coshf>
 801508a:	f994 3000 	ldrsb.w	r3, [r4]
 801508e:	3301      	adds	r3, #1
 8015090:	eef0 8a40 	vmov.f32	s17, s0
 8015094:	d031      	beq.n	80150fa <coshf+0x82>
 8015096:	eeb4 8a48 	vcmp.f32	s16, s16
 801509a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801509e:	d62c      	bvs.n	80150fa <coshf+0x82>
 80150a0:	eeb0 0a48 	vmov.f32	s0, s16
 80150a4:	f7ff fa48 	bl	8014538 <fabsf>
 80150a8:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8015120 <coshf+0xa8>
 80150ac:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80150b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150b4:	dd21      	ble.n	80150fa <coshf+0x82>
 80150b6:	2303      	movs	r3, #3
 80150b8:	9300      	str	r3, [sp, #0]
 80150ba:	4b1a      	ldr	r3, [pc, #104]	; (8015124 <coshf+0xac>)
 80150bc:	9301      	str	r3, [sp, #4]
 80150be:	2300      	movs	r3, #0
 80150c0:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 80150c4:	9308      	str	r3, [sp, #32]
 80150c6:	f994 3000 	ldrsb.w	r3, [r4]
 80150ca:	ed8d 8b04 	vstr	d8, [sp, #16]
 80150ce:	ed8d 8b02 	vstr	d8, [sp, #8]
 80150d2:	b9c3      	cbnz	r3, 8015106 <coshf+0x8e>
 80150d4:	4b14      	ldr	r3, [pc, #80]	; (8015128 <coshf+0xb0>)
 80150d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80150da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80150de:	4668      	mov	r0, sp
 80150e0:	f001 ff6a 	bl	8016fb8 <matherr>
 80150e4:	b1a8      	cbz	r0, 8015112 <coshf+0x9a>
 80150e6:	9b08      	ldr	r3, [sp, #32]
 80150e8:	b11b      	cbz	r3, 80150f2 <coshf+0x7a>
 80150ea:	f002 f9a3 	bl	8017434 <__errno>
 80150ee:	9b08      	ldr	r3, [sp, #32]
 80150f0:	6003      	str	r3, [r0, #0]
 80150f2:	ed9d 0b06 	vldr	d0, [sp, #24]
 80150f6:	eef7 8bc0 	vcvt.f32.f64	s17, d0
 80150fa:	eeb0 0a68 	vmov.f32	s0, s17
 80150fe:	b00a      	add	sp, #40	; 0x28
 8015100:	ecbd 8b02 	vpop	{d8}
 8015104:	bd10      	pop	{r4, pc}
 8015106:	4909      	ldr	r1, [pc, #36]	; (801512c <coshf+0xb4>)
 8015108:	2000      	movs	r0, #0
 801510a:	2b02      	cmp	r3, #2
 801510c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015110:	d1e5      	bne.n	80150de <coshf+0x66>
 8015112:	f002 f98f 	bl	8017434 <__errno>
 8015116:	2322      	movs	r3, #34	; 0x22
 8015118:	6003      	str	r3, [r0, #0]
 801511a:	e7e4      	b.n	80150e6 <coshf+0x6e>
 801511c:	20000ad4 	.word	0x20000ad4
 8015120:	42b2d4fc 	.word	0x42b2d4fc
 8015124:	0803e374 	.word	0x0803e374
 8015128:	47efffff 	.word	0x47efffff
 801512c:	7ff00000 	.word	0x7ff00000

08015130 <fmodf>:
 8015130:	b500      	push	{lr}
 8015132:	ed2d 8b02 	vpush	{d8}
 8015136:	b08b      	sub	sp, #44	; 0x2c
 8015138:	eeb0 8a40 	vmov.f32	s16, s0
 801513c:	eef0 8a60 	vmov.f32	s17, s1
 8015140:	f000 fcdc 	bl	8015afc <__ieee754_fmodf>
 8015144:	4b24      	ldr	r3, [pc, #144]	; (80151d8 <fmodf+0xa8>)
 8015146:	f993 3000 	ldrsb.w	r3, [r3]
 801514a:	1c5a      	adds	r2, r3, #1
 801514c:	d02d      	beq.n	80151aa <fmodf+0x7a>
 801514e:	eef4 8a68 	vcmp.f32	s17, s17
 8015152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015156:	d628      	bvs.n	80151aa <fmodf+0x7a>
 8015158:	eeb4 8a48 	vcmp.f32	s16, s16
 801515c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015160:	d623      	bvs.n	80151aa <fmodf+0x7a>
 8015162:	eef5 8a40 	vcmp.f32	s17, #0.0
 8015166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801516a:	d11e      	bne.n	80151aa <fmodf+0x7a>
 801516c:	2201      	movs	r2, #1
 801516e:	9200      	str	r2, [sp, #0]
 8015170:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
 8015174:	4a19      	ldr	r2, [pc, #100]	; (80151dc <fmodf+0xac>)
 8015176:	9201      	str	r2, [sp, #4]
 8015178:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 801517c:	2200      	movs	r2, #0
 801517e:	9208      	str	r2, [sp, #32]
 8015180:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015184:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015188:	b9a3      	cbnz	r3, 80151b4 <fmodf+0x84>
 801518a:	ed8d 0b06 	vstr	d0, [sp, #24]
 801518e:	4668      	mov	r0, sp
 8015190:	f001 ff12 	bl	8016fb8 <matherr>
 8015194:	b1b0      	cbz	r0, 80151c4 <fmodf+0x94>
 8015196:	9b08      	ldr	r3, [sp, #32]
 8015198:	b11b      	cbz	r3, 80151a2 <fmodf+0x72>
 801519a:	f002 f94b 	bl	8017434 <__errno>
 801519e:	9b08      	ldr	r3, [sp, #32]
 80151a0:	6003      	str	r3, [r0, #0]
 80151a2:	ed9d 0b06 	vldr	d0, [sp, #24]
 80151a6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80151aa:	b00b      	add	sp, #44	; 0x2c
 80151ac:	ecbd 8b02 	vpop	{d8}
 80151b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80151b4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 80151d0 <fmodf+0xa0>
 80151b8:	2b02      	cmp	r3, #2
 80151ba:	ee87 6b07 	vdiv.f64	d6, d7, d7
 80151be:	ed8d 6b06 	vstr	d6, [sp, #24]
 80151c2:	d1e4      	bne.n	801518e <fmodf+0x5e>
 80151c4:	f002 f936 	bl	8017434 <__errno>
 80151c8:	2321      	movs	r3, #33	; 0x21
 80151ca:	6003      	str	r3, [r0, #0]
 80151cc:	e7e3      	b.n	8015196 <fmodf+0x66>
 80151ce:	bf00      	nop
	...
 80151d8:	20000ad4 	.word	0x20000ad4
 80151dc:	0803e387 	.word	0x0803e387

080151e0 <sinhf>:
 80151e0:	b530      	push	{r4, r5, lr}
 80151e2:	ed2d 8b02 	vpush	{d8}
 80151e6:	4c32      	ldr	r4, [pc, #200]	; (80152b0 <sinhf+0xd0>)
 80151e8:	b08b      	sub	sp, #44	; 0x2c
 80151ea:	eef0 8a40 	vmov.f32	s17, s0
 80151ee:	f000 fe39 	bl	8015e64 <__ieee754_sinhf>
 80151f2:	f994 3000 	ldrsb.w	r3, [r4]
 80151f6:	3301      	adds	r3, #1
 80151f8:	eeb0 8a40 	vmov.f32	s16, s0
 80151fc:	d030      	beq.n	8015260 <sinhf+0x80>
 80151fe:	f002 f88f 	bl	8017320 <finitef>
 8015202:	4605      	mov	r5, r0
 8015204:	bb60      	cbnz	r0, 8015260 <sinhf+0x80>
 8015206:	eeb0 0a68 	vmov.f32	s0, s17
 801520a:	f002 f889 	bl	8017320 <finitef>
 801520e:	b338      	cbz	r0, 8015260 <sinhf+0x80>
 8015210:	2303      	movs	r3, #3
 8015212:	9300      	str	r3, [sp, #0]
 8015214:	4b27      	ldr	r3, [pc, #156]	; (80152b4 <sinhf+0xd4>)
 8015216:	9301      	str	r3, [sp, #4]
 8015218:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 801521c:	f994 3000 	ldrsb.w	r3, [r4]
 8015220:	9508      	str	r5, [sp, #32]
 8015222:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015226:	ed8d 7b02 	vstr	d7, [sp, #8]
 801522a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801522e:	b9eb      	cbnz	r3, 801526c <sinhf+0x8c>
 8015230:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8015290 <sinhf+0xb0>
 8015234:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8015298 <sinhf+0xb8>
 8015238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801523c:	fe37 7b06 	vselgt.f64	d7, d7, d6
 8015240:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015244:	4668      	mov	r0, sp
 8015246:	f001 feb7 	bl	8016fb8 <matherr>
 801524a:	b1d8      	cbz	r0, 8015284 <sinhf+0xa4>
 801524c:	9b08      	ldr	r3, [sp, #32]
 801524e:	b11b      	cbz	r3, 8015258 <sinhf+0x78>
 8015250:	f002 f8f0 	bl	8017434 <__errno>
 8015254:	9b08      	ldr	r3, [sp, #32]
 8015256:	6003      	str	r3, [r0, #0]
 8015258:	ed9d 8b06 	vldr	d8, [sp, #24]
 801525c:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
 8015260:	eeb0 0a48 	vmov.f32	s0, s16
 8015264:	b00b      	add	sp, #44	; 0x2c
 8015266:	ecbd 8b02 	vpop	{d8}
 801526a:	bd30      	pop	{r4, r5, pc}
 801526c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80152a0 <sinhf+0xc0>
 8015270:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80152a8 <sinhf+0xc8>
 8015274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015278:	fe37 7b06 	vselgt.f64	d7, d7, d6
 801527c:	2b02      	cmp	r3, #2
 801527e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015282:	d1df      	bne.n	8015244 <sinhf+0x64>
 8015284:	f002 f8d6 	bl	8017434 <__errno>
 8015288:	2322      	movs	r3, #34	; 0x22
 801528a:	6003      	str	r3, [r0, #0]
 801528c:	e7de      	b.n	801524c <sinhf+0x6c>
 801528e:	bf00      	nop
 8015290:	e0000000 	.word	0xe0000000
 8015294:	47efffff 	.word	0x47efffff
 8015298:	e0000000 	.word	0xe0000000
 801529c:	c7efffff 	.word	0xc7efffff
 80152a0:	00000000 	.word	0x00000000
 80152a4:	7ff00000 	.word	0x7ff00000
 80152a8:	00000000 	.word	0x00000000
 80152ac:	fff00000 	.word	0xfff00000
 80152b0:	20000ad4 	.word	0x20000ad4
 80152b4:	0803e38d 	.word	0x0803e38d

080152b8 <__ieee754_rem_pio2>:
 80152b8:	b570      	push	{r4, r5, r6, lr}
 80152ba:	eeb0 7b40 	vmov.f64	d7, d0
 80152be:	ee17 5a90 	vmov	r5, s15
 80152c2:	4b95      	ldr	r3, [pc, #596]	; (8015518 <__ieee754_rem_pio2+0x260>)
 80152c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80152c8:	429e      	cmp	r6, r3
 80152ca:	b088      	sub	sp, #32
 80152cc:	4604      	mov	r4, r0
 80152ce:	dc07      	bgt.n	80152e0 <__ieee754_rem_pio2+0x28>
 80152d0:	2200      	movs	r2, #0
 80152d2:	2300      	movs	r3, #0
 80152d4:	ed84 0b00 	vstr	d0, [r4]
 80152d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80152dc:	2000      	movs	r0, #0
 80152de:	e01b      	b.n	8015318 <__ieee754_rem_pio2+0x60>
 80152e0:	4b8e      	ldr	r3, [pc, #568]	; (801551c <__ieee754_rem_pio2+0x264>)
 80152e2:	429e      	cmp	r6, r3
 80152e4:	dc3b      	bgt.n	801535e <__ieee754_rem_pio2+0xa6>
 80152e6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80152ea:	2d00      	cmp	r5, #0
 80152ec:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80154d8 <__ieee754_rem_pio2+0x220>
 80152f0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80152f4:	dd19      	ble.n	801532a <__ieee754_rem_pio2+0x72>
 80152f6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80152fa:	429e      	cmp	r6, r3
 80152fc:	d00e      	beq.n	801531c <__ieee754_rem_pio2+0x64>
 80152fe:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80154e0 <__ieee754_rem_pio2+0x228>
 8015302:	ee37 5b46 	vsub.f64	d5, d7, d6
 8015306:	ee37 7b45 	vsub.f64	d7, d7, d5
 801530a:	ed84 5b00 	vstr	d5, [r4]
 801530e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015312:	ed84 7b02 	vstr	d7, [r4, #8]
 8015316:	2001      	movs	r0, #1
 8015318:	b008      	add	sp, #32
 801531a:	bd70      	pop	{r4, r5, r6, pc}
 801531c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80154e8 <__ieee754_rem_pio2+0x230>
 8015320:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015324:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80154f0 <__ieee754_rem_pio2+0x238>
 8015328:	e7eb      	b.n	8015302 <__ieee754_rem_pio2+0x4a>
 801532a:	429e      	cmp	r6, r3
 801532c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8015330:	d00e      	beq.n	8015350 <__ieee754_rem_pio2+0x98>
 8015332:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 80154e0 <__ieee754_rem_pio2+0x228>
 8015336:	ee37 5b06 	vadd.f64	d5, d7, d6
 801533a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801533e:	ed84 5b00 	vstr	d5, [r4]
 8015342:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015346:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801534a:	ed84 7b02 	vstr	d7, [r4, #8]
 801534e:	e7e3      	b.n	8015318 <__ieee754_rem_pio2+0x60>
 8015350:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80154e8 <__ieee754_rem_pio2+0x230>
 8015354:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015358:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80154f0 <__ieee754_rem_pio2+0x238>
 801535c:	e7eb      	b.n	8015336 <__ieee754_rem_pio2+0x7e>
 801535e:	4b70      	ldr	r3, [pc, #448]	; (8015520 <__ieee754_rem_pio2+0x268>)
 8015360:	429e      	cmp	r6, r3
 8015362:	dc6c      	bgt.n	801543e <__ieee754_rem_pio2+0x186>
 8015364:	f001 fda7 	bl	8016eb6 <fabs>
 8015368:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801536c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80154f8 <__ieee754_rem_pio2+0x240>
 8015370:	eea0 7b06 	vfma.f64	d7, d0, d6
 8015374:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8015378:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801537c:	ee17 0a90 	vmov	r0, s15
 8015380:	eeb1 5b44 	vneg.f64	d5, d4
 8015384:	ed9f 7b54 	vldr	d7, [pc, #336]	; 80154d8 <__ieee754_rem_pio2+0x220>
 8015388:	eea5 0b07 	vfma.f64	d0, d5, d7
 801538c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 80154e0 <__ieee754_rem_pio2+0x228>
 8015390:	281f      	cmp	r0, #31
 8015392:	ee24 7b07 	vmul.f64	d7, d4, d7
 8015396:	ee30 6b47 	vsub.f64	d6, d0, d7
 801539a:	dc08      	bgt.n	80153ae <__ieee754_rem_pio2+0xf6>
 801539c:	1e42      	subs	r2, r0, #1
 801539e:	4b61      	ldr	r3, [pc, #388]	; (8015524 <__ieee754_rem_pio2+0x26c>)
 80153a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153a4:	42b3      	cmp	r3, r6
 80153a6:	d002      	beq.n	80153ae <__ieee754_rem_pio2+0xf6>
 80153a8:	ed84 6b00 	vstr	d6, [r4]
 80153ac:	e022      	b.n	80153f4 <__ieee754_rem_pio2+0x13c>
 80153ae:	ee16 3a90 	vmov	r3, s13
 80153b2:	1536      	asrs	r6, r6, #20
 80153b4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80153b8:	1af3      	subs	r3, r6, r3
 80153ba:	2b10      	cmp	r3, #16
 80153bc:	ddf4      	ble.n	80153a8 <__ieee754_rem_pio2+0xf0>
 80153be:	eeb0 6b40 	vmov.f64	d6, d0
 80153c2:	ed9f 3b49 	vldr	d3, [pc, #292]	; 80154e8 <__ieee754_rem_pio2+0x230>
 80153c6:	eea5 6b03 	vfma.f64	d6, d5, d3
 80153ca:	ee30 7b46 	vsub.f64	d7, d0, d6
 80153ce:	eea5 7b03 	vfma.f64	d7, d5, d3
 80153d2:	ed9f 3b47 	vldr	d3, [pc, #284]	; 80154f0 <__ieee754_rem_pio2+0x238>
 80153d6:	ee94 7b03 	vfnms.f64	d7, d4, d3
 80153da:	ee36 3b47 	vsub.f64	d3, d6, d7
 80153de:	ee13 3a90 	vmov	r3, s7
 80153e2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80153e6:	1af6      	subs	r6, r6, r3
 80153e8:	2e31      	cmp	r6, #49	; 0x31
 80153ea:	dc17      	bgt.n	801541c <__ieee754_rem_pio2+0x164>
 80153ec:	eeb0 0b46 	vmov.f64	d0, d6
 80153f0:	ed84 3b00 	vstr	d3, [r4]
 80153f4:	ed94 6b00 	vldr	d6, [r4]
 80153f8:	2d00      	cmp	r5, #0
 80153fa:	ee30 0b46 	vsub.f64	d0, d0, d6
 80153fe:	ee30 7b47 	vsub.f64	d7, d0, d7
 8015402:	ed84 7b02 	vstr	d7, [r4, #8]
 8015406:	da87      	bge.n	8015318 <__ieee754_rem_pio2+0x60>
 8015408:	eeb1 6b46 	vneg.f64	d6, d6
 801540c:	ed84 6b00 	vstr	d6, [r4]
 8015410:	eeb1 7b47 	vneg.f64	d7, d7
 8015414:	4240      	negs	r0, r0
 8015416:	ed84 7b02 	vstr	d7, [r4, #8]
 801541a:	e77d      	b.n	8015318 <__ieee754_rem_pio2+0x60>
 801541c:	ed9f 3b38 	vldr	d3, [pc, #224]	; 8015500 <__ieee754_rem_pio2+0x248>
 8015420:	eeb0 0b46 	vmov.f64	d0, d6
 8015424:	eea5 0b03 	vfma.f64	d0, d5, d3
 8015428:	ee36 7b40 	vsub.f64	d7, d6, d0
 801542c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8015508 <__ieee754_rem_pio2+0x250>
 8015430:	eea5 7b03 	vfma.f64	d7, d5, d3
 8015434:	ee94 7b06 	vfnms.f64	d7, d4, d6
 8015438:	ee30 6b47 	vsub.f64	d6, d0, d7
 801543c:	e7b4      	b.n	80153a8 <__ieee754_rem_pio2+0xf0>
 801543e:	4b3a      	ldr	r3, [pc, #232]	; (8015528 <__ieee754_rem_pio2+0x270>)
 8015440:	429e      	cmp	r6, r3
 8015442:	dd06      	ble.n	8015452 <__ieee754_rem_pio2+0x19a>
 8015444:	ee30 7b40 	vsub.f64	d7, d0, d0
 8015448:	ed80 7b02 	vstr	d7, [r0, #8]
 801544c:	ed80 7b00 	vstr	d7, [r0]
 8015450:	e744      	b.n	80152dc <__ieee754_rem_pio2+0x24>
 8015452:	1532      	asrs	r2, r6, #20
 8015454:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8015458:	ee10 0a10 	vmov	r0, s0
 801545c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8015460:	ec41 0b17 	vmov	d7, r0, r1
 8015464:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8015468:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8015510 <__ieee754_rem_pio2+0x258>
 801546c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8015470:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015474:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015478:	ee27 7b05 	vmul.f64	d7, d7, d5
 801547c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8015480:	a908      	add	r1, sp, #32
 8015482:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8015486:	ee37 7b46 	vsub.f64	d7, d7, d6
 801548a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801548e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8015492:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015496:	2303      	movs	r3, #3
 8015498:	ed31 7b02 	vldmdb	r1!, {d7}
 801549c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80154a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154a4:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80154a8:	d013      	beq.n	80154d2 <__ieee754_rem_pio2+0x21a>
 80154aa:	4920      	ldr	r1, [pc, #128]	; (801552c <__ieee754_rem_pio2+0x274>)
 80154ac:	9101      	str	r1, [sp, #4]
 80154ae:	2102      	movs	r1, #2
 80154b0:	9100      	str	r1, [sp, #0]
 80154b2:	a802      	add	r0, sp, #8
 80154b4:	4621      	mov	r1, r4
 80154b6:	f000 fdb3 	bl	8016020 <__kernel_rem_pio2>
 80154ba:	2d00      	cmp	r5, #0
 80154bc:	f6bf af2c 	bge.w	8015318 <__ieee754_rem_pio2+0x60>
 80154c0:	ed94 7b00 	vldr	d7, [r4]
 80154c4:	eeb1 7b47 	vneg.f64	d7, d7
 80154c8:	ed84 7b00 	vstr	d7, [r4]
 80154cc:	ed94 7b02 	vldr	d7, [r4, #8]
 80154d0:	e79e      	b.n	8015410 <__ieee754_rem_pio2+0x158>
 80154d2:	4603      	mov	r3, r0
 80154d4:	e7e0      	b.n	8015498 <__ieee754_rem_pio2+0x1e0>
 80154d6:	bf00      	nop
 80154d8:	54400000 	.word	0x54400000
 80154dc:	3ff921fb 	.word	0x3ff921fb
 80154e0:	1a626331 	.word	0x1a626331
 80154e4:	3dd0b461 	.word	0x3dd0b461
 80154e8:	1a600000 	.word	0x1a600000
 80154ec:	3dd0b461 	.word	0x3dd0b461
 80154f0:	2e037073 	.word	0x2e037073
 80154f4:	3ba3198a 	.word	0x3ba3198a
 80154f8:	6dc9c883 	.word	0x6dc9c883
 80154fc:	3fe45f30 	.word	0x3fe45f30
 8015500:	2e000000 	.word	0x2e000000
 8015504:	3ba3198a 	.word	0x3ba3198a
 8015508:	252049c1 	.word	0x252049c1
 801550c:	397b839a 	.word	0x397b839a
 8015510:	00000000 	.word	0x00000000
 8015514:	41700000 	.word	0x41700000
 8015518:	3fe921fb 	.word	0x3fe921fb
 801551c:	4002d97b 	.word	0x4002d97b
 8015520:	413921fb 	.word	0x413921fb
 8015524:	0803e394 	.word	0x0803e394
 8015528:	7fefffff 	.word	0x7fefffff
 801552c:	0803e414 	.word	0x0803e414

08015530 <__ieee754_sqrt>:
 8015530:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8015534:	4770      	bx	lr
	...

08015538 <__ieee754_acosf>:
 8015538:	b508      	push	{r3, lr}
 801553a:	ee10 3a10 	vmov	r3, s0
 801553e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015542:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8015546:	ed2d 8b0c 	vpush	{d8-d13}
 801554a:	d109      	bne.n	8015560 <__ieee754_acosf+0x28>
 801554c:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80156ec <__ieee754_acosf+0x1b4>
 8015550:	ed9f 8a67 	vldr	s16, [pc, #412]	; 80156f0 <__ieee754_acosf+0x1b8>
 8015554:	2b00      	cmp	r3, #0
 8015556:	fe30 0a08 	vselgt.f32	s0, s0, s16
 801555a:	ecbd 8b0c 	vpop	{d8-d13}
 801555e:	bd08      	pop	{r3, pc}
 8015560:	dd04      	ble.n	801556c <__ieee754_acosf+0x34>
 8015562:	ee30 8a40 	vsub.f32	s16, s0, s0
 8015566:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801556a:	e7f6      	b.n	801555a <__ieee754_acosf+0x22>
 801556c:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8015570:	da3e      	bge.n	80155f0 <__ieee754_acosf+0xb8>
 8015572:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8015576:	f340 80b5 	ble.w	80156e4 <__ieee754_acosf+0x1ac>
 801557a:	ee60 7a00 	vmul.f32	s15, s0, s0
 801557e:	eddf 6a5d 	vldr	s13, [pc, #372]	; 80156f4 <__ieee754_acosf+0x1bc>
 8015582:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80156f8 <__ieee754_acosf+0x1c0>
 8015586:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 80156fc <__ieee754_acosf+0x1c4>
 801558a:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 8015700 <__ieee754_acosf+0x1c8>
 801558e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015592:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8015704 <__ieee754_acosf+0x1cc>
 8015596:	eee7 6a27 	vfma.f32	s13, s14, s15
 801559a:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8015708 <__ieee754_acosf+0x1d0>
 801559e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80155a2:	eddf 6a5a 	vldr	s13, [pc, #360]	; 801570c <__ieee754_acosf+0x1d4>
 80155a6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80155aa:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8015710 <__ieee754_acosf+0x1d8>
 80155ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80155b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8015714 <__ieee754_acosf+0x1dc>
 80155b6:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80155ba:	eddf 6a57 	vldr	s13, [pc, #348]	; 8015718 <__ieee754_acosf+0x1e0>
 80155be:	eee6 6a27 	vfma.f32	s13, s12, s15
 80155c2:	ed9f 6a56 	vldr	s12, [pc, #344]	; 801571c <__ieee754_acosf+0x1e4>
 80155c6:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80155ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80155ce:	eee6 6a27 	vfma.f32	s13, s12, s15
 80155d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80155d6:	eef0 7a66 	vmov.f32	s15, s13
 80155da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80155de:	eea0 8a66 	vfms.f32	s16, s0, s13
 80155e2:	ee30 8a48 	vsub.f32	s16, s0, s16
 80155e6:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8015720 <__ieee754_acosf+0x1e8>
 80155ea:	ee30 0a48 	vsub.f32	s0, s0, s16
 80155ee:	e7b4      	b.n	801555a <__ieee754_acosf+0x22>
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	eddf da40 	vldr	s27, [pc, #256]	; 80156f4 <__ieee754_acosf+0x1bc>
 80155f6:	eddf ca40 	vldr	s25, [pc, #256]	; 80156f8 <__ieee754_acosf+0x1c0>
 80155fa:	ed9f ca42 	vldr	s24, [pc, #264]	; 8015704 <__ieee754_acosf+0x1cc>
 80155fe:	eddf ba42 	vldr	s23, [pc, #264]	; 8015708 <__ieee754_acosf+0x1d0>
 8015602:	ed9f ba42 	vldr	s22, [pc, #264]	; 801570c <__ieee754_acosf+0x1d4>
 8015606:	eddf 8a42 	vldr	s17, [pc, #264]	; 8015710 <__ieee754_acosf+0x1d8>
 801560a:	ed9f da42 	vldr	s26, [pc, #264]	; 8015714 <__ieee754_acosf+0x1dc>
 801560e:	eddf aa3b 	vldr	s21, [pc, #236]	; 80156fc <__ieee754_acosf+0x1c4>
 8015612:	ed9f aa41 	vldr	s20, [pc, #260]	; 8015718 <__ieee754_acosf+0x1e0>
 8015616:	eddf 9a41 	vldr	s19, [pc, #260]	; 801571c <__ieee754_acosf+0x1e4>
 801561a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801561e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015622:	da28      	bge.n	8015676 <__ieee754_acosf+0x13e>
 8015624:	ee30 0a09 	vadd.f32	s0, s0, s18
 8015628:	ee20 0a27 	vmul.f32	s0, s0, s15
 801562c:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8015630:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8015634:	eeac ca80 	vfma.f32	s24, s25, s0
 8015638:	eeaa aa80 	vfma.f32	s20, s21, s0
 801563c:	eeec ba00 	vfma.f32	s23, s24, s0
 8015640:	eeea 9a00 	vfma.f32	s19, s20, s0
 8015644:	eeab ba80 	vfma.f32	s22, s23, s0
 8015648:	eea9 9a80 	vfma.f32	s18, s19, s0
 801564c:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8015650:	ee68 8a80 	vmul.f32	s17, s17, s0
 8015654:	f000 fc74 	bl	8015f40 <__ieee754_sqrtf>
 8015658:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801565c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8015724 <__ieee754_acosf+0x1ec>
 8015660:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015664:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8015668:	ee77 7a80 	vadd.f32	s15, s15, s0
 801566c:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8015728 <__ieee754_acosf+0x1f0>
 8015670:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8015674:	e771      	b.n	801555a <__ieee754_acosf+0x22>
 8015676:	ee39 8a40 	vsub.f32	s16, s18, s0
 801567a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801567e:	eeb0 0a48 	vmov.f32	s0, s16
 8015682:	f000 fc5d 	bl	8015f40 <__ieee754_sqrtf>
 8015686:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801568a:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801568e:	eeac ca88 	vfma.f32	s24, s25, s16
 8015692:	eeaa aa88 	vfma.f32	s20, s21, s16
 8015696:	eeec ba08 	vfma.f32	s23, s24, s16
 801569a:	ee10 3a10 	vmov	r3, s0
 801569e:	eeab ba88 	vfma.f32	s22, s23, s16
 80156a2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80156a6:	f023 030f 	bic.w	r3, r3, #15
 80156aa:	eeea 9a08 	vfma.f32	s19, s20, s16
 80156ae:	ee07 3a90 	vmov	s15, r3
 80156b2:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80156b6:	eeb0 6a48 	vmov.f32	s12, s16
 80156ba:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80156be:	eea9 9a88 	vfma.f32	s18, s19, s16
 80156c2:	ee70 6a27 	vadd.f32	s13, s0, s15
 80156c6:	ee68 8a88 	vmul.f32	s17, s17, s16
 80156ca:	eeb0 7a40 	vmov.f32	s14, s0
 80156ce:	ee86 0a26 	vdiv.f32	s0, s12, s13
 80156d2:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80156d6:	eea7 0a26 	vfma.f32	s0, s14, s13
 80156da:	ee30 0a27 	vadd.f32	s0, s0, s15
 80156de:	ee30 0a00 	vadd.f32	s0, s0, s0
 80156e2:	e73a      	b.n	801555a <__ieee754_acosf+0x22>
 80156e4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801572c <__ieee754_acosf+0x1f4>
 80156e8:	e737      	b.n	801555a <__ieee754_acosf+0x22>
 80156ea:	bf00      	nop
 80156ec:	00000000 	.word	0x00000000
 80156f0:	40490fdb 	.word	0x40490fdb
 80156f4:	3811ef08 	.word	0x3811ef08
 80156f8:	3a4f7f04 	.word	0x3a4f7f04
 80156fc:	bf303361 	.word	0xbf303361
 8015700:	33a22168 	.word	0x33a22168
 8015704:	bd241146 	.word	0xbd241146
 8015708:	3e4e0aa8 	.word	0x3e4e0aa8
 801570c:	bea6b090 	.word	0xbea6b090
 8015710:	3e2aaaab 	.word	0x3e2aaaab
 8015714:	3d9dc62e 	.word	0x3d9dc62e
 8015718:	4001572d 	.word	0x4001572d
 801571c:	c019d139 	.word	0xc019d139
 8015720:	3fc90fda 	.word	0x3fc90fda
 8015724:	b3a22168 	.word	0xb3a22168
 8015728:	40490fda 	.word	0x40490fda
 801572c:	3fc90fdb 	.word	0x3fc90fdb

08015730 <__ieee754_acoshf>:
 8015730:	b508      	push	{r3, lr}
 8015732:	ee10 3a10 	vmov	r3, s0
 8015736:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801573a:	ed2d 8b04 	vpush	{d8-d9}
 801573e:	eeb0 8a40 	vmov.f32	s16, s0
 8015742:	da06      	bge.n	8015752 <__ieee754_acoshf+0x22>
 8015744:	ee30 8a40 	vsub.f32	s16, s0, s0
 8015748:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801574c:	ecbd 8b04 	vpop	{d8-d9}
 8015750:	bd08      	pop	{r3, pc}
 8015752:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 8015756:	db0c      	blt.n	8015772 <__ieee754_acoshf+0x42>
 8015758:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801575c:	db02      	blt.n	8015764 <__ieee754_acoshf+0x34>
 801575e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015762:	e7f3      	b.n	801574c <__ieee754_acoshf+0x1c>
 8015764:	f7fe ff32 	bl	80145cc <logf>
 8015768:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80157d0 <__ieee754_acoshf+0xa0>
 801576c:	ee30 0a08 	vadd.f32	s0, s0, s16
 8015770:	e7ec      	b.n	801574c <__ieee754_acoshf+0x1c>
 8015772:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015776:	d028      	beq.n	80157ca <__ieee754_acoshf+0x9a>
 8015778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801577c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8015780:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 8015784:	dd11      	ble.n	80157aa <__ieee754_acoshf+0x7a>
 8015786:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801578a:	eea8 0a08 	vfma.f32	s0, s16, s16
 801578e:	f000 fbd7 	bl	8015f40 <__ieee754_sqrtf>
 8015792:	ee70 7a08 	vadd.f32	s15, s0, s16
 8015796:	ee89 0a27 	vdiv.f32	s0, s18, s15
 801579a:	ee98 0a28 	vfnms.f32	s0, s16, s17
 801579e:	ecbd 8b04 	vpop	{d8-d9}
 80157a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80157a6:	f7fe bf11 	b.w	80145cc <logf>
 80157aa:	ee30 8a49 	vsub.f32	s16, s0, s18
 80157ae:	ee28 0a08 	vmul.f32	s0, s16, s16
 80157b2:	eea8 0a28 	vfma.f32	s0, s16, s17
 80157b6:	f000 fbc3 	bl	8015f40 <__ieee754_sqrtf>
 80157ba:	ee30 0a08 	vadd.f32	s0, s0, s16
 80157be:	ecbd 8b04 	vpop	{d8-d9}
 80157c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80157c6:	f7fe bf69 	b.w	801469c <log1pf>
 80157ca:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80157d4 <__ieee754_acoshf+0xa4>
 80157ce:	e7bd      	b.n	801574c <__ieee754_acoshf+0x1c>
 80157d0:	3f317218 	.word	0x3f317218
 80157d4:	00000000 	.word	0x00000000

080157d8 <__ieee754_asinf>:
 80157d8:	b538      	push	{r3, r4, r5, lr}
 80157da:	ee10 5a10 	vmov	r5, s0
 80157de:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80157e2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80157e6:	ed2d 8b04 	vpush	{d8-d9}
 80157ea:	d10c      	bne.n	8015806 <__ieee754_asinf+0x2e>
 80157ec:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8015968 <__ieee754_asinf+0x190>
 80157f0:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 801596c <__ieee754_asinf+0x194>
 80157f4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80157f8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80157fc:	eeb0 0a67 	vmov.f32	s0, s15
 8015800:	ecbd 8b04 	vpop	{d8-d9}
 8015804:	bd38      	pop	{r3, r4, r5, pc}
 8015806:	dd04      	ble.n	8015812 <__ieee754_asinf+0x3a>
 8015808:	ee70 7a40 	vsub.f32	s15, s0, s0
 801580c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015810:	e7f6      	b.n	8015800 <__ieee754_asinf+0x28>
 8015812:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8015816:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801581a:	da0b      	bge.n	8015834 <__ieee754_asinf+0x5c>
 801581c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8015820:	da52      	bge.n	80158c8 <__ieee754_asinf+0xf0>
 8015822:	eddf 7a53 	vldr	s15, [pc, #332]	; 8015970 <__ieee754_asinf+0x198>
 8015826:	ee70 7a27 	vadd.f32	s15, s0, s15
 801582a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801582e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015832:	dce5      	bgt.n	8015800 <__ieee754_asinf+0x28>
 8015834:	f7fe fe80 	bl	8014538 <fabsf>
 8015838:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801583c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8015840:	ee20 8a08 	vmul.f32	s16, s0, s16
 8015844:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8015974 <__ieee754_asinf+0x19c>
 8015848:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8015978 <__ieee754_asinf+0x1a0>
 801584c:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 801597c <__ieee754_asinf+0x1a4>
 8015850:	eea8 7a27 	vfma.f32	s14, s16, s15
 8015854:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8015980 <__ieee754_asinf+0x1a8>
 8015858:	eee7 7a08 	vfma.f32	s15, s14, s16
 801585c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8015984 <__ieee754_asinf+0x1ac>
 8015860:	eea7 7a88 	vfma.f32	s14, s15, s16
 8015864:	eddf 7a48 	vldr	s15, [pc, #288]	; 8015988 <__ieee754_asinf+0x1b0>
 8015868:	eee7 7a08 	vfma.f32	s15, s14, s16
 801586c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 801598c <__ieee754_asinf+0x1b4>
 8015870:	eea7 9a88 	vfma.f32	s18, s15, s16
 8015874:	eddf 7a46 	vldr	s15, [pc, #280]	; 8015990 <__ieee754_asinf+0x1b8>
 8015878:	eee8 7a07 	vfma.f32	s15, s16, s14
 801587c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8015994 <__ieee754_asinf+0x1bc>
 8015880:	eea7 7a88 	vfma.f32	s14, s15, s16
 8015884:	eddf 7a44 	vldr	s15, [pc, #272]	; 8015998 <__ieee754_asinf+0x1c0>
 8015888:	eee7 7a08 	vfma.f32	s15, s14, s16
 801588c:	eeb0 0a48 	vmov.f32	s0, s16
 8015890:	eee7 8a88 	vfma.f32	s17, s15, s16
 8015894:	f000 fb54 	bl	8015f40 <__ieee754_sqrtf>
 8015898:	4b40      	ldr	r3, [pc, #256]	; (801599c <__ieee754_asinf+0x1c4>)
 801589a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801589e:	429c      	cmp	r4, r3
 80158a0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80158a4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80158a8:	dd3d      	ble.n	8015926 <__ieee754_asinf+0x14e>
 80158aa:	eea0 0a06 	vfma.f32	s0, s0, s12
 80158ae:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80159a0 <__ieee754_asinf+0x1c8>
 80158b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80158b6:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 801596c <__ieee754_asinf+0x194>
 80158ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 80158be:	2d00      	cmp	r5, #0
 80158c0:	bfd8      	it	le
 80158c2:	eeb1 0a40 	vnegle.f32	s0, s0
 80158c6:	e79b      	b.n	8015800 <__ieee754_asinf+0x28>
 80158c8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80158cc:	eddf 6a29 	vldr	s13, [pc, #164]	; 8015974 <__ieee754_asinf+0x19c>
 80158d0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8015978 <__ieee754_asinf+0x1a0>
 80158d4:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 801598c <__ieee754_asinf+0x1b4>
 80158d8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80158dc:	eddf 6a28 	vldr	s13, [pc, #160]	; 8015980 <__ieee754_asinf+0x1a8>
 80158e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80158e4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8015984 <__ieee754_asinf+0x1ac>
 80158e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80158ec:	eddf 6a26 	vldr	s13, [pc, #152]	; 8015988 <__ieee754_asinf+0x1b0>
 80158f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80158f4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 801597c <__ieee754_asinf+0x1a4>
 80158f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80158fc:	eddf 6a24 	vldr	s13, [pc, #144]	; 8015990 <__ieee754_asinf+0x1b8>
 8015900:	eee7 6a86 	vfma.f32	s13, s15, s12
 8015904:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8015994 <__ieee754_asinf+0x1bc>
 8015908:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801590c:	eddf 6a22 	vldr	s13, [pc, #136]	; 8015998 <__ieee754_asinf+0x1c0>
 8015910:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015914:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015918:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801591c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8015920:	eea0 0a27 	vfma.f32	s0, s0, s15
 8015924:	e76c      	b.n	8015800 <__ieee754_asinf+0x28>
 8015926:	ee10 3a10 	vmov	r3, s0
 801592a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801592e:	f023 030f 	bic.w	r3, r3, #15
 8015932:	ee07 3a90 	vmov	s15, r3
 8015936:	eef1 6a67 	vneg.f32	s13, s15
 801593a:	eea6 8aa7 	vfma.f32	s16, s13, s15
 801593e:	ee70 5a00 	vadd.f32	s11, s0, s0
 8015942:	ee37 0a80 	vadd.f32	s0, s15, s0
 8015946:	eddf 7a08 	vldr	s15, [pc, #32]	; 8015968 <__ieee754_asinf+0x190>
 801594a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801594e:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80159a4 <__ieee754_asinf+0x1cc>
 8015952:	eee5 7a47 	vfms.f32	s15, s10, s14
 8015956:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801595a:	eeb0 6a40 	vmov.f32	s12, s0
 801595e:	eea6 6a87 	vfma.f32	s12, s13, s14
 8015962:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015966:	e7a8      	b.n	80158ba <__ieee754_asinf+0xe2>
 8015968:	b33bbd2e 	.word	0xb33bbd2e
 801596c:	3fc90fdb 	.word	0x3fc90fdb
 8015970:	7149f2ca 	.word	0x7149f2ca
 8015974:	3811ef08 	.word	0x3811ef08
 8015978:	3a4f7f04 	.word	0x3a4f7f04
 801597c:	3e2aaaab 	.word	0x3e2aaaab
 8015980:	bd241146 	.word	0xbd241146
 8015984:	3e4e0aa8 	.word	0x3e4e0aa8
 8015988:	bea6b090 	.word	0xbea6b090
 801598c:	3d9dc62e 	.word	0x3d9dc62e
 8015990:	bf303361 	.word	0xbf303361
 8015994:	4001572d 	.word	0x4001572d
 8015998:	c019d139 	.word	0xc019d139
 801599c:	3f799999 	.word	0x3f799999
 80159a0:	333bbd2e 	.word	0x333bbd2e
 80159a4:	3f490fdb 	.word	0x3f490fdb

080159a8 <__ieee754_atanhf>:
 80159a8:	b510      	push	{r4, lr}
 80159aa:	ee10 4a10 	vmov	r4, s0
 80159ae:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80159b2:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80159b6:	ed2d 8b02 	vpush	{d8}
 80159ba:	dd06      	ble.n	80159ca <__ieee754_atanhf+0x22>
 80159bc:	ee70 7a40 	vsub.f32	s15, s0, s0
 80159c0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80159c4:	ecbd 8b02 	vpop	{d8}
 80159c8:	bd10      	pop	{r4, pc}
 80159ca:	d104      	bne.n	80159d6 <__ieee754_atanhf+0x2e>
 80159cc:	eddf 7a17 	vldr	s15, [pc, #92]	; 8015a2c <__ieee754_atanhf+0x84>
 80159d0:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80159d4:	e7f6      	b.n	80159c4 <__ieee754_atanhf+0x1c>
 80159d6:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 80159da:	da08      	bge.n	80159ee <__ieee754_atanhf+0x46>
 80159dc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8015a30 <__ieee754_atanhf+0x88>
 80159e0:	ee70 7a27 	vadd.f32	s15, s0, s15
 80159e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80159e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159ec:	dcea      	bgt.n	80159c4 <__ieee754_atanhf+0x1c>
 80159ee:	ee07 3a90 	vmov	s15, r3
 80159f2:	ee37 0aa7 	vadd.f32	s0, s15, s15
 80159f6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80159fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80159fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015a02:	bfb6      	itet	lt
 8015a04:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8015a08:	ee80 0a07 	vdivge.f32	s0, s0, s14
 8015a0c:	eec7 6a87 	vdivlt.f32	s13, s15, s14
 8015a10:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8015a14:	bfb8      	it	lt
 8015a16:	ee36 0a80 	vaddlt.f32	s0, s13, s0
 8015a1a:	f7fe fe3f 	bl	801469c <log1pf>
 8015a1e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8015a22:	2c00      	cmp	r4, #0
 8015a24:	bfb8      	it	lt
 8015a26:	eeb1 0a40 	vneglt.f32	s0, s0
 8015a2a:	e7cb      	b.n	80159c4 <__ieee754_atanhf+0x1c>
 8015a2c:	00000000 	.word	0x00000000
 8015a30:	7149f2ca 	.word	0x7149f2ca

08015a34 <__ieee754_coshf>:
 8015a34:	b510      	push	{r4, lr}
 8015a36:	ee10 4a10 	vmov	r4, s0
 8015a3a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8015a3e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015a42:	ed2d 8b02 	vpush	{d8}
 8015a46:	db04      	blt.n	8015a52 <__ieee754_coshf+0x1e>
 8015a48:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015a4c:	ecbd 8b02 	vpop	{d8}
 8015a50:	bd10      	pop	{r4, pc}
 8015a52:	4b25      	ldr	r3, [pc, #148]	; (8015ae8 <__ieee754_coshf+0xb4>)
 8015a54:	429c      	cmp	r4, r3
 8015a56:	dc15      	bgt.n	8015a84 <__ieee754_coshf+0x50>
 8015a58:	f7fe fd6e 	bl	8014538 <fabsf>
 8015a5c:	f001 fb36 	bl	80170cc <expm1f>
 8015a60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015a64:	f1b4 5f10 	cmp.w	r4, #603979776	; 0x24000000
 8015a68:	eef0 7a40 	vmov.f32	s15, s0
 8015a6c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8015a70:	dbec      	blt.n	8015a4c <__ieee754_coshf+0x18>
 8015a72:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015a76:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015a7a:	eec7 6a80 	vdiv.f32	s13, s15, s0
 8015a7e:	ee36 0a87 	vadd.f32	s0, s13, s14
 8015a82:	e7e3      	b.n	8015a4c <__ieee754_coshf+0x18>
 8015a84:	4b19      	ldr	r3, [pc, #100]	; (8015aec <__ieee754_coshf+0xb8>)
 8015a86:	429c      	cmp	r4, r3
 8015a88:	dc0c      	bgt.n	8015aa4 <__ieee754_coshf+0x70>
 8015a8a:	f7fe fd55 	bl	8014538 <fabsf>
 8015a8e:	f7fe fcd5 	bl	801443c <expf>
 8015a92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015a96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015a9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8015aa2:	e7d3      	b.n	8015a4c <__ieee754_coshf+0x18>
 8015aa4:	4b12      	ldr	r3, [pc, #72]	; (8015af0 <__ieee754_coshf+0xbc>)
 8015aa6:	429c      	cmp	r4, r3
 8015aa8:	dc08      	bgt.n	8015abc <__ieee754_coshf+0x88>
 8015aaa:	f7fe fd45 	bl	8014538 <fabsf>
 8015aae:	f7fe fcc5 	bl	801443c <expf>
 8015ab2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015ab6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015aba:	e7c7      	b.n	8015a4c <__ieee754_coshf+0x18>
 8015abc:	4b0d      	ldr	r3, [pc, #52]	; (8015af4 <__ieee754_coshf+0xc0>)
 8015abe:	429c      	cmp	r4, r3
 8015ac0:	dc0c      	bgt.n	8015adc <__ieee754_coshf+0xa8>
 8015ac2:	f7fe fd39 	bl	8014538 <fabsf>
 8015ac6:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8015aca:	ee20 0a08 	vmul.f32	s0, s0, s16
 8015ace:	f7fe fcb5 	bl	801443c <expf>
 8015ad2:	ee20 8a08 	vmul.f32	s16, s0, s16
 8015ad6:	ee28 0a00 	vmul.f32	s0, s16, s0
 8015ada:	e7b7      	b.n	8015a4c <__ieee754_coshf+0x18>
 8015adc:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8015af8 <__ieee754_coshf+0xc4>
 8015ae0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015ae4:	e7b2      	b.n	8015a4c <__ieee754_coshf+0x18>
 8015ae6:	bf00      	nop
 8015ae8:	3eb17217 	.word	0x3eb17217
 8015aec:	41afffff 	.word	0x41afffff
 8015af0:	42b17217 	.word	0x42b17217
 8015af4:	42b2d4fc 	.word	0x42b2d4fc
 8015af8:	7149f2ca 	.word	0x7149f2ca

08015afc <__ieee754_fmodf>:
 8015afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015afe:	ee10 6a90 	vmov	r6, s1
 8015b02:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8015b06:	ee10 3a10 	vmov	r3, s0
 8015b0a:	d009      	beq.n	8015b20 <__ieee754_fmodf+0x24>
 8015b0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8015b10:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015b14:	ee10 7a10 	vmov	r7, s0
 8015b18:	da02      	bge.n	8015b20 <__ieee754_fmodf+0x24>
 8015b1a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8015b1e:	dd0a      	ble.n	8015b36 <__ieee754_fmodf+0x3a>
 8015b20:	ee07 3a90 	vmov	s15, r3
 8015b24:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8015b28:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8015b2c:	ee17 3a90 	vmov	r3, s15
 8015b30:	ee00 3a10 	vmov	s0, r3
 8015b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b36:	42a9      	cmp	r1, r5
 8015b38:	dbfa      	blt.n	8015b30 <__ieee754_fmodf+0x34>
 8015b3a:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8015b3e:	d105      	bne.n	8015b4c <__ieee754_fmodf+0x50>
 8015b40:	4a30      	ldr	r2, [pc, #192]	; (8015c04 <__ieee754_fmodf+0x108>)
 8015b42:	0fe3      	lsrs	r3, r4, #31
 8015b44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	e7f1      	b.n	8015b30 <__ieee754_fmodf+0x34>
 8015b4c:	4b2e      	ldr	r3, [pc, #184]	; (8015c08 <__ieee754_fmodf+0x10c>)
 8015b4e:	4299      	cmp	r1, r3
 8015b50:	dc3e      	bgt.n	8015bd0 <__ieee754_fmodf+0xd4>
 8015b52:	020a      	lsls	r2, r1, #8
 8015b54:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8015b58:	2a00      	cmp	r2, #0
 8015b5a:	dc36      	bgt.n	8015bca <__ieee754_fmodf+0xce>
 8015b5c:	429d      	cmp	r5, r3
 8015b5e:	dc3a      	bgt.n	8015bd6 <__ieee754_fmodf+0xda>
 8015b60:	022b      	lsls	r3, r5, #8
 8015b62:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8015b66:	005b      	lsls	r3, r3, #1
 8015b68:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8015b6c:	d5fb      	bpl.n	8015b66 <__ieee754_fmodf+0x6a>
 8015b6e:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8015b72:	bfbb      	ittet	lt
 8015b74:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8015b78:	1a1b      	sublt	r3, r3, r0
 8015b7a:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 8015b7e:	4099      	lsllt	r1, r3
 8015b80:	bfa8      	it	ge
 8015b82:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 8015b86:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8015b8a:	bfb5      	itete	lt
 8015b8c:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8015b90:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8015b94:	1a9b      	sublt	r3, r3, r2
 8015b96:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8015b9a:	bfb8      	it	lt
 8015b9c:	409d      	lsllt	r5, r3
 8015b9e:	1a80      	subs	r0, r0, r2
 8015ba0:	1b4b      	subs	r3, r1, r5
 8015ba2:	b9d8      	cbnz	r0, 8015bdc <__ieee754_fmodf+0xe0>
 8015ba4:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8015ba8:	bf28      	it	cs
 8015baa:	460b      	movcs	r3, r1
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d0c7      	beq.n	8015b40 <__ieee754_fmodf+0x44>
 8015bb0:	4915      	ldr	r1, [pc, #84]	; (8015c08 <__ieee754_fmodf+0x10c>)
 8015bb2:	428b      	cmp	r3, r1
 8015bb4:	dd1a      	ble.n	8015bec <__ieee754_fmodf+0xf0>
 8015bb6:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8015bba:	db1a      	blt.n	8015bf2 <__ieee754_fmodf+0xf6>
 8015bbc:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8015bc0:	4323      	orrs	r3, r4
 8015bc2:	327f      	adds	r2, #127	; 0x7f
 8015bc4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8015bc8:	e7b2      	b.n	8015b30 <__ieee754_fmodf+0x34>
 8015bca:	3801      	subs	r0, #1
 8015bcc:	0052      	lsls	r2, r2, #1
 8015bce:	e7c3      	b.n	8015b58 <__ieee754_fmodf+0x5c>
 8015bd0:	15c8      	asrs	r0, r1, #23
 8015bd2:	387f      	subs	r0, #127	; 0x7f
 8015bd4:	e7c2      	b.n	8015b5c <__ieee754_fmodf+0x60>
 8015bd6:	15ea      	asrs	r2, r5, #23
 8015bd8:	3a7f      	subs	r2, #127	; 0x7f
 8015bda:	e7c8      	b.n	8015b6e <__ieee754_fmodf+0x72>
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	da02      	bge.n	8015be6 <__ieee754_fmodf+0xea>
 8015be0:	0049      	lsls	r1, r1, #1
 8015be2:	3801      	subs	r0, #1
 8015be4:	e7dc      	b.n	8015ba0 <__ieee754_fmodf+0xa4>
 8015be6:	d0ab      	beq.n	8015b40 <__ieee754_fmodf+0x44>
 8015be8:	0059      	lsls	r1, r3, #1
 8015bea:	e7fa      	b.n	8015be2 <__ieee754_fmodf+0xe6>
 8015bec:	005b      	lsls	r3, r3, #1
 8015bee:	3a01      	subs	r2, #1
 8015bf0:	e7df      	b.n	8015bb2 <__ieee754_fmodf+0xb6>
 8015bf2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015bf6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015bfa:	3282      	adds	r2, #130	; 0x82
 8015bfc:	4113      	asrs	r3, r2
 8015bfe:	4323      	orrs	r3, r4
 8015c00:	e796      	b.n	8015b30 <__ieee754_fmodf+0x34>
 8015c02:	bf00      	nop
 8015c04:	0803e51c 	.word	0x0803e51c
 8015c08:	007fffff 	.word	0x007fffff

08015c0c <__ieee754_rem_pio2f>:
 8015c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c0e:	ee10 6a10 	vmov	r6, s0
 8015c12:	4b86      	ldr	r3, [pc, #536]	; (8015e2c <__ieee754_rem_pio2f+0x220>)
 8015c14:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8015c18:	429c      	cmp	r4, r3
 8015c1a:	b087      	sub	sp, #28
 8015c1c:	4605      	mov	r5, r0
 8015c1e:	dc05      	bgt.n	8015c2c <__ieee754_rem_pio2f+0x20>
 8015c20:	2300      	movs	r3, #0
 8015c22:	ed85 0a00 	vstr	s0, [r5]
 8015c26:	6043      	str	r3, [r0, #4]
 8015c28:	2000      	movs	r0, #0
 8015c2a:	e020      	b.n	8015c6e <__ieee754_rem_pio2f+0x62>
 8015c2c:	4b80      	ldr	r3, [pc, #512]	; (8015e30 <__ieee754_rem_pio2f+0x224>)
 8015c2e:	429c      	cmp	r4, r3
 8015c30:	dc38      	bgt.n	8015ca4 <__ieee754_rem_pio2f+0x98>
 8015c32:	2e00      	cmp	r6, #0
 8015c34:	f024 040f 	bic.w	r4, r4, #15
 8015c38:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8015e34 <__ieee754_rem_pio2f+0x228>
 8015c3c:	4b7e      	ldr	r3, [pc, #504]	; (8015e38 <__ieee754_rem_pio2f+0x22c>)
 8015c3e:	dd18      	ble.n	8015c72 <__ieee754_rem_pio2f+0x66>
 8015c40:	429c      	cmp	r4, r3
 8015c42:	ee70 7a47 	vsub.f32	s15, s0, s14
 8015c46:	bf09      	itett	eq
 8015c48:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8015e3c <__ieee754_rem_pio2f+0x230>
 8015c4c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8015e40 <__ieee754_rem_pio2f+0x234>
 8015c50:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8015c54:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8015e44 <__ieee754_rem_pio2f+0x238>
 8015c58:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8015c5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015c60:	edc0 6a00 	vstr	s13, [r0]
 8015c64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c68:	edc0 7a01 	vstr	s15, [r0, #4]
 8015c6c:	2001      	movs	r0, #1
 8015c6e:	b007      	add	sp, #28
 8015c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c72:	429c      	cmp	r4, r3
 8015c74:	ee70 7a07 	vadd.f32	s15, s0, s14
 8015c78:	bf09      	itett	eq
 8015c7a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8015e3c <__ieee754_rem_pio2f+0x230>
 8015c7e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8015e40 <__ieee754_rem_pio2f+0x234>
 8015c82:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8015c86:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8015e44 <__ieee754_rem_pio2f+0x238>
 8015c8a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8015c8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015c92:	edc0 6a00 	vstr	s13, [r0]
 8015c96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015c9a:	edc0 7a01 	vstr	s15, [r0, #4]
 8015c9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015ca2:	e7e4      	b.n	8015c6e <__ieee754_rem_pio2f+0x62>
 8015ca4:	4b68      	ldr	r3, [pc, #416]	; (8015e48 <__ieee754_rem_pio2f+0x23c>)
 8015ca6:	429c      	cmp	r4, r3
 8015ca8:	dc71      	bgt.n	8015d8e <__ieee754_rem_pio2f+0x182>
 8015caa:	f7fe fc45 	bl	8014538 <fabsf>
 8015cae:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8015e4c <__ieee754_rem_pio2f+0x240>
 8015cb2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015cb6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015cba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015cbe:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8015cc2:	ee17 0a90 	vmov	r0, s15
 8015cc6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8015e34 <__ieee754_rem_pio2f+0x228>
 8015cca:	eeb1 7a46 	vneg.f32	s14, s12
 8015cce:	eea7 0a27 	vfma.f32	s0, s14, s15
 8015cd2:	281f      	cmp	r0, #31
 8015cd4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8015e40 <__ieee754_rem_pio2f+0x234>
 8015cd8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015cdc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015ce0:	ee16 3a90 	vmov	r3, s13
 8015ce4:	dc1c      	bgt.n	8015d20 <__ieee754_rem_pio2f+0x114>
 8015ce6:	1e47      	subs	r7, r0, #1
 8015ce8:	4959      	ldr	r1, [pc, #356]	; (8015e50 <__ieee754_rem_pio2f+0x244>)
 8015cea:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8015cee:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8015cf2:	428a      	cmp	r2, r1
 8015cf4:	d014      	beq.n	8015d20 <__ieee754_rem_pio2f+0x114>
 8015cf6:	602b      	str	r3, [r5, #0]
 8015cf8:	ed95 7a00 	vldr	s14, [r5]
 8015cfc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015d00:	2e00      	cmp	r6, #0
 8015d02:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015d06:	ed85 0a01 	vstr	s0, [r5, #4]
 8015d0a:	dab0      	bge.n	8015c6e <__ieee754_rem_pio2f+0x62>
 8015d0c:	eeb1 7a47 	vneg.f32	s14, s14
 8015d10:	eeb1 0a40 	vneg.f32	s0, s0
 8015d14:	ed85 7a00 	vstr	s14, [r5]
 8015d18:	ed85 0a01 	vstr	s0, [r5, #4]
 8015d1c:	4240      	negs	r0, r0
 8015d1e:	e7a6      	b.n	8015c6e <__ieee754_rem_pio2f+0x62>
 8015d20:	15e4      	asrs	r4, r4, #23
 8015d22:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015d26:	1aa2      	subs	r2, r4, r2
 8015d28:	2a08      	cmp	r2, #8
 8015d2a:	dde4      	ble.n	8015cf6 <__ieee754_rem_pio2f+0xea>
 8015d2c:	eddf 7a43 	vldr	s15, [pc, #268]	; 8015e3c <__ieee754_rem_pio2f+0x230>
 8015d30:	eef0 6a40 	vmov.f32	s13, s0
 8015d34:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015d38:	ee30 0a66 	vsub.f32	s0, s0, s13
 8015d3c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8015d40:	eddf 7a40 	vldr	s15, [pc, #256]	; 8015e44 <__ieee754_rem_pio2f+0x238>
 8015d44:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8015d48:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8015d4c:	eef0 7a40 	vmov.f32	s15, s0
 8015d50:	ee15 3a90 	vmov	r3, s11
 8015d54:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015d58:	1aa4      	subs	r4, r4, r2
 8015d5a:	2c19      	cmp	r4, #25
 8015d5c:	dc04      	bgt.n	8015d68 <__ieee754_rem_pio2f+0x15c>
 8015d5e:	edc5 5a00 	vstr	s11, [r5]
 8015d62:	eeb0 0a66 	vmov.f32	s0, s13
 8015d66:	e7c7      	b.n	8015cf8 <__ieee754_rem_pio2f+0xec>
 8015d68:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8015e54 <__ieee754_rem_pio2f+0x248>
 8015d6c:	eeb0 0a66 	vmov.f32	s0, s13
 8015d70:	eea7 0a25 	vfma.f32	s0, s14, s11
 8015d74:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8015d78:	eee7 7a25 	vfma.f32	s15, s14, s11
 8015d7c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8015e58 <__ieee754_rem_pio2f+0x24c>
 8015d80:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8015d84:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015d88:	ed85 7a00 	vstr	s14, [r5]
 8015d8c:	e7b4      	b.n	8015cf8 <__ieee754_rem_pio2f+0xec>
 8015d8e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015d92:	db06      	blt.n	8015da2 <__ieee754_rem_pio2f+0x196>
 8015d94:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015d98:	edc0 7a01 	vstr	s15, [r0, #4]
 8015d9c:	edc0 7a00 	vstr	s15, [r0]
 8015da0:	e742      	b.n	8015c28 <__ieee754_rem_pio2f+0x1c>
 8015da2:	15e2      	asrs	r2, r4, #23
 8015da4:	3a86      	subs	r2, #134	; 0x86
 8015da6:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8015daa:	ee07 3a90 	vmov	s15, r3
 8015dae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8015db2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8015e5c <__ieee754_rem_pio2f+0x250>
 8015db6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015dba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015dbe:	ed8d 7a03 	vstr	s14, [sp, #12]
 8015dc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015dc6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8015dca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015dce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015dd2:	ed8d 7a04 	vstr	s14, [sp, #16]
 8015dd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015dda:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015de2:	edcd 7a05 	vstr	s15, [sp, #20]
 8015de6:	d11e      	bne.n	8015e26 <__ieee754_rem_pio2f+0x21a>
 8015de8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015df0:	bf0c      	ite	eq
 8015df2:	2301      	moveq	r3, #1
 8015df4:	2302      	movne	r3, #2
 8015df6:	491a      	ldr	r1, [pc, #104]	; (8015e60 <__ieee754_rem_pio2f+0x254>)
 8015df8:	9101      	str	r1, [sp, #4]
 8015dfa:	2102      	movs	r1, #2
 8015dfc:	9100      	str	r1, [sp, #0]
 8015dfe:	a803      	add	r0, sp, #12
 8015e00:	4629      	mov	r1, r5
 8015e02:	f000 fc5f 	bl	80166c4 <__kernel_rem_pio2f>
 8015e06:	2e00      	cmp	r6, #0
 8015e08:	f6bf af31 	bge.w	8015c6e <__ieee754_rem_pio2f+0x62>
 8015e0c:	edd5 7a00 	vldr	s15, [r5]
 8015e10:	eef1 7a67 	vneg.f32	s15, s15
 8015e14:	edc5 7a00 	vstr	s15, [r5]
 8015e18:	edd5 7a01 	vldr	s15, [r5, #4]
 8015e1c:	eef1 7a67 	vneg.f32	s15, s15
 8015e20:	edc5 7a01 	vstr	s15, [r5, #4]
 8015e24:	e77a      	b.n	8015d1c <__ieee754_rem_pio2f+0x110>
 8015e26:	2303      	movs	r3, #3
 8015e28:	e7e5      	b.n	8015df6 <__ieee754_rem_pio2f+0x1ea>
 8015e2a:	bf00      	nop
 8015e2c:	3f490fd8 	.word	0x3f490fd8
 8015e30:	4016cbe3 	.word	0x4016cbe3
 8015e34:	3fc90f80 	.word	0x3fc90f80
 8015e38:	3fc90fd0 	.word	0x3fc90fd0
 8015e3c:	37354400 	.word	0x37354400
 8015e40:	37354443 	.word	0x37354443
 8015e44:	2e85a308 	.word	0x2e85a308
 8015e48:	43490f80 	.word	0x43490f80
 8015e4c:	3f22f984 	.word	0x3f22f984
 8015e50:	0803e524 	.word	0x0803e524
 8015e54:	2e85a300 	.word	0x2e85a300
 8015e58:	248d3132 	.word	0x248d3132
 8015e5c:	43800000 	.word	0x43800000
 8015e60:	0803e5a4 	.word	0x0803e5a4

08015e64 <__ieee754_sinhf>:
 8015e64:	b510      	push	{r4, lr}
 8015e66:	ee10 3a10 	vmov	r3, s0
 8015e6a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8015e6e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015e72:	ed2d 8b02 	vpush	{d8}
 8015e76:	eef0 7a40 	vmov.f32	s15, s0
 8015e7a:	db06      	blt.n	8015e8a <__ieee754_sinhf+0x26>
 8015e7c:	ee70 7a00 	vadd.f32	s15, s0, s0
 8015e80:	ecbd 8b02 	vpop	{d8}
 8015e84:	eeb0 0a67 	vmov.f32	s0, s15
 8015e88:	bd10      	pop	{r4, pc}
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	4b28      	ldr	r3, [pc, #160]	; (8015f30 <__ieee754_sinhf+0xcc>)
 8015e8e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8015e92:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 8015e96:	fe28 8a88 	vselge.f32	s16, s17, s16
 8015e9a:	429c      	cmp	r4, r3
 8015e9c:	dc2a      	bgt.n	8015ef4 <__ieee754_sinhf+0x90>
 8015e9e:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 8015ea2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8015ea6:	da08      	bge.n	8015eba <__ieee754_sinhf+0x56>
 8015ea8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8015f34 <__ieee754_sinhf+0xd0>
 8015eac:	ee30 7a07 	vadd.f32	s14, s0, s14
 8015eb0:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8015eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eb8:	dce2      	bgt.n	8015e80 <__ieee754_sinhf+0x1c>
 8015eba:	eeb0 0a67 	vmov.f32	s0, s15
 8015ebe:	f7fe fb3b 	bl	8014538 <fabsf>
 8015ec2:	f001 f903 	bl	80170cc <expm1f>
 8015ec6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8015eca:	bfbb      	ittet	lt
 8015ecc:	ee20 7a00 	vmullt.f32	s14, s0, s0
 8015ed0:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 8015ed4:	ee70 8a28 	vaddge.f32	s17, s0, s17
 8015ed8:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 8015edc:	bfad      	iteet	ge
 8015ede:	eec0 7a28 	vdivge.f32	s15, s0, s17
 8015ee2:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 8015ee6:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 8015eea:	ee77 7a80 	vaddge.f32	s15, s15, s0
 8015eee:	ee67 7a88 	vmul.f32	s15, s15, s16
 8015ef2:	e7c5      	b.n	8015e80 <__ieee754_sinhf+0x1c>
 8015ef4:	4b10      	ldr	r3, [pc, #64]	; (8015f38 <__ieee754_sinhf+0xd4>)
 8015ef6:	429c      	cmp	r4, r3
 8015ef8:	dc06      	bgt.n	8015f08 <__ieee754_sinhf+0xa4>
 8015efa:	f7fe fb1d 	bl	8014538 <fabsf>
 8015efe:	f7fe fa9d 	bl	801443c <expf>
 8015f02:	ee60 7a08 	vmul.f32	s15, s0, s16
 8015f06:	e7bb      	b.n	8015e80 <__ieee754_sinhf+0x1c>
 8015f08:	4b0c      	ldr	r3, [pc, #48]	; (8015f3c <__ieee754_sinhf+0xd8>)
 8015f0a:	429c      	cmp	r4, r3
 8015f0c:	dc0a      	bgt.n	8015f24 <__ieee754_sinhf+0xc0>
 8015f0e:	f7fe fb13 	bl	8014538 <fabsf>
 8015f12:	ee20 0a28 	vmul.f32	s0, s0, s17
 8015f16:	f7fe fa91 	bl	801443c <expf>
 8015f1a:	ee68 7a00 	vmul.f32	s15, s16, s0
 8015f1e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015f22:	e7ad      	b.n	8015e80 <__ieee754_sinhf+0x1c>
 8015f24:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8015f34 <__ieee754_sinhf+0xd0>
 8015f28:	ee60 7a07 	vmul.f32	s15, s0, s14
 8015f2c:	e7a8      	b.n	8015e80 <__ieee754_sinhf+0x1c>
 8015f2e:	bf00      	nop
 8015f30:	41afffff 	.word	0x41afffff
 8015f34:	7cf0bdc2 	.word	0x7cf0bdc2
 8015f38:	42b17217 	.word	0x42b17217
 8015f3c:	42b2d4fc 	.word	0x42b2d4fc

08015f40 <__ieee754_sqrtf>:
 8015f40:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015f44:	4770      	bx	lr
	...

08015f48 <__kernel_cos>:
 8015f48:	ee10 1a90 	vmov	r1, s1
 8015f4c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8015f50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015f54:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8015f58:	da05      	bge.n	8015f66 <__kernel_cos+0x1e>
 8015f5a:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8015f5e:	ee16 3a90 	vmov	r3, s13
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d03d      	beq.n	8015fe2 <__kernel_cos+0x9a>
 8015f66:	ee20 4b00 	vmul.f64	d4, d0, d0
 8015f6a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8015f6e:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 8015fe8 <__kernel_cos+0xa0>
 8015f72:	ee21 1b40 	vnmul.f64	d1, d1, d0
 8015f76:	ee24 6b06 	vmul.f64	d6, d4, d6
 8015f7a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8015ff0 <__kernel_cos+0xa8>
 8015f7e:	eea4 5b03 	vfma.f64	d5, d4, d3
 8015f82:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8015ff8 <__kernel_cos+0xb0>
 8015f86:	eea5 3b04 	vfma.f64	d3, d5, d4
 8015f8a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8016000 <__kernel_cos+0xb8>
 8015f8e:	eea3 5b04 	vfma.f64	d5, d3, d4
 8015f92:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8016008 <__kernel_cos+0xc0>
 8015f96:	4b20      	ldr	r3, [pc, #128]	; (8016018 <__kernel_cos+0xd0>)
 8015f98:	eea5 3b04 	vfma.f64	d3, d5, d4
 8015f9c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8016010 <__kernel_cos+0xc8>
 8015fa0:	4299      	cmp	r1, r3
 8015fa2:	eea3 5b04 	vfma.f64	d5, d3, d4
 8015fa6:	ee25 5b04 	vmul.f64	d5, d5, d4
 8015faa:	eea4 1b05 	vfma.f64	d1, d4, d5
 8015fae:	dc04      	bgt.n	8015fba <__kernel_cos+0x72>
 8015fb0:	ee36 6b41 	vsub.f64	d6, d6, d1
 8015fb4:	ee37 0b46 	vsub.f64	d0, d7, d6
 8015fb8:	4770      	bx	lr
 8015fba:	4b18      	ldr	r3, [pc, #96]	; (801601c <__kernel_cos+0xd4>)
 8015fbc:	4299      	cmp	r1, r3
 8015fbe:	dc0d      	bgt.n	8015fdc <__kernel_cos+0x94>
 8015fc0:	2200      	movs	r2, #0
 8015fc2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8015fc6:	ec43 2b15 	vmov	d5, r2, r3
 8015fca:	ee37 0b45 	vsub.f64	d0, d7, d5
 8015fce:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015fd2:	ee36 6b41 	vsub.f64	d6, d6, d1
 8015fd6:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015fda:	4770      	bx	lr
 8015fdc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8015fe0:	e7f3      	b.n	8015fca <__kernel_cos+0x82>
 8015fe2:	eeb0 0b47 	vmov.f64	d0, d7
 8015fe6:	4770      	bx	lr
 8015fe8:	be8838d4 	.word	0xbe8838d4
 8015fec:	bda8fae9 	.word	0xbda8fae9
 8015ff0:	bdb4b1c4 	.word	0xbdb4b1c4
 8015ff4:	3e21ee9e 	.word	0x3e21ee9e
 8015ff8:	809c52ad 	.word	0x809c52ad
 8015ffc:	be927e4f 	.word	0xbe927e4f
 8016000:	19cb1590 	.word	0x19cb1590
 8016004:	3efa01a0 	.word	0x3efa01a0
 8016008:	16c15177 	.word	0x16c15177
 801600c:	bf56c16c 	.word	0xbf56c16c
 8016010:	5555554c 	.word	0x5555554c
 8016014:	3fa55555 	.word	0x3fa55555
 8016018:	3fd33332 	.word	0x3fd33332
 801601c:	3fe90000 	.word	0x3fe90000

08016020 <__kernel_rem_pio2>:
 8016020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016024:	ed2d 8b06 	vpush	{d8-d10}
 8016028:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801602c:	469b      	mov	fp, r3
 801602e:	460e      	mov	r6, r1
 8016030:	4bc7      	ldr	r3, [pc, #796]	; (8016350 <__kernel_rem_pio2+0x330>)
 8016032:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8016034:	9002      	str	r0, [sp, #8]
 8016036:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 801603a:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 801603c:	1ed1      	subs	r1, r2, #3
 801603e:	2318      	movs	r3, #24
 8016040:	f06f 0417 	mvn.w	r4, #23
 8016044:	fb91 f1f3 	sdiv	r1, r1, r3
 8016048:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801604c:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 8016050:	fb01 4404 	mla	r4, r1, r4, r4
 8016054:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8016338 <__kernel_rem_pio2+0x318>
 8016058:	4414      	add	r4, r2
 801605a:	eba1 050a 	sub.w	r5, r1, sl
 801605e:	aa1a      	add	r2, sp, #104	; 0x68
 8016060:	eb09 070a 	add.w	r7, r9, sl
 8016064:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8016068:	4696      	mov	lr, r2
 801606a:	2300      	movs	r3, #0
 801606c:	42bb      	cmp	r3, r7
 801606e:	dd0f      	ble.n	8016090 <__kernel_rem_pio2+0x70>
 8016070:	af6a      	add	r7, sp, #424	; 0x1a8
 8016072:	2200      	movs	r2, #0
 8016074:	454a      	cmp	r2, r9
 8016076:	dc28      	bgt.n	80160ca <__kernel_rem_pio2+0xaa>
 8016078:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 801607c:	eb0b 0302 	add.w	r3, fp, r2
 8016080:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 8016084:	9d02      	ldr	r5, [sp, #8]
 8016086:	ed9f 7bac 	vldr	d7, [pc, #688]	; 8016338 <__kernel_rem_pio2+0x318>
 801608a:	f04f 0c00 	mov.w	ip, #0
 801608e:	e016      	b.n	80160be <__kernel_rem_pio2+0x9e>
 8016090:	42dd      	cmn	r5, r3
 8016092:	d409      	bmi.n	80160a8 <__kernel_rem_pio2+0x88>
 8016094:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016098:	ee07 2a90 	vmov	s15, r2
 801609c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80160a0:	ecae 7b02 	vstmia	lr!, {d7}
 80160a4:	3301      	adds	r3, #1
 80160a6:	e7e1      	b.n	801606c <__kernel_rem_pio2+0x4c>
 80160a8:	eeb0 7b46 	vmov.f64	d7, d6
 80160ac:	e7f8      	b.n	80160a0 <__kernel_rem_pio2+0x80>
 80160ae:	ecb5 5b02 	vldmia	r5!, {d5}
 80160b2:	ed33 6b02 	vldmdb	r3!, {d6}
 80160b6:	f10c 0c01 	add.w	ip, ip, #1
 80160ba:	eea5 7b06 	vfma.f64	d7, d5, d6
 80160be:	45d4      	cmp	ip, sl
 80160c0:	ddf5      	ble.n	80160ae <__kernel_rem_pio2+0x8e>
 80160c2:	eca7 7b02 	vstmia	r7!, {d7}
 80160c6:	3201      	adds	r2, #1
 80160c8:	e7d4      	b.n	8016074 <__kernel_rem_pio2+0x54>
 80160ca:	ab06      	add	r3, sp, #24
 80160cc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80160d0:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 8016340 <__kernel_rem_pio2+0x320>
 80160d4:	ed9f ab9c 	vldr	d10, [pc, #624]	; 8016348 <__kernel_rem_pio2+0x328>
 80160d8:	9304      	str	r3, [sp, #16]
 80160da:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80160de:	9303      	str	r3, [sp, #12]
 80160e0:	464d      	mov	r5, r9
 80160e2:	ab92      	add	r3, sp, #584	; 0x248
 80160e4:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 80160e8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80160ec:	3f01      	subs	r7, #1
 80160ee:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 80160f2:	00ff      	lsls	r7, r7, #3
 80160f4:	ab92      	add	r3, sp, #584	; 0x248
 80160f6:	19da      	adds	r2, r3, r7
 80160f8:	3a98      	subs	r2, #152	; 0x98
 80160fa:	2300      	movs	r3, #0
 80160fc:	1ae9      	subs	r1, r5, r3
 80160fe:	2900      	cmp	r1, #0
 8016100:	dc4e      	bgt.n	80161a0 <__kernel_rem_pio2+0x180>
 8016102:	4620      	mov	r0, r4
 8016104:	f000 ff64 	bl	8016fd0 <scalbn>
 8016108:	eeb0 8b40 	vmov.f64	d8, d0
 801610c:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8016110:	ee28 0b00 	vmul.f64	d0, d8, d0
 8016114:	f000 fed8 	bl	8016ec8 <floor>
 8016118:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801611c:	eea0 8b47 	vfms.f64	d8, d0, d7
 8016120:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8016124:	2c00      	cmp	r4, #0
 8016126:	edcd 7a01 	vstr	s15, [sp, #4]
 801612a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801612e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8016132:	dd4a      	ble.n	80161ca <__kernel_rem_pio2+0x1aa>
 8016134:	1e69      	subs	r1, r5, #1
 8016136:	ab06      	add	r3, sp, #24
 8016138:	f1c4 0018 	rsb	r0, r4, #24
 801613c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8016140:	9a01      	ldr	r2, [sp, #4]
 8016142:	fa4c f300 	asr.w	r3, ip, r0
 8016146:	441a      	add	r2, r3
 8016148:	4083      	lsls	r3, r0
 801614a:	9201      	str	r2, [sp, #4]
 801614c:	ebac 0203 	sub.w	r2, ip, r3
 8016150:	ab06      	add	r3, sp, #24
 8016152:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8016156:	f1c4 0317 	rsb	r3, r4, #23
 801615a:	fa42 f803 	asr.w	r8, r2, r3
 801615e:	f1b8 0f00 	cmp.w	r8, #0
 8016162:	dd43      	ble.n	80161ec <__kernel_rem_pio2+0x1cc>
 8016164:	9b01      	ldr	r3, [sp, #4]
 8016166:	2000      	movs	r0, #0
 8016168:	3301      	adds	r3, #1
 801616a:	9301      	str	r3, [sp, #4]
 801616c:	4601      	mov	r1, r0
 801616e:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 8016172:	4285      	cmp	r5, r0
 8016174:	dc6e      	bgt.n	8016254 <__kernel_rem_pio2+0x234>
 8016176:	2c00      	cmp	r4, #0
 8016178:	dd04      	ble.n	8016184 <__kernel_rem_pio2+0x164>
 801617a:	2c01      	cmp	r4, #1
 801617c:	d07f      	beq.n	801627e <__kernel_rem_pio2+0x25e>
 801617e:	2c02      	cmp	r4, #2
 8016180:	f000 8087 	beq.w	8016292 <__kernel_rem_pio2+0x272>
 8016184:	f1b8 0f02 	cmp.w	r8, #2
 8016188:	d130      	bne.n	80161ec <__kernel_rem_pio2+0x1cc>
 801618a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801618e:	ee30 8b48 	vsub.f64	d8, d0, d8
 8016192:	b359      	cbz	r1, 80161ec <__kernel_rem_pio2+0x1cc>
 8016194:	4620      	mov	r0, r4
 8016196:	f000 ff1b 	bl	8016fd0 <scalbn>
 801619a:	ee38 8b40 	vsub.f64	d8, d8, d0
 801619e:	e025      	b.n	80161ec <__kernel_rem_pio2+0x1cc>
 80161a0:	ee20 7b09 	vmul.f64	d7, d0, d9
 80161a4:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80161a8:	a806      	add	r0, sp, #24
 80161aa:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80161ae:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80161b2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80161b6:	ee10 1a10 	vmov	r1, s0
 80161ba:	ed32 0b02 	vldmdb	r2!, {d0}
 80161be:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80161c2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80161c6:	3301      	adds	r3, #1
 80161c8:	e798      	b.n	80160fc <__kernel_rem_pio2+0xdc>
 80161ca:	d106      	bne.n	80161da <__kernel_rem_pio2+0x1ba>
 80161cc:	1e6b      	subs	r3, r5, #1
 80161ce:	aa06      	add	r2, sp, #24
 80161d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80161d4:	ea4f 58e2 	mov.w	r8, r2, asr #23
 80161d8:	e7c1      	b.n	801615e <__kernel_rem_pio2+0x13e>
 80161da:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80161de:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80161e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161e6:	da32      	bge.n	801624e <__kernel_rem_pio2+0x22e>
 80161e8:	f04f 0800 	mov.w	r8, #0
 80161ec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80161f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161f4:	f040 80b0 	bne.w	8016358 <__kernel_rem_pio2+0x338>
 80161f8:	1e6b      	subs	r3, r5, #1
 80161fa:	4618      	mov	r0, r3
 80161fc:	2200      	movs	r2, #0
 80161fe:	4548      	cmp	r0, r9
 8016200:	da4e      	bge.n	80162a0 <__kernel_rem_pio2+0x280>
 8016202:	2a00      	cmp	r2, #0
 8016204:	f000 8088 	beq.w	8016318 <__kernel_rem_pio2+0x2f8>
 8016208:	aa06      	add	r2, sp, #24
 801620a:	3c18      	subs	r4, #24
 801620c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8016210:	2900      	cmp	r1, #0
 8016212:	f000 808e 	beq.w	8016332 <__kernel_rem_pio2+0x312>
 8016216:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801621a:	4620      	mov	r0, r4
 801621c:	9302      	str	r3, [sp, #8]
 801621e:	f000 fed7 	bl	8016fd0 <scalbn>
 8016222:	9b02      	ldr	r3, [sp, #8]
 8016224:	aa6a      	add	r2, sp, #424	; 0x1a8
 8016226:	00d9      	lsls	r1, r3, #3
 8016228:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8016340 <__kernel_rem_pio2+0x320>
 801622c:	1850      	adds	r0, r2, r1
 801622e:	f100 0508 	add.w	r5, r0, #8
 8016232:	461c      	mov	r4, r3
 8016234:	2c00      	cmp	r4, #0
 8016236:	f280 80bd 	bge.w	80163b4 <__kernel_rem_pio2+0x394>
 801623a:	2500      	movs	r5, #0
 801623c:	1b5c      	subs	r4, r3, r5
 801623e:	2c00      	cmp	r4, #0
 8016240:	f2c0 80dd 	blt.w	80163fe <__kernel_rem_pio2+0x3de>
 8016244:	4f43      	ldr	r7, [pc, #268]	; (8016354 <__kernel_rem_pio2+0x334>)
 8016246:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8016338 <__kernel_rem_pio2+0x318>
 801624a:	2400      	movs	r4, #0
 801624c:	e0cb      	b.n	80163e6 <__kernel_rem_pio2+0x3c6>
 801624e:	f04f 0802 	mov.w	r8, #2
 8016252:	e787      	b.n	8016164 <__kernel_rem_pio2+0x144>
 8016254:	ab06      	add	r3, sp, #24
 8016256:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801625a:	b949      	cbnz	r1, 8016270 <__kernel_rem_pio2+0x250>
 801625c:	b12b      	cbz	r3, 801626a <__kernel_rem_pio2+0x24a>
 801625e:	aa06      	add	r2, sp, #24
 8016260:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8016264:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8016268:	2301      	movs	r3, #1
 801626a:	3001      	adds	r0, #1
 801626c:	4619      	mov	r1, r3
 801626e:	e780      	b.n	8016172 <__kernel_rem_pio2+0x152>
 8016270:	aa06      	add	r2, sp, #24
 8016272:	ebac 0303 	sub.w	r3, ip, r3
 8016276:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801627a:	460b      	mov	r3, r1
 801627c:	e7f5      	b.n	801626a <__kernel_rem_pio2+0x24a>
 801627e:	1e68      	subs	r0, r5, #1
 8016280:	ab06      	add	r3, sp, #24
 8016282:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8016286:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801628a:	aa06      	add	r2, sp, #24
 801628c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8016290:	e778      	b.n	8016184 <__kernel_rem_pio2+0x164>
 8016292:	1e68      	subs	r0, r5, #1
 8016294:	ab06      	add	r3, sp, #24
 8016296:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801629a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801629e:	e7f4      	b.n	801628a <__kernel_rem_pio2+0x26a>
 80162a0:	a906      	add	r1, sp, #24
 80162a2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80162a6:	3801      	subs	r0, #1
 80162a8:	430a      	orrs	r2, r1
 80162aa:	e7a8      	b.n	80161fe <__kernel_rem_pio2+0x1de>
 80162ac:	f10c 0c01 	add.w	ip, ip, #1
 80162b0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80162b4:	2a00      	cmp	r2, #0
 80162b6:	d0f9      	beq.n	80162ac <__kernel_rem_pio2+0x28c>
 80162b8:	eb0b 0305 	add.w	r3, fp, r5
 80162bc:	aa1a      	add	r2, sp, #104	; 0x68
 80162be:	00db      	lsls	r3, r3, #3
 80162c0:	1898      	adds	r0, r3, r2
 80162c2:	3008      	adds	r0, #8
 80162c4:	1c69      	adds	r1, r5, #1
 80162c6:	3708      	adds	r7, #8
 80162c8:	2200      	movs	r2, #0
 80162ca:	4465      	add	r5, ip
 80162cc:	9005      	str	r0, [sp, #20]
 80162ce:	428d      	cmp	r5, r1
 80162d0:	f6ff af07 	blt.w	80160e2 <__kernel_rem_pio2+0xc2>
 80162d4:	a81a      	add	r0, sp, #104	; 0x68
 80162d6:	eb02 0c03 	add.w	ip, r2, r3
 80162da:	4484      	add	ip, r0
 80162dc:	9803      	ldr	r0, [sp, #12]
 80162de:	f8dd e008 	ldr.w	lr, [sp, #8]
 80162e2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80162e6:	9001      	str	r0, [sp, #4]
 80162e8:	ee07 0a90 	vmov	s15, r0
 80162ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80162f0:	9805      	ldr	r0, [sp, #20]
 80162f2:	ed8c 7b00 	vstr	d7, [ip]
 80162f6:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8016338 <__kernel_rem_pio2+0x318>
 80162fa:	eb00 0802 	add.w	r8, r0, r2
 80162fe:	f04f 0c00 	mov.w	ip, #0
 8016302:	45d4      	cmp	ip, sl
 8016304:	dd0c      	ble.n	8016320 <__kernel_rem_pio2+0x300>
 8016306:	eb02 0c07 	add.w	ip, r2, r7
 801630a:	a86a      	add	r0, sp, #424	; 0x1a8
 801630c:	4484      	add	ip, r0
 801630e:	ed8c 7b02 	vstr	d7, [ip, #8]
 8016312:	3101      	adds	r1, #1
 8016314:	3208      	adds	r2, #8
 8016316:	e7da      	b.n	80162ce <__kernel_rem_pio2+0x2ae>
 8016318:	9b04      	ldr	r3, [sp, #16]
 801631a:	f04f 0c01 	mov.w	ip, #1
 801631e:	e7c7      	b.n	80162b0 <__kernel_rem_pio2+0x290>
 8016320:	ecbe 5b02 	vldmia	lr!, {d5}
 8016324:	ed38 6b02 	vldmdb	r8!, {d6}
 8016328:	f10c 0c01 	add.w	ip, ip, #1
 801632c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016330:	e7e7      	b.n	8016302 <__kernel_rem_pio2+0x2e2>
 8016332:	3b01      	subs	r3, #1
 8016334:	e768      	b.n	8016208 <__kernel_rem_pio2+0x1e8>
 8016336:	bf00      	nop
	...
 8016344:	3e700000 	.word	0x3e700000
 8016348:	00000000 	.word	0x00000000
 801634c:	41700000 	.word	0x41700000
 8016350:	0803e900 	.word	0x0803e900
 8016354:	0803e8c0 	.word	0x0803e8c0
 8016358:	4260      	negs	r0, r4
 801635a:	eeb0 0b48 	vmov.f64	d0, d8
 801635e:	f000 fe37 	bl	8016fd0 <scalbn>
 8016362:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8016540 <__kernel_rem_pio2+0x520>
 8016366:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801636a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801636e:	db18      	blt.n	80163a2 <__kernel_rem_pio2+0x382>
 8016370:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8016548 <__kernel_rem_pio2+0x528>
 8016374:	ee20 7b07 	vmul.f64	d7, d0, d7
 8016378:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801637c:	aa06      	add	r2, sp, #24
 801637e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8016382:	eea5 0b46 	vfms.f64	d0, d5, d6
 8016386:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801638a:	a906      	add	r1, sp, #24
 801638c:	ee10 3a10 	vmov	r3, s0
 8016390:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8016394:	1c6b      	adds	r3, r5, #1
 8016396:	ee17 2a10 	vmov	r2, s14
 801639a:	3418      	adds	r4, #24
 801639c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80163a0:	e739      	b.n	8016216 <__kernel_rem_pio2+0x1f6>
 80163a2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80163a6:	aa06      	add	r2, sp, #24
 80163a8:	ee10 3a10 	vmov	r3, s0
 80163ac:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80163b0:	462b      	mov	r3, r5
 80163b2:	e730      	b.n	8016216 <__kernel_rem_pio2+0x1f6>
 80163b4:	aa06      	add	r2, sp, #24
 80163b6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80163ba:	9202      	str	r2, [sp, #8]
 80163bc:	ee07 2a90 	vmov	s15, r2
 80163c0:	3c01      	subs	r4, #1
 80163c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80163c6:	ee27 7b00 	vmul.f64	d7, d7, d0
 80163ca:	ee20 0b06 	vmul.f64	d0, d0, d6
 80163ce:	ed25 7b02 	vstmdb	r5!, {d7}
 80163d2:	e72f      	b.n	8016234 <__kernel_rem_pio2+0x214>
 80163d4:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 80163d8:	ecb7 5b02 	vldmia	r7!, {d5}
 80163dc:	ed9c 6b00 	vldr	d6, [ip]
 80163e0:	3401      	adds	r4, #1
 80163e2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80163e6:	454c      	cmp	r4, r9
 80163e8:	dc01      	bgt.n	80163ee <__kernel_rem_pio2+0x3ce>
 80163ea:	42a5      	cmp	r5, r4
 80163ec:	daf2      	bge.n	80163d4 <__kernel_rem_pio2+0x3b4>
 80163ee:	aa42      	add	r2, sp, #264	; 0x108
 80163f0:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 80163f4:	ed84 7b00 	vstr	d7, [r4]
 80163f8:	3501      	adds	r5, #1
 80163fa:	3808      	subs	r0, #8
 80163fc:	e71e      	b.n	801623c <__kernel_rem_pio2+0x21c>
 80163fe:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8016400:	2a03      	cmp	r2, #3
 8016402:	d84e      	bhi.n	80164a2 <__kernel_rem_pio2+0x482>
 8016404:	e8df f002 	tbb	[pc, r2]
 8016408:	021f1f3e 	.word	0x021f1f3e
 801640c:	3108      	adds	r1, #8
 801640e:	aa42      	add	r2, sp, #264	; 0x108
 8016410:	4411      	add	r1, r2
 8016412:	4608      	mov	r0, r1
 8016414:	461c      	mov	r4, r3
 8016416:	2c00      	cmp	r4, #0
 8016418:	dc61      	bgt.n	80164de <__kernel_rem_pio2+0x4be>
 801641a:	4608      	mov	r0, r1
 801641c:	461c      	mov	r4, r3
 801641e:	2c01      	cmp	r4, #1
 8016420:	dc6d      	bgt.n	80164fe <__kernel_rem_pio2+0x4de>
 8016422:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8016550 <__kernel_rem_pio2+0x530>
 8016426:	2b01      	cmp	r3, #1
 8016428:	dc79      	bgt.n	801651e <__kernel_rem_pio2+0x4fe>
 801642a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801642e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8016432:	f1b8 0f00 	cmp.w	r8, #0
 8016436:	d178      	bne.n	801652a <__kernel_rem_pio2+0x50a>
 8016438:	ed86 5b00 	vstr	d5, [r6]
 801643c:	ed86 6b02 	vstr	d6, [r6, #8]
 8016440:	ed86 7b04 	vstr	d7, [r6, #16]
 8016444:	e02d      	b.n	80164a2 <__kernel_rem_pio2+0x482>
 8016446:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8016550 <__kernel_rem_pio2+0x530>
 801644a:	3108      	adds	r1, #8
 801644c:	aa42      	add	r2, sp, #264	; 0x108
 801644e:	4411      	add	r1, r2
 8016450:	4618      	mov	r0, r3
 8016452:	2800      	cmp	r0, #0
 8016454:	da34      	bge.n	80164c0 <__kernel_rem_pio2+0x4a0>
 8016456:	f1b8 0f00 	cmp.w	r8, #0
 801645a:	d037      	beq.n	80164cc <__kernel_rem_pio2+0x4ac>
 801645c:	eeb1 7b46 	vneg.f64	d7, d6
 8016460:	ed86 7b00 	vstr	d7, [r6]
 8016464:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8016468:	a844      	add	r0, sp, #272	; 0x110
 801646a:	2101      	movs	r1, #1
 801646c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016470:	428b      	cmp	r3, r1
 8016472:	da2e      	bge.n	80164d2 <__kernel_rem_pio2+0x4b2>
 8016474:	f1b8 0f00 	cmp.w	r8, #0
 8016478:	d001      	beq.n	801647e <__kernel_rem_pio2+0x45e>
 801647a:	eeb1 7b47 	vneg.f64	d7, d7
 801647e:	ed86 7b02 	vstr	d7, [r6, #8]
 8016482:	e00e      	b.n	80164a2 <__kernel_rem_pio2+0x482>
 8016484:	aa92      	add	r2, sp, #584	; 0x248
 8016486:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8016550 <__kernel_rem_pio2+0x530>
 801648a:	4411      	add	r1, r2
 801648c:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8016490:	2b00      	cmp	r3, #0
 8016492:	da0f      	bge.n	80164b4 <__kernel_rem_pio2+0x494>
 8016494:	f1b8 0f00 	cmp.w	r8, #0
 8016498:	d001      	beq.n	801649e <__kernel_rem_pio2+0x47e>
 801649a:	eeb1 7b47 	vneg.f64	d7, d7
 801649e:	ed86 7b00 	vstr	d7, [r6]
 80164a2:	9b01      	ldr	r3, [sp, #4]
 80164a4:	f003 0007 	and.w	r0, r3, #7
 80164a8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80164ac:	ecbd 8b06 	vpop	{d8-d10}
 80164b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164b4:	ed31 6b02 	vldmdb	r1!, {d6}
 80164b8:	3b01      	subs	r3, #1
 80164ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 80164be:	e7e7      	b.n	8016490 <__kernel_rem_pio2+0x470>
 80164c0:	ed31 7b02 	vldmdb	r1!, {d7}
 80164c4:	3801      	subs	r0, #1
 80164c6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80164ca:	e7c2      	b.n	8016452 <__kernel_rem_pio2+0x432>
 80164cc:	eeb0 7b46 	vmov.f64	d7, d6
 80164d0:	e7c6      	b.n	8016460 <__kernel_rem_pio2+0x440>
 80164d2:	ecb0 6b02 	vldmia	r0!, {d6}
 80164d6:	3101      	adds	r1, #1
 80164d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80164dc:	e7c8      	b.n	8016470 <__kernel_rem_pio2+0x450>
 80164de:	ed10 7b04 	vldr	d7, [r0, #-16]
 80164e2:	ed30 5b02 	vldmdb	r0!, {d5}
 80164e6:	3c01      	subs	r4, #1
 80164e8:	ee37 6b05 	vadd.f64	d6, d7, d5
 80164ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80164f0:	ed00 6b02 	vstr	d6, [r0, #-8]
 80164f4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80164f8:	ed80 7b00 	vstr	d7, [r0]
 80164fc:	e78b      	b.n	8016416 <__kernel_rem_pio2+0x3f6>
 80164fe:	ed10 7b04 	vldr	d7, [r0, #-16]
 8016502:	ed30 5b02 	vldmdb	r0!, {d5}
 8016506:	3c01      	subs	r4, #1
 8016508:	ee37 6b05 	vadd.f64	d6, d7, d5
 801650c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016510:	ed00 6b02 	vstr	d6, [r0, #-8]
 8016514:	ee37 7b05 	vadd.f64	d7, d7, d5
 8016518:	ed80 7b00 	vstr	d7, [r0]
 801651c:	e77f      	b.n	801641e <__kernel_rem_pio2+0x3fe>
 801651e:	ed31 6b02 	vldmdb	r1!, {d6}
 8016522:	3b01      	subs	r3, #1
 8016524:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016528:	e77d      	b.n	8016426 <__kernel_rem_pio2+0x406>
 801652a:	eeb1 5b45 	vneg.f64	d5, d5
 801652e:	eeb1 6b46 	vneg.f64	d6, d6
 8016532:	ed86 5b00 	vstr	d5, [r6]
 8016536:	eeb1 7b47 	vneg.f64	d7, d7
 801653a:	ed86 6b02 	vstr	d6, [r6, #8]
 801653e:	e77f      	b.n	8016440 <__kernel_rem_pio2+0x420>
 8016540:	00000000 	.word	0x00000000
 8016544:	41700000 	.word	0x41700000
 8016548:	00000000 	.word	0x00000000
 801654c:	3e700000 	.word	0x3e700000
	...

08016558 <__kernel_sin>:
 8016558:	ee10 3a90 	vmov	r3, s1
 801655c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016560:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8016564:	da04      	bge.n	8016570 <__kernel_sin+0x18>
 8016566:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801656a:	ee17 3a90 	vmov	r3, s15
 801656e:	b35b      	cbz	r3, 80165c8 <__kernel_sin+0x70>
 8016570:	ee20 6b00 	vmul.f64	d6, d0, d0
 8016574:	ee20 5b06 	vmul.f64	d5, d0, d6
 8016578:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80165d0 <__kernel_sin+0x78>
 801657c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80165d8 <__kernel_sin+0x80>
 8016580:	eea6 4b07 	vfma.f64	d4, d6, d7
 8016584:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80165e0 <__kernel_sin+0x88>
 8016588:	eea4 7b06 	vfma.f64	d7, d4, d6
 801658c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80165e8 <__kernel_sin+0x90>
 8016590:	eea7 4b06 	vfma.f64	d4, d7, d6
 8016594:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80165f0 <__kernel_sin+0x98>
 8016598:	eea4 7b06 	vfma.f64	d7, d4, d6
 801659c:	b930      	cbnz	r0, 80165ac <__kernel_sin+0x54>
 801659e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80165f8 <__kernel_sin+0xa0>
 80165a2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80165a6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80165aa:	4770      	bx	lr
 80165ac:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80165b0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80165b4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80165b8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80165bc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8016600 <__kernel_sin+0xa8>
 80165c0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80165c4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80165c8:	4770      	bx	lr
 80165ca:	bf00      	nop
 80165cc:	f3af 8000 	nop.w
 80165d0:	5acfd57c 	.word	0x5acfd57c
 80165d4:	3de5d93a 	.word	0x3de5d93a
 80165d8:	8a2b9ceb 	.word	0x8a2b9ceb
 80165dc:	be5ae5e6 	.word	0xbe5ae5e6
 80165e0:	57b1fe7d 	.word	0x57b1fe7d
 80165e4:	3ec71de3 	.word	0x3ec71de3
 80165e8:	19c161d5 	.word	0x19c161d5
 80165ec:	bf2a01a0 	.word	0xbf2a01a0
 80165f0:	1110f8a6 	.word	0x1110f8a6
 80165f4:	3f811111 	.word	0x3f811111
 80165f8:	55555549 	.word	0x55555549
 80165fc:	bfc55555 	.word	0xbfc55555
 8016600:	55555549 	.word	0x55555549
 8016604:	3fc55555 	.word	0x3fc55555

08016608 <__kernel_cosf>:
 8016608:	ee10 3a10 	vmov	r3, s0
 801660c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016610:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016614:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016618:	da05      	bge.n	8016626 <__kernel_cosf+0x1e>
 801661a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801661e:	ee17 2a90 	vmov	r2, s15
 8016622:	2a00      	cmp	r2, #0
 8016624:	d03b      	beq.n	801669e <__kernel_cosf+0x96>
 8016626:	ee20 6a00 	vmul.f32	s12, s0, s0
 801662a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801662e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80166a4 <__kernel_cosf+0x9c>
 8016632:	4a1d      	ldr	r2, [pc, #116]	; (80166a8 <__kernel_cosf+0xa0>)
 8016634:	ee66 7a07 	vmul.f32	s15, s12, s14
 8016638:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80166ac <__kernel_cosf+0xa4>
 801663c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8016640:	4293      	cmp	r3, r2
 8016642:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80166b0 <__kernel_cosf+0xa8>
 8016646:	eee7 5a06 	vfma.f32	s11, s14, s12
 801664a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80166b4 <__kernel_cosf+0xac>
 801664e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8016652:	eddf 5a19 	vldr	s11, [pc, #100]	; 80166b8 <__kernel_cosf+0xb0>
 8016656:	eee7 5a06 	vfma.f32	s11, s14, s12
 801665a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80166bc <__kernel_cosf+0xb4>
 801665e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8016662:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8016666:	ee27 7a06 	vmul.f32	s14, s14, s12
 801666a:	eee6 0a07 	vfma.f32	s1, s12, s14
 801666e:	dc04      	bgt.n	801667a <__kernel_cosf+0x72>
 8016670:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8016674:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8016678:	4770      	bx	lr
 801667a:	4a11      	ldr	r2, [pc, #68]	; (80166c0 <__kernel_cosf+0xb8>)
 801667c:	4293      	cmp	r3, r2
 801667e:	bfda      	itte	le
 8016680:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8016684:	ee07 3a10 	vmovle	s14, r3
 8016688:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 801668c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016690:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8016694:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016698:	ee30 0a67 	vsub.f32	s0, s0, s15
 801669c:	4770      	bx	lr
 801669e:	eeb0 0a66 	vmov.f32	s0, s13
 80166a2:	4770      	bx	lr
 80166a4:	ad47d74e 	.word	0xad47d74e
 80166a8:	3e999999 	.word	0x3e999999
 80166ac:	310f74f6 	.word	0x310f74f6
 80166b0:	b493f27c 	.word	0xb493f27c
 80166b4:	37d00d01 	.word	0x37d00d01
 80166b8:	bab60b61 	.word	0xbab60b61
 80166bc:	3d2aaaab 	.word	0x3d2aaaab
 80166c0:	3f480000 	.word	0x3f480000

080166c4 <__kernel_rem_pio2f>:
 80166c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166c8:	ed2d 8b04 	vpush	{d8-d9}
 80166cc:	b0d7      	sub	sp, #348	; 0x15c
 80166ce:	469b      	mov	fp, r3
 80166d0:	460e      	mov	r6, r1
 80166d2:	4bbe      	ldr	r3, [pc, #760]	; (80169cc <__kernel_rem_pio2f+0x308>)
 80166d4:	9964      	ldr	r1, [sp, #400]	; 0x190
 80166d6:	9002      	str	r0, [sp, #8]
 80166d8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80166dc:	9865      	ldr	r0, [sp, #404]	; 0x194
 80166de:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80169dc <__kernel_rem_pio2f+0x318>
 80166e2:	1ed1      	subs	r1, r2, #3
 80166e4:	2308      	movs	r3, #8
 80166e6:	fb91 f1f3 	sdiv	r1, r1, r3
 80166ea:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80166ee:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 80166f2:	1c4c      	adds	r4, r1, #1
 80166f4:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 80166f8:	eba1 050a 	sub.w	r5, r1, sl
 80166fc:	aa1a      	add	r2, sp, #104	; 0x68
 80166fe:	eb09 070a 	add.w	r7, r9, sl
 8016702:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8016706:	4696      	mov	lr, r2
 8016708:	2300      	movs	r3, #0
 801670a:	42bb      	cmp	r3, r7
 801670c:	dd0f      	ble.n	801672e <__kernel_rem_pio2f+0x6a>
 801670e:	af42      	add	r7, sp, #264	; 0x108
 8016710:	2200      	movs	r2, #0
 8016712:	454a      	cmp	r2, r9
 8016714:	dc27      	bgt.n	8016766 <__kernel_rem_pio2f+0xa2>
 8016716:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 801671a:	eb0b 0302 	add.w	r3, fp, r2
 801671e:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8016722:	9d02      	ldr	r5, [sp, #8]
 8016724:	eddf 7aad 	vldr	s15, [pc, #692]	; 80169dc <__kernel_rem_pio2f+0x318>
 8016728:	f04f 0c00 	mov.w	ip, #0
 801672c:	e015      	b.n	801675a <__kernel_rem_pio2f+0x96>
 801672e:	42dd      	cmn	r5, r3
 8016730:	bf5d      	ittte	pl
 8016732:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8016736:	ee07 2a90 	vmovpl	s15, r2
 801673a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801673e:	eef0 7a47 	vmovmi.f32	s15, s14
 8016742:	ecee 7a01 	vstmia	lr!, {s15}
 8016746:	3301      	adds	r3, #1
 8016748:	e7df      	b.n	801670a <__kernel_rem_pio2f+0x46>
 801674a:	ecf5 6a01 	vldmia	r5!, {s13}
 801674e:	ed33 7a01 	vldmdb	r3!, {s14}
 8016752:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016756:	f10c 0c01 	add.w	ip, ip, #1
 801675a:	45d4      	cmp	ip, sl
 801675c:	ddf5      	ble.n	801674a <__kernel_rem_pio2f+0x86>
 801675e:	ece7 7a01 	vstmia	r7!, {s15}
 8016762:	3201      	adds	r2, #1
 8016764:	e7d5      	b.n	8016712 <__kernel_rem_pio2f+0x4e>
 8016766:	ab06      	add	r3, sp, #24
 8016768:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 801676c:	9304      	str	r3, [sp, #16]
 801676e:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80169d8 <__kernel_rem_pio2f+0x314>
 8016772:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80169d4 <__kernel_rem_pio2f+0x310>
 8016776:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 801677a:	9303      	str	r3, [sp, #12]
 801677c:	464d      	mov	r5, r9
 801677e:	ab56      	add	r3, sp, #344	; 0x158
 8016780:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8016784:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8016788:	3f01      	subs	r7, #1
 801678a:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801678e:	00bf      	lsls	r7, r7, #2
 8016790:	ab56      	add	r3, sp, #344	; 0x158
 8016792:	19da      	adds	r2, r3, r7
 8016794:	3a4c      	subs	r2, #76	; 0x4c
 8016796:	2300      	movs	r3, #0
 8016798:	1ae9      	subs	r1, r5, r3
 801679a:	2900      	cmp	r1, #0
 801679c:	dc4c      	bgt.n	8016838 <__kernel_rem_pio2f+0x174>
 801679e:	4620      	mov	r0, r4
 80167a0:	f000 fdc8 	bl	8017334 <scalbnf>
 80167a4:	eeb0 8a40 	vmov.f32	s16, s0
 80167a8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80167ac:	ee28 0a00 	vmul.f32	s0, s16, s0
 80167b0:	f7fd feca 	bl	8014548 <floorf>
 80167b4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80167b8:	eea0 8a67 	vfms.f32	s16, s0, s15
 80167bc:	2c00      	cmp	r4, #0
 80167be:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80167c2:	edcd 7a01 	vstr	s15, [sp, #4]
 80167c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80167ca:	ee38 8a67 	vsub.f32	s16, s16, s15
 80167ce:	dd48      	ble.n	8016862 <__kernel_rem_pio2f+0x19e>
 80167d0:	1e69      	subs	r1, r5, #1
 80167d2:	ab06      	add	r3, sp, #24
 80167d4:	f1c4 0008 	rsb	r0, r4, #8
 80167d8:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80167dc:	9a01      	ldr	r2, [sp, #4]
 80167de:	fa4c f300 	asr.w	r3, ip, r0
 80167e2:	441a      	add	r2, r3
 80167e4:	4083      	lsls	r3, r0
 80167e6:	9201      	str	r2, [sp, #4]
 80167e8:	ebac 0203 	sub.w	r2, ip, r3
 80167ec:	ab06      	add	r3, sp, #24
 80167ee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80167f2:	f1c4 0307 	rsb	r3, r4, #7
 80167f6:	fa42 f803 	asr.w	r8, r2, r3
 80167fa:	f1b8 0f00 	cmp.w	r8, #0
 80167fe:	dd41      	ble.n	8016884 <__kernel_rem_pio2f+0x1c0>
 8016800:	9b01      	ldr	r3, [sp, #4]
 8016802:	2000      	movs	r0, #0
 8016804:	3301      	adds	r3, #1
 8016806:	9301      	str	r3, [sp, #4]
 8016808:	4601      	mov	r1, r0
 801680a:	4285      	cmp	r5, r0
 801680c:	dc6d      	bgt.n	80168ea <__kernel_rem_pio2f+0x226>
 801680e:	2c00      	cmp	r4, #0
 8016810:	dd04      	ble.n	801681c <__kernel_rem_pio2f+0x158>
 8016812:	2c01      	cmp	r4, #1
 8016814:	d07e      	beq.n	8016914 <__kernel_rem_pio2f+0x250>
 8016816:	2c02      	cmp	r4, #2
 8016818:	f000 8086 	beq.w	8016928 <__kernel_rem_pio2f+0x264>
 801681c:	f1b8 0f02 	cmp.w	r8, #2
 8016820:	d130      	bne.n	8016884 <__kernel_rem_pio2f+0x1c0>
 8016822:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016826:	ee30 8a48 	vsub.f32	s16, s0, s16
 801682a:	b359      	cbz	r1, 8016884 <__kernel_rem_pio2f+0x1c0>
 801682c:	4620      	mov	r0, r4
 801682e:	f000 fd81 	bl	8017334 <scalbnf>
 8016832:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016836:	e025      	b.n	8016884 <__kernel_rem_pio2f+0x1c0>
 8016838:	ee60 7a28 	vmul.f32	s15, s0, s17
 801683c:	a806      	add	r0, sp, #24
 801683e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016846:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801684a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801684e:	ee10 1a10 	vmov	r1, s0
 8016852:	ed32 0a01 	vldmdb	r2!, {s0}
 8016856:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 801685a:	ee37 0a80 	vadd.f32	s0, s15, s0
 801685e:	3301      	adds	r3, #1
 8016860:	e79a      	b.n	8016798 <__kernel_rem_pio2f+0xd4>
 8016862:	d106      	bne.n	8016872 <__kernel_rem_pio2f+0x1ae>
 8016864:	1e6b      	subs	r3, r5, #1
 8016866:	aa06      	add	r2, sp, #24
 8016868:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801686c:	ea4f 2822 	mov.w	r8, r2, asr #8
 8016870:	e7c3      	b.n	80167fa <__kernel_rem_pio2f+0x136>
 8016872:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016876:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801687a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801687e:	da31      	bge.n	80168e4 <__kernel_rem_pio2f+0x220>
 8016880:	f04f 0800 	mov.w	r8, #0
 8016884:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801688c:	f040 80a8 	bne.w	80169e0 <__kernel_rem_pio2f+0x31c>
 8016890:	1e6b      	subs	r3, r5, #1
 8016892:	4618      	mov	r0, r3
 8016894:	2200      	movs	r2, #0
 8016896:	4548      	cmp	r0, r9
 8016898:	da4d      	bge.n	8016936 <__kernel_rem_pio2f+0x272>
 801689a:	2a00      	cmp	r2, #0
 801689c:	f000 8087 	beq.w	80169ae <__kernel_rem_pio2f+0x2ea>
 80168a0:	aa06      	add	r2, sp, #24
 80168a2:	3c08      	subs	r4, #8
 80168a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80168a8:	2900      	cmp	r1, #0
 80168aa:	f000 808d 	beq.w	80169c8 <__kernel_rem_pio2f+0x304>
 80168ae:	4620      	mov	r0, r4
 80168b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80168b4:	9302      	str	r3, [sp, #8]
 80168b6:	f000 fd3d 	bl	8017334 <scalbnf>
 80168ba:	9b02      	ldr	r3, [sp, #8]
 80168bc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80169d8 <__kernel_rem_pio2f+0x314>
 80168c0:	0099      	lsls	r1, r3, #2
 80168c2:	aa42      	add	r2, sp, #264	; 0x108
 80168c4:	1850      	adds	r0, r2, r1
 80168c6:	1d05      	adds	r5, r0, #4
 80168c8:	461c      	mov	r4, r3
 80168ca:	2c00      	cmp	r4, #0
 80168cc:	f280 80b8 	bge.w	8016a40 <__kernel_rem_pio2f+0x37c>
 80168d0:	2500      	movs	r5, #0
 80168d2:	1b5c      	subs	r4, r3, r5
 80168d4:	2c00      	cmp	r4, #0
 80168d6:	f2c0 80d8 	blt.w	8016a8a <__kernel_rem_pio2f+0x3c6>
 80168da:	4f3d      	ldr	r7, [pc, #244]	; (80169d0 <__kernel_rem_pio2f+0x30c>)
 80168dc:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80169dc <__kernel_rem_pio2f+0x318>
 80168e0:	2400      	movs	r4, #0
 80168e2:	e0c6      	b.n	8016a72 <__kernel_rem_pio2f+0x3ae>
 80168e4:	f04f 0802 	mov.w	r8, #2
 80168e8:	e78a      	b.n	8016800 <__kernel_rem_pio2f+0x13c>
 80168ea:	ab06      	add	r3, sp, #24
 80168ec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80168f0:	b949      	cbnz	r1, 8016906 <__kernel_rem_pio2f+0x242>
 80168f2:	b12b      	cbz	r3, 8016900 <__kernel_rem_pio2f+0x23c>
 80168f4:	aa06      	add	r2, sp, #24
 80168f6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80168fa:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80168fe:	2301      	movs	r3, #1
 8016900:	3001      	adds	r0, #1
 8016902:	4619      	mov	r1, r3
 8016904:	e781      	b.n	801680a <__kernel_rem_pio2f+0x146>
 8016906:	aa06      	add	r2, sp, #24
 8016908:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801690c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8016910:	460b      	mov	r3, r1
 8016912:	e7f5      	b.n	8016900 <__kernel_rem_pio2f+0x23c>
 8016914:	1e68      	subs	r0, r5, #1
 8016916:	ab06      	add	r3, sp, #24
 8016918:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801691c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016920:	aa06      	add	r2, sp, #24
 8016922:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8016926:	e779      	b.n	801681c <__kernel_rem_pio2f+0x158>
 8016928:	1e68      	subs	r0, r5, #1
 801692a:	ab06      	add	r3, sp, #24
 801692c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8016930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016934:	e7f4      	b.n	8016920 <__kernel_rem_pio2f+0x25c>
 8016936:	a906      	add	r1, sp, #24
 8016938:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801693c:	3801      	subs	r0, #1
 801693e:	430a      	orrs	r2, r1
 8016940:	e7a9      	b.n	8016896 <__kernel_rem_pio2f+0x1d2>
 8016942:	f10c 0c01 	add.w	ip, ip, #1
 8016946:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801694a:	2a00      	cmp	r2, #0
 801694c:	d0f9      	beq.n	8016942 <__kernel_rem_pio2f+0x27e>
 801694e:	eb0b 0305 	add.w	r3, fp, r5
 8016952:	aa1a      	add	r2, sp, #104	; 0x68
 8016954:	009b      	lsls	r3, r3, #2
 8016956:	1898      	adds	r0, r3, r2
 8016958:	3004      	adds	r0, #4
 801695a:	1c69      	adds	r1, r5, #1
 801695c:	3704      	adds	r7, #4
 801695e:	2200      	movs	r2, #0
 8016960:	4465      	add	r5, ip
 8016962:	9005      	str	r0, [sp, #20]
 8016964:	428d      	cmp	r5, r1
 8016966:	f6ff af0a 	blt.w	801677e <__kernel_rem_pio2f+0xba>
 801696a:	a81a      	add	r0, sp, #104	; 0x68
 801696c:	eb02 0c03 	add.w	ip, r2, r3
 8016970:	4484      	add	ip, r0
 8016972:	9803      	ldr	r0, [sp, #12]
 8016974:	f8dd e008 	ldr.w	lr, [sp, #8]
 8016978:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 801697c:	9001      	str	r0, [sp, #4]
 801697e:	ee07 0a90 	vmov	s15, r0
 8016982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016986:	9805      	ldr	r0, [sp, #20]
 8016988:	edcc 7a00 	vstr	s15, [ip]
 801698c:	eddf 7a13 	vldr	s15, [pc, #76]	; 80169dc <__kernel_rem_pio2f+0x318>
 8016990:	eb00 0802 	add.w	r8, r0, r2
 8016994:	f04f 0c00 	mov.w	ip, #0
 8016998:	45d4      	cmp	ip, sl
 801699a:	dd0c      	ble.n	80169b6 <__kernel_rem_pio2f+0x2f2>
 801699c:	eb02 0c07 	add.w	ip, r2, r7
 80169a0:	a842      	add	r0, sp, #264	; 0x108
 80169a2:	4484      	add	ip, r0
 80169a4:	edcc 7a01 	vstr	s15, [ip, #4]
 80169a8:	3101      	adds	r1, #1
 80169aa:	3204      	adds	r2, #4
 80169ac:	e7da      	b.n	8016964 <__kernel_rem_pio2f+0x2a0>
 80169ae:	9b04      	ldr	r3, [sp, #16]
 80169b0:	f04f 0c01 	mov.w	ip, #1
 80169b4:	e7c7      	b.n	8016946 <__kernel_rem_pio2f+0x282>
 80169b6:	ecfe 6a01 	vldmia	lr!, {s13}
 80169ba:	ed38 7a01 	vldmdb	r8!, {s14}
 80169be:	f10c 0c01 	add.w	ip, ip, #1
 80169c2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80169c6:	e7e7      	b.n	8016998 <__kernel_rem_pio2f+0x2d4>
 80169c8:	3b01      	subs	r3, #1
 80169ca:	e769      	b.n	80168a0 <__kernel_rem_pio2f+0x1dc>
 80169cc:	0803e93c 	.word	0x0803e93c
 80169d0:	0803e910 	.word	0x0803e910
 80169d4:	43800000 	.word	0x43800000
 80169d8:	3b800000 	.word	0x3b800000
 80169dc:	00000000 	.word	0x00000000
 80169e0:	4260      	negs	r0, r4
 80169e2:	eeb0 0a48 	vmov.f32	s0, s16
 80169e6:	f000 fca5 	bl	8017334 <scalbnf>
 80169ea:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80169d4 <__kernel_rem_pio2f+0x310>
 80169ee:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80169f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169f6:	db1a      	blt.n	8016a2e <__kernel_rem_pio2f+0x36a>
 80169f8:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80169d8 <__kernel_rem_pio2f+0x314>
 80169fc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016a00:	aa06      	add	r2, sp, #24
 8016a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016a06:	a906      	add	r1, sp, #24
 8016a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a0c:	3408      	adds	r4, #8
 8016a0e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016a12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016a16:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016a1a:	ee10 3a10 	vmov	r3, s0
 8016a1e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8016a22:	1c6b      	adds	r3, r5, #1
 8016a24:	ee17 2a90 	vmov	r2, s15
 8016a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016a2c:	e73f      	b.n	80168ae <__kernel_rem_pio2f+0x1ea>
 8016a2e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016a32:	aa06      	add	r2, sp, #24
 8016a34:	ee10 3a10 	vmov	r3, s0
 8016a38:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8016a3c:	462b      	mov	r3, r5
 8016a3e:	e736      	b.n	80168ae <__kernel_rem_pio2f+0x1ea>
 8016a40:	aa06      	add	r2, sp, #24
 8016a42:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8016a46:	9202      	str	r2, [sp, #8]
 8016a48:	ee07 2a90 	vmov	s15, r2
 8016a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a50:	3c01      	subs	r4, #1
 8016a52:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016a56:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016a5a:	ed65 7a01 	vstmdb	r5!, {s15}
 8016a5e:	e734      	b.n	80168ca <__kernel_rem_pio2f+0x206>
 8016a60:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8016a64:	ecf7 6a01 	vldmia	r7!, {s13}
 8016a68:	ed9c 7a00 	vldr	s14, [ip]
 8016a6c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016a70:	3401      	adds	r4, #1
 8016a72:	454c      	cmp	r4, r9
 8016a74:	dc01      	bgt.n	8016a7a <__kernel_rem_pio2f+0x3b6>
 8016a76:	42a5      	cmp	r5, r4
 8016a78:	daf2      	bge.n	8016a60 <__kernel_rem_pio2f+0x39c>
 8016a7a:	aa56      	add	r2, sp, #344	; 0x158
 8016a7c:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8016a80:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8016a84:	3501      	adds	r5, #1
 8016a86:	3804      	subs	r0, #4
 8016a88:	e723      	b.n	80168d2 <__kernel_rem_pio2f+0x20e>
 8016a8a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016a8c:	2a03      	cmp	r2, #3
 8016a8e:	d84d      	bhi.n	8016b2c <__kernel_rem_pio2f+0x468>
 8016a90:	e8df f002 	tbb	[pc, r2]
 8016a94:	021f1f3e 	.word	0x021f1f3e
 8016a98:	aa56      	add	r2, sp, #344	; 0x158
 8016a9a:	4411      	add	r1, r2
 8016a9c:	399c      	subs	r1, #156	; 0x9c
 8016a9e:	4608      	mov	r0, r1
 8016aa0:	461c      	mov	r4, r3
 8016aa2:	2c00      	cmp	r4, #0
 8016aa4:	dc5f      	bgt.n	8016b66 <__kernel_rem_pio2f+0x4a2>
 8016aa6:	4608      	mov	r0, r1
 8016aa8:	461c      	mov	r4, r3
 8016aaa:	2c01      	cmp	r4, #1
 8016aac:	dc6b      	bgt.n	8016b86 <__kernel_rem_pio2f+0x4c2>
 8016aae:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80169dc <__kernel_rem_pio2f+0x318>
 8016ab2:	2b01      	cmp	r3, #1
 8016ab4:	dc77      	bgt.n	8016ba6 <__kernel_rem_pio2f+0x4e2>
 8016ab6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8016aba:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8016abe:	f1b8 0f00 	cmp.w	r8, #0
 8016ac2:	d176      	bne.n	8016bb2 <__kernel_rem_pio2f+0x4ee>
 8016ac4:	edc6 6a00 	vstr	s13, [r6]
 8016ac8:	ed86 7a01 	vstr	s14, [r6, #4]
 8016acc:	edc6 7a02 	vstr	s15, [r6, #8]
 8016ad0:	e02c      	b.n	8016b2c <__kernel_rem_pio2f+0x468>
 8016ad2:	aa56      	add	r2, sp, #344	; 0x158
 8016ad4:	4411      	add	r1, r2
 8016ad6:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80169dc <__kernel_rem_pio2f+0x318>
 8016ada:	399c      	subs	r1, #156	; 0x9c
 8016adc:	4618      	mov	r0, r3
 8016ade:	2800      	cmp	r0, #0
 8016ae0:	da32      	bge.n	8016b48 <__kernel_rem_pio2f+0x484>
 8016ae2:	f1b8 0f00 	cmp.w	r8, #0
 8016ae6:	d035      	beq.n	8016b54 <__kernel_rem_pio2f+0x490>
 8016ae8:	eef1 7a47 	vneg.f32	s15, s14
 8016aec:	edc6 7a00 	vstr	s15, [r6]
 8016af0:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8016af4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016af8:	a82f      	add	r0, sp, #188	; 0xbc
 8016afa:	2101      	movs	r1, #1
 8016afc:	428b      	cmp	r3, r1
 8016afe:	da2c      	bge.n	8016b5a <__kernel_rem_pio2f+0x496>
 8016b00:	f1b8 0f00 	cmp.w	r8, #0
 8016b04:	d001      	beq.n	8016b0a <__kernel_rem_pio2f+0x446>
 8016b06:	eef1 7a67 	vneg.f32	s15, s15
 8016b0a:	edc6 7a01 	vstr	s15, [r6, #4]
 8016b0e:	e00d      	b.n	8016b2c <__kernel_rem_pio2f+0x468>
 8016b10:	aa56      	add	r2, sp, #344	; 0x158
 8016b12:	4411      	add	r1, r2
 8016b14:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80169dc <__kernel_rem_pio2f+0x318>
 8016b18:	399c      	subs	r1, #156	; 0x9c
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	da0e      	bge.n	8016b3c <__kernel_rem_pio2f+0x478>
 8016b1e:	f1b8 0f00 	cmp.w	r8, #0
 8016b22:	d001      	beq.n	8016b28 <__kernel_rem_pio2f+0x464>
 8016b24:	eef1 7a67 	vneg.f32	s15, s15
 8016b28:	edc6 7a00 	vstr	s15, [r6]
 8016b2c:	9b01      	ldr	r3, [sp, #4]
 8016b2e:	f003 0007 	and.w	r0, r3, #7
 8016b32:	b057      	add	sp, #348	; 0x15c
 8016b34:	ecbd 8b04 	vpop	{d8-d9}
 8016b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b3c:	ed31 7a01 	vldmdb	r1!, {s14}
 8016b40:	3b01      	subs	r3, #1
 8016b42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016b46:	e7e8      	b.n	8016b1a <__kernel_rem_pio2f+0x456>
 8016b48:	ed71 7a01 	vldmdb	r1!, {s15}
 8016b4c:	3801      	subs	r0, #1
 8016b4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016b52:	e7c4      	b.n	8016ade <__kernel_rem_pio2f+0x41a>
 8016b54:	eef0 7a47 	vmov.f32	s15, s14
 8016b58:	e7c8      	b.n	8016aec <__kernel_rem_pio2f+0x428>
 8016b5a:	ecb0 7a01 	vldmia	r0!, {s14}
 8016b5e:	3101      	adds	r1, #1
 8016b60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016b64:	e7ca      	b.n	8016afc <__kernel_rem_pio2f+0x438>
 8016b66:	ed50 7a02 	vldr	s15, [r0, #-8]
 8016b6a:	ed70 6a01 	vldmdb	r0!, {s13}
 8016b6e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016b72:	3c01      	subs	r4, #1
 8016b74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016b78:	ed00 7a01 	vstr	s14, [r0, #-4]
 8016b7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016b80:	edc0 7a00 	vstr	s15, [r0]
 8016b84:	e78d      	b.n	8016aa2 <__kernel_rem_pio2f+0x3de>
 8016b86:	ed50 7a02 	vldr	s15, [r0, #-8]
 8016b8a:	ed70 6a01 	vldmdb	r0!, {s13}
 8016b8e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016b92:	3c01      	subs	r4, #1
 8016b94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016b98:	ed00 7a01 	vstr	s14, [r0, #-4]
 8016b9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016ba0:	edc0 7a00 	vstr	s15, [r0]
 8016ba4:	e781      	b.n	8016aaa <__kernel_rem_pio2f+0x3e6>
 8016ba6:	ed31 7a01 	vldmdb	r1!, {s14}
 8016baa:	3b01      	subs	r3, #1
 8016bac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016bb0:	e77f      	b.n	8016ab2 <__kernel_rem_pio2f+0x3ee>
 8016bb2:	eef1 6a66 	vneg.f32	s13, s13
 8016bb6:	eeb1 7a47 	vneg.f32	s14, s14
 8016bba:	edc6 6a00 	vstr	s13, [r6]
 8016bbe:	ed86 7a01 	vstr	s14, [r6, #4]
 8016bc2:	eef1 7a67 	vneg.f32	s15, s15
 8016bc6:	e781      	b.n	8016acc <__kernel_rem_pio2f+0x408>

08016bc8 <__kernel_sinf>:
 8016bc8:	ee10 3a10 	vmov	r3, s0
 8016bcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016bd0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016bd4:	da04      	bge.n	8016be0 <__kernel_sinf+0x18>
 8016bd6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016bda:	ee17 3a90 	vmov	r3, s15
 8016bde:	b35b      	cbz	r3, 8016c38 <__kernel_sinf+0x70>
 8016be0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016be4:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016c3c <__kernel_sinf+0x74>
 8016be8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8016c40 <__kernel_sinf+0x78>
 8016bec:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016bf0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8016c44 <__kernel_sinf+0x7c>
 8016bf4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016bf8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8016c48 <__kernel_sinf+0x80>
 8016bfc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016c00:	eddf 7a12 	vldr	s15, [pc, #72]	; 8016c4c <__kernel_sinf+0x84>
 8016c04:	ee60 6a07 	vmul.f32	s13, s0, s14
 8016c08:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016c0c:	b930      	cbnz	r0, 8016c1c <__kernel_sinf+0x54>
 8016c0e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8016c50 <__kernel_sinf+0x88>
 8016c12:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016c16:	eea6 0a26 	vfma.f32	s0, s12, s13
 8016c1a:	4770      	bx	lr
 8016c1c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016c20:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016c24:	eee0 7a86 	vfma.f32	s15, s1, s12
 8016c28:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8016c2c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8016c54 <__kernel_sinf+0x8c>
 8016c30:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8016c34:	ee30 0a60 	vsub.f32	s0, s0, s1
 8016c38:	4770      	bx	lr
 8016c3a:	bf00      	nop
 8016c3c:	2f2ec9d3 	.word	0x2f2ec9d3
 8016c40:	b2d72f34 	.word	0xb2d72f34
 8016c44:	3638ef1b 	.word	0x3638ef1b
 8016c48:	b9500d01 	.word	0xb9500d01
 8016c4c:	3c088889 	.word	0x3c088889
 8016c50:	be2aaaab 	.word	0xbe2aaaab
 8016c54:	3e2aaaab 	.word	0x3e2aaaab

08016c58 <__kernel_tanf>:
 8016c58:	b508      	push	{r3, lr}
 8016c5a:	ee10 3a10 	vmov	r3, s0
 8016c5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016c62:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8016c66:	eef0 7a40 	vmov.f32	s15, s0
 8016c6a:	da17      	bge.n	8016c9c <__kernel_tanf+0x44>
 8016c6c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8016c70:	ee17 1a10 	vmov	r1, s14
 8016c74:	bb41      	cbnz	r1, 8016cc8 <__kernel_tanf+0x70>
 8016c76:	1c43      	adds	r3, r0, #1
 8016c78:	4313      	orrs	r3, r2
 8016c7a:	d108      	bne.n	8016c8e <__kernel_tanf+0x36>
 8016c7c:	f7fd fc5c 	bl	8014538 <fabsf>
 8016c80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016c84:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016c88:	eeb0 0a67 	vmov.f32	s0, s15
 8016c8c:	bd08      	pop	{r3, pc}
 8016c8e:	2801      	cmp	r0, #1
 8016c90:	d0fa      	beq.n	8016c88 <__kernel_tanf+0x30>
 8016c92:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016c96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016c9a:	e7f5      	b.n	8016c88 <__kernel_tanf+0x30>
 8016c9c:	494e      	ldr	r1, [pc, #312]	; (8016dd8 <__kernel_tanf+0x180>)
 8016c9e:	428a      	cmp	r2, r1
 8016ca0:	dd12      	ble.n	8016cc8 <__kernel_tanf+0x70>
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8016ddc <__kernel_tanf+0x184>
 8016ca8:	bfb8      	it	lt
 8016caa:	eef1 7a40 	vneglt.f32	s15, s0
 8016cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016cb2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8016de0 <__kernel_tanf+0x188>
 8016cb6:	bfb8      	it	lt
 8016cb8:	eef1 0a60 	vneglt.f32	s1, s1
 8016cbc:	ee77 0a60 	vsub.f32	s1, s14, s1
 8016cc0:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8016cc4:	eddf 0a47 	vldr	s1, [pc, #284]	; 8016de4 <__kernel_tanf+0x18c>
 8016cc8:	ed9f 6a47 	vldr	s12, [pc, #284]	; 8016de8 <__kernel_tanf+0x190>
 8016ccc:	eddf 5a47 	vldr	s11, [pc, #284]	; 8016dec <__kernel_tanf+0x194>
 8016cd0:	ed9f 5a47 	vldr	s10, [pc, #284]	; 8016df0 <__kernel_tanf+0x198>
 8016cd4:	4940      	ldr	r1, [pc, #256]	; (8016dd8 <__kernel_tanf+0x180>)
 8016cd6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8016cda:	428a      	cmp	r2, r1
 8016cdc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8016ce0:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8016ce4:	eee7 5a06 	vfma.f32	s11, s14, s12
 8016ce8:	ed9f 6a42 	vldr	s12, [pc, #264]	; 8016df4 <__kernel_tanf+0x19c>
 8016cec:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016cf0:	eddf 5a41 	vldr	s11, [pc, #260]	; 8016df8 <__kernel_tanf+0x1a0>
 8016cf4:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016cf8:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8016dfc <__kernel_tanf+0x1a4>
 8016cfc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016d00:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8016e00 <__kernel_tanf+0x1a8>
 8016d04:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016d08:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8016e04 <__kernel_tanf+0x1ac>
 8016d0c:	eea7 6a05 	vfma.f32	s12, s14, s10
 8016d10:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8016e08 <__kernel_tanf+0x1b0>
 8016d14:	eea6 5a07 	vfma.f32	s10, s12, s14
 8016d18:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 8016e0c <__kernel_tanf+0x1b4>
 8016d1c:	eea5 6a07 	vfma.f32	s12, s10, s14
 8016d20:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8016e10 <__kernel_tanf+0x1b8>
 8016d24:	eea6 5a07 	vfma.f32	s10, s12, s14
 8016d28:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8016e14 <__kernel_tanf+0x1bc>
 8016d2c:	eea5 6a07 	vfma.f32	s12, s10, s14
 8016d30:	eeb0 7a46 	vmov.f32	s14, s12
 8016d34:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8016d38:	eeb0 6a60 	vmov.f32	s12, s1
 8016d3c:	eea7 6a24 	vfma.f32	s12, s14, s9
 8016d40:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8016e18 <__kernel_tanf+0x1c0>
 8016d44:	eee6 0a26 	vfma.f32	s1, s12, s13
 8016d48:	eee4 0a87 	vfma.f32	s1, s9, s14
 8016d4c:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8016d50:	dd1d      	ble.n	8016d8e <__kernel_tanf+0x136>
 8016d52:	ee07 0a10 	vmov	s14, r0
 8016d56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016d5a:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8016d5e:	ee76 6a87 	vadd.f32	s13, s13, s14
 8016d62:	179b      	asrs	r3, r3, #30
 8016d64:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8016d68:	f003 0302 	and.w	r3, r3, #2
 8016d6c:	f1c3 0301 	rsb	r3, r3, #1
 8016d70:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016d74:	ee76 0a60 	vsub.f32	s1, s12, s1
 8016d78:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016d7c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8016d80:	ee07 3a90 	vmov	s15, r3
 8016d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016d8c:	e77c      	b.n	8016c88 <__kernel_tanf+0x30>
 8016d8e:	2801      	cmp	r0, #1
 8016d90:	d01f      	beq.n	8016dd2 <__kernel_tanf+0x17a>
 8016d92:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016d96:	eec7 5a26 	vdiv.f32	s11, s14, s13
 8016d9a:	4b20      	ldr	r3, [pc, #128]	; (8016e1c <__kernel_tanf+0x1c4>)
 8016d9c:	ee16 2a90 	vmov	r2, s13
 8016da0:	401a      	ands	r2, r3
 8016da2:	ee06 2a10 	vmov	s12, r2
 8016da6:	ee15 2a90 	vmov	r2, s11
 8016daa:	4013      	ands	r3, r2
 8016dac:	ee07 3a10 	vmov	s14, r3
 8016db0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016db4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016db8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8016dbc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016dc0:	eef0 7a66 	vmov.f32	s15, s13
 8016dc4:	eee7 7a20 	vfma.f32	s15, s14, s1
 8016dc8:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8016dcc:	eef0 7a47 	vmov.f32	s15, s14
 8016dd0:	e75a      	b.n	8016c88 <__kernel_tanf+0x30>
 8016dd2:	eef0 7a66 	vmov.f32	s15, s13
 8016dd6:	e757      	b.n	8016c88 <__kernel_tanf+0x30>
 8016dd8:	3f2ca13f 	.word	0x3f2ca13f
 8016ddc:	3f490fda 	.word	0x3f490fda
 8016de0:	33222168 	.word	0x33222168
 8016de4:	00000000 	.word	0x00000000
 8016de8:	37d95384 	.word	0x37d95384
 8016dec:	3895c07a 	.word	0x3895c07a
 8016df0:	b79bae5f 	.word	0xb79bae5f
 8016df4:	398137b9 	.word	0x398137b9
 8016df8:	3abede48 	.word	0x3abede48
 8016dfc:	3c11371f 	.word	0x3c11371f
 8016e00:	3d5d0dd1 	.word	0x3d5d0dd1
 8016e04:	38a3f445 	.word	0x38a3f445
 8016e08:	3a1a26c8 	.word	0x3a1a26c8
 8016e0c:	3b6b6916 	.word	0x3b6b6916
 8016e10:	3cb327a4 	.word	0x3cb327a4
 8016e14:	3e088889 	.word	0x3e088889
 8016e18:	3eaaaaab 	.word	0x3eaaaaab
 8016e1c:	fffff000 	.word	0xfffff000

08016e20 <with_errnof>:
 8016e20:	b510      	push	{r4, lr}
 8016e22:	ed2d 8b02 	vpush	{d8}
 8016e26:	eeb0 8a40 	vmov.f32	s16, s0
 8016e2a:	4604      	mov	r4, r0
 8016e2c:	f000 fb02 	bl	8017434 <__errno>
 8016e30:	eeb0 0a48 	vmov.f32	s0, s16
 8016e34:	ecbd 8b02 	vpop	{d8}
 8016e38:	6004      	str	r4, [r0, #0]
 8016e3a:	bd10      	pop	{r4, pc}

08016e3c <xflowf>:
 8016e3c:	b130      	cbz	r0, 8016e4c <xflowf+0x10>
 8016e3e:	eef1 7a40 	vneg.f32	s15, s0
 8016e42:	2022      	movs	r0, #34	; 0x22
 8016e44:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016e48:	f7ff bfea 	b.w	8016e20 <with_errnof>
 8016e4c:	eef0 7a40 	vmov.f32	s15, s0
 8016e50:	e7f7      	b.n	8016e42 <xflowf+0x6>
	...

08016e54 <__math_uflowf>:
 8016e54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016e5c <__math_uflowf+0x8>
 8016e58:	f7ff bff0 	b.w	8016e3c <xflowf>
 8016e5c:	10000000 	.word	0x10000000

08016e60 <__math_may_uflowf>:
 8016e60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016e68 <__math_may_uflowf+0x8>
 8016e64:	f7ff bfea 	b.w	8016e3c <xflowf>
 8016e68:	1a200000 	.word	0x1a200000

08016e6c <__math_oflowf>:
 8016e6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016e74 <__math_oflowf+0x8>
 8016e70:	f7ff bfe4 	b.w	8016e3c <xflowf>
 8016e74:	70000000 	.word	0x70000000

08016e78 <__math_divzerof>:
 8016e78:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016e7c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016e80:	2800      	cmp	r0, #0
 8016e82:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8016e86:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8016e94 <__math_divzerof+0x1c>
 8016e8a:	2022      	movs	r0, #34	; 0x22
 8016e8c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8016e90:	f7ff bfc6 	b.w	8016e20 <with_errnof>
 8016e94:	00000000 	.word	0x00000000

08016e98 <__math_invalidf>:
 8016e98:	eef0 7a40 	vmov.f32	s15, s0
 8016e9c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8016ea0:	eef4 7a67 	vcmp.f32	s15, s15
 8016ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ea8:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8016eac:	d602      	bvs.n	8016eb4 <__math_invalidf+0x1c>
 8016eae:	2021      	movs	r0, #33	; 0x21
 8016eb0:	f7ff bfb6 	b.w	8016e20 <with_errnof>
 8016eb4:	4770      	bx	lr

08016eb6 <fabs>:
 8016eb6:	ec51 0b10 	vmov	r0, r1, d0
 8016eba:	ee10 2a10 	vmov	r2, s0
 8016ebe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016ec2:	ec43 2b10 	vmov	d0, r2, r3
 8016ec6:	4770      	bx	lr

08016ec8 <floor>:
 8016ec8:	ee10 1a90 	vmov	r1, s1
 8016ecc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016ed0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8016ed4:	2b13      	cmp	r3, #19
 8016ed6:	b530      	push	{r4, r5, lr}
 8016ed8:	ee10 0a10 	vmov	r0, s0
 8016edc:	ee10 5a10 	vmov	r5, s0
 8016ee0:	dc33      	bgt.n	8016f4a <floor+0x82>
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	da17      	bge.n	8016f16 <floor+0x4e>
 8016ee6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8016fa8 <floor+0xe0>
 8016eea:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016eee:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ef6:	dd09      	ble.n	8016f0c <floor+0x44>
 8016ef8:	2900      	cmp	r1, #0
 8016efa:	da50      	bge.n	8016f9e <floor+0xd6>
 8016efc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016f00:	4a2b      	ldr	r2, [pc, #172]	; (8016fb0 <floor+0xe8>)
 8016f02:	4303      	orrs	r3, r0
 8016f04:	2000      	movs	r0, #0
 8016f06:	4283      	cmp	r3, r0
 8016f08:	bf18      	it	ne
 8016f0a:	4611      	movne	r1, r2
 8016f0c:	460b      	mov	r3, r1
 8016f0e:	4602      	mov	r2, r0
 8016f10:	ec43 2b10 	vmov	d0, r2, r3
 8016f14:	e020      	b.n	8016f58 <floor+0x90>
 8016f16:	4a27      	ldr	r2, [pc, #156]	; (8016fb4 <floor+0xec>)
 8016f18:	411a      	asrs	r2, r3
 8016f1a:	ea01 0402 	and.w	r4, r1, r2
 8016f1e:	4304      	orrs	r4, r0
 8016f20:	d01a      	beq.n	8016f58 <floor+0x90>
 8016f22:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8016fa8 <floor+0xe0>
 8016f26:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016f2a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f32:	ddeb      	ble.n	8016f0c <floor+0x44>
 8016f34:	2900      	cmp	r1, #0
 8016f36:	bfbe      	ittt	lt
 8016f38:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8016f3c:	fa40 f303 	asrlt.w	r3, r0, r3
 8016f40:	18c9      	addlt	r1, r1, r3
 8016f42:	ea21 0102 	bic.w	r1, r1, r2
 8016f46:	2000      	movs	r0, #0
 8016f48:	e7e0      	b.n	8016f0c <floor+0x44>
 8016f4a:	2b33      	cmp	r3, #51	; 0x33
 8016f4c:	dd05      	ble.n	8016f5a <floor+0x92>
 8016f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016f52:	d101      	bne.n	8016f58 <floor+0x90>
 8016f54:	ee30 0b00 	vadd.f64	d0, d0, d0
 8016f58:	bd30      	pop	{r4, r5, pc}
 8016f5a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8016f5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016f62:	40e2      	lsrs	r2, r4
 8016f64:	4202      	tst	r2, r0
 8016f66:	d0f7      	beq.n	8016f58 <floor+0x90>
 8016f68:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8016fa8 <floor+0xe0>
 8016f6c:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016f70:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f78:	ddc8      	ble.n	8016f0c <floor+0x44>
 8016f7a:	2900      	cmp	r1, #0
 8016f7c:	da02      	bge.n	8016f84 <floor+0xbc>
 8016f7e:	2b14      	cmp	r3, #20
 8016f80:	d103      	bne.n	8016f8a <floor+0xc2>
 8016f82:	3101      	adds	r1, #1
 8016f84:	ea20 0002 	bic.w	r0, r0, r2
 8016f88:	e7c0      	b.n	8016f0c <floor+0x44>
 8016f8a:	2401      	movs	r4, #1
 8016f8c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016f90:	fa04 f303 	lsl.w	r3, r4, r3
 8016f94:	4418      	add	r0, r3
 8016f96:	42a8      	cmp	r0, r5
 8016f98:	bf38      	it	cc
 8016f9a:	1909      	addcc	r1, r1, r4
 8016f9c:	e7f2      	b.n	8016f84 <floor+0xbc>
 8016f9e:	2000      	movs	r0, #0
 8016fa0:	4601      	mov	r1, r0
 8016fa2:	e7b3      	b.n	8016f0c <floor+0x44>
 8016fa4:	f3af 8000 	nop.w
 8016fa8:	8800759c 	.word	0x8800759c
 8016fac:	7e37e43c 	.word	0x7e37e43c
 8016fb0:	bff00000 	.word	0xbff00000
 8016fb4:	000fffff 	.word	0x000fffff

08016fb8 <matherr>:
 8016fb8:	2000      	movs	r0, #0
 8016fba:	4770      	bx	lr
 8016fbc:	0000      	movs	r0, r0
	...

08016fc0 <nan>:
 8016fc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016fc8 <nan+0x8>
 8016fc4:	4770      	bx	lr
 8016fc6:	bf00      	nop
 8016fc8:	00000000 	.word	0x00000000
 8016fcc:	7ff80000 	.word	0x7ff80000

08016fd0 <scalbn>:
 8016fd0:	b500      	push	{lr}
 8016fd2:	ed2d 8b02 	vpush	{d8}
 8016fd6:	b083      	sub	sp, #12
 8016fd8:	ed8d 0b00 	vstr	d0, [sp]
 8016fdc:	9b01      	ldr	r3, [sp, #4]
 8016fde:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8016fe2:	b9a2      	cbnz	r2, 801700e <scalbn+0x3e>
 8016fe4:	9a00      	ldr	r2, [sp, #0]
 8016fe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016fea:	4313      	orrs	r3, r2
 8016fec:	d03a      	beq.n	8017064 <scalbn+0x94>
 8016fee:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80170a8 <scalbn+0xd8>
 8016ff2:	4b35      	ldr	r3, [pc, #212]	; (80170c8 <scalbn+0xf8>)
 8016ff4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8016ff8:	4298      	cmp	r0, r3
 8016ffa:	ed8d 7b00 	vstr	d7, [sp]
 8016ffe:	da11      	bge.n	8017024 <scalbn+0x54>
 8017000:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80170b0 <scalbn+0xe0>
 8017004:	ed9d 6b00 	vldr	d6, [sp]
 8017008:	ee27 7b06 	vmul.f64	d7, d7, d6
 801700c:	e007      	b.n	801701e <scalbn+0x4e>
 801700e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8017012:	428a      	cmp	r2, r1
 8017014:	d10a      	bne.n	801702c <scalbn+0x5c>
 8017016:	ed9d 7b00 	vldr	d7, [sp]
 801701a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801701e:	ed8d 7b00 	vstr	d7, [sp]
 8017022:	e01f      	b.n	8017064 <scalbn+0x94>
 8017024:	9b01      	ldr	r3, [sp, #4]
 8017026:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801702a:	3a36      	subs	r2, #54	; 0x36
 801702c:	4402      	add	r2, r0
 801702e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017032:	428a      	cmp	r2, r1
 8017034:	dd0a      	ble.n	801704c <scalbn+0x7c>
 8017036:	ed9f 8b20 	vldr	d8, [pc, #128]	; 80170b8 <scalbn+0xe8>
 801703a:	eeb0 0b48 	vmov.f64	d0, d8
 801703e:	ed9d 1b00 	vldr	d1, [sp]
 8017042:	f000 f9d7 	bl	80173f4 <copysign>
 8017046:	ee20 7b08 	vmul.f64	d7, d0, d8
 801704a:	e7e8      	b.n	801701e <scalbn+0x4e>
 801704c:	2a00      	cmp	r2, #0
 801704e:	dd10      	ble.n	8017072 <scalbn+0xa2>
 8017050:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017054:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017058:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801705c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8017060:	e9cd 0100 	strd	r0, r1, [sp]
 8017064:	ed9d 0b00 	vldr	d0, [sp]
 8017068:	b003      	add	sp, #12
 801706a:	ecbd 8b02 	vpop	{d8}
 801706e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017072:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017076:	da06      	bge.n	8017086 <scalbn+0xb6>
 8017078:	f24c 3350 	movw	r3, #50000	; 0xc350
 801707c:	4298      	cmp	r0, r3
 801707e:	dcda      	bgt.n	8017036 <scalbn+0x66>
 8017080:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 80170b0 <scalbn+0xe0>
 8017084:	e7d9      	b.n	801703a <scalbn+0x6a>
 8017086:	e9dd 0100 	ldrd	r0, r1, [sp]
 801708a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801708e:	3236      	adds	r2, #54	; 0x36
 8017090:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017094:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8017098:	ec41 0b17 	vmov	d7, r0, r1
 801709c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80170c0 <scalbn+0xf0>
 80170a0:	e7b2      	b.n	8017008 <scalbn+0x38>
 80170a2:	bf00      	nop
 80170a4:	f3af 8000 	nop.w
 80170a8:	00000000 	.word	0x00000000
 80170ac:	43500000 	.word	0x43500000
 80170b0:	c2f8f359 	.word	0xc2f8f359
 80170b4:	01a56e1f 	.word	0x01a56e1f
 80170b8:	8800759c 	.word	0x8800759c
 80170bc:	7e37e43c 	.word	0x7e37e43c
 80170c0:	00000000 	.word	0x00000000
 80170c4:	3c900000 	.word	0x3c900000
 80170c8:	ffff3cb0 	.word	0xffff3cb0

080170cc <expm1f>:
 80170cc:	ee10 2a10 	vmov	r2, s0
 80170d0:	4984      	ldr	r1, [pc, #528]	; (80172e4 <expm1f+0x218>)
 80170d2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80170d6:	428b      	cmp	r3, r1
 80170d8:	d923      	bls.n	8017122 <expm1f+0x56>
 80170da:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80170de:	d902      	bls.n	80170e6 <expm1f+0x1a>
 80170e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80170e4:	4770      	bx	lr
 80170e6:	d105      	bne.n	80170f4 <expm1f+0x28>
 80170e8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80170ec:	2a00      	cmp	r2, #0
 80170ee:	fe20 0a27 	vselge.f32	s0, s0, s15
 80170f2:	4770      	bx	lr
 80170f4:	2a00      	cmp	r2, #0
 80170f6:	db08      	blt.n	801710a <expm1f+0x3e>
 80170f8:	4a7b      	ldr	r2, [pc, #492]	; (80172e8 <expm1f+0x21c>)
 80170fa:	4293      	cmp	r3, r2
 80170fc:	f240 80ea 	bls.w	80172d4 <expm1f+0x208>
 8017100:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 80172ec <expm1f+0x220>
 8017104:	ee20 0a00 	vmul.f32	s0, s0, s0
 8017108:	4770      	bx	lr
 801710a:	eddf 7a79 	vldr	s15, [pc, #484]	; 80172f0 <expm1f+0x224>
 801710e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8017112:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801711a:	d554      	bpl.n	80171c6 <expm1f+0xfa>
 801711c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8017120:	4770      	bx	lr
 8017122:	4974      	ldr	r1, [pc, #464]	; (80172f4 <expm1f+0x228>)
 8017124:	428b      	cmp	r3, r1
 8017126:	d96c      	bls.n	8017202 <expm1f+0x136>
 8017128:	4973      	ldr	r1, [pc, #460]	; (80172f8 <expm1f+0x22c>)
 801712a:	428b      	cmp	r3, r1
 801712c:	d84b      	bhi.n	80171c6 <expm1f+0xfa>
 801712e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80172fc <expm1f+0x230>
 8017132:	2a00      	cmp	r2, #0
 8017134:	bfa7      	ittee	ge
 8017136:	ee30 7a47 	vsubge.f32	s14, s0, s14
 801713a:	eddf 7a71 	vldrge	s15, [pc, #452]	; 8017300 <expm1f+0x234>
 801713e:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 8017304 <expm1f+0x238>
 8017142:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8017146:	bfac      	ite	ge
 8017148:	2301      	movge	r3, #1
 801714a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801714e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8017152:	ee37 7a40 	vsub.f32	s14, s14, s0
 8017156:	ee77 7a67 	vsub.f32	s15, s14, s15
 801715a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801715e:	ee20 5a25 	vmul.f32	s10, s0, s11
 8017162:	eddf 6a69 	vldr	s13, [pc, #420]	; 8017308 <expm1f+0x23c>
 8017166:	ed9f 6a69 	vldr	s12, [pc, #420]	; 801730c <expm1f+0x240>
 801716a:	ee20 7a05 	vmul.f32	s14, s0, s10
 801716e:	eea7 6a26 	vfma.f32	s12, s14, s13
 8017172:	eddf 6a67 	vldr	s13, [pc, #412]	; 8017310 <expm1f+0x244>
 8017176:	eee6 6a07 	vfma.f32	s13, s12, s14
 801717a:	ed9f 6a66 	vldr	s12, [pc, #408]	; 8017314 <expm1f+0x248>
 801717e:	eea6 6a87 	vfma.f32	s12, s13, s14
 8017182:	eddf 6a65 	vldr	s13, [pc, #404]	; 8017318 <expm1f+0x24c>
 8017186:	eee6 6a07 	vfma.f32	s13, s12, s14
 801718a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801718e:	eef0 4a46 	vmov.f32	s9, s12
 8017192:	eee6 4a87 	vfma.f32	s9, s13, s14
 8017196:	eef0 6a64 	vmov.f32	s13, s9
 801719a:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801719e:	eee5 4a66 	vfms.f32	s9, s10, s13
 80171a2:	ee36 5ae4 	vsub.f32	s10, s13, s9
 80171a6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80171aa:	eee0 6a64 	vfms.f32	s13, s0, s9
 80171ae:	eef0 4a66 	vmov.f32	s9, s13
 80171b2:	eec5 6a24 	vdiv.f32	s13, s10, s9
 80171b6:	ee66 6a87 	vmul.f32	s13, s13, s14
 80171ba:	bb83      	cbnz	r3, 801721e <expm1f+0x152>
 80171bc:	eef0 7a47 	vmov.f32	s15, s14
 80171c0:	eed0 7a26 	vfnms.f32	s15, s0, s13
 80171c4:	e026      	b.n	8017214 <expm1f+0x148>
 80171c6:	eddf 7a55 	vldr	s15, [pc, #340]	; 801731c <expm1f+0x250>
 80171ca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80171ce:	ee20 7a27 	vmul.f32	s14, s0, s15
 80171d2:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80171d6:	2a00      	cmp	r2, #0
 80171d8:	fe66 7aa7 	vselge.f32	s15, s13, s15
 80171dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80171e0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80172fc <expm1f+0x230>
 80171e4:	eddf 6a46 	vldr	s13, [pc, #280]	; 8017300 <expm1f+0x234>
 80171e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80171ec:	ee17 3a90 	vmov	r3, s15
 80171f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171f4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80171f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80171fc:	eeb0 7a40 	vmov.f32	s14, s0
 8017200:	e7a5      	b.n	801714e <expm1f+0x82>
 8017202:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8017206:	d208      	bcs.n	801721a <expm1f+0x14e>
 8017208:	eddf 7a38 	vldr	s15, [pc, #224]	; 80172ec <expm1f+0x220>
 801720c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8017210:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8017214:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017218:	4770      	bx	lr
 801721a:	2300      	movs	r3, #0
 801721c:	e79d      	b.n	801715a <expm1f+0x8e>
 801721e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8017222:	1c5a      	adds	r2, r3, #1
 8017224:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8017228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801722c:	d106      	bne.n	801723c <expm1f+0x170>
 801722e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017232:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017236:	eea7 0aa5 	vfma.f32	s0, s15, s11
 801723a:	4770      	bx	lr
 801723c:	2b01      	cmp	r3, #1
 801723e:	d118      	bne.n	8017272 <expm1f+0x1a6>
 8017240:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8017244:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8017248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801724c:	bf41      	itttt	mi
 801724e:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8017252:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 8017256:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 801725a:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 801725e:	bf5f      	itttt	pl
 8017260:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 8017264:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 8017268:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 801726c:	eeb0 0a46 	vmovpl.f32	s0, s12
 8017270:	4770      	bx	lr
 8017272:	1c5a      	adds	r2, r3, #1
 8017274:	2a39      	cmp	r2, #57	; 0x39
 8017276:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 801727a:	d90b      	bls.n	8017294 <expm1f+0x1c8>
 801727c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017280:	ee36 0a40 	vsub.f32	s0, s12, s0
 8017284:	ee10 3a10 	vmov	r3, s0
 8017288:	440b      	add	r3, r1
 801728a:	ee00 3a10 	vmov	s0, r3
 801728e:	ee30 0a46 	vsub.f32	s0, s0, s12
 8017292:	4770      	bx	lr
 8017294:	2b16      	cmp	r3, #22
 8017296:	dc11      	bgt.n	80172bc <expm1f+0x1f0>
 8017298:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801729c:	fa42 f303 	asr.w	r3, r2, r3
 80172a0:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 80172a4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80172a8:	ee07 3a90 	vmov	s15, r3
 80172ac:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80172b0:	ee10 3a10 	vmov	r3, s0
 80172b4:	440b      	add	r3, r1
 80172b6:	ee00 3a10 	vmov	s0, r3
 80172ba:	4770      	bx	lr
 80172bc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80172c0:	05db      	lsls	r3, r3, #23
 80172c2:	ee07 3a10 	vmov	s14, r3
 80172c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80172ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 80172ce:	ee30 0a06 	vadd.f32	s0, s0, s12
 80172d2:	e7ed      	b.n	80172b0 <expm1f+0x1e4>
 80172d4:	eddf 7a11 	vldr	s15, [pc, #68]	; 801731c <expm1f+0x250>
 80172d8:	ee20 7a27 	vmul.f32	s14, s0, s15
 80172dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80172e0:	e77c      	b.n	80171dc <expm1f+0x110>
 80172e2:	bf00      	nop
 80172e4:	4195b843 	.word	0x4195b843
 80172e8:	42b17217 	.word	0x42b17217
 80172ec:	7149f2ca 	.word	0x7149f2ca
 80172f0:	0da24260 	.word	0x0da24260
 80172f4:	3eb17218 	.word	0x3eb17218
 80172f8:	3f851591 	.word	0x3f851591
 80172fc:	3f317180 	.word	0x3f317180
 8017300:	3717f7d1 	.word	0x3717f7d1
 8017304:	b717f7d1 	.word	0xb717f7d1
 8017308:	b457edbb 	.word	0xb457edbb
 801730c:	36867e54 	.word	0x36867e54
 8017310:	b8a670cd 	.word	0xb8a670cd
 8017314:	3ad00d01 	.word	0x3ad00d01
 8017318:	bd088889 	.word	0xbd088889
 801731c:	3fb8aa3b 	.word	0x3fb8aa3b

08017320 <finitef>:
 8017320:	ee10 3a10 	vmov	r3, s0
 8017324:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8017328:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801732c:	bfac      	ite	ge
 801732e:	2000      	movge	r0, #0
 8017330:	2001      	movlt	r0, #1
 8017332:	4770      	bx	lr

08017334 <scalbnf>:
 8017334:	b508      	push	{r3, lr}
 8017336:	ee10 2a10 	vmov	r2, s0
 801733a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801733e:	ed2d 8b02 	vpush	{d8}
 8017342:	eef0 0a40 	vmov.f32	s1, s0
 8017346:	d004      	beq.n	8017352 <scalbnf+0x1e>
 8017348:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801734c:	d306      	bcc.n	801735c <scalbnf+0x28>
 801734e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8017352:	ecbd 8b02 	vpop	{d8}
 8017356:	eeb0 0a60 	vmov.f32	s0, s1
 801735a:	bd08      	pop	{r3, pc}
 801735c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017360:	d21c      	bcs.n	801739c <scalbnf+0x68>
 8017362:	4b1f      	ldr	r3, [pc, #124]	; (80173e0 <scalbnf+0xac>)
 8017364:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80173e4 <scalbnf+0xb0>
 8017368:	4298      	cmp	r0, r3
 801736a:	ee60 0a27 	vmul.f32	s1, s0, s15
 801736e:	db10      	blt.n	8017392 <scalbnf+0x5e>
 8017370:	ee10 2a90 	vmov	r2, s1
 8017374:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8017378:	3b19      	subs	r3, #25
 801737a:	4403      	add	r3, r0
 801737c:	2bfe      	cmp	r3, #254	; 0xfe
 801737e:	dd0f      	ble.n	80173a0 <scalbnf+0x6c>
 8017380:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80173e8 <scalbnf+0xb4>
 8017384:	eeb0 0a48 	vmov.f32	s0, s16
 8017388:	f000 f843 	bl	8017412 <copysignf>
 801738c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8017390:	e7df      	b.n	8017352 <scalbnf+0x1e>
 8017392:	eddf 7a16 	vldr	s15, [pc, #88]	; 80173ec <scalbnf+0xb8>
 8017396:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801739a:	e7da      	b.n	8017352 <scalbnf+0x1e>
 801739c:	0ddb      	lsrs	r3, r3, #23
 801739e:	e7ec      	b.n	801737a <scalbnf+0x46>
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	dd06      	ble.n	80173b2 <scalbnf+0x7e>
 80173a4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80173a8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80173ac:	ee00 3a90 	vmov	s1, r3
 80173b0:	e7cf      	b.n	8017352 <scalbnf+0x1e>
 80173b2:	f113 0f16 	cmn.w	r3, #22
 80173b6:	da06      	bge.n	80173c6 <scalbnf+0x92>
 80173b8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80173bc:	4298      	cmp	r0, r3
 80173be:	dcdf      	bgt.n	8017380 <scalbnf+0x4c>
 80173c0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80173ec <scalbnf+0xb8>
 80173c4:	e7de      	b.n	8017384 <scalbnf+0x50>
 80173c6:	3319      	adds	r3, #25
 80173c8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80173cc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80173d0:	eddf 7a07 	vldr	s15, [pc, #28]	; 80173f0 <scalbnf+0xbc>
 80173d4:	ee07 3a10 	vmov	s14, r3
 80173d8:	ee67 0a27 	vmul.f32	s1, s14, s15
 80173dc:	e7b9      	b.n	8017352 <scalbnf+0x1e>
 80173de:	bf00      	nop
 80173e0:	ffff3cb0 	.word	0xffff3cb0
 80173e4:	4c000000 	.word	0x4c000000
 80173e8:	7149f2ca 	.word	0x7149f2ca
 80173ec:	0da24260 	.word	0x0da24260
 80173f0:	33000000 	.word	0x33000000

080173f4 <copysign>:
 80173f4:	ec51 0b10 	vmov	r0, r1, d0
 80173f8:	ee11 0a90 	vmov	r0, s3
 80173fc:	ee10 2a10 	vmov	r2, s0
 8017400:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8017404:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8017408:	ea41 0300 	orr.w	r3, r1, r0
 801740c:	ec43 2b10 	vmov	d0, r2, r3
 8017410:	4770      	bx	lr

08017412 <copysignf>:
 8017412:	ee10 3a10 	vmov	r3, s0
 8017416:	ee10 2a90 	vmov	r2, s1
 801741a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801741e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8017422:	4313      	orrs	r3, r2
 8017424:	ee00 3a10 	vmov	s0, r3
 8017428:	4770      	bx	lr

0801742a <__aeabi_memclr>:
 801742a:	2200      	movs	r2, #0
 801742c:	f7ef baec 	b.w	8006a08 <__aeabi_memset>

08017430 <__aeabi_memcpy>:
 8017430:	f000 b839 	b.w	80174a6 <memcpy>

08017434 <__errno>:
 8017434:	4b01      	ldr	r3, [pc, #4]	; (801743c <__errno+0x8>)
 8017436:	6818      	ldr	r0, [r3, #0]
 8017438:	4770      	bx	lr
 801743a:	bf00      	nop
 801743c:	20000ad8 	.word	0x20000ad8

08017440 <__libc_init_array>:
 8017440:	b570      	push	{r4, r5, r6, lr}
 8017442:	4e0d      	ldr	r6, [pc, #52]	; (8017478 <__libc_init_array+0x38>)
 8017444:	4c0d      	ldr	r4, [pc, #52]	; (801747c <__libc_init_array+0x3c>)
 8017446:	1ba4      	subs	r4, r4, r6
 8017448:	10a4      	asrs	r4, r4, #2
 801744a:	2500      	movs	r5, #0
 801744c:	42a5      	cmp	r5, r4
 801744e:	d109      	bne.n	8017464 <__libc_init_array+0x24>
 8017450:	4e0b      	ldr	r6, [pc, #44]	; (8017480 <__libc_init_array+0x40>)
 8017452:	4c0c      	ldr	r4, [pc, #48]	; (8017484 <__libc_init_array+0x44>)
 8017454:	f001 ffde 	bl	8019414 <_init>
 8017458:	1ba4      	subs	r4, r4, r6
 801745a:	10a4      	asrs	r4, r4, #2
 801745c:	2500      	movs	r5, #0
 801745e:	42a5      	cmp	r5, r4
 8017460:	d105      	bne.n	801746e <__libc_init_array+0x2e>
 8017462:	bd70      	pop	{r4, r5, r6, pc}
 8017464:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017468:	4798      	blx	r3
 801746a:	3501      	adds	r5, #1
 801746c:	e7ee      	b.n	801744c <__libc_init_array+0xc>
 801746e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017472:	4798      	blx	r3
 8017474:	3501      	adds	r5, #1
 8017476:	e7f2      	b.n	801745e <__libc_init_array+0x1e>
 8017478:	0803eba8 	.word	0x0803eba8
 801747c:	0803eba8 	.word	0x0803eba8
 8017480:	0803eba8 	.word	0x0803eba8
 8017484:	0803ebac 	.word	0x0803ebac

08017488 <memcmp>:
 8017488:	b530      	push	{r4, r5, lr}
 801748a:	2400      	movs	r4, #0
 801748c:	42a2      	cmp	r2, r4
 801748e:	d101      	bne.n	8017494 <memcmp+0xc>
 8017490:	2000      	movs	r0, #0
 8017492:	e007      	b.n	80174a4 <memcmp+0x1c>
 8017494:	5d03      	ldrb	r3, [r0, r4]
 8017496:	3401      	adds	r4, #1
 8017498:	190d      	adds	r5, r1, r4
 801749a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801749e:	42ab      	cmp	r3, r5
 80174a0:	d0f4      	beq.n	801748c <memcmp+0x4>
 80174a2:	1b58      	subs	r0, r3, r5
 80174a4:	bd30      	pop	{r4, r5, pc}

080174a6 <memcpy>:
 80174a6:	b510      	push	{r4, lr}
 80174a8:	1e43      	subs	r3, r0, #1
 80174aa:	440a      	add	r2, r1
 80174ac:	4291      	cmp	r1, r2
 80174ae:	d100      	bne.n	80174b2 <memcpy+0xc>
 80174b0:	bd10      	pop	{r4, pc}
 80174b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80174b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80174ba:	e7f7      	b.n	80174ac <memcpy+0x6>

080174bc <memset>:
 80174bc:	4402      	add	r2, r0
 80174be:	4603      	mov	r3, r0
 80174c0:	4293      	cmp	r3, r2
 80174c2:	d100      	bne.n	80174c6 <memset+0xa>
 80174c4:	4770      	bx	lr
 80174c6:	f803 1b01 	strb.w	r1, [r3], #1
 80174ca:	e7f9      	b.n	80174c0 <memset+0x4>

080174cc <__cvt>:
 80174cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174ce:	ed2d 8b02 	vpush	{d8}
 80174d2:	eeb0 8b40 	vmov.f64	d8, d0
 80174d6:	b085      	sub	sp, #20
 80174d8:	4617      	mov	r7, r2
 80174da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80174dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80174de:	ee18 2a90 	vmov	r2, s17
 80174e2:	f025 0520 	bic.w	r5, r5, #32
 80174e6:	2a00      	cmp	r2, #0
 80174e8:	bfb6      	itet	lt
 80174ea:	222d      	movlt	r2, #45	; 0x2d
 80174ec:	2200      	movge	r2, #0
 80174ee:	eeb1 8b40 	vneglt.f64	d8, d0
 80174f2:	2d46      	cmp	r5, #70	; 0x46
 80174f4:	460c      	mov	r4, r1
 80174f6:	701a      	strb	r2, [r3, #0]
 80174f8:	d004      	beq.n	8017504 <__cvt+0x38>
 80174fa:	2d45      	cmp	r5, #69	; 0x45
 80174fc:	d100      	bne.n	8017500 <__cvt+0x34>
 80174fe:	3401      	adds	r4, #1
 8017500:	2102      	movs	r1, #2
 8017502:	e000      	b.n	8017506 <__cvt+0x3a>
 8017504:	2103      	movs	r1, #3
 8017506:	ab03      	add	r3, sp, #12
 8017508:	9301      	str	r3, [sp, #4]
 801750a:	ab02      	add	r3, sp, #8
 801750c:	9300      	str	r3, [sp, #0]
 801750e:	4622      	mov	r2, r4
 8017510:	4633      	mov	r3, r6
 8017512:	eeb0 0b48 	vmov.f64	d0, d8
 8017516:	f000 fcbf 	bl	8017e98 <_dtoa_r>
 801751a:	2d47      	cmp	r5, #71	; 0x47
 801751c:	d101      	bne.n	8017522 <__cvt+0x56>
 801751e:	07fb      	lsls	r3, r7, #31
 8017520:	d51e      	bpl.n	8017560 <__cvt+0x94>
 8017522:	2d46      	cmp	r5, #70	; 0x46
 8017524:	eb00 0304 	add.w	r3, r0, r4
 8017528:	d10c      	bne.n	8017544 <__cvt+0x78>
 801752a:	7802      	ldrb	r2, [r0, #0]
 801752c:	2a30      	cmp	r2, #48	; 0x30
 801752e:	d107      	bne.n	8017540 <__cvt+0x74>
 8017530:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017538:	bf1c      	itt	ne
 801753a:	f1c4 0401 	rsbne	r4, r4, #1
 801753e:	6034      	strne	r4, [r6, #0]
 8017540:	6832      	ldr	r2, [r6, #0]
 8017542:	4413      	add	r3, r2
 8017544:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801754c:	d007      	beq.n	801755e <__cvt+0x92>
 801754e:	2130      	movs	r1, #48	; 0x30
 8017550:	9a03      	ldr	r2, [sp, #12]
 8017552:	429a      	cmp	r2, r3
 8017554:	d204      	bcs.n	8017560 <__cvt+0x94>
 8017556:	1c54      	adds	r4, r2, #1
 8017558:	9403      	str	r4, [sp, #12]
 801755a:	7011      	strb	r1, [r2, #0]
 801755c:	e7f8      	b.n	8017550 <__cvt+0x84>
 801755e:	9303      	str	r3, [sp, #12]
 8017560:	9b03      	ldr	r3, [sp, #12]
 8017562:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017564:	1a1b      	subs	r3, r3, r0
 8017566:	6013      	str	r3, [r2, #0]
 8017568:	b005      	add	sp, #20
 801756a:	ecbd 8b02 	vpop	{d8}
 801756e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017570 <__exponent>:
 8017570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017572:	2900      	cmp	r1, #0
 8017574:	4604      	mov	r4, r0
 8017576:	bfba      	itte	lt
 8017578:	4249      	neglt	r1, r1
 801757a:	232d      	movlt	r3, #45	; 0x2d
 801757c:	232b      	movge	r3, #43	; 0x2b
 801757e:	2909      	cmp	r1, #9
 8017580:	f804 2b02 	strb.w	r2, [r4], #2
 8017584:	7043      	strb	r3, [r0, #1]
 8017586:	dd20      	ble.n	80175ca <__exponent+0x5a>
 8017588:	f10d 0307 	add.w	r3, sp, #7
 801758c:	461f      	mov	r7, r3
 801758e:	260a      	movs	r6, #10
 8017590:	fb91 f5f6 	sdiv	r5, r1, r6
 8017594:	fb06 1115 	mls	r1, r6, r5, r1
 8017598:	3130      	adds	r1, #48	; 0x30
 801759a:	2d09      	cmp	r5, #9
 801759c:	f803 1c01 	strb.w	r1, [r3, #-1]
 80175a0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80175a4:	4629      	mov	r1, r5
 80175a6:	dc09      	bgt.n	80175bc <__exponent+0x4c>
 80175a8:	3130      	adds	r1, #48	; 0x30
 80175aa:	3b02      	subs	r3, #2
 80175ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 80175b0:	42bb      	cmp	r3, r7
 80175b2:	4622      	mov	r2, r4
 80175b4:	d304      	bcc.n	80175c0 <__exponent+0x50>
 80175b6:	1a10      	subs	r0, r2, r0
 80175b8:	b003      	add	sp, #12
 80175ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175bc:	4613      	mov	r3, r2
 80175be:	e7e7      	b.n	8017590 <__exponent+0x20>
 80175c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80175c4:	f804 2b01 	strb.w	r2, [r4], #1
 80175c8:	e7f2      	b.n	80175b0 <__exponent+0x40>
 80175ca:	2330      	movs	r3, #48	; 0x30
 80175cc:	4419      	add	r1, r3
 80175ce:	7083      	strb	r3, [r0, #2]
 80175d0:	1d02      	adds	r2, r0, #4
 80175d2:	70c1      	strb	r1, [r0, #3]
 80175d4:	e7ef      	b.n	80175b6 <__exponent+0x46>
	...

080175d8 <_printf_float>:
 80175d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175dc:	b08d      	sub	sp, #52	; 0x34
 80175de:	460c      	mov	r4, r1
 80175e0:	4616      	mov	r6, r2
 80175e2:	461f      	mov	r7, r3
 80175e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80175e8:	4605      	mov	r5, r0
 80175ea:	f001 f9a1 	bl	8018930 <_localeconv_r>
 80175ee:	f8d0 b000 	ldr.w	fp, [r0]
 80175f2:	4658      	mov	r0, fp
 80175f4:	f7ef fa55 	bl	8006aa2 <strlen>
 80175f8:	2300      	movs	r3, #0
 80175fa:	930a      	str	r3, [sp, #40]	; 0x28
 80175fc:	f8d8 3000 	ldr.w	r3, [r8]
 8017600:	9005      	str	r0, [sp, #20]
 8017602:	3307      	adds	r3, #7
 8017604:	f023 0307 	bic.w	r3, r3, #7
 8017608:	f103 0108 	add.w	r1, r3, #8
 801760c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8017610:	6822      	ldr	r2, [r4, #0]
 8017612:	f8c8 1000 	str.w	r1, [r8]
 8017616:	e9d3 0100 	ldrd	r0, r1, [r3]
 801761a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801761e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 80178a8 <_printf_float+0x2d0>
 8017622:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8017626:	eeb0 6bc0 	vabs.f64	d6, d0
 801762a:	eeb4 6b47 	vcmp.f64	d6, d7
 801762e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017632:	dd24      	ble.n	801767e <_printf_float+0xa6>
 8017634:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8017638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801763c:	d502      	bpl.n	8017644 <_printf_float+0x6c>
 801763e:	232d      	movs	r3, #45	; 0x2d
 8017640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017644:	499a      	ldr	r1, [pc, #616]	; (80178b0 <_printf_float+0x2d8>)
 8017646:	4b9b      	ldr	r3, [pc, #620]	; (80178b4 <_printf_float+0x2dc>)
 8017648:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801764c:	bf8c      	ite	hi
 801764e:	4688      	movhi	r8, r1
 8017650:	4698      	movls	r8, r3
 8017652:	f022 0204 	bic.w	r2, r2, #4
 8017656:	2303      	movs	r3, #3
 8017658:	6123      	str	r3, [r4, #16]
 801765a:	6022      	str	r2, [r4, #0]
 801765c:	f04f 0a00 	mov.w	sl, #0
 8017660:	9700      	str	r7, [sp, #0]
 8017662:	4633      	mov	r3, r6
 8017664:	aa0b      	add	r2, sp, #44	; 0x2c
 8017666:	4621      	mov	r1, r4
 8017668:	4628      	mov	r0, r5
 801766a:	f000 f9e1 	bl	8017a30 <_printf_common>
 801766e:	3001      	adds	r0, #1
 8017670:	f040 8089 	bne.w	8017786 <_printf_float+0x1ae>
 8017674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017678:	b00d      	add	sp, #52	; 0x34
 801767a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801767e:	eeb4 0b40 	vcmp.f64	d0, d0
 8017682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017686:	d702      	bvc.n	801768e <_printf_float+0xb6>
 8017688:	498b      	ldr	r1, [pc, #556]	; (80178b8 <_printf_float+0x2e0>)
 801768a:	4b8c      	ldr	r3, [pc, #560]	; (80178bc <_printf_float+0x2e4>)
 801768c:	e7dc      	b.n	8017648 <_printf_float+0x70>
 801768e:	6861      	ldr	r1, [r4, #4]
 8017690:	1c4b      	adds	r3, r1, #1
 8017692:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017696:	ab0a      	add	r3, sp, #40	; 0x28
 8017698:	a809      	add	r0, sp, #36	; 0x24
 801769a:	d13b      	bne.n	8017714 <_printf_float+0x13c>
 801769c:	2106      	movs	r1, #6
 801769e:	6061      	str	r1, [r4, #4]
 80176a0:	f04f 0c00 	mov.w	ip, #0
 80176a4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80176a8:	e9cd 0900 	strd	r0, r9, [sp]
 80176ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80176b0:	6022      	str	r2, [r4, #0]
 80176b2:	6861      	ldr	r1, [r4, #4]
 80176b4:	4628      	mov	r0, r5
 80176b6:	f7ff ff09 	bl	80174cc <__cvt>
 80176ba:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80176be:	2b47      	cmp	r3, #71	; 0x47
 80176c0:	4680      	mov	r8, r0
 80176c2:	d109      	bne.n	80176d8 <_printf_float+0x100>
 80176c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176c6:	1cd8      	adds	r0, r3, #3
 80176c8:	db02      	blt.n	80176d0 <_printf_float+0xf8>
 80176ca:	6862      	ldr	r2, [r4, #4]
 80176cc:	4293      	cmp	r3, r2
 80176ce:	dd47      	ble.n	8017760 <_printf_float+0x188>
 80176d0:	f1a9 0902 	sub.w	r9, r9, #2
 80176d4:	fa5f f989 	uxtb.w	r9, r9
 80176d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80176dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80176de:	d824      	bhi.n	801772a <_printf_float+0x152>
 80176e0:	3901      	subs	r1, #1
 80176e2:	464a      	mov	r2, r9
 80176e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80176e8:	9109      	str	r1, [sp, #36]	; 0x24
 80176ea:	f7ff ff41 	bl	8017570 <__exponent>
 80176ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80176f0:	1813      	adds	r3, r2, r0
 80176f2:	2a01      	cmp	r2, #1
 80176f4:	4682      	mov	sl, r0
 80176f6:	6123      	str	r3, [r4, #16]
 80176f8:	dc02      	bgt.n	8017700 <_printf_float+0x128>
 80176fa:	6822      	ldr	r2, [r4, #0]
 80176fc:	07d1      	lsls	r1, r2, #31
 80176fe:	d501      	bpl.n	8017704 <_printf_float+0x12c>
 8017700:	3301      	adds	r3, #1
 8017702:	6123      	str	r3, [r4, #16]
 8017704:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017708:	2b00      	cmp	r3, #0
 801770a:	d0a9      	beq.n	8017660 <_printf_float+0x88>
 801770c:	232d      	movs	r3, #45	; 0x2d
 801770e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017712:	e7a5      	b.n	8017660 <_printf_float+0x88>
 8017714:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8017718:	f000 8178 	beq.w	8017a0c <_printf_float+0x434>
 801771c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8017720:	d1be      	bne.n	80176a0 <_printf_float+0xc8>
 8017722:	2900      	cmp	r1, #0
 8017724:	d1bc      	bne.n	80176a0 <_printf_float+0xc8>
 8017726:	2101      	movs	r1, #1
 8017728:	e7b9      	b.n	801769e <_printf_float+0xc6>
 801772a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801772e:	d119      	bne.n	8017764 <_printf_float+0x18c>
 8017730:	2900      	cmp	r1, #0
 8017732:	6863      	ldr	r3, [r4, #4]
 8017734:	dd0c      	ble.n	8017750 <_printf_float+0x178>
 8017736:	6121      	str	r1, [r4, #16]
 8017738:	b913      	cbnz	r3, 8017740 <_printf_float+0x168>
 801773a:	6822      	ldr	r2, [r4, #0]
 801773c:	07d2      	lsls	r2, r2, #31
 801773e:	d502      	bpl.n	8017746 <_printf_float+0x16e>
 8017740:	3301      	adds	r3, #1
 8017742:	440b      	add	r3, r1
 8017744:	6123      	str	r3, [r4, #16]
 8017746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017748:	65a3      	str	r3, [r4, #88]	; 0x58
 801774a:	f04f 0a00 	mov.w	sl, #0
 801774e:	e7d9      	b.n	8017704 <_printf_float+0x12c>
 8017750:	b913      	cbnz	r3, 8017758 <_printf_float+0x180>
 8017752:	6822      	ldr	r2, [r4, #0]
 8017754:	07d0      	lsls	r0, r2, #31
 8017756:	d501      	bpl.n	801775c <_printf_float+0x184>
 8017758:	3302      	adds	r3, #2
 801775a:	e7f3      	b.n	8017744 <_printf_float+0x16c>
 801775c:	2301      	movs	r3, #1
 801775e:	e7f1      	b.n	8017744 <_printf_float+0x16c>
 8017760:	f04f 0967 	mov.w	r9, #103	; 0x67
 8017764:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8017768:	4293      	cmp	r3, r2
 801776a:	db05      	blt.n	8017778 <_printf_float+0x1a0>
 801776c:	6822      	ldr	r2, [r4, #0]
 801776e:	6123      	str	r3, [r4, #16]
 8017770:	07d1      	lsls	r1, r2, #31
 8017772:	d5e8      	bpl.n	8017746 <_printf_float+0x16e>
 8017774:	3301      	adds	r3, #1
 8017776:	e7e5      	b.n	8017744 <_printf_float+0x16c>
 8017778:	2b00      	cmp	r3, #0
 801777a:	bfd4      	ite	le
 801777c:	f1c3 0302 	rsble	r3, r3, #2
 8017780:	2301      	movgt	r3, #1
 8017782:	4413      	add	r3, r2
 8017784:	e7de      	b.n	8017744 <_printf_float+0x16c>
 8017786:	6823      	ldr	r3, [r4, #0]
 8017788:	055a      	lsls	r2, r3, #21
 801778a:	d407      	bmi.n	801779c <_printf_float+0x1c4>
 801778c:	6923      	ldr	r3, [r4, #16]
 801778e:	4642      	mov	r2, r8
 8017790:	4631      	mov	r1, r6
 8017792:	4628      	mov	r0, r5
 8017794:	47b8      	blx	r7
 8017796:	3001      	adds	r0, #1
 8017798:	d12a      	bne.n	80177f0 <_printf_float+0x218>
 801779a:	e76b      	b.n	8017674 <_printf_float+0x9c>
 801779c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80177a0:	f240 80de 	bls.w	8017960 <_printf_float+0x388>
 80177a4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80177a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80177ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177b0:	d133      	bne.n	801781a <_printf_float+0x242>
 80177b2:	2301      	movs	r3, #1
 80177b4:	4a42      	ldr	r2, [pc, #264]	; (80178c0 <_printf_float+0x2e8>)
 80177b6:	4631      	mov	r1, r6
 80177b8:	4628      	mov	r0, r5
 80177ba:	47b8      	blx	r7
 80177bc:	3001      	adds	r0, #1
 80177be:	f43f af59 	beq.w	8017674 <_printf_float+0x9c>
 80177c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80177c6:	429a      	cmp	r2, r3
 80177c8:	db02      	blt.n	80177d0 <_printf_float+0x1f8>
 80177ca:	6823      	ldr	r3, [r4, #0]
 80177cc:	07d8      	lsls	r0, r3, #31
 80177ce:	d50f      	bpl.n	80177f0 <_printf_float+0x218>
 80177d0:	9b05      	ldr	r3, [sp, #20]
 80177d2:	465a      	mov	r2, fp
 80177d4:	4631      	mov	r1, r6
 80177d6:	4628      	mov	r0, r5
 80177d8:	47b8      	blx	r7
 80177da:	3001      	adds	r0, #1
 80177dc:	f43f af4a 	beq.w	8017674 <_printf_float+0x9c>
 80177e0:	f04f 0800 	mov.w	r8, #0
 80177e4:	f104 091a 	add.w	r9, r4, #26
 80177e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80177ea:	3b01      	subs	r3, #1
 80177ec:	4543      	cmp	r3, r8
 80177ee:	dc09      	bgt.n	8017804 <_printf_float+0x22c>
 80177f0:	6823      	ldr	r3, [r4, #0]
 80177f2:	079b      	lsls	r3, r3, #30
 80177f4:	f100 8105 	bmi.w	8017a02 <_printf_float+0x42a>
 80177f8:	68e0      	ldr	r0, [r4, #12]
 80177fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177fc:	4298      	cmp	r0, r3
 80177fe:	bfb8      	it	lt
 8017800:	4618      	movlt	r0, r3
 8017802:	e739      	b.n	8017678 <_printf_float+0xa0>
 8017804:	2301      	movs	r3, #1
 8017806:	464a      	mov	r2, r9
 8017808:	4631      	mov	r1, r6
 801780a:	4628      	mov	r0, r5
 801780c:	47b8      	blx	r7
 801780e:	3001      	adds	r0, #1
 8017810:	f43f af30 	beq.w	8017674 <_printf_float+0x9c>
 8017814:	f108 0801 	add.w	r8, r8, #1
 8017818:	e7e6      	b.n	80177e8 <_printf_float+0x210>
 801781a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801781c:	2b00      	cmp	r3, #0
 801781e:	dc2b      	bgt.n	8017878 <_printf_float+0x2a0>
 8017820:	2301      	movs	r3, #1
 8017822:	4a27      	ldr	r2, [pc, #156]	; (80178c0 <_printf_float+0x2e8>)
 8017824:	4631      	mov	r1, r6
 8017826:	4628      	mov	r0, r5
 8017828:	47b8      	blx	r7
 801782a:	3001      	adds	r0, #1
 801782c:	f43f af22 	beq.w	8017674 <_printf_float+0x9c>
 8017830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017832:	b923      	cbnz	r3, 801783e <_printf_float+0x266>
 8017834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017836:	b913      	cbnz	r3, 801783e <_printf_float+0x266>
 8017838:	6823      	ldr	r3, [r4, #0]
 801783a:	07d9      	lsls	r1, r3, #31
 801783c:	d5d8      	bpl.n	80177f0 <_printf_float+0x218>
 801783e:	9b05      	ldr	r3, [sp, #20]
 8017840:	465a      	mov	r2, fp
 8017842:	4631      	mov	r1, r6
 8017844:	4628      	mov	r0, r5
 8017846:	47b8      	blx	r7
 8017848:	3001      	adds	r0, #1
 801784a:	f43f af13 	beq.w	8017674 <_printf_float+0x9c>
 801784e:	f04f 0900 	mov.w	r9, #0
 8017852:	f104 0a1a 	add.w	sl, r4, #26
 8017856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017858:	425b      	negs	r3, r3
 801785a:	454b      	cmp	r3, r9
 801785c:	dc01      	bgt.n	8017862 <_printf_float+0x28a>
 801785e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017860:	e795      	b.n	801778e <_printf_float+0x1b6>
 8017862:	2301      	movs	r3, #1
 8017864:	4652      	mov	r2, sl
 8017866:	4631      	mov	r1, r6
 8017868:	4628      	mov	r0, r5
 801786a:	47b8      	blx	r7
 801786c:	3001      	adds	r0, #1
 801786e:	f43f af01 	beq.w	8017674 <_printf_float+0x9c>
 8017872:	f109 0901 	add.w	r9, r9, #1
 8017876:	e7ee      	b.n	8017856 <_printf_float+0x27e>
 8017878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801787a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801787c:	429a      	cmp	r2, r3
 801787e:	bfa8      	it	ge
 8017880:	461a      	movge	r2, r3
 8017882:	2a00      	cmp	r2, #0
 8017884:	4691      	mov	r9, r2
 8017886:	dd07      	ble.n	8017898 <_printf_float+0x2c0>
 8017888:	4613      	mov	r3, r2
 801788a:	4631      	mov	r1, r6
 801788c:	4642      	mov	r2, r8
 801788e:	4628      	mov	r0, r5
 8017890:	47b8      	blx	r7
 8017892:	3001      	adds	r0, #1
 8017894:	f43f aeee 	beq.w	8017674 <_printf_float+0x9c>
 8017898:	f104 031a 	add.w	r3, r4, #26
 801789c:	f04f 0a00 	mov.w	sl, #0
 80178a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80178a4:	9307      	str	r3, [sp, #28]
 80178a6:	e017      	b.n	80178d8 <_printf_float+0x300>
 80178a8:	ffffffff 	.word	0xffffffff
 80178ac:	7fefffff 	.word	0x7fefffff
 80178b0:	0803e37c 	.word	0x0803e37c
 80178b4:	0803e948 	.word	0x0803e948
 80178b8:	0803e950 	.word	0x0803e950
 80178bc:	0803e94c 	.word	0x0803e94c
 80178c0:	0803e954 	.word	0x0803e954
 80178c4:	2301      	movs	r3, #1
 80178c6:	9a07      	ldr	r2, [sp, #28]
 80178c8:	4631      	mov	r1, r6
 80178ca:	4628      	mov	r0, r5
 80178cc:	47b8      	blx	r7
 80178ce:	3001      	adds	r0, #1
 80178d0:	f43f aed0 	beq.w	8017674 <_printf_float+0x9c>
 80178d4:	f10a 0a01 	add.w	sl, sl, #1
 80178d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80178da:	9306      	str	r3, [sp, #24]
 80178dc:	eba3 0309 	sub.w	r3, r3, r9
 80178e0:	4553      	cmp	r3, sl
 80178e2:	dcef      	bgt.n	80178c4 <_printf_float+0x2ec>
 80178e4:	9b06      	ldr	r3, [sp, #24]
 80178e6:	4498      	add	r8, r3
 80178e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80178ec:	429a      	cmp	r2, r3
 80178ee:	db15      	blt.n	801791c <_printf_float+0x344>
 80178f0:	6823      	ldr	r3, [r4, #0]
 80178f2:	07da      	lsls	r2, r3, #31
 80178f4:	d412      	bmi.n	801791c <_printf_float+0x344>
 80178f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178f8:	9a06      	ldr	r2, [sp, #24]
 80178fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80178fc:	1a9a      	subs	r2, r3, r2
 80178fe:	eba3 0a01 	sub.w	sl, r3, r1
 8017902:	4592      	cmp	sl, r2
 8017904:	bfa8      	it	ge
 8017906:	4692      	movge	sl, r2
 8017908:	f1ba 0f00 	cmp.w	sl, #0
 801790c:	dc0e      	bgt.n	801792c <_printf_float+0x354>
 801790e:	f04f 0800 	mov.w	r8, #0
 8017912:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017916:	f104 091a 	add.w	r9, r4, #26
 801791a:	e019      	b.n	8017950 <_printf_float+0x378>
 801791c:	9b05      	ldr	r3, [sp, #20]
 801791e:	465a      	mov	r2, fp
 8017920:	4631      	mov	r1, r6
 8017922:	4628      	mov	r0, r5
 8017924:	47b8      	blx	r7
 8017926:	3001      	adds	r0, #1
 8017928:	d1e5      	bne.n	80178f6 <_printf_float+0x31e>
 801792a:	e6a3      	b.n	8017674 <_printf_float+0x9c>
 801792c:	4653      	mov	r3, sl
 801792e:	4642      	mov	r2, r8
 8017930:	4631      	mov	r1, r6
 8017932:	4628      	mov	r0, r5
 8017934:	47b8      	blx	r7
 8017936:	3001      	adds	r0, #1
 8017938:	d1e9      	bne.n	801790e <_printf_float+0x336>
 801793a:	e69b      	b.n	8017674 <_printf_float+0x9c>
 801793c:	2301      	movs	r3, #1
 801793e:	464a      	mov	r2, r9
 8017940:	4631      	mov	r1, r6
 8017942:	4628      	mov	r0, r5
 8017944:	47b8      	blx	r7
 8017946:	3001      	adds	r0, #1
 8017948:	f43f ae94 	beq.w	8017674 <_printf_float+0x9c>
 801794c:	f108 0801 	add.w	r8, r8, #1
 8017950:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017954:	1a9b      	subs	r3, r3, r2
 8017956:	eba3 030a 	sub.w	r3, r3, sl
 801795a:	4543      	cmp	r3, r8
 801795c:	dcee      	bgt.n	801793c <_printf_float+0x364>
 801795e:	e747      	b.n	80177f0 <_printf_float+0x218>
 8017960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017962:	2a01      	cmp	r2, #1
 8017964:	dc01      	bgt.n	801796a <_printf_float+0x392>
 8017966:	07db      	lsls	r3, r3, #31
 8017968:	d539      	bpl.n	80179de <_printf_float+0x406>
 801796a:	2301      	movs	r3, #1
 801796c:	4642      	mov	r2, r8
 801796e:	4631      	mov	r1, r6
 8017970:	4628      	mov	r0, r5
 8017972:	47b8      	blx	r7
 8017974:	3001      	adds	r0, #1
 8017976:	f43f ae7d 	beq.w	8017674 <_printf_float+0x9c>
 801797a:	9b05      	ldr	r3, [sp, #20]
 801797c:	465a      	mov	r2, fp
 801797e:	4631      	mov	r1, r6
 8017980:	4628      	mov	r0, r5
 8017982:	47b8      	blx	r7
 8017984:	3001      	adds	r0, #1
 8017986:	f108 0801 	add.w	r8, r8, #1
 801798a:	f43f ae73 	beq.w	8017674 <_printf_float+0x9c>
 801798e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8017992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017994:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801799c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80179a0:	d018      	beq.n	80179d4 <_printf_float+0x3fc>
 80179a2:	4642      	mov	r2, r8
 80179a4:	4631      	mov	r1, r6
 80179a6:	4628      	mov	r0, r5
 80179a8:	47b8      	blx	r7
 80179aa:	3001      	adds	r0, #1
 80179ac:	d10e      	bne.n	80179cc <_printf_float+0x3f4>
 80179ae:	e661      	b.n	8017674 <_printf_float+0x9c>
 80179b0:	2301      	movs	r3, #1
 80179b2:	464a      	mov	r2, r9
 80179b4:	4631      	mov	r1, r6
 80179b6:	4628      	mov	r0, r5
 80179b8:	47b8      	blx	r7
 80179ba:	3001      	adds	r0, #1
 80179bc:	f43f ae5a 	beq.w	8017674 <_printf_float+0x9c>
 80179c0:	f108 0801 	add.w	r8, r8, #1
 80179c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80179c6:	3b01      	subs	r3, #1
 80179c8:	4543      	cmp	r3, r8
 80179ca:	dcf1      	bgt.n	80179b0 <_printf_float+0x3d8>
 80179cc:	4653      	mov	r3, sl
 80179ce:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80179d2:	e6dd      	b.n	8017790 <_printf_float+0x1b8>
 80179d4:	f04f 0800 	mov.w	r8, #0
 80179d8:	f104 091a 	add.w	r9, r4, #26
 80179dc:	e7f2      	b.n	80179c4 <_printf_float+0x3ec>
 80179de:	2301      	movs	r3, #1
 80179e0:	e7df      	b.n	80179a2 <_printf_float+0x3ca>
 80179e2:	2301      	movs	r3, #1
 80179e4:	464a      	mov	r2, r9
 80179e6:	4631      	mov	r1, r6
 80179e8:	4628      	mov	r0, r5
 80179ea:	47b8      	blx	r7
 80179ec:	3001      	adds	r0, #1
 80179ee:	f43f ae41 	beq.w	8017674 <_printf_float+0x9c>
 80179f2:	f108 0801 	add.w	r8, r8, #1
 80179f6:	68e3      	ldr	r3, [r4, #12]
 80179f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80179fa:	1a9b      	subs	r3, r3, r2
 80179fc:	4543      	cmp	r3, r8
 80179fe:	dcf0      	bgt.n	80179e2 <_printf_float+0x40a>
 8017a00:	e6fa      	b.n	80177f8 <_printf_float+0x220>
 8017a02:	f04f 0800 	mov.w	r8, #0
 8017a06:	f104 0919 	add.w	r9, r4, #25
 8017a0a:	e7f4      	b.n	80179f6 <_printf_float+0x41e>
 8017a0c:	2900      	cmp	r1, #0
 8017a0e:	f43f ae8a 	beq.w	8017726 <_printf_float+0x14e>
 8017a12:	f04f 0c00 	mov.w	ip, #0
 8017a16:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8017a1a:	e9cd 0900 	strd	r0, r9, [sp]
 8017a1e:	6022      	str	r2, [r4, #0]
 8017a20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017a24:	4628      	mov	r0, r5
 8017a26:	f7ff fd51 	bl	80174cc <__cvt>
 8017a2a:	4680      	mov	r8, r0
 8017a2c:	e64a      	b.n	80176c4 <_printf_float+0xec>
 8017a2e:	bf00      	nop

08017a30 <_printf_common>:
 8017a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a34:	4691      	mov	r9, r2
 8017a36:	461f      	mov	r7, r3
 8017a38:	688a      	ldr	r2, [r1, #8]
 8017a3a:	690b      	ldr	r3, [r1, #16]
 8017a3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017a40:	4293      	cmp	r3, r2
 8017a42:	bfb8      	it	lt
 8017a44:	4613      	movlt	r3, r2
 8017a46:	f8c9 3000 	str.w	r3, [r9]
 8017a4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017a4e:	4606      	mov	r6, r0
 8017a50:	460c      	mov	r4, r1
 8017a52:	b112      	cbz	r2, 8017a5a <_printf_common+0x2a>
 8017a54:	3301      	adds	r3, #1
 8017a56:	f8c9 3000 	str.w	r3, [r9]
 8017a5a:	6823      	ldr	r3, [r4, #0]
 8017a5c:	0699      	lsls	r1, r3, #26
 8017a5e:	bf42      	ittt	mi
 8017a60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017a64:	3302      	addmi	r3, #2
 8017a66:	f8c9 3000 	strmi.w	r3, [r9]
 8017a6a:	6825      	ldr	r5, [r4, #0]
 8017a6c:	f015 0506 	ands.w	r5, r5, #6
 8017a70:	d107      	bne.n	8017a82 <_printf_common+0x52>
 8017a72:	f104 0a19 	add.w	sl, r4, #25
 8017a76:	68e3      	ldr	r3, [r4, #12]
 8017a78:	f8d9 2000 	ldr.w	r2, [r9]
 8017a7c:	1a9b      	subs	r3, r3, r2
 8017a7e:	42ab      	cmp	r3, r5
 8017a80:	dc28      	bgt.n	8017ad4 <_printf_common+0xa4>
 8017a82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017a86:	6822      	ldr	r2, [r4, #0]
 8017a88:	3300      	adds	r3, #0
 8017a8a:	bf18      	it	ne
 8017a8c:	2301      	movne	r3, #1
 8017a8e:	0692      	lsls	r2, r2, #26
 8017a90:	d42d      	bmi.n	8017aee <_printf_common+0xbe>
 8017a92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017a96:	4639      	mov	r1, r7
 8017a98:	4630      	mov	r0, r6
 8017a9a:	47c0      	blx	r8
 8017a9c:	3001      	adds	r0, #1
 8017a9e:	d020      	beq.n	8017ae2 <_printf_common+0xb2>
 8017aa0:	6823      	ldr	r3, [r4, #0]
 8017aa2:	68e5      	ldr	r5, [r4, #12]
 8017aa4:	f8d9 2000 	ldr.w	r2, [r9]
 8017aa8:	f003 0306 	and.w	r3, r3, #6
 8017aac:	2b04      	cmp	r3, #4
 8017aae:	bf08      	it	eq
 8017ab0:	1aad      	subeq	r5, r5, r2
 8017ab2:	68a3      	ldr	r3, [r4, #8]
 8017ab4:	6922      	ldr	r2, [r4, #16]
 8017ab6:	bf0c      	ite	eq
 8017ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017abc:	2500      	movne	r5, #0
 8017abe:	4293      	cmp	r3, r2
 8017ac0:	bfc4      	itt	gt
 8017ac2:	1a9b      	subgt	r3, r3, r2
 8017ac4:	18ed      	addgt	r5, r5, r3
 8017ac6:	f04f 0900 	mov.w	r9, #0
 8017aca:	341a      	adds	r4, #26
 8017acc:	454d      	cmp	r5, r9
 8017ace:	d11a      	bne.n	8017b06 <_printf_common+0xd6>
 8017ad0:	2000      	movs	r0, #0
 8017ad2:	e008      	b.n	8017ae6 <_printf_common+0xb6>
 8017ad4:	2301      	movs	r3, #1
 8017ad6:	4652      	mov	r2, sl
 8017ad8:	4639      	mov	r1, r7
 8017ada:	4630      	mov	r0, r6
 8017adc:	47c0      	blx	r8
 8017ade:	3001      	adds	r0, #1
 8017ae0:	d103      	bne.n	8017aea <_printf_common+0xba>
 8017ae2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017aea:	3501      	adds	r5, #1
 8017aec:	e7c3      	b.n	8017a76 <_printf_common+0x46>
 8017aee:	18e1      	adds	r1, r4, r3
 8017af0:	1c5a      	adds	r2, r3, #1
 8017af2:	2030      	movs	r0, #48	; 0x30
 8017af4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017af8:	4422      	add	r2, r4
 8017afa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017afe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017b02:	3302      	adds	r3, #2
 8017b04:	e7c5      	b.n	8017a92 <_printf_common+0x62>
 8017b06:	2301      	movs	r3, #1
 8017b08:	4622      	mov	r2, r4
 8017b0a:	4639      	mov	r1, r7
 8017b0c:	4630      	mov	r0, r6
 8017b0e:	47c0      	blx	r8
 8017b10:	3001      	adds	r0, #1
 8017b12:	d0e6      	beq.n	8017ae2 <_printf_common+0xb2>
 8017b14:	f109 0901 	add.w	r9, r9, #1
 8017b18:	e7d8      	b.n	8017acc <_printf_common+0x9c>
	...

08017b1c <_printf_i>:
 8017b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b20:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017b24:	460c      	mov	r4, r1
 8017b26:	7e09      	ldrb	r1, [r1, #24]
 8017b28:	b085      	sub	sp, #20
 8017b2a:	296e      	cmp	r1, #110	; 0x6e
 8017b2c:	4617      	mov	r7, r2
 8017b2e:	4606      	mov	r6, r0
 8017b30:	4698      	mov	r8, r3
 8017b32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017b34:	f000 80b3 	beq.w	8017c9e <_printf_i+0x182>
 8017b38:	d822      	bhi.n	8017b80 <_printf_i+0x64>
 8017b3a:	2963      	cmp	r1, #99	; 0x63
 8017b3c:	d036      	beq.n	8017bac <_printf_i+0x90>
 8017b3e:	d80a      	bhi.n	8017b56 <_printf_i+0x3a>
 8017b40:	2900      	cmp	r1, #0
 8017b42:	f000 80b9 	beq.w	8017cb8 <_printf_i+0x19c>
 8017b46:	2958      	cmp	r1, #88	; 0x58
 8017b48:	f000 8083 	beq.w	8017c52 <_printf_i+0x136>
 8017b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b50:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017b54:	e032      	b.n	8017bbc <_printf_i+0xa0>
 8017b56:	2964      	cmp	r1, #100	; 0x64
 8017b58:	d001      	beq.n	8017b5e <_printf_i+0x42>
 8017b5a:	2969      	cmp	r1, #105	; 0x69
 8017b5c:	d1f6      	bne.n	8017b4c <_printf_i+0x30>
 8017b5e:	6820      	ldr	r0, [r4, #0]
 8017b60:	6813      	ldr	r3, [r2, #0]
 8017b62:	0605      	lsls	r5, r0, #24
 8017b64:	f103 0104 	add.w	r1, r3, #4
 8017b68:	d52a      	bpl.n	8017bc0 <_printf_i+0xa4>
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	6011      	str	r1, [r2, #0]
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	da03      	bge.n	8017b7a <_printf_i+0x5e>
 8017b72:	222d      	movs	r2, #45	; 0x2d
 8017b74:	425b      	negs	r3, r3
 8017b76:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017b7a:	486f      	ldr	r0, [pc, #444]	; (8017d38 <_printf_i+0x21c>)
 8017b7c:	220a      	movs	r2, #10
 8017b7e:	e039      	b.n	8017bf4 <_printf_i+0xd8>
 8017b80:	2973      	cmp	r1, #115	; 0x73
 8017b82:	f000 809d 	beq.w	8017cc0 <_printf_i+0x1a4>
 8017b86:	d808      	bhi.n	8017b9a <_printf_i+0x7e>
 8017b88:	296f      	cmp	r1, #111	; 0x6f
 8017b8a:	d020      	beq.n	8017bce <_printf_i+0xb2>
 8017b8c:	2970      	cmp	r1, #112	; 0x70
 8017b8e:	d1dd      	bne.n	8017b4c <_printf_i+0x30>
 8017b90:	6823      	ldr	r3, [r4, #0]
 8017b92:	f043 0320 	orr.w	r3, r3, #32
 8017b96:	6023      	str	r3, [r4, #0]
 8017b98:	e003      	b.n	8017ba2 <_printf_i+0x86>
 8017b9a:	2975      	cmp	r1, #117	; 0x75
 8017b9c:	d017      	beq.n	8017bce <_printf_i+0xb2>
 8017b9e:	2978      	cmp	r1, #120	; 0x78
 8017ba0:	d1d4      	bne.n	8017b4c <_printf_i+0x30>
 8017ba2:	2378      	movs	r3, #120	; 0x78
 8017ba4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017ba8:	4864      	ldr	r0, [pc, #400]	; (8017d3c <_printf_i+0x220>)
 8017baa:	e055      	b.n	8017c58 <_printf_i+0x13c>
 8017bac:	6813      	ldr	r3, [r2, #0]
 8017bae:	1d19      	adds	r1, r3, #4
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	6011      	str	r1, [r2, #0]
 8017bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017bbc:	2301      	movs	r3, #1
 8017bbe:	e08c      	b.n	8017cda <_printf_i+0x1be>
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	6011      	str	r1, [r2, #0]
 8017bc4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017bc8:	bf18      	it	ne
 8017bca:	b21b      	sxthne	r3, r3
 8017bcc:	e7cf      	b.n	8017b6e <_printf_i+0x52>
 8017bce:	6813      	ldr	r3, [r2, #0]
 8017bd0:	6825      	ldr	r5, [r4, #0]
 8017bd2:	1d18      	adds	r0, r3, #4
 8017bd4:	6010      	str	r0, [r2, #0]
 8017bd6:	0628      	lsls	r0, r5, #24
 8017bd8:	d501      	bpl.n	8017bde <_printf_i+0xc2>
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	e002      	b.n	8017be4 <_printf_i+0xc8>
 8017bde:	0668      	lsls	r0, r5, #25
 8017be0:	d5fb      	bpl.n	8017bda <_printf_i+0xbe>
 8017be2:	881b      	ldrh	r3, [r3, #0]
 8017be4:	4854      	ldr	r0, [pc, #336]	; (8017d38 <_printf_i+0x21c>)
 8017be6:	296f      	cmp	r1, #111	; 0x6f
 8017be8:	bf14      	ite	ne
 8017bea:	220a      	movne	r2, #10
 8017bec:	2208      	moveq	r2, #8
 8017bee:	2100      	movs	r1, #0
 8017bf0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017bf4:	6865      	ldr	r5, [r4, #4]
 8017bf6:	60a5      	str	r5, [r4, #8]
 8017bf8:	2d00      	cmp	r5, #0
 8017bfa:	f2c0 8095 	blt.w	8017d28 <_printf_i+0x20c>
 8017bfe:	6821      	ldr	r1, [r4, #0]
 8017c00:	f021 0104 	bic.w	r1, r1, #4
 8017c04:	6021      	str	r1, [r4, #0]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d13d      	bne.n	8017c86 <_printf_i+0x16a>
 8017c0a:	2d00      	cmp	r5, #0
 8017c0c:	f040 808e 	bne.w	8017d2c <_printf_i+0x210>
 8017c10:	4665      	mov	r5, ip
 8017c12:	2a08      	cmp	r2, #8
 8017c14:	d10b      	bne.n	8017c2e <_printf_i+0x112>
 8017c16:	6823      	ldr	r3, [r4, #0]
 8017c18:	07db      	lsls	r3, r3, #31
 8017c1a:	d508      	bpl.n	8017c2e <_printf_i+0x112>
 8017c1c:	6923      	ldr	r3, [r4, #16]
 8017c1e:	6862      	ldr	r2, [r4, #4]
 8017c20:	429a      	cmp	r2, r3
 8017c22:	bfde      	ittt	le
 8017c24:	2330      	movle	r3, #48	; 0x30
 8017c26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017c2a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8017c2e:	ebac 0305 	sub.w	r3, ip, r5
 8017c32:	6123      	str	r3, [r4, #16]
 8017c34:	f8cd 8000 	str.w	r8, [sp]
 8017c38:	463b      	mov	r3, r7
 8017c3a:	aa03      	add	r2, sp, #12
 8017c3c:	4621      	mov	r1, r4
 8017c3e:	4630      	mov	r0, r6
 8017c40:	f7ff fef6 	bl	8017a30 <_printf_common>
 8017c44:	3001      	adds	r0, #1
 8017c46:	d14d      	bne.n	8017ce4 <_printf_i+0x1c8>
 8017c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017c4c:	b005      	add	sp, #20
 8017c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c52:	4839      	ldr	r0, [pc, #228]	; (8017d38 <_printf_i+0x21c>)
 8017c54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017c58:	6813      	ldr	r3, [r2, #0]
 8017c5a:	6821      	ldr	r1, [r4, #0]
 8017c5c:	1d1d      	adds	r5, r3, #4
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	6015      	str	r5, [r2, #0]
 8017c62:	060a      	lsls	r2, r1, #24
 8017c64:	d50b      	bpl.n	8017c7e <_printf_i+0x162>
 8017c66:	07ca      	lsls	r2, r1, #31
 8017c68:	bf44      	itt	mi
 8017c6a:	f041 0120 	orrmi.w	r1, r1, #32
 8017c6e:	6021      	strmi	r1, [r4, #0]
 8017c70:	b91b      	cbnz	r3, 8017c7a <_printf_i+0x15e>
 8017c72:	6822      	ldr	r2, [r4, #0]
 8017c74:	f022 0220 	bic.w	r2, r2, #32
 8017c78:	6022      	str	r2, [r4, #0]
 8017c7a:	2210      	movs	r2, #16
 8017c7c:	e7b7      	b.n	8017bee <_printf_i+0xd2>
 8017c7e:	064d      	lsls	r5, r1, #25
 8017c80:	bf48      	it	mi
 8017c82:	b29b      	uxthmi	r3, r3
 8017c84:	e7ef      	b.n	8017c66 <_printf_i+0x14a>
 8017c86:	4665      	mov	r5, ip
 8017c88:	fbb3 f1f2 	udiv	r1, r3, r2
 8017c8c:	fb02 3311 	mls	r3, r2, r1, r3
 8017c90:	5cc3      	ldrb	r3, [r0, r3]
 8017c92:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017c96:	460b      	mov	r3, r1
 8017c98:	2900      	cmp	r1, #0
 8017c9a:	d1f5      	bne.n	8017c88 <_printf_i+0x16c>
 8017c9c:	e7b9      	b.n	8017c12 <_printf_i+0xf6>
 8017c9e:	6813      	ldr	r3, [r2, #0]
 8017ca0:	6825      	ldr	r5, [r4, #0]
 8017ca2:	6961      	ldr	r1, [r4, #20]
 8017ca4:	1d18      	adds	r0, r3, #4
 8017ca6:	6010      	str	r0, [r2, #0]
 8017ca8:	0628      	lsls	r0, r5, #24
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	d501      	bpl.n	8017cb2 <_printf_i+0x196>
 8017cae:	6019      	str	r1, [r3, #0]
 8017cb0:	e002      	b.n	8017cb8 <_printf_i+0x19c>
 8017cb2:	066a      	lsls	r2, r5, #25
 8017cb4:	d5fb      	bpl.n	8017cae <_printf_i+0x192>
 8017cb6:	8019      	strh	r1, [r3, #0]
 8017cb8:	2300      	movs	r3, #0
 8017cba:	6123      	str	r3, [r4, #16]
 8017cbc:	4665      	mov	r5, ip
 8017cbe:	e7b9      	b.n	8017c34 <_printf_i+0x118>
 8017cc0:	6813      	ldr	r3, [r2, #0]
 8017cc2:	1d19      	adds	r1, r3, #4
 8017cc4:	6011      	str	r1, [r2, #0]
 8017cc6:	681d      	ldr	r5, [r3, #0]
 8017cc8:	6862      	ldr	r2, [r4, #4]
 8017cca:	2100      	movs	r1, #0
 8017ccc:	4628      	mov	r0, r5
 8017cce:	f7ee fef7 	bl	8006ac0 <memchr>
 8017cd2:	b108      	cbz	r0, 8017cd8 <_printf_i+0x1bc>
 8017cd4:	1b40      	subs	r0, r0, r5
 8017cd6:	6060      	str	r0, [r4, #4]
 8017cd8:	6863      	ldr	r3, [r4, #4]
 8017cda:	6123      	str	r3, [r4, #16]
 8017cdc:	2300      	movs	r3, #0
 8017cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ce2:	e7a7      	b.n	8017c34 <_printf_i+0x118>
 8017ce4:	6923      	ldr	r3, [r4, #16]
 8017ce6:	462a      	mov	r2, r5
 8017ce8:	4639      	mov	r1, r7
 8017cea:	4630      	mov	r0, r6
 8017cec:	47c0      	blx	r8
 8017cee:	3001      	adds	r0, #1
 8017cf0:	d0aa      	beq.n	8017c48 <_printf_i+0x12c>
 8017cf2:	6823      	ldr	r3, [r4, #0]
 8017cf4:	079b      	lsls	r3, r3, #30
 8017cf6:	d413      	bmi.n	8017d20 <_printf_i+0x204>
 8017cf8:	68e0      	ldr	r0, [r4, #12]
 8017cfa:	9b03      	ldr	r3, [sp, #12]
 8017cfc:	4298      	cmp	r0, r3
 8017cfe:	bfb8      	it	lt
 8017d00:	4618      	movlt	r0, r3
 8017d02:	e7a3      	b.n	8017c4c <_printf_i+0x130>
 8017d04:	2301      	movs	r3, #1
 8017d06:	464a      	mov	r2, r9
 8017d08:	4639      	mov	r1, r7
 8017d0a:	4630      	mov	r0, r6
 8017d0c:	47c0      	blx	r8
 8017d0e:	3001      	adds	r0, #1
 8017d10:	d09a      	beq.n	8017c48 <_printf_i+0x12c>
 8017d12:	3501      	adds	r5, #1
 8017d14:	68e3      	ldr	r3, [r4, #12]
 8017d16:	9a03      	ldr	r2, [sp, #12]
 8017d18:	1a9b      	subs	r3, r3, r2
 8017d1a:	42ab      	cmp	r3, r5
 8017d1c:	dcf2      	bgt.n	8017d04 <_printf_i+0x1e8>
 8017d1e:	e7eb      	b.n	8017cf8 <_printf_i+0x1dc>
 8017d20:	2500      	movs	r5, #0
 8017d22:	f104 0919 	add.w	r9, r4, #25
 8017d26:	e7f5      	b.n	8017d14 <_printf_i+0x1f8>
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d1ac      	bne.n	8017c86 <_printf_i+0x16a>
 8017d2c:	7803      	ldrb	r3, [r0, #0]
 8017d2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017d32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017d36:	e76c      	b.n	8017c12 <_printf_i+0xf6>
 8017d38:	0803e956 	.word	0x0803e956
 8017d3c:	0803e967 	.word	0x0803e967

08017d40 <siprintf>:
 8017d40:	b40e      	push	{r1, r2, r3}
 8017d42:	b500      	push	{lr}
 8017d44:	b09c      	sub	sp, #112	; 0x70
 8017d46:	ab1d      	add	r3, sp, #116	; 0x74
 8017d48:	9002      	str	r0, [sp, #8]
 8017d4a:	9006      	str	r0, [sp, #24]
 8017d4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017d50:	4809      	ldr	r0, [pc, #36]	; (8017d78 <siprintf+0x38>)
 8017d52:	9107      	str	r1, [sp, #28]
 8017d54:	9104      	str	r1, [sp, #16]
 8017d56:	4909      	ldr	r1, [pc, #36]	; (8017d7c <siprintf+0x3c>)
 8017d58:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d5c:	9105      	str	r1, [sp, #20]
 8017d5e:	6800      	ldr	r0, [r0, #0]
 8017d60:	9301      	str	r3, [sp, #4]
 8017d62:	a902      	add	r1, sp, #8
 8017d64:	f001 f9e6 	bl	8019134 <_svfiprintf_r>
 8017d68:	9b02      	ldr	r3, [sp, #8]
 8017d6a:	2200      	movs	r2, #0
 8017d6c:	701a      	strb	r2, [r3, #0]
 8017d6e:	b01c      	add	sp, #112	; 0x70
 8017d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d74:	b003      	add	sp, #12
 8017d76:	4770      	bx	lr
 8017d78:	20000ad8 	.word	0x20000ad8
 8017d7c:	ffff0208 	.word	0xffff0208

08017d80 <quorem>:
 8017d80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d84:	6903      	ldr	r3, [r0, #16]
 8017d86:	690c      	ldr	r4, [r1, #16]
 8017d88:	42a3      	cmp	r3, r4
 8017d8a:	4680      	mov	r8, r0
 8017d8c:	f2c0 8082 	blt.w	8017e94 <quorem+0x114>
 8017d90:	3c01      	subs	r4, #1
 8017d92:	f101 0714 	add.w	r7, r1, #20
 8017d96:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017d9a:	f100 0614 	add.w	r6, r0, #20
 8017d9e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017da2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017da6:	eb06 030c 	add.w	r3, r6, ip
 8017daa:	3501      	adds	r5, #1
 8017dac:	eb07 090c 	add.w	r9, r7, ip
 8017db0:	9301      	str	r3, [sp, #4]
 8017db2:	fbb0 f5f5 	udiv	r5, r0, r5
 8017db6:	b395      	cbz	r5, 8017e1e <quorem+0x9e>
 8017db8:	f04f 0a00 	mov.w	sl, #0
 8017dbc:	4638      	mov	r0, r7
 8017dbe:	46b6      	mov	lr, r6
 8017dc0:	46d3      	mov	fp, sl
 8017dc2:	f850 2b04 	ldr.w	r2, [r0], #4
 8017dc6:	b293      	uxth	r3, r2
 8017dc8:	fb05 a303 	mla	r3, r5, r3, sl
 8017dcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017dd0:	b29b      	uxth	r3, r3
 8017dd2:	ebab 0303 	sub.w	r3, fp, r3
 8017dd6:	0c12      	lsrs	r2, r2, #16
 8017dd8:	f8de b000 	ldr.w	fp, [lr]
 8017ddc:	fb05 a202 	mla	r2, r5, r2, sl
 8017de0:	fa13 f38b 	uxtah	r3, r3, fp
 8017de4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017de8:	fa1f fb82 	uxth.w	fp, r2
 8017dec:	f8de 2000 	ldr.w	r2, [lr]
 8017df0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017df4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017df8:	b29b      	uxth	r3, r3
 8017dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017dfe:	4581      	cmp	r9, r0
 8017e00:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017e04:	f84e 3b04 	str.w	r3, [lr], #4
 8017e08:	d2db      	bcs.n	8017dc2 <quorem+0x42>
 8017e0a:	f856 300c 	ldr.w	r3, [r6, ip]
 8017e0e:	b933      	cbnz	r3, 8017e1e <quorem+0x9e>
 8017e10:	9b01      	ldr	r3, [sp, #4]
 8017e12:	3b04      	subs	r3, #4
 8017e14:	429e      	cmp	r6, r3
 8017e16:	461a      	mov	r2, r3
 8017e18:	d330      	bcc.n	8017e7c <quorem+0xfc>
 8017e1a:	f8c8 4010 	str.w	r4, [r8, #16]
 8017e1e:	4640      	mov	r0, r8
 8017e20:	f000 ffb2 	bl	8018d88 <__mcmp>
 8017e24:	2800      	cmp	r0, #0
 8017e26:	db25      	blt.n	8017e74 <quorem+0xf4>
 8017e28:	3501      	adds	r5, #1
 8017e2a:	4630      	mov	r0, r6
 8017e2c:	f04f 0c00 	mov.w	ip, #0
 8017e30:	f857 2b04 	ldr.w	r2, [r7], #4
 8017e34:	f8d0 e000 	ldr.w	lr, [r0]
 8017e38:	b293      	uxth	r3, r2
 8017e3a:	ebac 0303 	sub.w	r3, ip, r3
 8017e3e:	0c12      	lsrs	r2, r2, #16
 8017e40:	fa13 f38e 	uxtah	r3, r3, lr
 8017e44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017e48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017e4c:	b29b      	uxth	r3, r3
 8017e4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017e52:	45b9      	cmp	r9, r7
 8017e54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017e58:	f840 3b04 	str.w	r3, [r0], #4
 8017e5c:	d2e8      	bcs.n	8017e30 <quorem+0xb0>
 8017e5e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017e62:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017e66:	b92a      	cbnz	r2, 8017e74 <quorem+0xf4>
 8017e68:	3b04      	subs	r3, #4
 8017e6a:	429e      	cmp	r6, r3
 8017e6c:	461a      	mov	r2, r3
 8017e6e:	d30b      	bcc.n	8017e88 <quorem+0x108>
 8017e70:	f8c8 4010 	str.w	r4, [r8, #16]
 8017e74:	4628      	mov	r0, r5
 8017e76:	b003      	add	sp, #12
 8017e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e7c:	6812      	ldr	r2, [r2, #0]
 8017e7e:	3b04      	subs	r3, #4
 8017e80:	2a00      	cmp	r2, #0
 8017e82:	d1ca      	bne.n	8017e1a <quorem+0x9a>
 8017e84:	3c01      	subs	r4, #1
 8017e86:	e7c5      	b.n	8017e14 <quorem+0x94>
 8017e88:	6812      	ldr	r2, [r2, #0]
 8017e8a:	3b04      	subs	r3, #4
 8017e8c:	2a00      	cmp	r2, #0
 8017e8e:	d1ef      	bne.n	8017e70 <quorem+0xf0>
 8017e90:	3c01      	subs	r4, #1
 8017e92:	e7ea      	b.n	8017e6a <quorem+0xea>
 8017e94:	2000      	movs	r0, #0
 8017e96:	e7ee      	b.n	8017e76 <quorem+0xf6>

08017e98 <_dtoa_r>:
 8017e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e9c:	ec57 6b10 	vmov	r6, r7, d0
 8017ea0:	b095      	sub	sp, #84	; 0x54
 8017ea2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017ea4:	9108      	str	r1, [sp, #32]
 8017ea6:	4604      	mov	r4, r0
 8017ea8:	920a      	str	r2, [sp, #40]	; 0x28
 8017eaa:	9311      	str	r3, [sp, #68]	; 0x44
 8017eac:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8017eb0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8017eb4:	b93d      	cbnz	r5, 8017ec6 <_dtoa_r+0x2e>
 8017eb6:	2010      	movs	r0, #16
 8017eb8:	f000 fd48 	bl	801894c <malloc>
 8017ebc:	6260      	str	r0, [r4, #36]	; 0x24
 8017ebe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017ec2:	6005      	str	r5, [r0, #0]
 8017ec4:	60c5      	str	r5, [r0, #12]
 8017ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ec8:	6819      	ldr	r1, [r3, #0]
 8017eca:	b151      	cbz	r1, 8017ee2 <_dtoa_r+0x4a>
 8017ecc:	685a      	ldr	r2, [r3, #4]
 8017ece:	604a      	str	r2, [r1, #4]
 8017ed0:	2301      	movs	r3, #1
 8017ed2:	4093      	lsls	r3, r2
 8017ed4:	608b      	str	r3, [r1, #8]
 8017ed6:	4620      	mov	r0, r4
 8017ed8:	f000 fd74 	bl	80189c4 <_Bfree>
 8017edc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ede:	2200      	movs	r2, #0
 8017ee0:	601a      	str	r2, [r3, #0]
 8017ee2:	1e3b      	subs	r3, r7, #0
 8017ee4:	bfb9      	ittee	lt
 8017ee6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017eea:	9303      	strlt	r3, [sp, #12]
 8017eec:	2300      	movge	r3, #0
 8017eee:	f8c8 3000 	strge.w	r3, [r8]
 8017ef2:	9d03      	ldr	r5, [sp, #12]
 8017ef4:	4bac      	ldr	r3, [pc, #688]	; (80181a8 <_dtoa_r+0x310>)
 8017ef6:	bfbc      	itt	lt
 8017ef8:	2201      	movlt	r2, #1
 8017efa:	f8c8 2000 	strlt.w	r2, [r8]
 8017efe:	43ab      	bics	r3, r5
 8017f00:	d11b      	bne.n	8017f3a <_dtoa_r+0xa2>
 8017f02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017f04:	f242 730f 	movw	r3, #9999	; 0x270f
 8017f08:	6013      	str	r3, [r2, #0]
 8017f0a:	9b02      	ldr	r3, [sp, #8]
 8017f0c:	b923      	cbnz	r3, 8017f18 <_dtoa_r+0x80>
 8017f0e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8017f12:	2d00      	cmp	r5, #0
 8017f14:	f000 84dd 	beq.w	80188d2 <_dtoa_r+0xa3a>
 8017f18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017f1a:	b953      	cbnz	r3, 8017f32 <_dtoa_r+0x9a>
 8017f1c:	4ba3      	ldr	r3, [pc, #652]	; (80181ac <_dtoa_r+0x314>)
 8017f1e:	e020      	b.n	8017f62 <_dtoa_r+0xca>
 8017f20:	4ba3      	ldr	r3, [pc, #652]	; (80181b0 <_dtoa_r+0x318>)
 8017f22:	9304      	str	r3, [sp, #16]
 8017f24:	3308      	adds	r3, #8
 8017f26:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017f28:	6013      	str	r3, [r2, #0]
 8017f2a:	9804      	ldr	r0, [sp, #16]
 8017f2c:	b015      	add	sp, #84	; 0x54
 8017f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f32:	4b9e      	ldr	r3, [pc, #632]	; (80181ac <_dtoa_r+0x314>)
 8017f34:	9304      	str	r3, [sp, #16]
 8017f36:	3303      	adds	r3, #3
 8017f38:	e7f5      	b.n	8017f26 <_dtoa_r+0x8e>
 8017f3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017f3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f46:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017f4a:	d10c      	bne.n	8017f66 <_dtoa_r+0xce>
 8017f4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017f4e:	2301      	movs	r3, #1
 8017f50:	6013      	str	r3, [r2, #0]
 8017f52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	f000 84b9 	beq.w	80188cc <_dtoa_r+0xa34>
 8017f5a:	4b96      	ldr	r3, [pc, #600]	; (80181b4 <_dtoa_r+0x31c>)
 8017f5c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017f5e:	6013      	str	r3, [r2, #0]
 8017f60:	3b01      	subs	r3, #1
 8017f62:	9304      	str	r3, [sp, #16]
 8017f64:	e7e1      	b.n	8017f2a <_dtoa_r+0x92>
 8017f66:	a913      	add	r1, sp, #76	; 0x4c
 8017f68:	aa12      	add	r2, sp, #72	; 0x48
 8017f6a:	ed9d 0b04 	vldr	d0, [sp, #16]
 8017f6e:	4620      	mov	r0, r4
 8017f70:	f000 ff81 	bl	8018e76 <__d2b>
 8017f74:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8017f78:	9001      	str	r0, [sp, #4]
 8017f7a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017f7c:	2e00      	cmp	r6, #0
 8017f7e:	d046      	beq.n	801800e <_dtoa_r+0x176>
 8017f80:	9805      	ldr	r0, [sp, #20]
 8017f82:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8017f86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017f8a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8017f8e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017f92:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8017f96:	2700      	movs	r7, #0
 8017f98:	ee07 aa90 	vmov	s15, sl
 8017f9c:	ec43 2b16 	vmov	d6, r2, r3
 8017fa0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8017fa4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8018190 <_dtoa_r+0x2f8>
 8017fa8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8017fac:	ee36 7b47 	vsub.f64	d7, d6, d7
 8017fb0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8018198 <_dtoa_r+0x300>
 8017fb4:	eea7 6b04 	vfma.f64	d6, d7, d4
 8017fb8:	eeb0 7b46 	vmov.f64	d7, d6
 8017fbc:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80181a0 <_dtoa_r+0x308>
 8017fc0:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017fc4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8017fc8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8017fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fd0:	ee16 ba90 	vmov	fp, s13
 8017fd4:	d508      	bpl.n	8017fe8 <_dtoa_r+0x150>
 8017fd6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8017fda:	eeb4 6b47 	vcmp.f64	d6, d7
 8017fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fe2:	bf18      	it	ne
 8017fe4:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8017fe8:	f1bb 0f16 	cmp.w	fp, #22
 8017fec:	d834      	bhi.n	8018058 <_dtoa_r+0x1c0>
 8017fee:	4b72      	ldr	r3, [pc, #456]	; (80181b8 <_dtoa_r+0x320>)
 8017ff0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017ff4:	ed93 7b00 	vldr	d7, [r3]
 8017ff8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017ffc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018004:	dd01      	ble.n	801800a <_dtoa_r+0x172>
 8018006:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801800a:	2300      	movs	r3, #0
 801800c:	e025      	b.n	801805a <_dtoa_r+0x1c2>
 801800e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018010:	eb01 0a03 	add.w	sl, r1, r3
 8018014:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8018018:	2b20      	cmp	r3, #32
 801801a:	dd17      	ble.n	801804c <_dtoa_r+0x1b4>
 801801c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8018020:	9a02      	ldr	r2, [sp, #8]
 8018022:	409d      	lsls	r5, r3
 8018024:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8018028:	fa22 f303 	lsr.w	r3, r2, r3
 801802c:	432b      	orrs	r3, r5
 801802e:	ee07 3a90 	vmov	s15, r3
 8018032:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018036:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801803a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801803e:	9805      	ldr	r0, [sp, #20]
 8018040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018044:	2701      	movs	r7, #1
 8018046:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 801804a:	e7a5      	b.n	8017f98 <_dtoa_r+0x100>
 801804c:	9a02      	ldr	r2, [sp, #8]
 801804e:	f1c3 0320 	rsb	r3, r3, #32
 8018052:	fa02 f303 	lsl.w	r3, r2, r3
 8018056:	e7ea      	b.n	801802e <_dtoa_r+0x196>
 8018058:	2301      	movs	r3, #1
 801805a:	eba1 0a0a 	sub.w	sl, r1, sl
 801805e:	9310      	str	r3, [sp, #64]	; 0x40
 8018060:	f1ba 0301 	subs.w	r3, sl, #1
 8018064:	9307      	str	r3, [sp, #28]
 8018066:	bf43      	ittte	mi
 8018068:	2300      	movmi	r3, #0
 801806a:	f1ca 0a01 	rsbmi	sl, sl, #1
 801806e:	9307      	strmi	r3, [sp, #28]
 8018070:	f04f 0a00 	movpl.w	sl, #0
 8018074:	f1bb 0f00 	cmp.w	fp, #0
 8018078:	db19      	blt.n	80180ae <_dtoa_r+0x216>
 801807a:	9b07      	ldr	r3, [sp, #28]
 801807c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8018080:	445b      	add	r3, fp
 8018082:	9307      	str	r3, [sp, #28]
 8018084:	f04f 0800 	mov.w	r8, #0
 8018088:	9b08      	ldr	r3, [sp, #32]
 801808a:	2b09      	cmp	r3, #9
 801808c:	d866      	bhi.n	801815c <_dtoa_r+0x2c4>
 801808e:	2b05      	cmp	r3, #5
 8018090:	bfc4      	itt	gt
 8018092:	3b04      	subgt	r3, #4
 8018094:	9308      	strgt	r3, [sp, #32]
 8018096:	9b08      	ldr	r3, [sp, #32]
 8018098:	f1a3 0302 	sub.w	r3, r3, #2
 801809c:	bfcc      	ite	gt
 801809e:	2500      	movgt	r5, #0
 80180a0:	2501      	movle	r5, #1
 80180a2:	2b03      	cmp	r3, #3
 80180a4:	d866      	bhi.n	8018174 <_dtoa_r+0x2dc>
 80180a6:	e8df f003 	tbb	[pc, r3]
 80180aa:	5755      	.short	0x5755
 80180ac:	4909      	.short	0x4909
 80180ae:	2300      	movs	r3, #0
 80180b0:	ebaa 0a0b 	sub.w	sl, sl, fp
 80180b4:	f1cb 0800 	rsb	r8, fp, #0
 80180b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80180ba:	e7e5      	b.n	8018088 <_dtoa_r+0x1f0>
 80180bc:	2301      	movs	r3, #1
 80180be:	9309      	str	r3, [sp, #36]	; 0x24
 80180c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	dd59      	ble.n	801817a <_dtoa_r+0x2e2>
 80180c6:	9306      	str	r3, [sp, #24]
 80180c8:	4699      	mov	r9, r3
 80180ca:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80180cc:	2200      	movs	r2, #0
 80180ce:	6072      	str	r2, [r6, #4]
 80180d0:	2204      	movs	r2, #4
 80180d2:	f102 0014 	add.w	r0, r2, #20
 80180d6:	4298      	cmp	r0, r3
 80180d8:	6871      	ldr	r1, [r6, #4]
 80180da:	d953      	bls.n	8018184 <_dtoa_r+0x2ec>
 80180dc:	4620      	mov	r0, r4
 80180de:	f000 fc3d 	bl	801895c <_Balloc>
 80180e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80180e4:	6030      	str	r0, [r6, #0]
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	9304      	str	r3, [sp, #16]
 80180ea:	f1b9 0f0e 	cmp.w	r9, #14
 80180ee:	f200 80c2 	bhi.w	8018276 <_dtoa_r+0x3de>
 80180f2:	2d00      	cmp	r5, #0
 80180f4:	f000 80bf 	beq.w	8018276 <_dtoa_r+0x3de>
 80180f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80180fc:	f1bb 0f00 	cmp.w	fp, #0
 8018100:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8018104:	f340 80e6 	ble.w	80182d4 <_dtoa_r+0x43c>
 8018108:	4a2b      	ldr	r2, [pc, #172]	; (80181b8 <_dtoa_r+0x320>)
 801810a:	f00b 030f 	and.w	r3, fp, #15
 801810e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018112:	ed93 7b00 	vldr	d7, [r3]
 8018116:	ea4f 132b 	mov.w	r3, fp, asr #4
 801811a:	06da      	lsls	r2, r3, #27
 801811c:	f140 80d8 	bpl.w	80182d0 <_dtoa_r+0x438>
 8018120:	4a26      	ldr	r2, [pc, #152]	; (80181bc <_dtoa_r+0x324>)
 8018122:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8018126:	ed92 6b08 	vldr	d6, [r2, #32]
 801812a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801812e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018132:	f003 030f 	and.w	r3, r3, #15
 8018136:	2203      	movs	r2, #3
 8018138:	4920      	ldr	r1, [pc, #128]	; (80181bc <_dtoa_r+0x324>)
 801813a:	e04a      	b.n	80181d2 <_dtoa_r+0x33a>
 801813c:	2301      	movs	r3, #1
 801813e:	9309      	str	r3, [sp, #36]	; 0x24
 8018140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018142:	445b      	add	r3, fp
 8018144:	f103 0901 	add.w	r9, r3, #1
 8018148:	9306      	str	r3, [sp, #24]
 801814a:	464b      	mov	r3, r9
 801814c:	2b01      	cmp	r3, #1
 801814e:	bfb8      	it	lt
 8018150:	2301      	movlt	r3, #1
 8018152:	e7ba      	b.n	80180ca <_dtoa_r+0x232>
 8018154:	2300      	movs	r3, #0
 8018156:	e7b2      	b.n	80180be <_dtoa_r+0x226>
 8018158:	2300      	movs	r3, #0
 801815a:	e7f0      	b.n	801813e <_dtoa_r+0x2a6>
 801815c:	2501      	movs	r5, #1
 801815e:	2300      	movs	r3, #0
 8018160:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8018164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018168:	9306      	str	r3, [sp, #24]
 801816a:	4699      	mov	r9, r3
 801816c:	2200      	movs	r2, #0
 801816e:	2312      	movs	r3, #18
 8018170:	920a      	str	r2, [sp, #40]	; 0x28
 8018172:	e7aa      	b.n	80180ca <_dtoa_r+0x232>
 8018174:	2301      	movs	r3, #1
 8018176:	9309      	str	r3, [sp, #36]	; 0x24
 8018178:	e7f4      	b.n	8018164 <_dtoa_r+0x2cc>
 801817a:	2301      	movs	r3, #1
 801817c:	9306      	str	r3, [sp, #24]
 801817e:	4699      	mov	r9, r3
 8018180:	461a      	mov	r2, r3
 8018182:	e7f5      	b.n	8018170 <_dtoa_r+0x2d8>
 8018184:	3101      	adds	r1, #1
 8018186:	6071      	str	r1, [r6, #4]
 8018188:	0052      	lsls	r2, r2, #1
 801818a:	e7a2      	b.n	80180d2 <_dtoa_r+0x23a>
 801818c:	f3af 8000 	nop.w
 8018190:	636f4361 	.word	0x636f4361
 8018194:	3fd287a7 	.word	0x3fd287a7
 8018198:	8b60c8b3 	.word	0x8b60c8b3
 801819c:	3fc68a28 	.word	0x3fc68a28
 80181a0:	509f79fb 	.word	0x509f79fb
 80181a4:	3fd34413 	.word	0x3fd34413
 80181a8:	7ff00000 	.word	0x7ff00000
 80181ac:	0803e981 	.word	0x0803e981
 80181b0:	0803e978 	.word	0x0803e978
 80181b4:	0803e955 	.word	0x0803e955
 80181b8:	0803e9b0 	.word	0x0803e9b0
 80181bc:	0803e988 	.word	0x0803e988
 80181c0:	07de      	lsls	r6, r3, #31
 80181c2:	d504      	bpl.n	80181ce <_dtoa_r+0x336>
 80181c4:	ed91 6b00 	vldr	d6, [r1]
 80181c8:	3201      	adds	r2, #1
 80181ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80181ce:	105b      	asrs	r3, r3, #1
 80181d0:	3108      	adds	r1, #8
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d1f4      	bne.n	80181c0 <_dtoa_r+0x328>
 80181d6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80181da:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80181de:	ed8d 7b02 	vstr	d7, [sp, #8]
 80181e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	f000 80a7 	beq.w	8018338 <_dtoa_r+0x4a0>
 80181ea:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80181ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80181f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80181f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181fa:	f140 809d 	bpl.w	8018338 <_dtoa_r+0x4a0>
 80181fe:	f1b9 0f00 	cmp.w	r9, #0
 8018202:	f000 8099 	beq.w	8018338 <_dtoa_r+0x4a0>
 8018206:	9b06      	ldr	r3, [sp, #24]
 8018208:	2b00      	cmp	r3, #0
 801820a:	dd30      	ble.n	801826e <_dtoa_r+0x3d6>
 801820c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8018210:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018214:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018218:	9d06      	ldr	r5, [sp, #24]
 801821a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801821e:	3201      	adds	r2, #1
 8018220:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018224:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8018228:	ee07 2a90 	vmov	s15, r2
 801822c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018230:	eea7 5b06 	vfma.f64	d5, d7, d6
 8018234:	ed8d 5b02 	vstr	d5, [sp, #8]
 8018238:	9a03      	ldr	r2, [sp, #12]
 801823a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801823e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8018242:	2d00      	cmp	r5, #0
 8018244:	d17b      	bne.n	801833e <_dtoa_r+0x4a6>
 8018246:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801824a:	ee36 6b47 	vsub.f64	d6, d6, d7
 801824e:	ec41 0b17 	vmov	d7, r0, r1
 8018252:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801825a:	f300 8253 	bgt.w	8018704 <_dtoa_r+0x86c>
 801825e:	eeb1 7b47 	vneg.f64	d7, d7
 8018262:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801826a:	f100 8249 	bmi.w	8018700 <_dtoa_r+0x868>
 801826e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8018272:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018276:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018278:	2b00      	cmp	r3, #0
 801827a:	f2c0 8119 	blt.w	80184b0 <_dtoa_r+0x618>
 801827e:	f1bb 0f0e 	cmp.w	fp, #14
 8018282:	f300 8115 	bgt.w	80184b0 <_dtoa_r+0x618>
 8018286:	4bc3      	ldr	r3, [pc, #780]	; (8018594 <_dtoa_r+0x6fc>)
 8018288:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801828c:	ed93 6b00 	vldr	d6, [r3]
 8018290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018292:	2b00      	cmp	r3, #0
 8018294:	f280 80ba 	bge.w	801840c <_dtoa_r+0x574>
 8018298:	f1b9 0f00 	cmp.w	r9, #0
 801829c:	f300 80b6 	bgt.w	801840c <_dtoa_r+0x574>
 80182a0:	f040 822d 	bne.w	80186fe <_dtoa_r+0x866>
 80182a4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80182a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80182ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80182b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80182b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182b8:	464d      	mov	r5, r9
 80182ba:	464f      	mov	r7, r9
 80182bc:	f280 8204 	bge.w	80186c8 <_dtoa_r+0x830>
 80182c0:	9b04      	ldr	r3, [sp, #16]
 80182c2:	9a04      	ldr	r2, [sp, #16]
 80182c4:	1c5e      	adds	r6, r3, #1
 80182c6:	2331      	movs	r3, #49	; 0x31
 80182c8:	7013      	strb	r3, [r2, #0]
 80182ca:	f10b 0b01 	add.w	fp, fp, #1
 80182ce:	e1ff      	b.n	80186d0 <_dtoa_r+0x838>
 80182d0:	2202      	movs	r2, #2
 80182d2:	e731      	b.n	8018138 <_dtoa_r+0x2a0>
 80182d4:	d02e      	beq.n	8018334 <_dtoa_r+0x49c>
 80182d6:	f1cb 0300 	rsb	r3, fp, #0
 80182da:	4aae      	ldr	r2, [pc, #696]	; (8018594 <_dtoa_r+0x6fc>)
 80182dc:	f003 010f 	and.w	r1, r3, #15
 80182e0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80182e4:	ed92 7b00 	vldr	d7, [r2]
 80182e8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80182ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 80182f0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80182f4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80182f8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80182fc:	49a6      	ldr	r1, [pc, #664]	; (8018598 <_dtoa_r+0x700>)
 80182fe:	111b      	asrs	r3, r3, #4
 8018300:	2000      	movs	r0, #0
 8018302:	2202      	movs	r2, #2
 8018304:	b93b      	cbnz	r3, 8018316 <_dtoa_r+0x47e>
 8018306:	2800      	cmp	r0, #0
 8018308:	f43f af6b 	beq.w	80181e2 <_dtoa_r+0x34a>
 801830c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018314:	e765      	b.n	80181e2 <_dtoa_r+0x34a>
 8018316:	07dd      	lsls	r5, r3, #31
 8018318:	d509      	bpl.n	801832e <_dtoa_r+0x496>
 801831a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801831e:	ed91 7b00 	vldr	d7, [r1]
 8018322:	ee26 7b07 	vmul.f64	d7, d6, d7
 8018326:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801832a:	3201      	adds	r2, #1
 801832c:	2001      	movs	r0, #1
 801832e:	105b      	asrs	r3, r3, #1
 8018330:	3108      	adds	r1, #8
 8018332:	e7e7      	b.n	8018304 <_dtoa_r+0x46c>
 8018334:	2202      	movs	r2, #2
 8018336:	e754      	b.n	80181e2 <_dtoa_r+0x34a>
 8018338:	465b      	mov	r3, fp
 801833a:	464d      	mov	r5, r9
 801833c:	e770      	b.n	8018220 <_dtoa_r+0x388>
 801833e:	4a95      	ldr	r2, [pc, #596]	; (8018594 <_dtoa_r+0x6fc>)
 8018340:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8018344:	ed12 4b02 	vldr	d4, [r2, #-8]
 8018348:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801834a:	ec41 0b17 	vmov	d7, r0, r1
 801834e:	b35a      	cbz	r2, 80183a8 <_dtoa_r+0x510>
 8018350:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8018354:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8018358:	9e04      	ldr	r6, [sp, #16]
 801835a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801835e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018362:	ee35 7b47 	vsub.f64	d7, d5, d7
 8018366:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801836a:	ee14 2a90 	vmov	r2, s9
 801836e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018372:	3230      	adds	r2, #48	; 0x30
 8018374:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018378:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801837c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018380:	f806 2b01 	strb.w	r2, [r6], #1
 8018384:	d43b      	bmi.n	80183fe <_dtoa_r+0x566>
 8018386:	ee32 5b46 	vsub.f64	d5, d2, d6
 801838a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801838e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018392:	d472      	bmi.n	801847a <_dtoa_r+0x5e2>
 8018394:	9a04      	ldr	r2, [sp, #16]
 8018396:	1ab2      	subs	r2, r6, r2
 8018398:	4295      	cmp	r5, r2
 801839a:	f77f af68 	ble.w	801826e <_dtoa_r+0x3d6>
 801839e:	ee27 7b03 	vmul.f64	d7, d7, d3
 80183a2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80183a6:	e7de      	b.n	8018366 <_dtoa_r+0x4ce>
 80183a8:	9a04      	ldr	r2, [sp, #16]
 80183aa:	ee24 7b07 	vmul.f64	d7, d4, d7
 80183ae:	1956      	adds	r6, r2, r5
 80183b0:	4611      	mov	r1, r2
 80183b2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80183b6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80183ba:	ee14 2a90 	vmov	r2, s9
 80183be:	3230      	adds	r2, #48	; 0x30
 80183c0:	f801 2b01 	strb.w	r2, [r1], #1
 80183c4:	42b1      	cmp	r1, r6
 80183c6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80183ca:	ee36 6b45 	vsub.f64	d6, d6, d5
 80183ce:	d11a      	bne.n	8018406 <_dtoa_r+0x56e>
 80183d0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80183d4:	ee37 4b05 	vadd.f64	d4, d7, d5
 80183d8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80183dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183e0:	dc4b      	bgt.n	801847a <_dtoa_r+0x5e2>
 80183e2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80183e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80183ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183ee:	f57f af3e 	bpl.w	801826e <_dtoa_r+0x3d6>
 80183f2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80183f6:	2a30      	cmp	r2, #48	; 0x30
 80183f8:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 80183fc:	d001      	beq.n	8018402 <_dtoa_r+0x56a>
 80183fe:	469b      	mov	fp, r3
 8018400:	e02a      	b.n	8018458 <_dtoa_r+0x5c0>
 8018402:	460e      	mov	r6, r1
 8018404:	e7f5      	b.n	80183f2 <_dtoa_r+0x55a>
 8018406:	ee26 6b03 	vmul.f64	d6, d6, d3
 801840a:	e7d4      	b.n	80183b6 <_dtoa_r+0x51e>
 801840c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018410:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8018414:	9e04      	ldr	r6, [sp, #16]
 8018416:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801841a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801841e:	ee15 3a10 	vmov	r3, s10
 8018422:	3330      	adds	r3, #48	; 0x30
 8018424:	f806 3b01 	strb.w	r3, [r6], #1
 8018428:	9b04      	ldr	r3, [sp, #16]
 801842a:	1af3      	subs	r3, r6, r3
 801842c:	4599      	cmp	r9, r3
 801842e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8018432:	eea3 7b46 	vfms.f64	d7, d3, d6
 8018436:	d133      	bne.n	80184a0 <_dtoa_r+0x608>
 8018438:	ee37 7b07 	vadd.f64	d7, d7, d7
 801843c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018444:	dc18      	bgt.n	8018478 <_dtoa_r+0x5e0>
 8018446:	eeb4 7b46 	vcmp.f64	d7, d6
 801844a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801844e:	d103      	bne.n	8018458 <_dtoa_r+0x5c0>
 8018450:	ee15 3a10 	vmov	r3, s10
 8018454:	07db      	lsls	r3, r3, #31
 8018456:	d40f      	bmi.n	8018478 <_dtoa_r+0x5e0>
 8018458:	9901      	ldr	r1, [sp, #4]
 801845a:	4620      	mov	r0, r4
 801845c:	f000 fab2 	bl	80189c4 <_Bfree>
 8018460:	2300      	movs	r3, #0
 8018462:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018464:	7033      	strb	r3, [r6, #0]
 8018466:	f10b 0301 	add.w	r3, fp, #1
 801846a:	6013      	str	r3, [r2, #0]
 801846c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801846e:	2b00      	cmp	r3, #0
 8018470:	f43f ad5b 	beq.w	8017f2a <_dtoa_r+0x92>
 8018474:	601e      	str	r6, [r3, #0]
 8018476:	e558      	b.n	8017f2a <_dtoa_r+0x92>
 8018478:	465b      	mov	r3, fp
 801847a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801847e:	2939      	cmp	r1, #57	; 0x39
 8018480:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 8018484:	d106      	bne.n	8018494 <_dtoa_r+0x5fc>
 8018486:	9904      	ldr	r1, [sp, #16]
 8018488:	4291      	cmp	r1, r2
 801848a:	d107      	bne.n	801849c <_dtoa_r+0x604>
 801848c:	2230      	movs	r2, #48	; 0x30
 801848e:	700a      	strb	r2, [r1, #0]
 8018490:	3301      	adds	r3, #1
 8018492:	460a      	mov	r2, r1
 8018494:	7811      	ldrb	r1, [r2, #0]
 8018496:	3101      	adds	r1, #1
 8018498:	7011      	strb	r1, [r2, #0]
 801849a:	e7b0      	b.n	80183fe <_dtoa_r+0x566>
 801849c:	4616      	mov	r6, r2
 801849e:	e7ec      	b.n	801847a <_dtoa_r+0x5e2>
 80184a0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80184a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80184a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184ac:	d1b3      	bne.n	8018416 <_dtoa_r+0x57e>
 80184ae:	e7d3      	b.n	8018458 <_dtoa_r+0x5c0>
 80184b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184b2:	2a00      	cmp	r2, #0
 80184b4:	f000 808d 	beq.w	80185d2 <_dtoa_r+0x73a>
 80184b8:	9a08      	ldr	r2, [sp, #32]
 80184ba:	2a01      	cmp	r2, #1
 80184bc:	dc72      	bgt.n	80185a4 <_dtoa_r+0x70c>
 80184be:	2f00      	cmp	r7, #0
 80184c0:	d06c      	beq.n	801859c <_dtoa_r+0x704>
 80184c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80184c6:	4645      	mov	r5, r8
 80184c8:	4656      	mov	r6, sl
 80184ca:	9a07      	ldr	r2, [sp, #28]
 80184cc:	2101      	movs	r1, #1
 80184ce:	441a      	add	r2, r3
 80184d0:	4620      	mov	r0, r4
 80184d2:	449a      	add	sl, r3
 80184d4:	9207      	str	r2, [sp, #28]
 80184d6:	f000 fb15 	bl	8018b04 <__i2b>
 80184da:	4607      	mov	r7, r0
 80184dc:	2e00      	cmp	r6, #0
 80184de:	dd0b      	ble.n	80184f8 <_dtoa_r+0x660>
 80184e0:	9b07      	ldr	r3, [sp, #28]
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	dd08      	ble.n	80184f8 <_dtoa_r+0x660>
 80184e6:	42b3      	cmp	r3, r6
 80184e8:	9a07      	ldr	r2, [sp, #28]
 80184ea:	bfa8      	it	ge
 80184ec:	4633      	movge	r3, r6
 80184ee:	ebaa 0a03 	sub.w	sl, sl, r3
 80184f2:	1af6      	subs	r6, r6, r3
 80184f4:	1ad3      	subs	r3, r2, r3
 80184f6:	9307      	str	r3, [sp, #28]
 80184f8:	f1b8 0f00 	cmp.w	r8, #0
 80184fc:	d01d      	beq.n	801853a <_dtoa_r+0x6a2>
 80184fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018500:	2b00      	cmp	r3, #0
 8018502:	d06a      	beq.n	80185da <_dtoa_r+0x742>
 8018504:	b18d      	cbz	r5, 801852a <_dtoa_r+0x692>
 8018506:	4639      	mov	r1, r7
 8018508:	462a      	mov	r2, r5
 801850a:	4620      	mov	r0, r4
 801850c:	f000 fb9a 	bl	8018c44 <__pow5mult>
 8018510:	9a01      	ldr	r2, [sp, #4]
 8018512:	4601      	mov	r1, r0
 8018514:	4607      	mov	r7, r0
 8018516:	4620      	mov	r0, r4
 8018518:	f000 fafd 	bl	8018b16 <__multiply>
 801851c:	9901      	ldr	r1, [sp, #4]
 801851e:	900c      	str	r0, [sp, #48]	; 0x30
 8018520:	4620      	mov	r0, r4
 8018522:	f000 fa4f 	bl	80189c4 <_Bfree>
 8018526:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018528:	9301      	str	r3, [sp, #4]
 801852a:	ebb8 0205 	subs.w	r2, r8, r5
 801852e:	d004      	beq.n	801853a <_dtoa_r+0x6a2>
 8018530:	9901      	ldr	r1, [sp, #4]
 8018532:	4620      	mov	r0, r4
 8018534:	f000 fb86 	bl	8018c44 <__pow5mult>
 8018538:	9001      	str	r0, [sp, #4]
 801853a:	2101      	movs	r1, #1
 801853c:	4620      	mov	r0, r4
 801853e:	f000 fae1 	bl	8018b04 <__i2b>
 8018542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018544:	4605      	mov	r5, r0
 8018546:	2b00      	cmp	r3, #0
 8018548:	f000 81ca 	beq.w	80188e0 <_dtoa_r+0xa48>
 801854c:	461a      	mov	r2, r3
 801854e:	4601      	mov	r1, r0
 8018550:	4620      	mov	r0, r4
 8018552:	f000 fb77 	bl	8018c44 <__pow5mult>
 8018556:	9b08      	ldr	r3, [sp, #32]
 8018558:	2b01      	cmp	r3, #1
 801855a:	4605      	mov	r5, r0
 801855c:	dc44      	bgt.n	80185e8 <_dtoa_r+0x750>
 801855e:	9b02      	ldr	r3, [sp, #8]
 8018560:	2b00      	cmp	r3, #0
 8018562:	d13c      	bne.n	80185de <_dtoa_r+0x746>
 8018564:	9b03      	ldr	r3, [sp, #12]
 8018566:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801856a:	2b00      	cmp	r3, #0
 801856c:	d137      	bne.n	80185de <_dtoa_r+0x746>
 801856e:	9b03      	ldr	r3, [sp, #12]
 8018570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018574:	0d1b      	lsrs	r3, r3, #20
 8018576:	051b      	lsls	r3, r3, #20
 8018578:	2b00      	cmp	r3, #0
 801857a:	d033      	beq.n	80185e4 <_dtoa_r+0x74c>
 801857c:	9b07      	ldr	r3, [sp, #28]
 801857e:	3301      	adds	r3, #1
 8018580:	f10a 0a01 	add.w	sl, sl, #1
 8018584:	9307      	str	r3, [sp, #28]
 8018586:	f04f 0801 	mov.w	r8, #1
 801858a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801858c:	bb73      	cbnz	r3, 80185ec <_dtoa_r+0x754>
 801858e:	2001      	movs	r0, #1
 8018590:	e034      	b.n	80185fc <_dtoa_r+0x764>
 8018592:	bf00      	nop
 8018594:	0803e9b0 	.word	0x0803e9b0
 8018598:	0803e988 	.word	0x0803e988
 801859c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801859e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80185a2:	e790      	b.n	80184c6 <_dtoa_r+0x62e>
 80185a4:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 80185a8:	45a8      	cmp	r8, r5
 80185aa:	bfbf      	itttt	lt
 80185ac:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80185ae:	eba5 0808 	sublt.w	r8, r5, r8
 80185b2:	4443      	addlt	r3, r8
 80185b4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80185b6:	bfb6      	itet	lt
 80185b8:	46a8      	movlt	r8, r5
 80185ba:	eba8 0505 	subge.w	r5, r8, r5
 80185be:	2500      	movlt	r5, #0
 80185c0:	f1b9 0f00 	cmp.w	r9, #0
 80185c4:	bfb9      	ittee	lt
 80185c6:	ebaa 0609 	sublt.w	r6, sl, r9
 80185ca:	2300      	movlt	r3, #0
 80185cc:	4656      	movge	r6, sl
 80185ce:	464b      	movge	r3, r9
 80185d0:	e77b      	b.n	80184ca <_dtoa_r+0x632>
 80185d2:	4645      	mov	r5, r8
 80185d4:	4656      	mov	r6, sl
 80185d6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80185d8:	e780      	b.n	80184dc <_dtoa_r+0x644>
 80185da:	4642      	mov	r2, r8
 80185dc:	e7a8      	b.n	8018530 <_dtoa_r+0x698>
 80185de:	f04f 0800 	mov.w	r8, #0
 80185e2:	e7d2      	b.n	801858a <_dtoa_r+0x6f2>
 80185e4:	4698      	mov	r8, r3
 80185e6:	e7d0      	b.n	801858a <_dtoa_r+0x6f2>
 80185e8:	f04f 0800 	mov.w	r8, #0
 80185ec:	692b      	ldr	r3, [r5, #16]
 80185ee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80185f2:	6918      	ldr	r0, [r3, #16]
 80185f4:	f000 fa38 	bl	8018a68 <__hi0bits>
 80185f8:	f1c0 0020 	rsb	r0, r0, #32
 80185fc:	9b07      	ldr	r3, [sp, #28]
 80185fe:	4418      	add	r0, r3
 8018600:	f010 001f 	ands.w	r0, r0, #31
 8018604:	d047      	beq.n	8018696 <_dtoa_r+0x7fe>
 8018606:	f1c0 0320 	rsb	r3, r0, #32
 801860a:	2b04      	cmp	r3, #4
 801860c:	dd3b      	ble.n	8018686 <_dtoa_r+0x7ee>
 801860e:	9b07      	ldr	r3, [sp, #28]
 8018610:	f1c0 001c 	rsb	r0, r0, #28
 8018614:	4482      	add	sl, r0
 8018616:	4406      	add	r6, r0
 8018618:	4403      	add	r3, r0
 801861a:	9307      	str	r3, [sp, #28]
 801861c:	f1ba 0f00 	cmp.w	sl, #0
 8018620:	dd05      	ble.n	801862e <_dtoa_r+0x796>
 8018622:	4652      	mov	r2, sl
 8018624:	9901      	ldr	r1, [sp, #4]
 8018626:	4620      	mov	r0, r4
 8018628:	f000 fb5a 	bl	8018ce0 <__lshift>
 801862c:	9001      	str	r0, [sp, #4]
 801862e:	9b07      	ldr	r3, [sp, #28]
 8018630:	2b00      	cmp	r3, #0
 8018632:	dd05      	ble.n	8018640 <_dtoa_r+0x7a8>
 8018634:	4629      	mov	r1, r5
 8018636:	461a      	mov	r2, r3
 8018638:	4620      	mov	r0, r4
 801863a:	f000 fb51 	bl	8018ce0 <__lshift>
 801863e:	4605      	mov	r5, r0
 8018640:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018642:	b353      	cbz	r3, 801869a <_dtoa_r+0x802>
 8018644:	4629      	mov	r1, r5
 8018646:	9801      	ldr	r0, [sp, #4]
 8018648:	f000 fb9e 	bl	8018d88 <__mcmp>
 801864c:	2800      	cmp	r0, #0
 801864e:	da24      	bge.n	801869a <_dtoa_r+0x802>
 8018650:	2300      	movs	r3, #0
 8018652:	220a      	movs	r2, #10
 8018654:	9901      	ldr	r1, [sp, #4]
 8018656:	4620      	mov	r0, r4
 8018658:	f000 f9cb 	bl	80189f2 <__multadd>
 801865c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801865e:	9001      	str	r0, [sp, #4]
 8018660:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8018664:	2b00      	cmp	r3, #0
 8018666:	f000 8142 	beq.w	80188ee <_dtoa_r+0xa56>
 801866a:	2300      	movs	r3, #0
 801866c:	4639      	mov	r1, r7
 801866e:	220a      	movs	r2, #10
 8018670:	4620      	mov	r0, r4
 8018672:	f000 f9be 	bl	80189f2 <__multadd>
 8018676:	9b06      	ldr	r3, [sp, #24]
 8018678:	2b00      	cmp	r3, #0
 801867a:	4607      	mov	r7, r0
 801867c:	dc4b      	bgt.n	8018716 <_dtoa_r+0x87e>
 801867e:	9b08      	ldr	r3, [sp, #32]
 8018680:	2b02      	cmp	r3, #2
 8018682:	dd48      	ble.n	8018716 <_dtoa_r+0x87e>
 8018684:	e011      	b.n	80186aa <_dtoa_r+0x812>
 8018686:	d0c9      	beq.n	801861c <_dtoa_r+0x784>
 8018688:	9a07      	ldr	r2, [sp, #28]
 801868a:	331c      	adds	r3, #28
 801868c:	441a      	add	r2, r3
 801868e:	449a      	add	sl, r3
 8018690:	441e      	add	r6, r3
 8018692:	4613      	mov	r3, r2
 8018694:	e7c1      	b.n	801861a <_dtoa_r+0x782>
 8018696:	4603      	mov	r3, r0
 8018698:	e7f6      	b.n	8018688 <_dtoa_r+0x7f0>
 801869a:	f1b9 0f00 	cmp.w	r9, #0
 801869e:	dc34      	bgt.n	801870a <_dtoa_r+0x872>
 80186a0:	9b08      	ldr	r3, [sp, #32]
 80186a2:	2b02      	cmp	r3, #2
 80186a4:	dd31      	ble.n	801870a <_dtoa_r+0x872>
 80186a6:	f8cd 9018 	str.w	r9, [sp, #24]
 80186aa:	9b06      	ldr	r3, [sp, #24]
 80186ac:	b963      	cbnz	r3, 80186c8 <_dtoa_r+0x830>
 80186ae:	4629      	mov	r1, r5
 80186b0:	2205      	movs	r2, #5
 80186b2:	4620      	mov	r0, r4
 80186b4:	f000 f99d 	bl	80189f2 <__multadd>
 80186b8:	4601      	mov	r1, r0
 80186ba:	4605      	mov	r5, r0
 80186bc:	9801      	ldr	r0, [sp, #4]
 80186be:	f000 fb63 	bl	8018d88 <__mcmp>
 80186c2:	2800      	cmp	r0, #0
 80186c4:	f73f adfc 	bgt.w	80182c0 <_dtoa_r+0x428>
 80186c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186ca:	9e04      	ldr	r6, [sp, #16]
 80186cc:	ea6f 0b03 	mvn.w	fp, r3
 80186d0:	f04f 0900 	mov.w	r9, #0
 80186d4:	4629      	mov	r1, r5
 80186d6:	4620      	mov	r0, r4
 80186d8:	f000 f974 	bl	80189c4 <_Bfree>
 80186dc:	2f00      	cmp	r7, #0
 80186de:	f43f aebb 	beq.w	8018458 <_dtoa_r+0x5c0>
 80186e2:	f1b9 0f00 	cmp.w	r9, #0
 80186e6:	d005      	beq.n	80186f4 <_dtoa_r+0x85c>
 80186e8:	45b9      	cmp	r9, r7
 80186ea:	d003      	beq.n	80186f4 <_dtoa_r+0x85c>
 80186ec:	4649      	mov	r1, r9
 80186ee:	4620      	mov	r0, r4
 80186f0:	f000 f968 	bl	80189c4 <_Bfree>
 80186f4:	4639      	mov	r1, r7
 80186f6:	4620      	mov	r0, r4
 80186f8:	f000 f964 	bl	80189c4 <_Bfree>
 80186fc:	e6ac      	b.n	8018458 <_dtoa_r+0x5c0>
 80186fe:	2500      	movs	r5, #0
 8018700:	462f      	mov	r7, r5
 8018702:	e7e1      	b.n	80186c8 <_dtoa_r+0x830>
 8018704:	469b      	mov	fp, r3
 8018706:	462f      	mov	r7, r5
 8018708:	e5da      	b.n	80182c0 <_dtoa_r+0x428>
 801870a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801870c:	f8cd 9018 	str.w	r9, [sp, #24]
 8018710:	2b00      	cmp	r3, #0
 8018712:	f000 80f3 	beq.w	80188fc <_dtoa_r+0xa64>
 8018716:	2e00      	cmp	r6, #0
 8018718:	dd05      	ble.n	8018726 <_dtoa_r+0x88e>
 801871a:	4639      	mov	r1, r7
 801871c:	4632      	mov	r2, r6
 801871e:	4620      	mov	r0, r4
 8018720:	f000 fade 	bl	8018ce0 <__lshift>
 8018724:	4607      	mov	r7, r0
 8018726:	f1b8 0f00 	cmp.w	r8, #0
 801872a:	d04c      	beq.n	80187c6 <_dtoa_r+0x92e>
 801872c:	6879      	ldr	r1, [r7, #4]
 801872e:	4620      	mov	r0, r4
 8018730:	f000 f914 	bl	801895c <_Balloc>
 8018734:	693a      	ldr	r2, [r7, #16]
 8018736:	3202      	adds	r2, #2
 8018738:	4606      	mov	r6, r0
 801873a:	0092      	lsls	r2, r2, #2
 801873c:	f107 010c 	add.w	r1, r7, #12
 8018740:	300c      	adds	r0, #12
 8018742:	f7fe feb0 	bl	80174a6 <memcpy>
 8018746:	2201      	movs	r2, #1
 8018748:	4631      	mov	r1, r6
 801874a:	4620      	mov	r0, r4
 801874c:	f000 fac8 	bl	8018ce0 <__lshift>
 8018750:	9b02      	ldr	r3, [sp, #8]
 8018752:	f8dd a010 	ldr.w	sl, [sp, #16]
 8018756:	f003 0301 	and.w	r3, r3, #1
 801875a:	46b9      	mov	r9, r7
 801875c:	9307      	str	r3, [sp, #28]
 801875e:	4607      	mov	r7, r0
 8018760:	4629      	mov	r1, r5
 8018762:	9801      	ldr	r0, [sp, #4]
 8018764:	f7ff fb0c 	bl	8017d80 <quorem>
 8018768:	4649      	mov	r1, r9
 801876a:	4606      	mov	r6, r0
 801876c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018770:	9801      	ldr	r0, [sp, #4]
 8018772:	f000 fb09 	bl	8018d88 <__mcmp>
 8018776:	463a      	mov	r2, r7
 8018778:	9002      	str	r0, [sp, #8]
 801877a:	4629      	mov	r1, r5
 801877c:	4620      	mov	r0, r4
 801877e:	f000 fb1d 	bl	8018dbc <__mdiff>
 8018782:	68c3      	ldr	r3, [r0, #12]
 8018784:	4602      	mov	r2, r0
 8018786:	bb03      	cbnz	r3, 80187ca <_dtoa_r+0x932>
 8018788:	4601      	mov	r1, r0
 801878a:	9009      	str	r0, [sp, #36]	; 0x24
 801878c:	9801      	ldr	r0, [sp, #4]
 801878e:	f000 fafb 	bl	8018d88 <__mcmp>
 8018792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018794:	4603      	mov	r3, r0
 8018796:	4611      	mov	r1, r2
 8018798:	4620      	mov	r0, r4
 801879a:	9309      	str	r3, [sp, #36]	; 0x24
 801879c:	f000 f912 	bl	80189c4 <_Bfree>
 80187a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187a2:	b9a3      	cbnz	r3, 80187ce <_dtoa_r+0x936>
 80187a4:	9a08      	ldr	r2, [sp, #32]
 80187a6:	b992      	cbnz	r2, 80187ce <_dtoa_r+0x936>
 80187a8:	9a07      	ldr	r2, [sp, #28]
 80187aa:	b982      	cbnz	r2, 80187ce <_dtoa_r+0x936>
 80187ac:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80187b0:	d029      	beq.n	8018806 <_dtoa_r+0x96e>
 80187b2:	9b02      	ldr	r3, [sp, #8]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	dd01      	ble.n	80187bc <_dtoa_r+0x924>
 80187b8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 80187bc:	f10a 0601 	add.w	r6, sl, #1
 80187c0:	f88a 8000 	strb.w	r8, [sl]
 80187c4:	e786      	b.n	80186d4 <_dtoa_r+0x83c>
 80187c6:	4638      	mov	r0, r7
 80187c8:	e7c2      	b.n	8018750 <_dtoa_r+0x8b8>
 80187ca:	2301      	movs	r3, #1
 80187cc:	e7e3      	b.n	8018796 <_dtoa_r+0x8fe>
 80187ce:	9a02      	ldr	r2, [sp, #8]
 80187d0:	2a00      	cmp	r2, #0
 80187d2:	db04      	blt.n	80187de <_dtoa_r+0x946>
 80187d4:	d124      	bne.n	8018820 <_dtoa_r+0x988>
 80187d6:	9a08      	ldr	r2, [sp, #32]
 80187d8:	bb12      	cbnz	r2, 8018820 <_dtoa_r+0x988>
 80187da:	9a07      	ldr	r2, [sp, #28]
 80187dc:	bb02      	cbnz	r2, 8018820 <_dtoa_r+0x988>
 80187de:	2b00      	cmp	r3, #0
 80187e0:	ddec      	ble.n	80187bc <_dtoa_r+0x924>
 80187e2:	2201      	movs	r2, #1
 80187e4:	9901      	ldr	r1, [sp, #4]
 80187e6:	4620      	mov	r0, r4
 80187e8:	f000 fa7a 	bl	8018ce0 <__lshift>
 80187ec:	4629      	mov	r1, r5
 80187ee:	9001      	str	r0, [sp, #4]
 80187f0:	f000 faca 	bl	8018d88 <__mcmp>
 80187f4:	2800      	cmp	r0, #0
 80187f6:	dc03      	bgt.n	8018800 <_dtoa_r+0x968>
 80187f8:	d1e0      	bne.n	80187bc <_dtoa_r+0x924>
 80187fa:	f018 0f01 	tst.w	r8, #1
 80187fe:	d0dd      	beq.n	80187bc <_dtoa_r+0x924>
 8018800:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018804:	d1d8      	bne.n	80187b8 <_dtoa_r+0x920>
 8018806:	2339      	movs	r3, #57	; 0x39
 8018808:	f10a 0601 	add.w	r6, sl, #1
 801880c:	f88a 3000 	strb.w	r3, [sl]
 8018810:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018814:	2b39      	cmp	r3, #57	; 0x39
 8018816:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 801881a:	d04c      	beq.n	80188b6 <_dtoa_r+0xa1e>
 801881c:	3301      	adds	r3, #1
 801881e:	e051      	b.n	80188c4 <_dtoa_r+0xa2c>
 8018820:	2b00      	cmp	r3, #0
 8018822:	f10a 0601 	add.w	r6, sl, #1
 8018826:	dd05      	ble.n	8018834 <_dtoa_r+0x99c>
 8018828:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801882c:	d0eb      	beq.n	8018806 <_dtoa_r+0x96e>
 801882e:	f108 0801 	add.w	r8, r8, #1
 8018832:	e7c5      	b.n	80187c0 <_dtoa_r+0x928>
 8018834:	9b04      	ldr	r3, [sp, #16]
 8018836:	9a06      	ldr	r2, [sp, #24]
 8018838:	f806 8c01 	strb.w	r8, [r6, #-1]
 801883c:	1af3      	subs	r3, r6, r3
 801883e:	4293      	cmp	r3, r2
 8018840:	d021      	beq.n	8018886 <_dtoa_r+0x9ee>
 8018842:	2300      	movs	r3, #0
 8018844:	220a      	movs	r2, #10
 8018846:	9901      	ldr	r1, [sp, #4]
 8018848:	4620      	mov	r0, r4
 801884a:	f000 f8d2 	bl	80189f2 <__multadd>
 801884e:	45b9      	cmp	r9, r7
 8018850:	9001      	str	r0, [sp, #4]
 8018852:	f04f 0300 	mov.w	r3, #0
 8018856:	f04f 020a 	mov.w	r2, #10
 801885a:	4649      	mov	r1, r9
 801885c:	4620      	mov	r0, r4
 801885e:	d105      	bne.n	801886c <_dtoa_r+0x9d4>
 8018860:	f000 f8c7 	bl	80189f2 <__multadd>
 8018864:	4681      	mov	r9, r0
 8018866:	4607      	mov	r7, r0
 8018868:	46b2      	mov	sl, r6
 801886a:	e779      	b.n	8018760 <_dtoa_r+0x8c8>
 801886c:	f000 f8c1 	bl	80189f2 <__multadd>
 8018870:	4639      	mov	r1, r7
 8018872:	4681      	mov	r9, r0
 8018874:	2300      	movs	r3, #0
 8018876:	220a      	movs	r2, #10
 8018878:	4620      	mov	r0, r4
 801887a:	f000 f8ba 	bl	80189f2 <__multadd>
 801887e:	4607      	mov	r7, r0
 8018880:	e7f2      	b.n	8018868 <_dtoa_r+0x9d0>
 8018882:	f04f 0900 	mov.w	r9, #0
 8018886:	2201      	movs	r2, #1
 8018888:	9901      	ldr	r1, [sp, #4]
 801888a:	4620      	mov	r0, r4
 801888c:	f000 fa28 	bl	8018ce0 <__lshift>
 8018890:	4629      	mov	r1, r5
 8018892:	9001      	str	r0, [sp, #4]
 8018894:	f000 fa78 	bl	8018d88 <__mcmp>
 8018898:	2800      	cmp	r0, #0
 801889a:	dcb9      	bgt.n	8018810 <_dtoa_r+0x978>
 801889c:	d102      	bne.n	80188a4 <_dtoa_r+0xa0c>
 801889e:	f018 0f01 	tst.w	r8, #1
 80188a2:	d1b5      	bne.n	8018810 <_dtoa_r+0x978>
 80188a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80188a8:	2b30      	cmp	r3, #48	; 0x30
 80188aa:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 80188ae:	f47f af11 	bne.w	80186d4 <_dtoa_r+0x83c>
 80188b2:	4616      	mov	r6, r2
 80188b4:	e7f6      	b.n	80188a4 <_dtoa_r+0xa0c>
 80188b6:	9b04      	ldr	r3, [sp, #16]
 80188b8:	4293      	cmp	r3, r2
 80188ba:	d105      	bne.n	80188c8 <_dtoa_r+0xa30>
 80188bc:	9a04      	ldr	r2, [sp, #16]
 80188be:	f10b 0b01 	add.w	fp, fp, #1
 80188c2:	2331      	movs	r3, #49	; 0x31
 80188c4:	7013      	strb	r3, [r2, #0]
 80188c6:	e705      	b.n	80186d4 <_dtoa_r+0x83c>
 80188c8:	4616      	mov	r6, r2
 80188ca:	e7a1      	b.n	8018810 <_dtoa_r+0x978>
 80188cc:	4b16      	ldr	r3, [pc, #88]	; (8018928 <_dtoa_r+0xa90>)
 80188ce:	f7ff bb48 	b.w	8017f62 <_dtoa_r+0xca>
 80188d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	f47f ab23 	bne.w	8017f20 <_dtoa_r+0x88>
 80188da:	4b14      	ldr	r3, [pc, #80]	; (801892c <_dtoa_r+0xa94>)
 80188dc:	f7ff bb41 	b.w	8017f62 <_dtoa_r+0xca>
 80188e0:	9b08      	ldr	r3, [sp, #32]
 80188e2:	2b01      	cmp	r3, #1
 80188e4:	f77f ae3b 	ble.w	801855e <_dtoa_r+0x6c6>
 80188e8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80188ec:	e64f      	b.n	801858e <_dtoa_r+0x6f6>
 80188ee:	9b06      	ldr	r3, [sp, #24]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	dc03      	bgt.n	80188fc <_dtoa_r+0xa64>
 80188f4:	9b08      	ldr	r3, [sp, #32]
 80188f6:	2b02      	cmp	r3, #2
 80188f8:	f73f aed7 	bgt.w	80186aa <_dtoa_r+0x812>
 80188fc:	9e04      	ldr	r6, [sp, #16]
 80188fe:	9801      	ldr	r0, [sp, #4]
 8018900:	4629      	mov	r1, r5
 8018902:	f7ff fa3d 	bl	8017d80 <quorem>
 8018906:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801890a:	f806 8b01 	strb.w	r8, [r6], #1
 801890e:	9b04      	ldr	r3, [sp, #16]
 8018910:	9a06      	ldr	r2, [sp, #24]
 8018912:	1af3      	subs	r3, r6, r3
 8018914:	429a      	cmp	r2, r3
 8018916:	ddb4      	ble.n	8018882 <_dtoa_r+0x9ea>
 8018918:	2300      	movs	r3, #0
 801891a:	220a      	movs	r2, #10
 801891c:	9901      	ldr	r1, [sp, #4]
 801891e:	4620      	mov	r0, r4
 8018920:	f000 f867 	bl	80189f2 <__multadd>
 8018924:	9001      	str	r0, [sp, #4]
 8018926:	e7ea      	b.n	80188fe <_dtoa_r+0xa66>
 8018928:	0803e954 	.word	0x0803e954
 801892c:	0803e978 	.word	0x0803e978

08018930 <_localeconv_r>:
 8018930:	4b04      	ldr	r3, [pc, #16]	; (8018944 <_localeconv_r+0x14>)
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	6a18      	ldr	r0, [r3, #32]
 8018936:	4b04      	ldr	r3, [pc, #16]	; (8018948 <_localeconv_r+0x18>)
 8018938:	2800      	cmp	r0, #0
 801893a:	bf08      	it	eq
 801893c:	4618      	moveq	r0, r3
 801893e:	30f0      	adds	r0, #240	; 0xf0
 8018940:	4770      	bx	lr
 8018942:	bf00      	nop
 8018944:	20000ad8 	.word	0x20000ad8
 8018948:	20000b3c 	.word	0x20000b3c

0801894c <malloc>:
 801894c:	4b02      	ldr	r3, [pc, #8]	; (8018958 <malloc+0xc>)
 801894e:	4601      	mov	r1, r0
 8018950:	6818      	ldr	r0, [r3, #0]
 8018952:	f000 bb3b 	b.w	8018fcc <_malloc_r>
 8018956:	bf00      	nop
 8018958:	20000ad8 	.word	0x20000ad8

0801895c <_Balloc>:
 801895c:	b570      	push	{r4, r5, r6, lr}
 801895e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018960:	4604      	mov	r4, r0
 8018962:	460e      	mov	r6, r1
 8018964:	b93d      	cbnz	r5, 8018976 <_Balloc+0x1a>
 8018966:	2010      	movs	r0, #16
 8018968:	f7ff fff0 	bl	801894c <malloc>
 801896c:	6260      	str	r0, [r4, #36]	; 0x24
 801896e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018972:	6005      	str	r5, [r0, #0]
 8018974:	60c5      	str	r5, [r0, #12]
 8018976:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018978:	68eb      	ldr	r3, [r5, #12]
 801897a:	b183      	cbz	r3, 801899e <_Balloc+0x42>
 801897c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801897e:	68db      	ldr	r3, [r3, #12]
 8018980:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018984:	b9b8      	cbnz	r0, 80189b6 <_Balloc+0x5a>
 8018986:	2101      	movs	r1, #1
 8018988:	fa01 f506 	lsl.w	r5, r1, r6
 801898c:	1d6a      	adds	r2, r5, #5
 801898e:	0092      	lsls	r2, r2, #2
 8018990:	4620      	mov	r0, r4
 8018992:	f000 fabf 	bl	8018f14 <_calloc_r>
 8018996:	b160      	cbz	r0, 80189b2 <_Balloc+0x56>
 8018998:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801899c:	e00e      	b.n	80189bc <_Balloc+0x60>
 801899e:	2221      	movs	r2, #33	; 0x21
 80189a0:	2104      	movs	r1, #4
 80189a2:	4620      	mov	r0, r4
 80189a4:	f000 fab6 	bl	8018f14 <_calloc_r>
 80189a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80189aa:	60e8      	str	r0, [r5, #12]
 80189ac:	68db      	ldr	r3, [r3, #12]
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d1e4      	bne.n	801897c <_Balloc+0x20>
 80189b2:	2000      	movs	r0, #0
 80189b4:	bd70      	pop	{r4, r5, r6, pc}
 80189b6:	6802      	ldr	r2, [r0, #0]
 80189b8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80189bc:	2300      	movs	r3, #0
 80189be:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80189c2:	e7f7      	b.n	80189b4 <_Balloc+0x58>

080189c4 <_Bfree>:
 80189c4:	b570      	push	{r4, r5, r6, lr}
 80189c6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80189c8:	4606      	mov	r6, r0
 80189ca:	460d      	mov	r5, r1
 80189cc:	b93c      	cbnz	r4, 80189de <_Bfree+0x1a>
 80189ce:	2010      	movs	r0, #16
 80189d0:	f7ff ffbc 	bl	801894c <malloc>
 80189d4:	6270      	str	r0, [r6, #36]	; 0x24
 80189d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80189da:	6004      	str	r4, [r0, #0]
 80189dc:	60c4      	str	r4, [r0, #12]
 80189de:	b13d      	cbz	r5, 80189f0 <_Bfree+0x2c>
 80189e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80189e2:	686a      	ldr	r2, [r5, #4]
 80189e4:	68db      	ldr	r3, [r3, #12]
 80189e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80189ea:	6029      	str	r1, [r5, #0]
 80189ec:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80189f0:	bd70      	pop	{r4, r5, r6, pc}

080189f2 <__multadd>:
 80189f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189f6:	690d      	ldr	r5, [r1, #16]
 80189f8:	461f      	mov	r7, r3
 80189fa:	4606      	mov	r6, r0
 80189fc:	460c      	mov	r4, r1
 80189fe:	f101 0c14 	add.w	ip, r1, #20
 8018a02:	2300      	movs	r3, #0
 8018a04:	f8dc 0000 	ldr.w	r0, [ip]
 8018a08:	b281      	uxth	r1, r0
 8018a0a:	fb02 7101 	mla	r1, r2, r1, r7
 8018a0e:	0c0f      	lsrs	r7, r1, #16
 8018a10:	0c00      	lsrs	r0, r0, #16
 8018a12:	fb02 7000 	mla	r0, r2, r0, r7
 8018a16:	b289      	uxth	r1, r1
 8018a18:	3301      	adds	r3, #1
 8018a1a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018a1e:	429d      	cmp	r5, r3
 8018a20:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018a24:	f84c 1b04 	str.w	r1, [ip], #4
 8018a28:	dcec      	bgt.n	8018a04 <__multadd+0x12>
 8018a2a:	b1d7      	cbz	r7, 8018a62 <__multadd+0x70>
 8018a2c:	68a3      	ldr	r3, [r4, #8]
 8018a2e:	42ab      	cmp	r3, r5
 8018a30:	dc12      	bgt.n	8018a58 <__multadd+0x66>
 8018a32:	6861      	ldr	r1, [r4, #4]
 8018a34:	4630      	mov	r0, r6
 8018a36:	3101      	adds	r1, #1
 8018a38:	f7ff ff90 	bl	801895c <_Balloc>
 8018a3c:	6922      	ldr	r2, [r4, #16]
 8018a3e:	3202      	adds	r2, #2
 8018a40:	f104 010c 	add.w	r1, r4, #12
 8018a44:	4680      	mov	r8, r0
 8018a46:	0092      	lsls	r2, r2, #2
 8018a48:	300c      	adds	r0, #12
 8018a4a:	f7fe fd2c 	bl	80174a6 <memcpy>
 8018a4e:	4621      	mov	r1, r4
 8018a50:	4630      	mov	r0, r6
 8018a52:	f7ff ffb7 	bl	80189c4 <_Bfree>
 8018a56:	4644      	mov	r4, r8
 8018a58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018a5c:	3501      	adds	r5, #1
 8018a5e:	615f      	str	r7, [r3, #20]
 8018a60:	6125      	str	r5, [r4, #16]
 8018a62:	4620      	mov	r0, r4
 8018a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018a68 <__hi0bits>:
 8018a68:	0c02      	lsrs	r2, r0, #16
 8018a6a:	0412      	lsls	r2, r2, #16
 8018a6c:	4603      	mov	r3, r0
 8018a6e:	b9b2      	cbnz	r2, 8018a9e <__hi0bits+0x36>
 8018a70:	0403      	lsls	r3, r0, #16
 8018a72:	2010      	movs	r0, #16
 8018a74:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018a78:	bf04      	itt	eq
 8018a7a:	021b      	lsleq	r3, r3, #8
 8018a7c:	3008      	addeq	r0, #8
 8018a7e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018a82:	bf04      	itt	eq
 8018a84:	011b      	lsleq	r3, r3, #4
 8018a86:	3004      	addeq	r0, #4
 8018a88:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018a8c:	bf04      	itt	eq
 8018a8e:	009b      	lsleq	r3, r3, #2
 8018a90:	3002      	addeq	r0, #2
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	db06      	blt.n	8018aa4 <__hi0bits+0x3c>
 8018a96:	005b      	lsls	r3, r3, #1
 8018a98:	d503      	bpl.n	8018aa2 <__hi0bits+0x3a>
 8018a9a:	3001      	adds	r0, #1
 8018a9c:	4770      	bx	lr
 8018a9e:	2000      	movs	r0, #0
 8018aa0:	e7e8      	b.n	8018a74 <__hi0bits+0xc>
 8018aa2:	2020      	movs	r0, #32
 8018aa4:	4770      	bx	lr

08018aa6 <__lo0bits>:
 8018aa6:	6803      	ldr	r3, [r0, #0]
 8018aa8:	f013 0207 	ands.w	r2, r3, #7
 8018aac:	4601      	mov	r1, r0
 8018aae:	d00b      	beq.n	8018ac8 <__lo0bits+0x22>
 8018ab0:	07da      	lsls	r2, r3, #31
 8018ab2:	d423      	bmi.n	8018afc <__lo0bits+0x56>
 8018ab4:	0798      	lsls	r0, r3, #30
 8018ab6:	bf49      	itett	mi
 8018ab8:	085b      	lsrmi	r3, r3, #1
 8018aba:	089b      	lsrpl	r3, r3, #2
 8018abc:	2001      	movmi	r0, #1
 8018abe:	600b      	strmi	r3, [r1, #0]
 8018ac0:	bf5c      	itt	pl
 8018ac2:	600b      	strpl	r3, [r1, #0]
 8018ac4:	2002      	movpl	r0, #2
 8018ac6:	4770      	bx	lr
 8018ac8:	b298      	uxth	r0, r3
 8018aca:	b9a8      	cbnz	r0, 8018af8 <__lo0bits+0x52>
 8018acc:	0c1b      	lsrs	r3, r3, #16
 8018ace:	2010      	movs	r0, #16
 8018ad0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018ad4:	bf04      	itt	eq
 8018ad6:	0a1b      	lsreq	r3, r3, #8
 8018ad8:	3008      	addeq	r0, #8
 8018ada:	071a      	lsls	r2, r3, #28
 8018adc:	bf04      	itt	eq
 8018ade:	091b      	lsreq	r3, r3, #4
 8018ae0:	3004      	addeq	r0, #4
 8018ae2:	079a      	lsls	r2, r3, #30
 8018ae4:	bf04      	itt	eq
 8018ae6:	089b      	lsreq	r3, r3, #2
 8018ae8:	3002      	addeq	r0, #2
 8018aea:	07da      	lsls	r2, r3, #31
 8018aec:	d402      	bmi.n	8018af4 <__lo0bits+0x4e>
 8018aee:	085b      	lsrs	r3, r3, #1
 8018af0:	d006      	beq.n	8018b00 <__lo0bits+0x5a>
 8018af2:	3001      	adds	r0, #1
 8018af4:	600b      	str	r3, [r1, #0]
 8018af6:	4770      	bx	lr
 8018af8:	4610      	mov	r0, r2
 8018afa:	e7e9      	b.n	8018ad0 <__lo0bits+0x2a>
 8018afc:	2000      	movs	r0, #0
 8018afe:	4770      	bx	lr
 8018b00:	2020      	movs	r0, #32
 8018b02:	4770      	bx	lr

08018b04 <__i2b>:
 8018b04:	b510      	push	{r4, lr}
 8018b06:	460c      	mov	r4, r1
 8018b08:	2101      	movs	r1, #1
 8018b0a:	f7ff ff27 	bl	801895c <_Balloc>
 8018b0e:	2201      	movs	r2, #1
 8018b10:	6144      	str	r4, [r0, #20]
 8018b12:	6102      	str	r2, [r0, #16]
 8018b14:	bd10      	pop	{r4, pc}

08018b16 <__multiply>:
 8018b16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b1a:	4614      	mov	r4, r2
 8018b1c:	690a      	ldr	r2, [r1, #16]
 8018b1e:	6923      	ldr	r3, [r4, #16]
 8018b20:	429a      	cmp	r2, r3
 8018b22:	bfb8      	it	lt
 8018b24:	460b      	movlt	r3, r1
 8018b26:	4688      	mov	r8, r1
 8018b28:	bfbc      	itt	lt
 8018b2a:	46a0      	movlt	r8, r4
 8018b2c:	461c      	movlt	r4, r3
 8018b2e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018b32:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018b36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018b3a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018b3e:	eb07 0609 	add.w	r6, r7, r9
 8018b42:	42b3      	cmp	r3, r6
 8018b44:	bfb8      	it	lt
 8018b46:	3101      	addlt	r1, #1
 8018b48:	f7ff ff08 	bl	801895c <_Balloc>
 8018b4c:	f100 0514 	add.w	r5, r0, #20
 8018b50:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018b54:	462b      	mov	r3, r5
 8018b56:	2200      	movs	r2, #0
 8018b58:	4573      	cmp	r3, lr
 8018b5a:	d316      	bcc.n	8018b8a <__multiply+0x74>
 8018b5c:	f104 0214 	add.w	r2, r4, #20
 8018b60:	f108 0114 	add.w	r1, r8, #20
 8018b64:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018b68:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018b6c:	9300      	str	r3, [sp, #0]
 8018b6e:	9b00      	ldr	r3, [sp, #0]
 8018b70:	9201      	str	r2, [sp, #4]
 8018b72:	4293      	cmp	r3, r2
 8018b74:	d80c      	bhi.n	8018b90 <__multiply+0x7a>
 8018b76:	2e00      	cmp	r6, #0
 8018b78:	dd03      	ble.n	8018b82 <__multiply+0x6c>
 8018b7a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	d05d      	beq.n	8018c3e <__multiply+0x128>
 8018b82:	6106      	str	r6, [r0, #16]
 8018b84:	b003      	add	sp, #12
 8018b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b8a:	f843 2b04 	str.w	r2, [r3], #4
 8018b8e:	e7e3      	b.n	8018b58 <__multiply+0x42>
 8018b90:	f8b2 b000 	ldrh.w	fp, [r2]
 8018b94:	f1bb 0f00 	cmp.w	fp, #0
 8018b98:	d023      	beq.n	8018be2 <__multiply+0xcc>
 8018b9a:	4689      	mov	r9, r1
 8018b9c:	46ac      	mov	ip, r5
 8018b9e:	f04f 0800 	mov.w	r8, #0
 8018ba2:	f859 4b04 	ldr.w	r4, [r9], #4
 8018ba6:	f8dc a000 	ldr.w	sl, [ip]
 8018baa:	b2a3      	uxth	r3, r4
 8018bac:	fa1f fa8a 	uxth.w	sl, sl
 8018bb0:	fb0b a303 	mla	r3, fp, r3, sl
 8018bb4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018bb8:	f8dc 4000 	ldr.w	r4, [ip]
 8018bbc:	4443      	add	r3, r8
 8018bbe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018bc2:	fb0b 840a 	mla	r4, fp, sl, r8
 8018bc6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018bca:	46e2      	mov	sl, ip
 8018bcc:	b29b      	uxth	r3, r3
 8018bce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018bd2:	454f      	cmp	r7, r9
 8018bd4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018bd8:	f84a 3b04 	str.w	r3, [sl], #4
 8018bdc:	d82b      	bhi.n	8018c36 <__multiply+0x120>
 8018bde:	f8cc 8004 	str.w	r8, [ip, #4]
 8018be2:	9b01      	ldr	r3, [sp, #4]
 8018be4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018be8:	3204      	adds	r2, #4
 8018bea:	f1ba 0f00 	cmp.w	sl, #0
 8018bee:	d020      	beq.n	8018c32 <__multiply+0x11c>
 8018bf0:	682b      	ldr	r3, [r5, #0]
 8018bf2:	4689      	mov	r9, r1
 8018bf4:	46a8      	mov	r8, r5
 8018bf6:	f04f 0b00 	mov.w	fp, #0
 8018bfa:	f8b9 c000 	ldrh.w	ip, [r9]
 8018bfe:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018c02:	fb0a 440c 	mla	r4, sl, ip, r4
 8018c06:	445c      	add	r4, fp
 8018c08:	46c4      	mov	ip, r8
 8018c0a:	b29b      	uxth	r3, r3
 8018c0c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018c10:	f84c 3b04 	str.w	r3, [ip], #4
 8018c14:	f859 3b04 	ldr.w	r3, [r9], #4
 8018c18:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018c1c:	0c1b      	lsrs	r3, r3, #16
 8018c1e:	fb0a b303 	mla	r3, sl, r3, fp
 8018c22:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018c26:	454f      	cmp	r7, r9
 8018c28:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018c2c:	d805      	bhi.n	8018c3a <__multiply+0x124>
 8018c2e:	f8c8 3004 	str.w	r3, [r8, #4]
 8018c32:	3504      	adds	r5, #4
 8018c34:	e79b      	b.n	8018b6e <__multiply+0x58>
 8018c36:	46d4      	mov	ip, sl
 8018c38:	e7b3      	b.n	8018ba2 <__multiply+0x8c>
 8018c3a:	46e0      	mov	r8, ip
 8018c3c:	e7dd      	b.n	8018bfa <__multiply+0xe4>
 8018c3e:	3e01      	subs	r6, #1
 8018c40:	e799      	b.n	8018b76 <__multiply+0x60>
	...

08018c44 <__pow5mult>:
 8018c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c48:	4615      	mov	r5, r2
 8018c4a:	f012 0203 	ands.w	r2, r2, #3
 8018c4e:	4606      	mov	r6, r0
 8018c50:	460f      	mov	r7, r1
 8018c52:	d007      	beq.n	8018c64 <__pow5mult+0x20>
 8018c54:	3a01      	subs	r2, #1
 8018c56:	4c21      	ldr	r4, [pc, #132]	; (8018cdc <__pow5mult+0x98>)
 8018c58:	2300      	movs	r3, #0
 8018c5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018c5e:	f7ff fec8 	bl	80189f2 <__multadd>
 8018c62:	4607      	mov	r7, r0
 8018c64:	10ad      	asrs	r5, r5, #2
 8018c66:	d035      	beq.n	8018cd4 <__pow5mult+0x90>
 8018c68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018c6a:	b93c      	cbnz	r4, 8018c7c <__pow5mult+0x38>
 8018c6c:	2010      	movs	r0, #16
 8018c6e:	f7ff fe6d 	bl	801894c <malloc>
 8018c72:	6270      	str	r0, [r6, #36]	; 0x24
 8018c74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018c78:	6004      	str	r4, [r0, #0]
 8018c7a:	60c4      	str	r4, [r0, #12]
 8018c7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018c80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018c84:	b94c      	cbnz	r4, 8018c9a <__pow5mult+0x56>
 8018c86:	f240 2171 	movw	r1, #625	; 0x271
 8018c8a:	4630      	mov	r0, r6
 8018c8c:	f7ff ff3a 	bl	8018b04 <__i2b>
 8018c90:	2300      	movs	r3, #0
 8018c92:	f8c8 0008 	str.w	r0, [r8, #8]
 8018c96:	4604      	mov	r4, r0
 8018c98:	6003      	str	r3, [r0, #0]
 8018c9a:	f04f 0800 	mov.w	r8, #0
 8018c9e:	07eb      	lsls	r3, r5, #31
 8018ca0:	d50a      	bpl.n	8018cb8 <__pow5mult+0x74>
 8018ca2:	4639      	mov	r1, r7
 8018ca4:	4622      	mov	r2, r4
 8018ca6:	4630      	mov	r0, r6
 8018ca8:	f7ff ff35 	bl	8018b16 <__multiply>
 8018cac:	4639      	mov	r1, r7
 8018cae:	4681      	mov	r9, r0
 8018cb0:	4630      	mov	r0, r6
 8018cb2:	f7ff fe87 	bl	80189c4 <_Bfree>
 8018cb6:	464f      	mov	r7, r9
 8018cb8:	106d      	asrs	r5, r5, #1
 8018cba:	d00b      	beq.n	8018cd4 <__pow5mult+0x90>
 8018cbc:	6820      	ldr	r0, [r4, #0]
 8018cbe:	b938      	cbnz	r0, 8018cd0 <__pow5mult+0x8c>
 8018cc0:	4622      	mov	r2, r4
 8018cc2:	4621      	mov	r1, r4
 8018cc4:	4630      	mov	r0, r6
 8018cc6:	f7ff ff26 	bl	8018b16 <__multiply>
 8018cca:	6020      	str	r0, [r4, #0]
 8018ccc:	f8c0 8000 	str.w	r8, [r0]
 8018cd0:	4604      	mov	r4, r0
 8018cd2:	e7e4      	b.n	8018c9e <__pow5mult+0x5a>
 8018cd4:	4638      	mov	r0, r7
 8018cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018cda:	bf00      	nop
 8018cdc:	0803ea78 	.word	0x0803ea78

08018ce0 <__lshift>:
 8018ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ce4:	460c      	mov	r4, r1
 8018ce6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018cea:	6923      	ldr	r3, [r4, #16]
 8018cec:	6849      	ldr	r1, [r1, #4]
 8018cee:	eb0a 0903 	add.w	r9, sl, r3
 8018cf2:	68a3      	ldr	r3, [r4, #8]
 8018cf4:	4607      	mov	r7, r0
 8018cf6:	4616      	mov	r6, r2
 8018cf8:	f109 0501 	add.w	r5, r9, #1
 8018cfc:	42ab      	cmp	r3, r5
 8018cfe:	db32      	blt.n	8018d66 <__lshift+0x86>
 8018d00:	4638      	mov	r0, r7
 8018d02:	f7ff fe2b 	bl	801895c <_Balloc>
 8018d06:	2300      	movs	r3, #0
 8018d08:	4680      	mov	r8, r0
 8018d0a:	f100 0114 	add.w	r1, r0, #20
 8018d0e:	461a      	mov	r2, r3
 8018d10:	4553      	cmp	r3, sl
 8018d12:	db2b      	blt.n	8018d6c <__lshift+0x8c>
 8018d14:	6920      	ldr	r0, [r4, #16]
 8018d16:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018d1a:	f104 0314 	add.w	r3, r4, #20
 8018d1e:	f016 021f 	ands.w	r2, r6, #31
 8018d22:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018d26:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018d2a:	d025      	beq.n	8018d78 <__lshift+0x98>
 8018d2c:	f1c2 0e20 	rsb	lr, r2, #32
 8018d30:	2000      	movs	r0, #0
 8018d32:	681e      	ldr	r6, [r3, #0]
 8018d34:	468a      	mov	sl, r1
 8018d36:	4096      	lsls	r6, r2
 8018d38:	4330      	orrs	r0, r6
 8018d3a:	f84a 0b04 	str.w	r0, [sl], #4
 8018d3e:	f853 0b04 	ldr.w	r0, [r3], #4
 8018d42:	459c      	cmp	ip, r3
 8018d44:	fa20 f00e 	lsr.w	r0, r0, lr
 8018d48:	d814      	bhi.n	8018d74 <__lshift+0x94>
 8018d4a:	6048      	str	r0, [r1, #4]
 8018d4c:	b108      	cbz	r0, 8018d52 <__lshift+0x72>
 8018d4e:	f109 0502 	add.w	r5, r9, #2
 8018d52:	3d01      	subs	r5, #1
 8018d54:	4638      	mov	r0, r7
 8018d56:	f8c8 5010 	str.w	r5, [r8, #16]
 8018d5a:	4621      	mov	r1, r4
 8018d5c:	f7ff fe32 	bl	80189c4 <_Bfree>
 8018d60:	4640      	mov	r0, r8
 8018d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d66:	3101      	adds	r1, #1
 8018d68:	005b      	lsls	r3, r3, #1
 8018d6a:	e7c7      	b.n	8018cfc <__lshift+0x1c>
 8018d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018d70:	3301      	adds	r3, #1
 8018d72:	e7cd      	b.n	8018d10 <__lshift+0x30>
 8018d74:	4651      	mov	r1, sl
 8018d76:	e7dc      	b.n	8018d32 <__lshift+0x52>
 8018d78:	3904      	subs	r1, #4
 8018d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d7e:	f841 2f04 	str.w	r2, [r1, #4]!
 8018d82:	459c      	cmp	ip, r3
 8018d84:	d8f9      	bhi.n	8018d7a <__lshift+0x9a>
 8018d86:	e7e4      	b.n	8018d52 <__lshift+0x72>

08018d88 <__mcmp>:
 8018d88:	6903      	ldr	r3, [r0, #16]
 8018d8a:	690a      	ldr	r2, [r1, #16]
 8018d8c:	1a9b      	subs	r3, r3, r2
 8018d8e:	b530      	push	{r4, r5, lr}
 8018d90:	d10c      	bne.n	8018dac <__mcmp+0x24>
 8018d92:	0092      	lsls	r2, r2, #2
 8018d94:	3014      	adds	r0, #20
 8018d96:	3114      	adds	r1, #20
 8018d98:	1884      	adds	r4, r0, r2
 8018d9a:	4411      	add	r1, r2
 8018d9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018da0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018da4:	4295      	cmp	r5, r2
 8018da6:	d003      	beq.n	8018db0 <__mcmp+0x28>
 8018da8:	d305      	bcc.n	8018db6 <__mcmp+0x2e>
 8018daa:	2301      	movs	r3, #1
 8018dac:	4618      	mov	r0, r3
 8018dae:	bd30      	pop	{r4, r5, pc}
 8018db0:	42a0      	cmp	r0, r4
 8018db2:	d3f3      	bcc.n	8018d9c <__mcmp+0x14>
 8018db4:	e7fa      	b.n	8018dac <__mcmp+0x24>
 8018db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018dba:	e7f7      	b.n	8018dac <__mcmp+0x24>

08018dbc <__mdiff>:
 8018dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018dc0:	460d      	mov	r5, r1
 8018dc2:	4607      	mov	r7, r0
 8018dc4:	4611      	mov	r1, r2
 8018dc6:	4628      	mov	r0, r5
 8018dc8:	4614      	mov	r4, r2
 8018dca:	f7ff ffdd 	bl	8018d88 <__mcmp>
 8018dce:	1e06      	subs	r6, r0, #0
 8018dd0:	d108      	bne.n	8018de4 <__mdiff+0x28>
 8018dd2:	4631      	mov	r1, r6
 8018dd4:	4638      	mov	r0, r7
 8018dd6:	f7ff fdc1 	bl	801895c <_Balloc>
 8018dda:	2301      	movs	r3, #1
 8018ddc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018de4:	bfa4      	itt	ge
 8018de6:	4623      	movge	r3, r4
 8018de8:	462c      	movge	r4, r5
 8018dea:	4638      	mov	r0, r7
 8018dec:	6861      	ldr	r1, [r4, #4]
 8018dee:	bfa6      	itte	ge
 8018df0:	461d      	movge	r5, r3
 8018df2:	2600      	movge	r6, #0
 8018df4:	2601      	movlt	r6, #1
 8018df6:	f7ff fdb1 	bl	801895c <_Balloc>
 8018dfa:	692b      	ldr	r3, [r5, #16]
 8018dfc:	60c6      	str	r6, [r0, #12]
 8018dfe:	6926      	ldr	r6, [r4, #16]
 8018e00:	f105 0914 	add.w	r9, r5, #20
 8018e04:	f104 0214 	add.w	r2, r4, #20
 8018e08:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018e0c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018e10:	f100 0514 	add.w	r5, r0, #20
 8018e14:	f04f 0e00 	mov.w	lr, #0
 8018e18:	f852 ab04 	ldr.w	sl, [r2], #4
 8018e1c:	f859 4b04 	ldr.w	r4, [r9], #4
 8018e20:	fa1e f18a 	uxtah	r1, lr, sl
 8018e24:	b2a3      	uxth	r3, r4
 8018e26:	1ac9      	subs	r1, r1, r3
 8018e28:	0c23      	lsrs	r3, r4, #16
 8018e2a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018e2e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018e32:	b289      	uxth	r1, r1
 8018e34:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018e38:	45c8      	cmp	r8, r9
 8018e3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018e3e:	4694      	mov	ip, r2
 8018e40:	f845 3b04 	str.w	r3, [r5], #4
 8018e44:	d8e8      	bhi.n	8018e18 <__mdiff+0x5c>
 8018e46:	45bc      	cmp	ip, r7
 8018e48:	d304      	bcc.n	8018e54 <__mdiff+0x98>
 8018e4a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018e4e:	b183      	cbz	r3, 8018e72 <__mdiff+0xb6>
 8018e50:	6106      	str	r6, [r0, #16]
 8018e52:	e7c5      	b.n	8018de0 <__mdiff+0x24>
 8018e54:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018e58:	fa1e f381 	uxtah	r3, lr, r1
 8018e5c:	141a      	asrs	r2, r3, #16
 8018e5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018e62:	b29b      	uxth	r3, r3
 8018e64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018e68:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018e6c:	f845 3b04 	str.w	r3, [r5], #4
 8018e70:	e7e9      	b.n	8018e46 <__mdiff+0x8a>
 8018e72:	3e01      	subs	r6, #1
 8018e74:	e7e9      	b.n	8018e4a <__mdiff+0x8e>

08018e76 <__d2b>:
 8018e76:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018e7a:	460e      	mov	r6, r1
 8018e7c:	2101      	movs	r1, #1
 8018e7e:	ec59 8b10 	vmov	r8, r9, d0
 8018e82:	4615      	mov	r5, r2
 8018e84:	f7ff fd6a 	bl	801895c <_Balloc>
 8018e88:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018e8c:	4607      	mov	r7, r0
 8018e8e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018e92:	bb34      	cbnz	r4, 8018ee2 <__d2b+0x6c>
 8018e94:	9301      	str	r3, [sp, #4]
 8018e96:	f1b8 0300 	subs.w	r3, r8, #0
 8018e9a:	d027      	beq.n	8018eec <__d2b+0x76>
 8018e9c:	a802      	add	r0, sp, #8
 8018e9e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018ea2:	f7ff fe00 	bl	8018aa6 <__lo0bits>
 8018ea6:	9900      	ldr	r1, [sp, #0]
 8018ea8:	b1f0      	cbz	r0, 8018ee8 <__d2b+0x72>
 8018eaa:	9a01      	ldr	r2, [sp, #4]
 8018eac:	f1c0 0320 	rsb	r3, r0, #32
 8018eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8018eb4:	430b      	orrs	r3, r1
 8018eb6:	40c2      	lsrs	r2, r0
 8018eb8:	617b      	str	r3, [r7, #20]
 8018eba:	9201      	str	r2, [sp, #4]
 8018ebc:	9b01      	ldr	r3, [sp, #4]
 8018ebe:	61bb      	str	r3, [r7, #24]
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	bf14      	ite	ne
 8018ec4:	2102      	movne	r1, #2
 8018ec6:	2101      	moveq	r1, #1
 8018ec8:	6139      	str	r1, [r7, #16]
 8018eca:	b1c4      	cbz	r4, 8018efe <__d2b+0x88>
 8018ecc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018ed0:	4404      	add	r4, r0
 8018ed2:	6034      	str	r4, [r6, #0]
 8018ed4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018ed8:	6028      	str	r0, [r5, #0]
 8018eda:	4638      	mov	r0, r7
 8018edc:	b003      	add	sp, #12
 8018ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018ee6:	e7d5      	b.n	8018e94 <__d2b+0x1e>
 8018ee8:	6179      	str	r1, [r7, #20]
 8018eea:	e7e7      	b.n	8018ebc <__d2b+0x46>
 8018eec:	a801      	add	r0, sp, #4
 8018eee:	f7ff fdda 	bl	8018aa6 <__lo0bits>
 8018ef2:	9b01      	ldr	r3, [sp, #4]
 8018ef4:	617b      	str	r3, [r7, #20]
 8018ef6:	2101      	movs	r1, #1
 8018ef8:	6139      	str	r1, [r7, #16]
 8018efa:	3020      	adds	r0, #32
 8018efc:	e7e5      	b.n	8018eca <__d2b+0x54>
 8018efe:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018f02:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018f06:	6030      	str	r0, [r6, #0]
 8018f08:	6918      	ldr	r0, [r3, #16]
 8018f0a:	f7ff fdad 	bl	8018a68 <__hi0bits>
 8018f0e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018f12:	e7e1      	b.n	8018ed8 <__d2b+0x62>

08018f14 <_calloc_r>:
 8018f14:	b538      	push	{r3, r4, r5, lr}
 8018f16:	fb02 f401 	mul.w	r4, r2, r1
 8018f1a:	4621      	mov	r1, r4
 8018f1c:	f000 f856 	bl	8018fcc <_malloc_r>
 8018f20:	4605      	mov	r5, r0
 8018f22:	b118      	cbz	r0, 8018f2c <_calloc_r+0x18>
 8018f24:	4622      	mov	r2, r4
 8018f26:	2100      	movs	r1, #0
 8018f28:	f7fe fac8 	bl	80174bc <memset>
 8018f2c:	4628      	mov	r0, r5
 8018f2e:	bd38      	pop	{r3, r4, r5, pc}

08018f30 <_free_r>:
 8018f30:	b538      	push	{r3, r4, r5, lr}
 8018f32:	4605      	mov	r5, r0
 8018f34:	2900      	cmp	r1, #0
 8018f36:	d045      	beq.n	8018fc4 <_free_r+0x94>
 8018f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018f3c:	1f0c      	subs	r4, r1, #4
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	bfb8      	it	lt
 8018f42:	18e4      	addlt	r4, r4, r3
 8018f44:	f000 fa29 	bl	801939a <__malloc_lock>
 8018f48:	4a1f      	ldr	r2, [pc, #124]	; (8018fc8 <_free_r+0x98>)
 8018f4a:	6813      	ldr	r3, [r2, #0]
 8018f4c:	4610      	mov	r0, r2
 8018f4e:	b933      	cbnz	r3, 8018f5e <_free_r+0x2e>
 8018f50:	6063      	str	r3, [r4, #4]
 8018f52:	6014      	str	r4, [r2, #0]
 8018f54:	4628      	mov	r0, r5
 8018f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018f5a:	f000 ba1f 	b.w	801939c <__malloc_unlock>
 8018f5e:	42a3      	cmp	r3, r4
 8018f60:	d90c      	bls.n	8018f7c <_free_r+0x4c>
 8018f62:	6821      	ldr	r1, [r4, #0]
 8018f64:	1862      	adds	r2, r4, r1
 8018f66:	4293      	cmp	r3, r2
 8018f68:	bf04      	itt	eq
 8018f6a:	681a      	ldreq	r2, [r3, #0]
 8018f6c:	685b      	ldreq	r3, [r3, #4]
 8018f6e:	6063      	str	r3, [r4, #4]
 8018f70:	bf04      	itt	eq
 8018f72:	1852      	addeq	r2, r2, r1
 8018f74:	6022      	streq	r2, [r4, #0]
 8018f76:	6004      	str	r4, [r0, #0]
 8018f78:	e7ec      	b.n	8018f54 <_free_r+0x24>
 8018f7a:	4613      	mov	r3, r2
 8018f7c:	685a      	ldr	r2, [r3, #4]
 8018f7e:	b10a      	cbz	r2, 8018f84 <_free_r+0x54>
 8018f80:	42a2      	cmp	r2, r4
 8018f82:	d9fa      	bls.n	8018f7a <_free_r+0x4a>
 8018f84:	6819      	ldr	r1, [r3, #0]
 8018f86:	1858      	adds	r0, r3, r1
 8018f88:	42a0      	cmp	r0, r4
 8018f8a:	d10b      	bne.n	8018fa4 <_free_r+0x74>
 8018f8c:	6820      	ldr	r0, [r4, #0]
 8018f8e:	4401      	add	r1, r0
 8018f90:	1858      	adds	r0, r3, r1
 8018f92:	4282      	cmp	r2, r0
 8018f94:	6019      	str	r1, [r3, #0]
 8018f96:	d1dd      	bne.n	8018f54 <_free_r+0x24>
 8018f98:	6810      	ldr	r0, [r2, #0]
 8018f9a:	6852      	ldr	r2, [r2, #4]
 8018f9c:	605a      	str	r2, [r3, #4]
 8018f9e:	4401      	add	r1, r0
 8018fa0:	6019      	str	r1, [r3, #0]
 8018fa2:	e7d7      	b.n	8018f54 <_free_r+0x24>
 8018fa4:	d902      	bls.n	8018fac <_free_r+0x7c>
 8018fa6:	230c      	movs	r3, #12
 8018fa8:	602b      	str	r3, [r5, #0]
 8018faa:	e7d3      	b.n	8018f54 <_free_r+0x24>
 8018fac:	6820      	ldr	r0, [r4, #0]
 8018fae:	1821      	adds	r1, r4, r0
 8018fb0:	428a      	cmp	r2, r1
 8018fb2:	bf04      	itt	eq
 8018fb4:	6811      	ldreq	r1, [r2, #0]
 8018fb6:	6852      	ldreq	r2, [r2, #4]
 8018fb8:	6062      	str	r2, [r4, #4]
 8018fba:	bf04      	itt	eq
 8018fbc:	1809      	addeq	r1, r1, r0
 8018fbe:	6021      	streq	r1, [r4, #0]
 8018fc0:	605c      	str	r4, [r3, #4]
 8018fc2:	e7c7      	b.n	8018f54 <_free_r+0x24>
 8018fc4:	bd38      	pop	{r3, r4, r5, pc}
 8018fc6:	bf00      	nop
 8018fc8:	2002a9fc 	.word	0x2002a9fc

08018fcc <_malloc_r>:
 8018fcc:	b570      	push	{r4, r5, r6, lr}
 8018fce:	1ccd      	adds	r5, r1, #3
 8018fd0:	f025 0503 	bic.w	r5, r5, #3
 8018fd4:	3508      	adds	r5, #8
 8018fd6:	2d0c      	cmp	r5, #12
 8018fd8:	bf38      	it	cc
 8018fda:	250c      	movcc	r5, #12
 8018fdc:	2d00      	cmp	r5, #0
 8018fde:	4606      	mov	r6, r0
 8018fe0:	db01      	blt.n	8018fe6 <_malloc_r+0x1a>
 8018fe2:	42a9      	cmp	r1, r5
 8018fe4:	d903      	bls.n	8018fee <_malloc_r+0x22>
 8018fe6:	230c      	movs	r3, #12
 8018fe8:	6033      	str	r3, [r6, #0]
 8018fea:	2000      	movs	r0, #0
 8018fec:	bd70      	pop	{r4, r5, r6, pc}
 8018fee:	f000 f9d4 	bl	801939a <__malloc_lock>
 8018ff2:	4a21      	ldr	r2, [pc, #132]	; (8019078 <_malloc_r+0xac>)
 8018ff4:	6814      	ldr	r4, [r2, #0]
 8018ff6:	4621      	mov	r1, r4
 8018ff8:	b991      	cbnz	r1, 8019020 <_malloc_r+0x54>
 8018ffa:	4c20      	ldr	r4, [pc, #128]	; (801907c <_malloc_r+0xb0>)
 8018ffc:	6823      	ldr	r3, [r4, #0]
 8018ffe:	b91b      	cbnz	r3, 8019008 <_malloc_r+0x3c>
 8019000:	4630      	mov	r0, r6
 8019002:	f000 f98f 	bl	8019324 <_sbrk_r>
 8019006:	6020      	str	r0, [r4, #0]
 8019008:	4629      	mov	r1, r5
 801900a:	4630      	mov	r0, r6
 801900c:	f000 f98a 	bl	8019324 <_sbrk_r>
 8019010:	1c43      	adds	r3, r0, #1
 8019012:	d124      	bne.n	801905e <_malloc_r+0x92>
 8019014:	230c      	movs	r3, #12
 8019016:	6033      	str	r3, [r6, #0]
 8019018:	4630      	mov	r0, r6
 801901a:	f000 f9bf 	bl	801939c <__malloc_unlock>
 801901e:	e7e4      	b.n	8018fea <_malloc_r+0x1e>
 8019020:	680b      	ldr	r3, [r1, #0]
 8019022:	1b5b      	subs	r3, r3, r5
 8019024:	d418      	bmi.n	8019058 <_malloc_r+0x8c>
 8019026:	2b0b      	cmp	r3, #11
 8019028:	d90f      	bls.n	801904a <_malloc_r+0x7e>
 801902a:	600b      	str	r3, [r1, #0]
 801902c:	50cd      	str	r5, [r1, r3]
 801902e:	18cc      	adds	r4, r1, r3
 8019030:	4630      	mov	r0, r6
 8019032:	f000 f9b3 	bl	801939c <__malloc_unlock>
 8019036:	f104 000b 	add.w	r0, r4, #11
 801903a:	1d23      	adds	r3, r4, #4
 801903c:	f020 0007 	bic.w	r0, r0, #7
 8019040:	1ac3      	subs	r3, r0, r3
 8019042:	d0d3      	beq.n	8018fec <_malloc_r+0x20>
 8019044:	425a      	negs	r2, r3
 8019046:	50e2      	str	r2, [r4, r3]
 8019048:	e7d0      	b.n	8018fec <_malloc_r+0x20>
 801904a:	428c      	cmp	r4, r1
 801904c:	684b      	ldr	r3, [r1, #4]
 801904e:	bf16      	itet	ne
 8019050:	6063      	strne	r3, [r4, #4]
 8019052:	6013      	streq	r3, [r2, #0]
 8019054:	460c      	movne	r4, r1
 8019056:	e7eb      	b.n	8019030 <_malloc_r+0x64>
 8019058:	460c      	mov	r4, r1
 801905a:	6849      	ldr	r1, [r1, #4]
 801905c:	e7cc      	b.n	8018ff8 <_malloc_r+0x2c>
 801905e:	1cc4      	adds	r4, r0, #3
 8019060:	f024 0403 	bic.w	r4, r4, #3
 8019064:	42a0      	cmp	r0, r4
 8019066:	d005      	beq.n	8019074 <_malloc_r+0xa8>
 8019068:	1a21      	subs	r1, r4, r0
 801906a:	4630      	mov	r0, r6
 801906c:	f000 f95a 	bl	8019324 <_sbrk_r>
 8019070:	3001      	adds	r0, #1
 8019072:	d0cf      	beq.n	8019014 <_malloc_r+0x48>
 8019074:	6025      	str	r5, [r4, #0]
 8019076:	e7db      	b.n	8019030 <_malloc_r+0x64>
 8019078:	2002a9fc 	.word	0x2002a9fc
 801907c:	2002aa00 	.word	0x2002aa00

08019080 <__ssputs_r>:
 8019080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019084:	688e      	ldr	r6, [r1, #8]
 8019086:	429e      	cmp	r6, r3
 8019088:	4682      	mov	sl, r0
 801908a:	460c      	mov	r4, r1
 801908c:	4690      	mov	r8, r2
 801908e:	4699      	mov	r9, r3
 8019090:	d837      	bhi.n	8019102 <__ssputs_r+0x82>
 8019092:	898a      	ldrh	r2, [r1, #12]
 8019094:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019098:	d031      	beq.n	80190fe <__ssputs_r+0x7e>
 801909a:	6825      	ldr	r5, [r4, #0]
 801909c:	6909      	ldr	r1, [r1, #16]
 801909e:	1a6f      	subs	r7, r5, r1
 80190a0:	6965      	ldr	r5, [r4, #20]
 80190a2:	2302      	movs	r3, #2
 80190a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80190a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80190ac:	f109 0301 	add.w	r3, r9, #1
 80190b0:	443b      	add	r3, r7
 80190b2:	429d      	cmp	r5, r3
 80190b4:	bf38      	it	cc
 80190b6:	461d      	movcc	r5, r3
 80190b8:	0553      	lsls	r3, r2, #21
 80190ba:	d530      	bpl.n	801911e <__ssputs_r+0x9e>
 80190bc:	4629      	mov	r1, r5
 80190be:	f7ff ff85 	bl	8018fcc <_malloc_r>
 80190c2:	4606      	mov	r6, r0
 80190c4:	b950      	cbnz	r0, 80190dc <__ssputs_r+0x5c>
 80190c6:	230c      	movs	r3, #12
 80190c8:	f8ca 3000 	str.w	r3, [sl]
 80190cc:	89a3      	ldrh	r3, [r4, #12]
 80190ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80190d2:	81a3      	strh	r3, [r4, #12]
 80190d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80190d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190dc:	463a      	mov	r2, r7
 80190de:	6921      	ldr	r1, [r4, #16]
 80190e0:	f7fe f9e1 	bl	80174a6 <memcpy>
 80190e4:	89a3      	ldrh	r3, [r4, #12]
 80190e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80190ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80190ee:	81a3      	strh	r3, [r4, #12]
 80190f0:	6126      	str	r6, [r4, #16]
 80190f2:	6165      	str	r5, [r4, #20]
 80190f4:	443e      	add	r6, r7
 80190f6:	1bed      	subs	r5, r5, r7
 80190f8:	6026      	str	r6, [r4, #0]
 80190fa:	60a5      	str	r5, [r4, #8]
 80190fc:	464e      	mov	r6, r9
 80190fe:	454e      	cmp	r6, r9
 8019100:	d900      	bls.n	8019104 <__ssputs_r+0x84>
 8019102:	464e      	mov	r6, r9
 8019104:	4632      	mov	r2, r6
 8019106:	4641      	mov	r1, r8
 8019108:	6820      	ldr	r0, [r4, #0]
 801910a:	f000 f92d 	bl	8019368 <memmove>
 801910e:	68a3      	ldr	r3, [r4, #8]
 8019110:	1b9b      	subs	r3, r3, r6
 8019112:	60a3      	str	r3, [r4, #8]
 8019114:	6823      	ldr	r3, [r4, #0]
 8019116:	441e      	add	r6, r3
 8019118:	6026      	str	r6, [r4, #0]
 801911a:	2000      	movs	r0, #0
 801911c:	e7dc      	b.n	80190d8 <__ssputs_r+0x58>
 801911e:	462a      	mov	r2, r5
 8019120:	f000 f93d 	bl	801939e <_realloc_r>
 8019124:	4606      	mov	r6, r0
 8019126:	2800      	cmp	r0, #0
 8019128:	d1e2      	bne.n	80190f0 <__ssputs_r+0x70>
 801912a:	6921      	ldr	r1, [r4, #16]
 801912c:	4650      	mov	r0, sl
 801912e:	f7ff feff 	bl	8018f30 <_free_r>
 8019132:	e7c8      	b.n	80190c6 <__ssputs_r+0x46>

08019134 <_svfiprintf_r>:
 8019134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019138:	461d      	mov	r5, r3
 801913a:	898b      	ldrh	r3, [r1, #12]
 801913c:	061f      	lsls	r7, r3, #24
 801913e:	b09d      	sub	sp, #116	; 0x74
 8019140:	4680      	mov	r8, r0
 8019142:	460c      	mov	r4, r1
 8019144:	4616      	mov	r6, r2
 8019146:	d50f      	bpl.n	8019168 <_svfiprintf_r+0x34>
 8019148:	690b      	ldr	r3, [r1, #16]
 801914a:	b96b      	cbnz	r3, 8019168 <_svfiprintf_r+0x34>
 801914c:	2140      	movs	r1, #64	; 0x40
 801914e:	f7ff ff3d 	bl	8018fcc <_malloc_r>
 8019152:	6020      	str	r0, [r4, #0]
 8019154:	6120      	str	r0, [r4, #16]
 8019156:	b928      	cbnz	r0, 8019164 <_svfiprintf_r+0x30>
 8019158:	230c      	movs	r3, #12
 801915a:	f8c8 3000 	str.w	r3, [r8]
 801915e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019162:	e0c8      	b.n	80192f6 <_svfiprintf_r+0x1c2>
 8019164:	2340      	movs	r3, #64	; 0x40
 8019166:	6163      	str	r3, [r4, #20]
 8019168:	2300      	movs	r3, #0
 801916a:	9309      	str	r3, [sp, #36]	; 0x24
 801916c:	2320      	movs	r3, #32
 801916e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019172:	2330      	movs	r3, #48	; 0x30
 8019174:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019178:	9503      	str	r5, [sp, #12]
 801917a:	f04f 0b01 	mov.w	fp, #1
 801917e:	4637      	mov	r7, r6
 8019180:	463d      	mov	r5, r7
 8019182:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019186:	b10b      	cbz	r3, 801918c <_svfiprintf_r+0x58>
 8019188:	2b25      	cmp	r3, #37	; 0x25
 801918a:	d13e      	bne.n	801920a <_svfiprintf_r+0xd6>
 801918c:	ebb7 0a06 	subs.w	sl, r7, r6
 8019190:	d00b      	beq.n	80191aa <_svfiprintf_r+0x76>
 8019192:	4653      	mov	r3, sl
 8019194:	4632      	mov	r2, r6
 8019196:	4621      	mov	r1, r4
 8019198:	4640      	mov	r0, r8
 801919a:	f7ff ff71 	bl	8019080 <__ssputs_r>
 801919e:	3001      	adds	r0, #1
 80191a0:	f000 80a4 	beq.w	80192ec <_svfiprintf_r+0x1b8>
 80191a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191a6:	4453      	add	r3, sl
 80191a8:	9309      	str	r3, [sp, #36]	; 0x24
 80191aa:	783b      	ldrb	r3, [r7, #0]
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	f000 809d 	beq.w	80192ec <_svfiprintf_r+0x1b8>
 80191b2:	2300      	movs	r3, #0
 80191b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80191b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80191bc:	9304      	str	r3, [sp, #16]
 80191be:	9307      	str	r3, [sp, #28]
 80191c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80191c4:	931a      	str	r3, [sp, #104]	; 0x68
 80191c6:	462f      	mov	r7, r5
 80191c8:	2205      	movs	r2, #5
 80191ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80191ce:	4850      	ldr	r0, [pc, #320]	; (8019310 <_svfiprintf_r+0x1dc>)
 80191d0:	f7ed fc76 	bl	8006ac0 <memchr>
 80191d4:	9b04      	ldr	r3, [sp, #16]
 80191d6:	b9d0      	cbnz	r0, 801920e <_svfiprintf_r+0xda>
 80191d8:	06d9      	lsls	r1, r3, #27
 80191da:	bf44      	itt	mi
 80191dc:	2220      	movmi	r2, #32
 80191de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80191e2:	071a      	lsls	r2, r3, #28
 80191e4:	bf44      	itt	mi
 80191e6:	222b      	movmi	r2, #43	; 0x2b
 80191e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80191ec:	782a      	ldrb	r2, [r5, #0]
 80191ee:	2a2a      	cmp	r2, #42	; 0x2a
 80191f0:	d015      	beq.n	801921e <_svfiprintf_r+0xea>
 80191f2:	9a07      	ldr	r2, [sp, #28]
 80191f4:	462f      	mov	r7, r5
 80191f6:	2000      	movs	r0, #0
 80191f8:	250a      	movs	r5, #10
 80191fa:	4639      	mov	r1, r7
 80191fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019200:	3b30      	subs	r3, #48	; 0x30
 8019202:	2b09      	cmp	r3, #9
 8019204:	d94d      	bls.n	80192a2 <_svfiprintf_r+0x16e>
 8019206:	b1b8      	cbz	r0, 8019238 <_svfiprintf_r+0x104>
 8019208:	e00f      	b.n	801922a <_svfiprintf_r+0xf6>
 801920a:	462f      	mov	r7, r5
 801920c:	e7b8      	b.n	8019180 <_svfiprintf_r+0x4c>
 801920e:	4a40      	ldr	r2, [pc, #256]	; (8019310 <_svfiprintf_r+0x1dc>)
 8019210:	1a80      	subs	r0, r0, r2
 8019212:	fa0b f000 	lsl.w	r0, fp, r0
 8019216:	4318      	orrs	r0, r3
 8019218:	9004      	str	r0, [sp, #16]
 801921a:	463d      	mov	r5, r7
 801921c:	e7d3      	b.n	80191c6 <_svfiprintf_r+0x92>
 801921e:	9a03      	ldr	r2, [sp, #12]
 8019220:	1d11      	adds	r1, r2, #4
 8019222:	6812      	ldr	r2, [r2, #0]
 8019224:	9103      	str	r1, [sp, #12]
 8019226:	2a00      	cmp	r2, #0
 8019228:	db01      	blt.n	801922e <_svfiprintf_r+0xfa>
 801922a:	9207      	str	r2, [sp, #28]
 801922c:	e004      	b.n	8019238 <_svfiprintf_r+0x104>
 801922e:	4252      	negs	r2, r2
 8019230:	f043 0302 	orr.w	r3, r3, #2
 8019234:	9207      	str	r2, [sp, #28]
 8019236:	9304      	str	r3, [sp, #16]
 8019238:	783b      	ldrb	r3, [r7, #0]
 801923a:	2b2e      	cmp	r3, #46	; 0x2e
 801923c:	d10c      	bne.n	8019258 <_svfiprintf_r+0x124>
 801923e:	787b      	ldrb	r3, [r7, #1]
 8019240:	2b2a      	cmp	r3, #42	; 0x2a
 8019242:	d133      	bne.n	80192ac <_svfiprintf_r+0x178>
 8019244:	9b03      	ldr	r3, [sp, #12]
 8019246:	1d1a      	adds	r2, r3, #4
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	9203      	str	r2, [sp, #12]
 801924c:	2b00      	cmp	r3, #0
 801924e:	bfb8      	it	lt
 8019250:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019254:	3702      	adds	r7, #2
 8019256:	9305      	str	r3, [sp, #20]
 8019258:	4d2e      	ldr	r5, [pc, #184]	; (8019314 <_svfiprintf_r+0x1e0>)
 801925a:	7839      	ldrb	r1, [r7, #0]
 801925c:	2203      	movs	r2, #3
 801925e:	4628      	mov	r0, r5
 8019260:	f7ed fc2e 	bl	8006ac0 <memchr>
 8019264:	b138      	cbz	r0, 8019276 <_svfiprintf_r+0x142>
 8019266:	2340      	movs	r3, #64	; 0x40
 8019268:	1b40      	subs	r0, r0, r5
 801926a:	fa03 f000 	lsl.w	r0, r3, r0
 801926e:	9b04      	ldr	r3, [sp, #16]
 8019270:	4303      	orrs	r3, r0
 8019272:	3701      	adds	r7, #1
 8019274:	9304      	str	r3, [sp, #16]
 8019276:	7839      	ldrb	r1, [r7, #0]
 8019278:	4827      	ldr	r0, [pc, #156]	; (8019318 <_svfiprintf_r+0x1e4>)
 801927a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801927e:	2206      	movs	r2, #6
 8019280:	1c7e      	adds	r6, r7, #1
 8019282:	f7ed fc1d 	bl	8006ac0 <memchr>
 8019286:	2800      	cmp	r0, #0
 8019288:	d038      	beq.n	80192fc <_svfiprintf_r+0x1c8>
 801928a:	4b24      	ldr	r3, [pc, #144]	; (801931c <_svfiprintf_r+0x1e8>)
 801928c:	bb13      	cbnz	r3, 80192d4 <_svfiprintf_r+0x1a0>
 801928e:	9b03      	ldr	r3, [sp, #12]
 8019290:	3307      	adds	r3, #7
 8019292:	f023 0307 	bic.w	r3, r3, #7
 8019296:	3308      	adds	r3, #8
 8019298:	9303      	str	r3, [sp, #12]
 801929a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801929c:	444b      	add	r3, r9
 801929e:	9309      	str	r3, [sp, #36]	; 0x24
 80192a0:	e76d      	b.n	801917e <_svfiprintf_r+0x4a>
 80192a2:	fb05 3202 	mla	r2, r5, r2, r3
 80192a6:	2001      	movs	r0, #1
 80192a8:	460f      	mov	r7, r1
 80192aa:	e7a6      	b.n	80191fa <_svfiprintf_r+0xc6>
 80192ac:	2300      	movs	r3, #0
 80192ae:	3701      	adds	r7, #1
 80192b0:	9305      	str	r3, [sp, #20]
 80192b2:	4619      	mov	r1, r3
 80192b4:	250a      	movs	r5, #10
 80192b6:	4638      	mov	r0, r7
 80192b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80192bc:	3a30      	subs	r2, #48	; 0x30
 80192be:	2a09      	cmp	r2, #9
 80192c0:	d903      	bls.n	80192ca <_svfiprintf_r+0x196>
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d0c8      	beq.n	8019258 <_svfiprintf_r+0x124>
 80192c6:	9105      	str	r1, [sp, #20]
 80192c8:	e7c6      	b.n	8019258 <_svfiprintf_r+0x124>
 80192ca:	fb05 2101 	mla	r1, r5, r1, r2
 80192ce:	2301      	movs	r3, #1
 80192d0:	4607      	mov	r7, r0
 80192d2:	e7f0      	b.n	80192b6 <_svfiprintf_r+0x182>
 80192d4:	ab03      	add	r3, sp, #12
 80192d6:	9300      	str	r3, [sp, #0]
 80192d8:	4622      	mov	r2, r4
 80192da:	4b11      	ldr	r3, [pc, #68]	; (8019320 <_svfiprintf_r+0x1ec>)
 80192dc:	a904      	add	r1, sp, #16
 80192de:	4640      	mov	r0, r8
 80192e0:	f7fe f97a 	bl	80175d8 <_printf_float>
 80192e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80192e8:	4681      	mov	r9, r0
 80192ea:	d1d6      	bne.n	801929a <_svfiprintf_r+0x166>
 80192ec:	89a3      	ldrh	r3, [r4, #12]
 80192ee:	065b      	lsls	r3, r3, #25
 80192f0:	f53f af35 	bmi.w	801915e <_svfiprintf_r+0x2a>
 80192f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80192f6:	b01d      	add	sp, #116	; 0x74
 80192f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192fc:	ab03      	add	r3, sp, #12
 80192fe:	9300      	str	r3, [sp, #0]
 8019300:	4622      	mov	r2, r4
 8019302:	4b07      	ldr	r3, [pc, #28]	; (8019320 <_svfiprintf_r+0x1ec>)
 8019304:	a904      	add	r1, sp, #16
 8019306:	4640      	mov	r0, r8
 8019308:	f7fe fc08 	bl	8017b1c <_printf_i>
 801930c:	e7ea      	b.n	80192e4 <_svfiprintf_r+0x1b0>
 801930e:	bf00      	nop
 8019310:	0803ea84 	.word	0x0803ea84
 8019314:	0803ea8a 	.word	0x0803ea8a
 8019318:	0803ea8e 	.word	0x0803ea8e
 801931c:	080175d9 	.word	0x080175d9
 8019320:	08019081 	.word	0x08019081

08019324 <_sbrk_r>:
 8019324:	b538      	push	{r3, r4, r5, lr}
 8019326:	4c06      	ldr	r4, [pc, #24]	; (8019340 <_sbrk_r+0x1c>)
 8019328:	2300      	movs	r3, #0
 801932a:	4605      	mov	r5, r0
 801932c:	4608      	mov	r0, r1
 801932e:	6023      	str	r3, [r4, #0]
 8019330:	f7ee ff7c 	bl	800822c <_sbrk>
 8019334:	1c43      	adds	r3, r0, #1
 8019336:	d102      	bne.n	801933e <_sbrk_r+0x1a>
 8019338:	6823      	ldr	r3, [r4, #0]
 801933a:	b103      	cbz	r3, 801933e <_sbrk_r+0x1a>
 801933c:	602b      	str	r3, [r5, #0]
 801933e:	bd38      	pop	{r3, r4, r5, pc}
 8019340:	2002afa8 	.word	0x2002afa8

08019344 <__ascii_mbtowc>:
 8019344:	b082      	sub	sp, #8
 8019346:	b901      	cbnz	r1, 801934a <__ascii_mbtowc+0x6>
 8019348:	a901      	add	r1, sp, #4
 801934a:	b142      	cbz	r2, 801935e <__ascii_mbtowc+0x1a>
 801934c:	b14b      	cbz	r3, 8019362 <__ascii_mbtowc+0x1e>
 801934e:	7813      	ldrb	r3, [r2, #0]
 8019350:	600b      	str	r3, [r1, #0]
 8019352:	7812      	ldrb	r2, [r2, #0]
 8019354:	1c10      	adds	r0, r2, #0
 8019356:	bf18      	it	ne
 8019358:	2001      	movne	r0, #1
 801935a:	b002      	add	sp, #8
 801935c:	4770      	bx	lr
 801935e:	4610      	mov	r0, r2
 8019360:	e7fb      	b.n	801935a <__ascii_mbtowc+0x16>
 8019362:	f06f 0001 	mvn.w	r0, #1
 8019366:	e7f8      	b.n	801935a <__ascii_mbtowc+0x16>

08019368 <memmove>:
 8019368:	4288      	cmp	r0, r1
 801936a:	b510      	push	{r4, lr}
 801936c:	eb01 0302 	add.w	r3, r1, r2
 8019370:	d807      	bhi.n	8019382 <memmove+0x1a>
 8019372:	1e42      	subs	r2, r0, #1
 8019374:	4299      	cmp	r1, r3
 8019376:	d00a      	beq.n	801938e <memmove+0x26>
 8019378:	f811 4b01 	ldrb.w	r4, [r1], #1
 801937c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019380:	e7f8      	b.n	8019374 <memmove+0xc>
 8019382:	4283      	cmp	r3, r0
 8019384:	d9f5      	bls.n	8019372 <memmove+0xa>
 8019386:	1881      	adds	r1, r0, r2
 8019388:	1ad2      	subs	r2, r2, r3
 801938a:	42d3      	cmn	r3, r2
 801938c:	d100      	bne.n	8019390 <memmove+0x28>
 801938e:	bd10      	pop	{r4, pc}
 8019390:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019394:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019398:	e7f7      	b.n	801938a <memmove+0x22>

0801939a <__malloc_lock>:
 801939a:	4770      	bx	lr

0801939c <__malloc_unlock>:
 801939c:	4770      	bx	lr

0801939e <_realloc_r>:
 801939e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193a0:	4607      	mov	r7, r0
 80193a2:	4614      	mov	r4, r2
 80193a4:	460e      	mov	r6, r1
 80193a6:	b921      	cbnz	r1, 80193b2 <_realloc_r+0x14>
 80193a8:	4611      	mov	r1, r2
 80193aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80193ae:	f7ff be0d 	b.w	8018fcc <_malloc_r>
 80193b2:	b922      	cbnz	r2, 80193be <_realloc_r+0x20>
 80193b4:	f7ff fdbc 	bl	8018f30 <_free_r>
 80193b8:	4625      	mov	r5, r4
 80193ba:	4628      	mov	r0, r5
 80193bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193be:	f000 f821 	bl	8019404 <_malloc_usable_size_r>
 80193c2:	42a0      	cmp	r0, r4
 80193c4:	d20f      	bcs.n	80193e6 <_realloc_r+0x48>
 80193c6:	4621      	mov	r1, r4
 80193c8:	4638      	mov	r0, r7
 80193ca:	f7ff fdff 	bl	8018fcc <_malloc_r>
 80193ce:	4605      	mov	r5, r0
 80193d0:	2800      	cmp	r0, #0
 80193d2:	d0f2      	beq.n	80193ba <_realloc_r+0x1c>
 80193d4:	4631      	mov	r1, r6
 80193d6:	4622      	mov	r2, r4
 80193d8:	f7fe f865 	bl	80174a6 <memcpy>
 80193dc:	4631      	mov	r1, r6
 80193de:	4638      	mov	r0, r7
 80193e0:	f7ff fda6 	bl	8018f30 <_free_r>
 80193e4:	e7e9      	b.n	80193ba <_realloc_r+0x1c>
 80193e6:	4635      	mov	r5, r6
 80193e8:	e7e7      	b.n	80193ba <_realloc_r+0x1c>

080193ea <__ascii_wctomb>:
 80193ea:	b149      	cbz	r1, 8019400 <__ascii_wctomb+0x16>
 80193ec:	2aff      	cmp	r2, #255	; 0xff
 80193ee:	bf85      	ittet	hi
 80193f0:	238a      	movhi	r3, #138	; 0x8a
 80193f2:	6003      	strhi	r3, [r0, #0]
 80193f4:	700a      	strbls	r2, [r1, #0]
 80193f6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80193fa:	bf98      	it	ls
 80193fc:	2001      	movls	r0, #1
 80193fe:	4770      	bx	lr
 8019400:	4608      	mov	r0, r1
 8019402:	4770      	bx	lr

08019404 <_malloc_usable_size_r>:
 8019404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019408:	1f18      	subs	r0, r3, #4
 801940a:	2b00      	cmp	r3, #0
 801940c:	bfbc      	itt	lt
 801940e:	580b      	ldrlt	r3, [r1, r0]
 8019410:	18c0      	addlt	r0, r0, r3
 8019412:	4770      	bx	lr

08019414 <_init>:
 8019414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019416:	bf00      	nop
 8019418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801941a:	bc08      	pop	{r3}
 801941c:	469e      	mov	lr, r3
 801941e:	4770      	bx	lr

08019420 <_fini>:
 8019420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019422:	bf00      	nop
 8019424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019426:	bc08      	pop	{r3}
 8019428:	469e      	mov	lr, r3
 801942a:	4770      	bx	lr
