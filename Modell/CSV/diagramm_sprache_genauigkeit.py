import matplotlib.pyplot as plt 
import numpy as np
#Input = Sprache
#datenTF
#output sprache
spIn_spOut = np.array([100.0,100.0,0.61,99.84,99.17,100.0,98.2,100.0,100.0,100.0,92.67,99.98,100.0,99.84,100.0,96.43,99.99,100.0,99.97,97.62,100.0,100.0,92.77,100.0,99.93,96.97,100.0,100.0,100.0,100.0,94.32,97.25,88.54,100.0,78.25,100.0,100.0,82.26,100.0,100.0,99.99,11.78,77.43,100.0,100.0,99.69,100.0,99.66,99.99,100.0,100.0,98.32,2.45,100.0,4.2,26.09,98.98,96.09,94.92,82.16,100.0,99.99,100.0,100.0,4.92,1.98,100.0,86.59,97.08,100.0,99.94,100.0,100.0,100.0,100.0,100.0,99.97,11.96,100.0,85.7,93.36,100.0,99.95,0.76,100.0,100.0,100.0,100.0,99.99,100.0,93.68,100.0,79.97,100.0,100.0,100.0,99.98,100.0,99.93,100.0,50.76,100.0,100.0,76.21,99.89,100.0,100.0,76.73,17.59,100.0,66.92,95.29,100.0,97.4,99.69,99.85,99.99,100.0,100.0,1.11,98.35,100.0,100.0,99.75,99.98,100.0,100.0,100.0,100.0,100.0,100.0,98.49,100.0,99.99,12.14,100.0,100.0,71.05,100.0,99.96,100.0,99.67,99.98,100.0,99.19,97.06,97.42,86.73,55.24,35.23,100.0,100.0,100.0,100.0,14.57,100.0,100.0,99.89,100.0,99.87,100.0,100.0,100.0,100.0,99.99,100.0,100.0,100.0,99.92,70.29,100.0,100.0,100.0,99.98,99.11,100.0,100.0,100.0,99.98,56.94,98.76,92.32,1.88,99.69,99.96,99.74,99.01,96.03,59.72,100.0,100.0,0.77,100.0,100.0,100.0,15.04,100.0,47.34,100.0,96.9,100.0,99.68,100.0,65.52,100.0,99.03,94.87,100.0,98.33,99.24,99.9,100.0,4.81,100.0,100.0,95.19,99.51,99.92,1.18,100.0,100.0,100.0,96.91,99.99,4.31,0.0,92.39,100.0,98.56,100.0,100.0,100.0,0.0,100.0,56.89,100.0,100.0,100.0,100.0,97.98,4.64,34.55,99.71,99.22,72.04,99.92,97.49,100.0,100.0,100.0,96.51,7.58,99.96,100.0,99.96,100.0,0.69,100.0,99.74,0.66,99.99,100.0,99.81,100.0,0.04,100.0,100.0,100.0,99.99,99.54,57.23,99.71,100.0,99.97,100.0,99.94,7.01,100.0,100.0,100.0,99.63,100.0,100.0,100.0,98.88,98.31,99.89,100.0,98.73,99.96,100.0,99.99,99.82,100.0,99.99,99.86,99.98,99.54,100.0,92.38])
#output marvin
spIn_maOut = np.array([0.0,0.0,99.39,0.16,0.83,0.0,1.8,0.0,0.0,0.0,7.33,0.02,0.0,0.16,0.0,3.57,0.01,0.0,0.03,2.38,0.0,0.0,7.23,0.0,0.07,3.03,0.0,0.0,0.0,0.0,5.68,2.75,11.46,0.0,21.75,0.0,0.0,17.74,0.0,0.0,0.01,88.22,22.57,0.0,0.0,0.31,0.0,0.34,0.01,0.0,0.0,1.68,97.55,0.0,95.8,73.91,1.02,3.91,5.08,17.84,0.0,0.01,0.0,0.0,95.08,98.02,0.0,13.41,2.92,0.0,0.06,0.0,0.0,0.0,0.0,0.0,0.03,88.04,0.0,14.3,6.64,0.0,0.05,99.24,0.0,0.0,0.0,0.0,0.01,0.0,6.32,0.0,20.03,0.0,0.0,0.0,0.02,0.0,0.07,0.0,49.24,0.0,0.0,23.79,0.11,0.0,0.0,23.27,82.41,0.0,33.08,4.71,0.0,2.6,0.31,0.15,0.01,0.0,0.0,98.89,1.65,0.0,0.0,0.25,0.02,0.0,0.0,0.0,0.0,0.0,0.0,1.51,0.0,0.01,87.86,0.0,0.0,28.95,0.0,0.04,0.0,0.33,0.02,0.0,0.81,2.94,2.58,13.27,44.76,64.77,0.0,0.0,0.0,0.0,85.43,0.0,0.0,0.11,0.0,0.13,0.0,0.0,0.0,0.0,0.01,0.0,0.0,0.0,0.08,29.71,0.0,0.0,0.0,0.02,0.89,0.0,0.0,0.0,0.02,42.68,1.24,7.68,98.12,0.31,0.04,0.26,0.99,3.97,40.28,0.0,0.0,99.23,0.0,0.0,0.0,84.96,0.0,52.66,0.0,3.1,0.0,0.32,0.0,34.48,0.0,0.97,5.13,0.0,1.67,0.76,0.1,0.0,95.19,0.0,0.0,4.81,0.49,0.08,0.0,0.0,0.0,0.0,3.09,0.01,95.69,100.0,7.61,0.0,1.44,0.0,0.0,0.0,100.0,0.0,43.11,0.0,0.0,0.0,0.0,2.02,95.36,65.45,0.29,0.78,27.96,0.08,2.51,0.0,0.0,0.0,3.49,92.42,0.04,0.0,0.04,0.0,99.31,0.0,0.26,99.34,0.01,0.0,0.19,0.0,99.96,0.0,0.0,0.0,0.01,0.46,42.77,0.29,0.0,0.03,0.0,0.06,92.99,0.0,0.0,0.0,0.29,0.0,0.0,0.0,1.12,1.69,0.11,0.0,1.27,0.04,0.0,0.01,0.18,0.0,0.01,0.14,0.02,0.46,0.0,7.62])
#output stille
spIn_stOut = np.array([0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.38,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,98.82,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.08,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0])

verteilungSP = [0]*10
verteilungMA = [0]*10
verteilungST = [0]*10
#sp_out verteilung
for i in spIn_spOut:
    if i <= 10:
        verteilungSP[0]+=1
    elif i <= 20 and i >10:
        verteilungSP[1]+=1
    elif i <= 30 and i >20:
        verteilungSP[2]+=1
    elif i <= 40 and i >30:
        verteilungSP[3]+=1
    elif i <= 50 and i >40:
        verteilungSP[4]+=1
    elif i <= 60 and i >50:
        verteilungSP[5]+=1
    elif i <= 70 and i >60:
        verteilungSP[6]+=1
    elif i <= 80 and i >70:
        verteilungSP[7]+=1
    elif i <= 90 and i >80:
        verteilungSP[8]+=1
    elif i <= 100 and i >90:
        verteilungSP[9]+=1
#ma_out verteilung 
for i in spIn_maOut:
    if i <= 10:
        verteilungMA[0]+=1
    elif i <= 20 and i >10:
        verteilungMA[1]+=1
    elif i <= 30 and i >20:
        verteilungMA[2]+=1
    elif i <= 40 and i >30:
        verteilungMA[3]+=1
    elif i <= 50 and i >40:
        verteilungMA[4]+=1
    elif i <= 60 and i >50:
        verteilungMA[5]+=1
    elif i <= 70 and i >60:
        verteilungMA[6]+=1
    elif i <= 80 and i >70:
        verteilungMA[7]+=1
    elif i <= 90 and i >80:
        verteilungMA[8]+=1
    elif i <= 100 and i >90:
        verteilungMA[9]+=1
#st_out verteilung
for i in spIn_stOut:
    if i <= 10:
        verteilungST[0]+=1
    elif i <= 20 and i >10:
        verteilungST[1]+=1
    elif i <= 30 and i >20:
        verteilungST[2]+=1
    elif i <= 40 and i >30:
        verteilungST[3]+=1
    elif i <= 50 and i >40:
        verteilungST[4]+=1
    elif i <= 60 and i >50:
        verteilungST[5]+=1
    elif i <= 70 and i >60:
        verteilungST[6]+=1
    elif i <= 80 and i >70:
        verteilungST[7]+=1
    elif i <= 90 and i >80:
        verteilungST[8]+=1
    elif i <= 100 and i >90:
        verteilungST[9]+=1

#daten TFLite
#output sprache
lite_spIn_spOut = np.array([100.0,100.0,0.61,99.84,99.17,100.0,98.2,100.0,100.0,100.0,92.67,99.98,100.0,99.84,100.0,96.43,99.99,100.0,99.97,97.62,100.0,100.0,92.77,100.0,99.93,96.97,100.0,100.0,100.0,100.0,94.32,97.25,88.54,100.0,78.25,100.0,100.0,82.26,100.0,100.0,99.99,11.78,77.43,100.0,100.0,99.69,100.0,99.66,99.99,100.0,100.0,98.32,2.45,100.0,4.2,26.09,98.98,96.09,94.92,82.16,100.0,99.99,100.0,100.0,4.92,1.98,100.0,86.59,97.08,100.0,99.94,100.0,100.0,100.0,100.0,100.0,99.97,11.96,100.0,85.7,93.36,100.0,99.95,0.76,100.0,100.0,100.0,100.0,99.99,100.0,93.68,100.0,79.97,100.0,100.0,100.0,99.98,100.0,99.93,100.0,50.76,100.0,100.0,76.21,99.89,100.0,100.0,76.73,17.59,100.0,66.92,95.29,100.0,97.4,99.69,99.85,99.99,100.0,100.0,1.11,98.35,100.0,100.0,99.75,99.98,100.0,100.0,100.0,100.0,100.0,100.0,98.49,100.0,99.99,12.14,100.0,100.0,71.05,100.0,99.96,100.0,99.67,99.98,100.0,99.19,97.06,97.42,86.73,55.24,35.23,100.0,100.0,100.0,100.0,14.57,100.0,100.0,99.89,100.0,99.87,100.0,100.0,100.0,100.0,99.99,100.0,100.0,100.0,99.92,70.29,100.0,100.0,100.0,99.98,99.11,100.0,100.0,100.0,99.98,56.94,98.76,92.32,1.88,99.69,99.96,99.74,99.01,96.03,59.72,100.0,100.0,0.77,100.0,100.0,100.0,15.04,100.0,47.34,100.0,96.9,100.0,99.68,100.0,65.52,100.0,99.03,94.87,100.0,98.33,99.24,99.9,100.0,4.81,100.0,100.0,95.19,99.51,99.92,1.18,100.0,100.0,100.0,96.91,99.99,4.31,0.0,92.39,100.0,98.56,100.0,100.0,100.0,0.0,100.0,56.89,100.0,100.0,100.0,100.0,97.98,4.64,34.56,99.71,99.22,72.04,99.92,97.49,100.0,100.0,100.0,96.51,7.58,99.96,100.0,99.96,100.0,0.69,100.0,99.74,0.66,99.99,100.0,99.81,100.0,0.04,100.0,100.0,100.0,99.99,99.54,57.23,99.71,100.0,99.97,100.0,99.94,7.01,100.0,100.0,100.0,99.63,100.0,100.0,100.0,98.88,98.31,99.89,100.0,98.73,99.96,100.0,99.99,99.82,100.0,99.99,99.86,99.98,99.54,100.0,92.38])
#output marvin
lite_spIn_maOut = np.array([0.0,0.0,99.39,0.16,0.83,0.0,1.8,0.0,0.0,0.0,7.33,0.02,0.0,0.16,0.0,3.57,0.01,0.0,0.03,2.38,0.0,0.0,7.23,0.0,0.07,3.03,0.0,0.0,0.0,0.0,5.68,2.75,11.46,0.0,21.75,0.0,0.0,17.74,0.0,0.0,0.01,88.22,22.57,0.0,0.0,0.31,0.0,0.34,0.01,0.0,0.0,1.68,97.55,0.0,95.8,73.91,1.02,3.91,5.08,17.84,0.0,0.01,0.0,0.0,95.08,98.02,0.0,13.41,2.92,0.0,0.06,0.0,0.0,0.0,0.0,0.0,0.03,88.04,0.0,14.3,6.64,0.0,0.05,99.24,0.0,0.0,0.0,0.0,0.01,0.0,6.32,0.0,20.03,0.0,0.0,0.0,0.02,0.0,0.07,0.0,49.24,0.0,0.0,23.79,0.11,0.0,0.0,23.27,82.41,0.0,33.08,4.71,0.0,2.6,0.31,0.15,0.01,0.0,0.0,98.89,1.65,0.0,0.0,0.25,0.02,0.0,0.0,0.0,0.0,0.0,0.0,1.51,0.0,0.01,87.86,0.0,0.0,28.95,0.0,0.04,0.0,0.33,0.02,0.0,0.81,2.94,2.58,13.27,44.76,64.77,0.0,0.0,0.0,0.0,85.43,0.0,0.0,0.11,0.0,0.13,0.0,0.0,0.0,0.0,0.01,0.0,0.0,0.0,0.08,29.71,0.0,0.0,0.0,0.02,0.89,0.0,0.0,0.0,0.02,42.68,1.24,7.68,98.12,0.31,0.04,0.26,0.99,3.97,40.28,0.0,0.0,99.23,0.0,0.0,0.0,84.96,0.0,52.66,0.0,3.1,0.0,0.32,0.0,34.48,0.0,0.97,5.13,0.0,1.67,0.76,0.1,0.0,95.19,0.0,0.0,4.81,0.49,0.08,0.0,0.0,0.0,0.0,3.09,0.01,95.69,100.0,7.61,0.0,1.44,0.0,0.0,0.0,100.0,0.0,43.11,0.0,0.0,0.0,0.0,2.02,95.36,65.44,0.29,0.78,27.96,0.08,2.51,0.0,0.0,0.0,3.49,92.42,0.04,0.0,0.04,0.0,99.31,0.0,0.26,99.34,0.01,0.0,0.19,0.0,99.96,0.0,0.0,0.0,0.01,0.46,42.77,0.29,0.0,0.03,0.0,0.06,92.99,0.0,0.0,0.0,0.29,0.0,0.0,0.0,1.12,1.69,0.11,0.0,1.27,0.04,0.0,0.01,0.18,0.0,0.01,0.14,0.02,0.46,0.0,7.62])
#output stille
lite_spIn_stOut = np.array([0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.38,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,98.82,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.08,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0])

lite_verteilungSP = [0]*10
lite_verteilungMA = [0]*10
lite_verteilungST = [0]*10
#sp_out verteilung
for i in lite_spIn_spOut:
    if i <= 10:
        lite_verteilungSP[0]+=1
    elif i <= 20 and i >10:
        lite_verteilungSP[1]+=1
    elif i <= 30 and i >20:
        lite_verteilungSP[2]+=1
    elif i <= 40 and i >30:
        lite_verteilungSP[3]+=1
    elif i <= 50 and i >40:
        lite_verteilungSP[4]+=1
    elif i <= 60 and i >50:
        lite_verteilungSP[5]+=1
    elif i <= 70 and i >60:
        lite_verteilungSP[6]+=1
    elif i <= 80 and i >70:
        lite_verteilungSP[7]+=1
    elif i <= 90 and i >80:
        lite_verteilungSP[8]+=1
    elif i <= 100 and i >90:
        lite_verteilungSP[9]+=1
#ma_out verteilung 
for i in lite_spIn_maOut:
    if i <= 10:
        lite_verteilungMA[0]+=1
    elif i <= 20 and i >10:
        lite_verteilungMA[1]+=1
    elif i <= 30 and i >20:
        lite_verteilungMA[2]+=1
    elif i <= 40 and i >30:
        lite_verteilungMA[3]+=1
    elif i <= 50 and i >40:
        lite_verteilungMA[4]+=1
    elif i <= 60 and i >50:
        lite_verteilungMA[5]+=1
    elif i <= 70 and i >60:
        lite_verteilungMA[6]+=1
    elif i <= 80 and i >70:
        lite_verteilungMA[7]+=1
    elif i <= 90 and i >80:
        lite_verteilungMA[8]+=1
    elif i <= 100 and i >90:
        lite_verteilungMA[9]+=1
#st_out verteilung
for i in lite_spIn_stOut:
    if i <= 10:
        lite_verteilungST[0]+=1
    elif i <= 20 and i >10:
        lite_verteilungST[1]+=1
    elif i <= 30 and i >20:
        lite_verteilungST[2]+=1
    elif i <= 40 and i >30:
        lite_verteilungST[3]+=1
    elif i <= 50 and i >40:
        lite_verteilungST[4]+=1
    elif i <= 60 and i >50:
        lite_verteilungST[5]+=1
    elif i <= 70 and i >60:
        lite_verteilungST[6]+=1
    elif i <= 80 and i >70:
        lite_verteilungST[7]+=1
    elif i <= 90 and i >80:
        lite_verteilungST[8]+=1
    elif i <= 100 and i >90:
        lite_verteilungST[9]+=1

#Plotten der Daten
labels = ["0-10","10-20","20-30","30-40","40-50","50-60","60-70","70-80","80-90","90-100"]
X = np.arange(10)
fig,axs = plt.subplots(1,2)
fig.suptitle("Ergebnisverteilung für Input = Sprache",fontsize="xx-large")
#plot tf
axs[0].set_title("Tensorflow")
axs[0].set_xlabel("Ergebnis in %",fontsize="large")
axs[0].set_ylabel("Sampleanzahl",fontsize="large")
axs[0].bar(x = X+0,height = verteilungSP,width=0.25,color = "b",label = "Output = Sprache")
axs[0].bar(x = X+0.25,height = verteilungMA,width=0.25,color = "g",label = "Output = Marvin Go")
axs[0].bar(x = X+0.5,height = verteilungST,width=0.25,color = "r",label = "Output = Stille")
axs[0].legend()
axs[0].yaxis.grid(True,linestyle = "--")
axs[0].set_xticks(X+0.25)
axs[0].set_xticklabels(labels)
#plot tf_lite
axs[1].set_title("Tensorflow Lite")
axs[1].set_xlabel("Ergebnis in %",fontsize="large")
axs[1].set_ylabel("Sampleanzahl",fontsize="large")
axs[1].bar(x = X+0,height = lite_verteilungSP,width=0.25,color = "b",label = "Output = Sprache")
axs[1].bar(x = X+0.25,height = lite_verteilungMA,width=0.25,color = "g",label = "Output = Marvin Go")
axs[1].bar(x = X+0.5,height = lite_verteilungST,width=0.25,color = "r",label = "Output = Stille")
axs[1].legend()
axs[1].yaxis.grid(True,linestyle = "--")
axs[1].set_xticks(X+0.25)
axs[1].set_xticklabels(labels)
plt.show()