import matplotlib.pyplot as plt 
import numpy as np
#Input = Sprache
#datenTF
#output sprache
maIn_spOut = np.array([20.02,0.0,0.0,0.01,0.08,0.0,0.13,0.0,0.22,96.22,0.01,3.3,75.45,42.31,0.0,80.9,69.52,20.13,0.0,0.0,0.0,48.77,0.0,100.0,100.0,100.0,99.99,100.0,0.0,4.1,0.03,0.07,0.28,0.51,0.0,0.0,1.33,0.05,0.05,0.07,5.49,1.75,0.0,0.23,0.02,1.02,0.01,100.0,1.14,98.21,100.0,100.0,0.01,0.11,95.58,10.17,15.1,0.0,0.01,0.0,0.0,0.08,0.03,0.0,0.0,0.39,0.0,0.0,0.35,0.1,0.03,19.54,0.01,0.0,0.01,0.0,0.07,0.96,0.47,90.5,98.98,97.85,9.78,99.98,99.65,32.85,85.96,100.0,5.55,8.08,0.22,15.51,99.92,100.0,1.03,0.03,0.0,0.24,0.0,0.17,74.7,0.02,6.78,2.95,1.21,15.86,0.0,0.0,0.0,56.69,3.88,0.01,56.69,0.33,3.88,7.37,7.37,0.03,4.64,0.01,0.07,0.45,90.84,0.07,9.54,0.04,1.11,15.0,0.2,12.1,0.0,0.02,0.0,0.09,0.02,0.0,7.32,0.07,3.92,0.0,0.0,0.0,0.0,0.0,6.09,0.04,0.0,35.17,0.62,0.37,0.06,20.57,0.06,11.33,0.01,0.84,0.04,4.07,20.8,0.09,1.47,0.02,5.55,0.15,0.53,0.0,0.0,0.0,0.0,0.0,0.0,0.01,0.0,0.02,0.13,0.62,0.0,0.0,1.21,0.0,1.09,0.0,0.08,100.0,0.0,0.0,0.0,0.0,3.0,0.01,0.01,93.88,0.0,0.0,0.0,0.01,0.13,0.0,0.01,0.0,0.01,0.0,0.01,0.0,0.0,0.05,0.02,0.01,0.05,0.01,0.0,0.0,0.02,0.0,0.0,5.27,0.01,0.08,0.0,100.0,100.0,30.34,9.0,0.0,86.11,99.85,4.67,97.08,11.14,0.75,1.04,48.17,61.44,0.93,49.12,0.0,0.0,0.0,0.0,0.16,0.08,0.0,0.82,1.48,7.89,30.04,3.93,0.0,0.0,0.01,2.16,22.2,51.48,91.25,100.0,0.0,0.01,0.0,0.01,99.8,0.16,0.0,0.0,98.3,0.0,0.0,0.32,0.1,0.03,4.4,14.19,0.0,0.0,69.66,59.07,0.0,0.0,0.0,0.0,2.76,3.31,0.0,1.02,48.8,54.33,49.38,52.33,51.59,0.01,0.01,0.36,3.94,0.2,0.02,0.02,0.01,0.0,1.34,0.01,0.0])
#output marvin
maIn_maOut = np.array([79.98,100.0,100.0,99.99,99.92,100.0,99.87,100.0,99.78,3.78,99.99,96.7,24.55,57.69,100.0,19.1,30.48,79.87,100.0,100.0,100.0,51.23,100.0,0.0,0.0,0.0,0.01,0.0,100.0,95.9,99.97,99.93,99.72,99.49,100.0,100.0,98.67,99.95,99.95,99.93,94.51,98.25,100.0,99.77,99.98,98.98,99.99,0.0,98.86,1.79,0.0,0.0,99.99,99.89,4.42,89.83,84.9,100.0,99.99,100.0,100.0,99.92,99.97,100.0,100.0,99.61,100.0,100.0,99.65,99.9,99.97,80.46,99.99,100.0,99.99,100.0,99.93,99.04,99.53,9.5,1.02,2.15,90.22,0.02,0.35,67.15,14.04,0.0,94.45,91.92,99.78,84.49,0.08,0.0,98.97,99.97,100.0,99.76,100.0,99.83,25.3,99.98,93.22,97.05,98.79,84.14,100.0,100.0,100.0,43.31,96.12,99.99,43.31,99.67,96.12,92.63,92.63,99.97,95.36,99.99,99.93,99.55,9.16,99.93,90.46,99.96,98.89,85.0,99.8,87.9,100.0,99.98,100.0,99.91,99.98,100.0,92.68,99.93,96.08,100.0,100.0,100.0,100.0,100.0,93.91,99.96,100.0,64.83,99.38,99.63,99.94,79.43,99.94,14.56,99.99,99.16,99.96,95.93,79.2,99.91,98.53,99.98,94.45,99.85,99.47,100.0,100.0,100.0,100.0,100.0,100.0,99.99,100.0,99.98,99.87,99.38,100.0,100.0,98.79,100.0,98.91,100.0,99.92,0.0,100.0,100.0,100.0,100.0,97.0,99.99,99.99,6.12,100.0,100.0,100.0,99.99,99.87,100.0,99.99,100.0,99.99,100.0,99.99,100.0,100.0,99.95,99.98,99.99,99.95,99.99,100.0,100.0,99.98,100.0,100.0,94.73,99.99,99.92,100.0,0.0,0.0,69.66,91.0,100.0,13.89,0.15,95.33,2.92,88.86,99.25,1.51,51.83,38.56,1.28,50.88,100.0,100.0,100.0,100.0,99.84,99.92,100.0,99.18,98.52,92.11,69.96,96.07,100.0,100.0,99.99,97.84,77.8,48.52,8.75,0.0,100.0,99.99,100.0,99.99,0.2,99.84,100.0,100.0,1.7,100.0,100.0,99.68,99.9,99.97,95.6,85.81,100.0,100.0,30.34,40.93,100.0,100.0,100.0,100.0,97.24,96.69,100.0,98.98,43.87,40.4,40.14,34.64,32.27,99.99,99.99,99.64,96.06,99.8,99.98,99.98,99.99,100.0,98.66,99.99,100.0])
#output stille
maIn_stOut = np.array([0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,74.11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,97.45,0.0,0.0,97.78,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,7.33,5.27,10.49,13.02,16.14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0])
verteilungSP = [0]*10
verteilungMA = [0]*10
verteilungST = [0]*10
#sp_out verteilung
for i in maIn_spOut:
    if i <= 10:
        verteilungSP[0]+=1
    elif i <= 20 and i >10:
        verteilungSP[1]+=1
    elif i <= 30 and i >20:
        verteilungSP[2]+=1
    elif i <= 40 and i >30:
        verteilungSP[3]+=1
    elif i <= 50 and i >40:
        verteilungSP[4]+=1
    elif i <= 60 and i >50:
        verteilungSP[5]+=1
    elif i <= 70 and i >60:
        verteilungSP[6]+=1
    elif i <= 80 and i >70:
        verteilungSP[7]+=1
    elif i <= 90 and i >80:
        verteilungSP[8]+=1
    elif i <= 100 and i >90:
        verteilungSP[9]+=1
#ma_out verteilung 
for i in maIn_maOut:
    if i <= 10:
        verteilungMA[0]+=1
    elif i <= 20 and i >10:
        verteilungMA[1]+=1
    elif i <= 30 and i >20:
        verteilungMA[2]+=1
    elif i <= 40 and i >30:
        verteilungMA[3]+=1
    elif i <= 50 and i >40:
        verteilungMA[4]+=1
    elif i <= 60 and i >50:
        verteilungMA[5]+=1
    elif i <= 70 and i >60:
        verteilungMA[6]+=1
    elif i <= 80 and i >70:
        verteilungMA[7]+=1
    elif i <= 90 and i >80:
        verteilungMA[8]+=1
    elif i <= 100 and i >90:
        verteilungMA[9]+=1
#st_out verteilung
for i in maIn_stOut:
    if i <= 10:
        verteilungST[0]+=1
    elif i <= 20 and i >10:
        verteilungST[1]+=1
    elif i <= 30 and i >20:
        verteilungST[2]+=1
    elif i <= 40 and i >30:
        verteilungST[3]+=1
    elif i <= 50 and i >40:
        verteilungST[4]+=1
    elif i <= 60 and i >50:
        verteilungST[5]+=1
    elif i <= 70 and i >60:
        verteilungST[6]+=1
    elif i <= 80 and i >70:
        verteilungST[7]+=1
    elif i <= 90 and i >80:
        verteilungST[8]+=1
    elif i <= 100 and i >90:
        verteilungST[9]+=1

#daten TFLite
#output sprache
lite_maIn_spOut = np.array([20.02,0.0,0.0,0.01,0.08,0.0,0.13,0.0,0.22,96.22,0.01,3.3,75.45,42.31,0.0,80.9,69.52,20.13,0.0,0.0,0.0,48.77,0.0,100.0,100.0,100.0,99.99,100.0,0.0,4.1,0.03,0.07,0.28,0.51,0.0,0.0,1.33,0.05,0.05,0.07,5.49,1.75,0.0,0.23,0.02,1.02,0.01,100.0,1.14,98.21,100.0,100.0,0.01,0.11,95.58,10.17,15.1,0.0,0.01,0.0,0.0,0.08,0.03,0.0,0.0,0.39,0.0,0.0,0.35,0.1,0.03,19.54,0.01,0.0,0.01,0.0,0.07,0.96,0.47,90.5,98.98,97.85,9.78,99.98,99.65,32.85,85.96,100.0,5.55,8.08,0.22,15.51,99.92,100.0,1.03,0.03,0.0,0.24,0.0,0.17,74.7,0.02,6.78,2.95,1.21,15.86,0.0,0.0,0.0,56.69,3.88,0.01,56.69,0.33,3.88,7.37,7.37,0.03,4.64,0.01,0.07,0.45,90.84,0.07,9.54,0.04,1.11,15.0,0.2,12.1,0.0,0.02,0.0,0.09,0.02,0.0,7.32,0.07,3.92,0.0,0.0,0.0,0.0,0.0,6.09,0.04,0.0,35.17,0.62,0.37,0.06,20.57,0.06,11.33,0.01,0.84,0.04,4.07,20.8,0.09,1.47,0.02,5.55,0.15,0.53,0.0,0.0,0.0,0.0,0.0,0.0,0.01,0.0,0.02,0.13,0.62,0.0,0.0,1.21,0.0,1.09,0.0,0.08,100.0,0.0,0.0,0.0,0.0,3.0,0.01,0.01,93.88,0.0,0.0,0.0,0.01,0.13,0.0,0.01,0.0,0.01,0.0,0.01,0.0,0.0,0.05,0.02,0.01,0.05,0.01,0.0,0.0,0.02,0.0,0.0,5.27,0.01,0.08,0.0,100.0,100.0,30.34,9.0,0.0,86.11,99.85,4.67,97.08,11.14,0.75,1.04,48.17,61.44,0.93,49.12,0.0,0.0,0.0,0.0,0.16,0.08,0.0,0.82,1.48,7.89,30.04,3.93,0.0,0.0,0.01,2.16,22.2,51.48,91.25,100.0,0.0,0.01,0.0,0.01,99.8,0.16,0.0,0.0,98.3,0.0,0.0,0.32,0.1,0.03,4.4,14.19,0.0,0.0,69.66,59.07,0.0,0.0,0.0,0.0,2.76,3.31,0.0,1.02,48.8,54.33,49.38,52.33,51.59,0.01,0.01,0.36,3.94,0.2,0.02,0.02,0.01,0.0,1.34,0.01,0.0])
#output marvin
lite_maIn_maOut = np.array([79.98,100.0,100.0,99.99,99.92,100.0,99.87,100.0,99.78,3.78,99.99,96.7,24.55,57.69,100.0,19.1,30.48,79.87,100.0,100.0,100.0,51.23,100.0,0.0,0.0,0.0,0.01,0.0,100.0,95.9,99.97,99.93,99.72,99.49,100.0,100.0,98.67,99.95,99.95,99.93,94.51,98.25,100.0,99.77,99.98,98.98,99.99,0.0,98.86,1.79,0.0,0.0,99.99,99.89,4.42,89.83,84.9,100.0,99.99,100.0,100.0,99.92,99.97,100.0,100.0,99.61,100.0,100.0,99.65,99.9,99.97,80.46,99.99,100.0,99.99,100.0,99.93,99.04,99.53,9.5,1.02,2.15,90.22,0.02,0.35,67.15,14.04,0.0,94.45,91.92,99.78,84.49,0.08,0.0,98.97,99.97,100.0,99.76,100.0,99.83,25.3,99.98,93.22,97.05,98.79,84.14,100.0,100.0,100.0,43.31,96.12,99.99,43.31,99.67,96.12,92.63,92.63,99.97,95.36,99.99,99.93,99.55,9.16,99.93,90.46,99.96,98.89,85.0,99.8,87.9,100.0,99.98,100.0,99.91,99.98,100.0,92.68,99.93,96.08,100.0,100.0,100.0,100.0,100.0,93.91,99.96,100.0,64.83,99.38,99.63,99.94,79.43,99.94,14.56,99.99,99.16,99.96,95.93,79.2,99.91,98.53,99.98,94.45,99.85,99.47,100.0,100.0,100.0,100.0,100.0,100.0,99.99,100.0,99.98,99.87,99.38,100.0,100.0,98.79,100.0,98.91,100.0,99.92,0.0,100.0,100.0,100.0,100.0,97.0,99.99,99.99,6.12,100.0,100.0,100.0,99.99,99.87,100.0,99.99,100.0,99.99,100.0,99.99,100.0,100.0,99.95,99.98,99.99,99.95,99.99,100.0,100.0,99.98,100.0,100.0,94.73,99.99,99.92,100.0,0.0,0.0,69.66,91.0,100.0,13.89,0.15,95.33,2.92,88.86,99.25,1.51,51.83,38.56,1.28,50.88,100.0,100.0,100.0,100.0,99.84,99.92,100.0,99.18,98.52,92.11,69.96,96.07,100.0,100.0,99.99,97.84,77.8,48.52,8.75,0.0,100.0,99.99,100.0,99.99,0.2,99.84,100.0,100.0,1.7,100.0,100.0,99.68,99.9,99.97,95.6,85.81,100.0,100.0,30.34,40.93,100.0,100.0,100.0,100.0,97.24,96.69,100.0,98.98,43.87,40.4,40.14,34.64,32.27,99.99,99.99,99.64,96.06,99.8,99.98,99.98,99.99,100.0,98.66,99.99,100.0])
#output stille
lite_maIn_stOut = np.array([0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,74.11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,97.45,0.0,0.0,97.78,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,7.33,5.27,10.49,13.02,16.14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0])
lite_verteilungSP = [0]*10
lite_verteilungMA = [0]*10
lite_verteilungST = [0]*10
#sp_out verteilung
for i in lite_maIn_spOut:
    if i <= 10:
        lite_verteilungSP[0]+=1
    elif i <= 20 and i >10:
        lite_verteilungSP[1]+=1
    elif i <= 30 and i >20:
        lite_verteilungSP[2]+=1
    elif i <= 40 and i >30:
        lite_verteilungSP[3]+=1
    elif i <= 50 and i >40:
        lite_verteilungSP[4]+=1
    elif i <= 60 and i >50:
        lite_verteilungSP[5]+=1
    elif i <= 70 and i >60:
        lite_verteilungSP[6]+=1
    elif i <= 80 and i >70:
        lite_verteilungSP[7]+=1
    elif i <= 90 and i >80:
        lite_verteilungSP[8]+=1
    elif i <= 100 and i >90:
        lite_verteilungSP[9]+=1
#ma_out verteilung 
for i in lite_maIn_maOut:
    if i <= 10:
        lite_verteilungMA[0]+=1
    elif i <= 20 and i >10:
        lite_verteilungMA[1]+=1
    elif i <= 30 and i >20:
        lite_verteilungMA[2]+=1
    elif i <= 40 and i >30:
        lite_verteilungMA[3]+=1
    elif i <= 50 and i >40:
        lite_verteilungMA[4]+=1
    elif i <= 60 and i >50:
        lite_verteilungMA[5]+=1
    elif i <= 70 and i >60:
        lite_verteilungMA[6]+=1
    elif i <= 80 and i >70:
        lite_verteilungMA[7]+=1
    elif i <= 90 and i >80:
        lite_verteilungMA[8]+=1
    elif i <= 100 and i >90:
        lite_verteilungMA[9]+=1
#st_out verteilung
for i in lite_maIn_stOut:
    if i <= 10:
        lite_verteilungST[0]+=1
    elif i <= 20 and i >10:
        lite_verteilungST[1]+=1
    elif i <= 30 and i >20:
        lite_verteilungST[2]+=1
    elif i <= 40 and i >30:
        lite_verteilungST[3]+=1
    elif i <= 50 and i >40:
        lite_verteilungST[4]+=1
    elif i <= 60 and i >50:
        lite_verteilungST[5]+=1
    elif i <= 70 and i >60:
        lite_verteilungST[6]+=1
    elif i <= 80 and i >70:
        lite_verteilungST[7]+=1
    elif i <= 90 and i >80:
        lite_verteilungST[8]+=1
    elif i <= 100 and i >90:
        lite_verteilungST[9]+=1

#Plotten der Daten
labels = ["0-10","10-20","20-30","30-40","40-50","50-60","60-70","70-80","80-90","90-100"]
X = np.arange(10)
fig,axs = plt.subplots(1,2)
fig.suptitle("Ergebnisverteilung für Input = Marvin Go",fontsize="xx-large")
#plot tf
axs[0].set_title("Tensorflow")
axs[0].set_xlabel("Ergebnis in %",fontsize="large")
axs[0].set_ylabel("Sampleanzahl",fontsize="large")
axs[0].bar(x = X+0,height = verteilungSP,width=0.25,color = "b",label = "Output = Sprache")
axs[0].bar(x = X+0.25,height = verteilungMA,width=0.25,color = "g",label = "Output = Marvin Go")
axs[0].bar(x = X+0.5,height = verteilungST,width=0.25,color = "r",label = "Output = Stille")
axs[0].legend()
axs[0].yaxis.grid(True,linestyle = "--")
axs[0].set_xticks(X+0.25)
axs[0].set_xticklabels(labels)
#plot tf_lite
axs[1].set_title("Tensorflow Lite")
axs[1].set_xlabel("Ergebnis in %",fontsize="large")
axs[1].set_ylabel("Sampleanzahl",fontsize="large")
axs[1].bar(x = X+0,height = lite_verteilungSP,width=0.25,color = "b",label = "Output = Sprache")
axs[1].bar(x = X+0.25,height = lite_verteilungMA,width=0.25,color = "g",label = "Output = Marvin Go")
axs[1].bar(x = X+0.5,height = lite_verteilungST,width=0.25,color = "r",label = "Output = Stille")
axs[1].legend()
axs[1].yaxis.grid(True,linestyle = "--")
axs[1].set_xticks(X+0.25)
axs[1].set_xticklabels(labels)
plt.show()