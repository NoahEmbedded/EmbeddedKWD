import matplotlib.pyplot as plt 
import numpy as np
#Input = Sprache
#datenTF
#output sprache
st_spOut = np.array([0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25])
#output marvin
st_maOut = np.array([0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3])
#output stille
st_stOut = np.array
verteilungSP = [0]*10
verteilungMA = [0]*10
verteilungST = [0]*10
#sp_out verteilung
for i in st_spOut:
    if i <= 10:
        verteilungSP[0]+=1
    elif i <= 20 and i >10:
        verteilungSP[1]+=1
    elif i <= 30 and i >20:
        verteilungSP[2]+=1
    elif i <= 40 and i >30:
        verteilungSP[3]+=1
    elif i <= 50 and i >40:
        verteilungSP[4]+=1
    elif i <= 60 and i >50:
        verteilungSP[5]+=1
    elif i <= 70 and i >60:
        verteilungSP[6]+=1
    elif i <= 80 and i >70:
        verteilungSP[7]+=1
    elif i <= 90 and i >80:
        verteilungSP[8]+=1
    elif i <= 100 and i >90:
        verteilungSP[9]+=1
#ma_out verteilung 
for i in st_maOut:
    if i <= 10:
        verteilungMA[0]+=1
    elif i <= 20 and i >10:
        verteilungMA[1]+=1
    elif i <= 30 and i >20:
        verteilungMA[2]+=1
    elif i <= 40 and i >30:
        verteilungMA[3]+=1
    elif i <= 50 and i >40:
        verteilungMA[4]+=1
    elif i <= 60 and i >50:
        verteilungMA[5]+=1
    elif i <= 70 and i >60:
        verteilungMA[6]+=1
    elif i <= 80 and i >70:
        verteilungMA[7]+=1
    elif i <= 90 and i >80:
        verteilungMA[8]+=1
    elif i <= 100 and i >90:
        verteilungMA[9]+=1
#st_out verteilung
for i in st_stOut:
    if i <= 10:
        verteilungST[0]+=1
    elif i <= 20 and i >10:
        verteilungST[1]+=1
    elif i <= 30 and i >20:
        verteilungST[2]+=1
    elif i <= 40 and i >30:
        verteilungST[3]+=1
    elif i <= 50 and i >40:
        verteilungST[4]+=1
    elif i <= 60 and i >50:
        verteilungST[5]+=1
    elif i <= 70 and i >60:
        verteilungST[6]+=1
    elif i <= 80 and i >70:
        verteilungST[7]+=1
    elif i <= 90 and i >80:
        verteilungST[8]+=1
    elif i <= 100 and i >90:
        verteilungST[9]+=1

#daten TFLite
#output sprache
lite_st_spOut = np.array([0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25])
#output marvin
lite_st_maOut = np.array([0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3])
#output stille
lite_st_stOut = np.array
lite_verteilungSP = [0]*10
lite_verteilungMA = [0]*10
lite_verteilungST = [0]*10
#sp_out verteilung
for i in lite_st_spOut:
    if i <= 10:
        lite_verteilungSP[0]+=1
    elif i <= 20 and i >10:
        lite_verteilungSP[1]+=1
    elif i <= 30 and i >20:
        lite_verteilungSP[2]+=1
    elif i <= 40 and i >30:
        lite_verteilungSP[3]+=1
    elif i <= 50 and i >40:
        lite_verteilungSP[4]+=1
    elif i <= 60 and i >50:
        lite_verteilungSP[5]+=1
    elif i <= 70 and i >60:
        lite_verteilungSP[6]+=1
    elif i <= 80 and i >70:
        lite_verteilungSP[7]+=1
    elif i <= 90 and i >80:
        lite_verteilungSP[8]+=1
    elif i <= 100 and i >90:
        lite_verteilungSP[9]+=1
#ma_out verteilung 
for i in lite_st_maOut:
    if i <= 10:
        lite_verteilungMA[0]+=1
    elif i <= 20 and i >10:
        lite_verteilungMA[1]+=1
    elif i <= 30 and i >20:
        lite_verteilungMA[2]+=1
    elif i <= 40 and i >30:
        lite_verteilungMA[3]+=1
    elif i <= 50 and i >40:
        lite_verteilungMA[4]+=1
    elif i <= 60 and i >50:
        lite_verteilungMA[5]+=1
    elif i <= 70 and i >60:
        lite_verteilungMA[6]+=1
    elif i <= 80 and i >70:
        lite_verteilungMA[7]+=1
    elif i <= 90 and i >80:
        lite_verteilungMA[8]+=1
    elif i <= 100 and i >90:
        lite_verteilungMA[9]+=1
#st_out verteilung
for i in lite_st_stOut:
    if i <= 10:
        lite_verteilungST[0]+=1
    elif i <= 20 and i >10:
        lite_verteilungST[1]+=1
    elif i <= 30 and i >20:
        lite_verteilungST[2]+=1
    elif i <= 40 and i >30:
        lite_verteilungST[3]+=1
    elif i <= 50 and i >40:
        lite_verteilungST[4]+=1
    elif i <= 60 and i >50:
        lite_verteilungST[5]+=1
    elif i <= 70 and i >60:
        lite_verteilungST[6]+=1
    elif i <= 80 and i >70:
        lite_verteilungST[7]+=1
    elif i <= 90 and i >80:
        lite_verteilungST[8]+=1
    elif i <= 100 and i >90:
        lite_verteilungST[9]+=1

#Plotten der Daten
labels = ["0-10","10-20","20-30","30-40","40-50","50-60","60-70","70-80","80-90","90-100"]
X = np.arange(10)
fig,axs = plt.subplots(1,2)
fig.suptitle("Ergebnisverteilung für Input = Stille",fontsize="xx-large")
#plot tf
axs[0].set_title("Tensorflow")
axs[0].set_xlabel("Ergebnis in %",fontsize="large")
axs[0].set_ylabel("Sampleanzahl",fontsize="large")
axs[0].bar(x = X+0,height = verteilungSP,width=0.25,color = "b",label = "Output = Sprache")
axs[0].bar(x = X+0.25,height = verteilungMA,width=0.25,color = "g",label = "Output = Marvin Go")
axs[0].bar(x = X+0.5,height = verteilungST,width=0.25,color = "r",label = "Output = Stille")
axs[0].legend()
axs[0].yaxis.grid(True,linestyle = "--")
axs[0].set_xticks(X+0.25)
axs[0].set_xticklabels(labels)
#plot tf_lite
axs[1].set_title("Tensorflow Lite")
axs[1].set_xlabel("Ergebnis in %",fontsize="large")
axs[1].set_ylabel("Sampleanzahl",fontsize="large")
axs[1].bar(x = X+0,height = lite_verteilungSP,width=0.25,color = "b",label = "Output = Sprache")
axs[1].bar(x = X+0.25,height = lite_verteilungMA,width=0.25,color = "g",label = "Output = Marvin Go")
axs[1].bar(x = X+0.5,height = lite_verteilungST,width=0.25,color = "r",label = "Output = Stille")
axs[1].legend()
axs[1].yaxis.grid(True,linestyle = "--")
axs[1].set_xticks(X+0.25)
axs[1].set_xticklabels(labels)
plt.show()
